"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "SideBar", {
    enumerable: true,
    get: function() {
        return SideBar;
    }
});
var _interop_require_default = require("@swc/helpers/_/_interop_require_default");
var _interop_require_wildcard = require("@swc/helpers/_/_interop_require_wildcard");
var _define_property = require("@swc/helpers/_/_define_property");
var _object_spread = require("@swc/helpers/_/_object_spread");
var _object_spread_props = require("@swc/helpers/_/_object_spread_props");
var _object_without_properties = require("@swc/helpers/_/_object_without_properties");
var _sliced_to_array = require("@swc/helpers/_/_sliced_to_array");
var _react = /*#__PURE__*/ _interop_require_wildcard._(require("react"));
var _classnames = /*#__PURE__*/ _interop_require_default._(require("classnames"));
var _typings = require("../../utils/typings");
var _sidebaritem = /*#__PURE__*/ _interop_require_default._(require("../sidebaritem"));
var _raf = /*#__PURE__*/ _interop_require_default._(require("../../utils/raf"));
var _usepropsvalue = require("../../hooks/use-props-value");
var _useforceupdate = require("../../hooks/use-force-update");
var _mergeprops = require("../../utils/merge-props");
var defaultProps = (0, _object_spread_props._)((0, _object_spread._)({}, _typings.ComponentDefaults), {
    contentDuration: 0,
    sidebarDuration: 0
});
var classPrefix = 'nut-sidebar';
var SideBar = function SideBar(props) {
    var _mergeProps = (0, _mergeprops.mergeProps)(defaultProps, props), contentDuration = _mergeProps.contentDuration, sidebarDuration = _mergeProps.sidebarDuration, children = _mergeProps.children, onClick = _mergeProps.onClick, onChange = _mergeProps.onChange, className = _mergeProps.className, rest = (0, _object_without_properties._)(_mergeProps, [
        "contentDuration",
        "sidebarDuration",
        "children",
        "onClick",
        "onChange",
        "className"
    ]);
    var _usePropsValue = (0, _sliced_to_array._)((0, _usepropsvalue.usePropsValue)({
        value: props.value,
        defaultValue: props.defaultValue,
        finalValue: 0,
        onChange: onChange
    }), 2), value = _usePropsValue[0], setValue = _usePropsValue[1];
    var titleItemsRef = (0, _react.useRef)([]);
    var navRef = (0, _react.useRef)(null);
    var scroll = function scroll(nav, to) {
        var count = 0;
        var from = nav.scrollTop;
        var frames = sidebarDuration === 0 ? 1 : Math.round(sidebarDuration / 16);
        function animate() {
            nav.scrollTop += (to - from) / frames;
            if (++count < frames) {
                (0, _raf.default)(animate);
            }
        }
        animate();
    };
    var scrollIntoView = function scrollIntoView(index) {
        var nav = navRef.current;
        var titleItem = titleItemsRef.current;
        var titlesLength = titles.current.length;
        var itemLength = titleItemsRef.current.length;
        if (!nav || !titleItem || !titleItem[itemLength - titlesLength + index]) {
            return;
        }
        var title = titleItem[itemLength - titlesLength + index];
        var runTop = title.offsetTop - nav.offsetTop + 10;
        var to = runTop - (nav.offsetHeight - title.offsetHeight) / 2 + title.offsetHeight;
        scroll(nav, to);
    };
    var getTitles = function getTitles() {
        var titles = [];
        _react.default.Children.forEach(children, function(child, idx) {
            if (/*#__PURE__*/ _react.default.isValidElement(child)) {
                var _$props = child === null || child === void 0 ? void 0 : child.props;
                if ((_$props === null || _$props === void 0 ? void 0 : _$props.title) || (_$props === null || _$props === void 0 ? void 0 : _$props.value)) {
                    var _props_value;
                    titles.push({
                        title: _$props.title,
                        value: (_props_value = _$props.value) !== null && _props_value !== void 0 ? _props_value : idx,
                        disabled: _$props.disabled
                    });
                }
            }
        });
        return titles;
    };
    var titles = (0, _react.useRef)(getTitles());
    var forceUpdate = (0, _useforceupdate.useForceUpdate)();
    (0, _react.useEffect)(function() {
        titles.current = getTitles();
        var current = '';
        titles.current.forEach(function(title) {
            if (title.value === value) {
                current = value;
            }
        });
        forceUpdate();
    }, [
        children
    ]);
    var classes = (0, _classnames.default)(classPrefix, className);
    var classesTitle = (0, _classnames.default)("".concat(classPrefix, "-titles"), "".concat(classPrefix, "-titles-scrollable"));
    var getContentStyle = function getContentStyle() {
        var index = titles.current.findIndex(function(t) {
            return t.value === value;
        });
        index = index < 0 ? 0 : index;
        return {
            transform: "translate3d( 0,-".concat(index * 100, "%, 0)"),
            transitionDuration: "".concat(contentDuration, "ms")
        };
    };
    (0, _react.useEffect)(function() {
        var index = titles.current.findIndex(function(t) {
            return t.value === value;
        });
        index = index < 0 ? 0 : index;
        var rafId = requestAnimationFrame(function() {
            scrollIntoView(index);
        });
        return function() {
            return cancelAnimationFrame(rafId);
        };
    }, [
        value
    ]);
    var tabChange = function tabChange(item) {
        if (item.disabled) return;
        onClick === null || onClick === void 0 ? void 0 : onClick(item.value);
        setValue(item.value);
    };
    return /*#__PURE__*/ _react.default.createElement("div", (0, _object_spread._)({
        className: classes
    }, rest), /*#__PURE__*/ _react.default.createElement("div", {
        className: classesTitle,
        ref: navRef
    }, titles.current.map(function(item) {
        var _obj;
        return /*#__PURE__*/ _react.default.createElement("div", {
            onClick: function onClick() {
                tabChange(item);
            },
            className: (0, _classnames.default)("".concat(classPrefix, "-titles-item"), (_obj = {}, (0, _define_property._)(_obj, "".concat(classPrefix, "-titles-item-active"), !item.disabled && String(item.value) === String(value)), (0, _define_property._)(_obj, "".concat(classPrefix, "-titles-item-disabled"), item.disabled), _obj)),
            ref: function ref(ref) {
                return titleItemsRef.current.push(ref);
            },
            key: item.value
        }, /*#__PURE__*/ _react.default.createElement("div", {
            className: "".concat(classPrefix, "-titles-item-text")
        }, item.title));
    })), /*#__PURE__*/ _react.default.createElement("div", {
        className: "".concat(classPrefix, "-content-wrap")
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: "".concat(classPrefix, "-content"),
        style: getContentStyle()
    }, _react.default.Children.map(children, function(child, idx) {
        if (!/*#__PURE__*/ _react.default.isValidElement(child)) {
            return null;
        }
        var childProps = (0, _object_spread_props._)((0, _object_spread._)({}, child.props), {
            active: value === child.props.value
        });
        if (String(value) !== String(child.props.value || idx)) {
            childProps = (0, _object_spread._)({}, childProps);
        }
        return /*#__PURE__*/ _react.default.cloneElement(child, childProps);
    }))));
};
SideBar.displayName = 'NutSideBar';
SideBar.Item = _sidebaritem.default;
