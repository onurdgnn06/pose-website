"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "HoverButtonItem", {
    enumerable: true,
    get: function() {
        return HoverButtonItem;
    }
});
var _interop_require_default = require("@swc/helpers/_/_interop_require_default");
var _define_property = require("@swc/helpers/_/_define_property");
var _object_spread = require("@swc/helpers/_/_object_spread");
var _object_spread_props = require("@swc/helpers/_/_object_spread_props");
var _react = /*#__PURE__*/ _interop_require_default._(require("react"));
var _classnames = /*#__PURE__*/ _interop_require_default._(require("classnames"));
var _typings = require("../../utils/typings");
var _utils = require("./utils");
var defaultProps = (0, _object_spread_props._)((0, _object_spread._)({}, _typings.ComponentDefaults), {
    icon: null,
    onClick: function onClick(event) {}
});
var classPrefix = 'nut-hoverbutton-item';
var HoverButtonItem = function HoverButtonItem(props) {
    var _$_object_spread = (0, _object_spread._)({}, defaultProps, props), className = _$_object_spread.className, children = _$_object_spread.children, style = _$_object_spread.style, icon = _$_object_spread.icon, onClick = _$_object_spread.onClick;
    var handleClick = function handleClick(event) {
        if (onClick) {
            onClick(event);
        }
    };
    var renderBody = function renderBody() {
        if (icon && !children) return /*#__PURE__*/ _react.default.createElement("div", {
            className: "".concat(classPrefix, "-icon")
        }, (0, _utils.getIcon)(icon));
        if (icon && children) {
            return /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/ _react.default.createElement("div", {
                className: (0, _classnames.default)((0, _define_property._)({}, "".concat(classPrefix, "-text-icon"), true))
            }), (0, _utils.getIcon)(icon), /*#__PURE__*/ _react.default.createElement("div", {
                className: (0, _classnames.default)((0, _define_property._)({}, "".concat(classPrefix, "-text"), true))
            }, children));
        }
    };
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: (0, _classnames.default)([
            "".concat(classPrefix, "-container"),
            className
        ], (0, _define_property._)({}, "".concat(classPrefix, "-container-icontext"), icon && children)),
        style: style,
        onClick: handleClick
    }, renderBody());
};
HoverButtonItem.displayName = 'NutHoverButtonItem';
