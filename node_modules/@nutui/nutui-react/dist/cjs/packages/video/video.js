"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Video", {
    enumerable: true,
    get: function() {
        return Video;
    }
});
var _interop_require_default = require("@swc/helpers/_/_interop_require_default");
var _interop_require_wildcard = require("@swc/helpers/_/_interop_require_wildcard");
var _object_spread = require("@swc/helpers/_/_object_spread");
var _object_spread_props = require("@swc/helpers/_/_object_spread_props");
var _object_without_properties = require("@swc/helpers/_/_object_without_properties");
var _react = /*#__PURE__*/ _interop_require_wildcard._(require("react"));
var _classnames = /*#__PURE__*/ _interop_require_default._(require("classnames"));
var _typings = require("../../utils/typings");
var defaultProps = (0, _object_spread_props._)((0, _object_spread._)({}, _typings.ComponentDefaults), {
    source: {
        type: {},
        src: ''
    },
    options: {
        controls: true,
        muted: false,
        autoplay: false,
        poster: '',
        playsinline: false,
        loop: false
    }
});
var classPrefix = "nut-video";
var Video = /*#__PURE__*/ _react.default.forwardRef(function(props, ref) {
    var _ref = (0, _object_spread._)({}, defaultProps, props), children = _ref.children, source = _ref.source, options = _ref.options, className = _ref.className, onPlay = _ref.onPlay, onPause = _ref.onPause, onPlayEnd = _ref.onPlayEnd, restProps = (0, _object_without_properties._)(_ref, [
        "children",
        "source",
        "options",
        "className",
        "onPlay",
        "onPause",
        "onPlayEnd"
    ]);
    var rootRef = (0, _react.useRef)(null);
    var classes = (0, _classnames.default)(classPrefix, className);
    (0, _react.useEffect)(function() {
        init();
    }, []);
    var init = function init() {
        if (rootRef.current) {
            var videoRef = rootRef.current;
            if (options.autoplay) {
                setTimeout(function() {
                    videoRef.play();
                }, 200);
            }
            if (options.playsinline) {
                videoRef.setAttribute('playsinline', String(options.playsinline));
                videoRef.setAttribute('webkit-playsinline', String(options.playsinline));
                videoRef.setAttribute('x5-video-player-type', 'h5-page');
                videoRef.setAttribute('x5-video-player-fullscreen', 'false');
            }
            videoRef.addEventListener('play', function() {
                onPlay && onPlay(videoRef);
            });
            videoRef.addEventListener('pause', function() {
                onPause && onPause(videoRef);
            });
            videoRef.addEventListener('ended', function() {
                videoRef.currentTime = 0;
                onPlayEnd && onPlayEnd(videoRef);
            });
        }
    };
    var pause = function pause() {
        var _rootRef_current;
        rootRef === null || rootRef === void 0 ? void 0 : (_rootRef_current = rootRef.current) === null || _rootRef_current === void 0 ? void 0 : _rootRef_current.pause();
    };
    var play = function play() {
        var _rootRef_current;
        rootRef === null || rootRef === void 0 ? void 0 : (_rootRef_current = rootRef.current) === null || _rootRef_current === void 0 ? void 0 : _rootRef_current.play();
    };
    _react.default.useImperativeHandle(ref, function() {
        return {
            pause: pause,
            play: play
        };
    });
    return /*#__PURE__*/ _react.default.createElement("div", (0, _object_spread._)({
        className: classes
    }, restProps), /*#__PURE__*/ _react.default.createElement("video", {
        className: "nut-video-player",
        muted: options.muted,
        autoPlay: options.autoplay,
        loop: options.loop,
        poster: options.poster,
        controls: options.controls,
        ref: rootRef,
        src: source.src
    }, /*#__PURE__*/ _react.default.createElement("source", {
        src: source.src,
        type: source.type
    }), /*#__PURE__*/ _react.default.createElement("track", {
        kind: "captions"
    })));
});
Video.displayName = 'NutVideo';
