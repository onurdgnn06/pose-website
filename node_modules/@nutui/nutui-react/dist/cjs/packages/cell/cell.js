"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Cell", {
    enumerable: true,
    get: function() {
        return Cell;
    }
});
var _interop_require_default = require("@swc/helpers/_/_interop_require_default");
var _interop_require_wildcard = require("@swc/helpers/_/_interop_require_wildcard");
var _define_property = require("@swc/helpers/_/_define_property");
var _object_spread = require("@swc/helpers/_/_object_spread");
var _object_spread_props = require("@swc/helpers/_/_object_spread_props");
var _object_without_properties = require("@swc/helpers/_/_object_without_properties");
var _react = /*#__PURE__*/ _interop_require_wildcard._(require("react"));
var _classnames = /*#__PURE__*/ _interop_require_default._(require("classnames"));
var _typings = require("../../utils/typings");
var _cellgroup = /*#__PURE__*/ _interop_require_default._(require("../cellgroup"));
var _context = /*#__PURE__*/ _interop_require_default._(require("../cellgroup/context"));
var _configprovider = require("../configprovider");
var defaultProps = (0, _object_spread_props._)((0, _object_spread._)({}, _typings.ComponentDefaults), {
    title: null,
    description: null,
    extra: null,
    radius: '6px',
    align: 'flex-start',
    clickable: false,
    isLast: false,
    onClick: function onClick(event) {}
});
var classPrefix = 'nut-cell';
var Cell = function Cell(props) {
    var ctx = (0, _react.useContext)(_context.default);
    var _ref = (0, _object_spread._)({}, defaultProps, props), children = _ref.children, clickable = _ref.clickable, onClick = _ref.onClick, title = _ref.title, description = _ref.description, extra = _ref.extra, radius = _ref.radius, align = _ref.align, isLast = _ref.isLast, className = _ref.className, style = _ref.style, rest = (0, _object_without_properties._)(_ref, [
        "children",
        "clickable",
        "onClick",
        "title",
        "description",
        "extra",
        "radius",
        "align",
        "isLast",
        "className",
        "style"
    ]);
    var rtl = (0, _configprovider.useRtl)();
    var handleClick = function handleClick(event) {
        onClick(event);
    };
    var baseStyle = (0, _object_spread_props._)((0, _object_spread._)({}, style), {
        borderRadius: Number.isNaN(Number(radius)) ? String(radius) : "".concat(radius, "px"),
        alignItems: align
    });
    var _obj;
    return /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/ _react.default.createElement("div", (0, _object_spread._)({
        className: "".concat((0, _classnames.default)([
            classPrefix,
            className,
            (0, _define_property._)({}, "".concat(classPrefix, "-group-item"), ctx === null || ctx === void 0 ? void 0 : ctx.group)
        ], clickable ? "".concat(classPrefix, "-clickable") : '')),
        onClick: function onClick(event) {
            return handleClick(event);
        },
        style: baseStyle
    }, rest), children || /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, title || description ? /*#__PURE__*/ _react.default.createElement("div", {
        className: "".concat(classPrefix, "-left")
    }, title ? /*#__PURE__*/ _react.default.createElement("div", {
        className: "".concat(classPrefix, "-title")
    }, title) : null, description ? /*#__PURE__*/ _react.default.createElement("div", {
        className: "".concat(classPrefix, "-description")
    }, description) : null) : null, extra ? /*#__PURE__*/ _react.default.createElement("div", {
        className: "".concat(classPrefix, "-extra")
    }, extra) : null)), (ctx === null || ctx === void 0 ? void 0 : ctx.divider) && !isLast ? /*#__PURE__*/ _react.default.createElement("div", {
        className: (0, _classnames.default)([
            (_obj = {}, (0, _define_property._)(_obj, "".concat(classPrefix, "-divider"), true), (0, _define_property._)(_obj, "".concat(classPrefix, "-divider-rtl"), rtl), _obj)
        ])
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: "".concat(classPrefix, "-divider-inner")
    })) : null);
};
Cell.displayName = 'NutCell';
Cell.Group = _cellgroup.default;
