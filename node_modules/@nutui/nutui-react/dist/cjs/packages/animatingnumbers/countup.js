"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "CountUp", {
    enumerable: true,
    get: function() {
        return CountUp;
    }
});
var _interop_require_wildcard = require("@swc/helpers/_/_interop_require_wildcard");
var _object_spread = require("@swc/helpers/_/_object_spread");
var _object_spread_props = require("@swc/helpers/_/_object_spread_props");
var _object_without_properties = require("@swc/helpers/_/_object_without_properties");
var _to_consumable_array = require("@swc/helpers/_/_to_consumable_array");
var _react = /*#__PURE__*/ _interop_require_wildcard._(require("react"));
var _typings = require("../../utils/typings");
var _mergeprops = require("../../utils/merge-props");
var defaultProps = (0, _object_spread_props._)((0, _object_spread._)({}, _typings.ComponentDefaults), {
    length: 0,
    value: '',
    delay: 300,
    duration: 1,
    thousands: false
});
var CountUp = function CountUp(props) {
    var _mergeProps = (0, _mergeprops.mergeProps)(defaultProps, props), length = _mergeProps.length, value = _mergeProps.value, delay = _mergeProps.delay, duration = _mergeProps.duration, className = _mergeProps.className, thousands = _mergeProps.thousands, style = _mergeProps.style, rest = (0, _object_without_properties._)(_mergeProps, [
        "length",
        "value",
        "delay",
        "duration",
        "className",
        "thousands",
        "style"
    ]);
    var classPrefix = 'nut-countup';
    var countupRef = (0, _react.useRef)(null);
    var timerRef = (0, _react.useRef)(0);
    var numbers = Array.from({
        length: 10
    }, function(v, i) {
        return i;
    });
    var getShowNumber = function getShowNumber() {
        var splitArr = value.split('.');
        var intNumber = length && splitArr[0].length < length ? (Array(length).join('0') + splitArr[0]).slice(-length) : splitArr[0];
        var currNumber = "".concat(thousands ? intNumber.replace(/(\d)(?=(?:\d{3})+$)/g, '$1,') : intNumber).concat(splitArr[1] ? '.' : '').concat(splitArr[1] || '');
        return currNumber.split('');
    };
    var numberArr = (0, _react.useMemo)(getShowNumber, [
        value,
        length,
        thousands
    ]);
    var setNumberTransform = (0, _react.useCallback)(function() {
        if (countupRef.current) {
            var numberItems = countupRef.current.querySelectorAll('.nut-countup-number');
            var numberFilterArr = numberArr.filter(function(item) {
                return !Number.isNaN(Number(item));
            });
            Object.keys(numberItems).forEach(function(key) {
                var elem = numberItems[Number(key)];
                var idx = Number(numberFilterArr[Number(key)]);
                if ((idx || idx === 0) && elem) {
                    // 计算规则：父元素和实际列表高度的百分比，分割成20等份
                    var transform = "translate(0, -".concat((idx === 0 ? 10 : idx) * 5, "%)");
                    elem.style.transform = transform;
                    elem.style.webkitTransform = transform;
                }
            });
        }
    }, [
        numberArr
    ]);
    var numberEaseStyle = {
        transitionDuration: "".concat(duration, "s")
    };
    (0, _react.useEffect)(function() {
        timerRef.current = window.setTimeout(function() {
            setNumberTransform();
        }, delay);
        return function() {
            window.clearTimeout(timerRef.current);
        };
    }, [
        numberArr,
        delay,
        setNumberTransform
    ]);
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: "".concat(classPrefix, " ").concat(className),
        ref: countupRef
    }, /*#__PURE__*/ _react.default.createElement("ul", {
        className: "".concat(classPrefix, "-list")
    }, numberArr.map(function(item, idx) {
        return /*#__PURE__*/ _react.default.createElement("li", {
            className: "".concat(classPrefix, "-listitem ").concat(!Number.isNaN(Number(item)) ? "".concat(classPrefix, "-listitem-number") : ''),
            key: idx
        }, !Number.isNaN(Number(item)) ? /*#__PURE__*/ _react.default.createElement("span", {
            className: "".concat(classPrefix, "-number"),
            style: numberEaseStyle
        }, (0, _to_consumable_array._)(numbers).concat((0, _to_consumable_array._)(numbers)).map(function(number, subidx) {
            return /*#__PURE__*/ _react.default.createElement("span", {
                className: "".concat(classPrefix, "-number-text"),
                key: subidx
            }, number);
        })) : /*#__PURE__*/ _react.default.createElement("span", {
            className: "".concat(classPrefix, "-separator")
        }, item));
    })));
};
CountUp.displayName = 'NutCountUp';
