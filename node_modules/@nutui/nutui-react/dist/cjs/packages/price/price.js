"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Price", {
    enumerable: true,
    get: function() {
        return Price;
    }
});
var _interop_require_default = require("@swc/helpers/_/_interop_require_default");
var _define_property = require("@swc/helpers/_/_define_property");
var _object_spread = require("@swc/helpers/_/_object_spread");
var _object_spread_props = require("@swc/helpers/_/_object_spread_props");
var _object_without_properties = require("@swc/helpers/_/_object_without_properties");
var _react = /*#__PURE__*/ _interop_require_default._(require("react"));
var _classnames = /*#__PURE__*/ _interop_require_default._(require("classnames"));
var _typings = require("../../utils/typings");
var _index = require("../configprovider/index");
var defaultProps = (0, _object_spread_props._)((0, _object_spread._)({}, _typings.ComponentDefaults), {
    color: 'primary',
    price: 0,
    symbol: '&yen;',
    digits: 2,
    thousands: false,
    position: 'before',
    size: 'normal',
    line: false
});
var Price = function Price(props) {
    var _ref = (0, _object_spread._)({}, defaultProps, props), color = _ref.color, price = _ref.price, symbol = _ref.symbol, digits = _ref.digits, thousands = _ref.thousands, position = _ref.position, size = _ref.size, line = _ref.line, className = _ref.className, style = _ref.style, rest = (0, _object_without_properties._)(_ref, [
        "color",
        "price",
        "symbol",
        "digits",
        "thousands",
        "position",
        "size",
        "line",
        "className",
        "style"
    ]);
    var classPrefix = 'nut-price';
    var rtl = (0, _index.useRtl)();
    var checkPoint = function checkPoint(price) {
        return String(price).indexOf('.') > 0;
    };
    var formatThousands = function formatThousands(num) {
        if (Number(num) === 0) {
            num = 0;
        }
        if (checkPoint(num)) {
            num = num.toString();
            num = typeof num.split('.') === 'string' ? num.split('.') : num.split('.')[0];
        }
        if (thousands) {
            return (num || 0).toString().replace(/(\d)(?=(?:\d{3})+$)/g, '$1,');
        }
        return num;
    };
    var formatDecimal = function formatDecimal(decimalNum) {
        if (Number(decimalNum) === 0) {
            decimalNum = 0;
        }
        if (checkPoint(decimalNum)) {
            decimalNum = Number(decimalNum).toFixed(digits);
            decimalNum = typeof decimalNum.split('.') === 'string' ? 0 : decimalNum.split('.')[1] || 0;
        } else {
            decimalNum = 0;
        }
        var result = "0.".concat(decimalNum);
        var resultFixed = Number(result).toFixed(digits);
        return String(resultFixed).substring(2, resultFixed.length);
    };
    var renderSymbol = function renderSymbol() {
        var _obj;
        return /*#__PURE__*/ _react.default.createElement("div", {
            className: (0, _classnames.default)([
                "".concat(classPrefix, "-symbol"),
                "".concat(classPrefix, "-symbol-").concat(size),
                (_obj = {}, (0, _define_property._)(_obj, "".concat(classPrefix, "-line"), line), (0, _define_property._)(_obj, "".concat(classPrefix, "-rtl"), rtl), _obj)
            ]),
            dangerouslySetInnerHTML: {
                __html: symbol || ''
            }
        });
    };
    return /*#__PURE__*/ _react.default.createElement("div", (0, _object_spread._)({
        className: "".concat(classPrefix, " ").concat(classPrefix, "-").concat(color, " ").concat(className),
        style: style
    }, rest), symbol && position === 'before' ? renderSymbol() : null, /*#__PURE__*/ _react.default.createElement("div", {
        className: "".concat(classPrefix, "-integer ").concat(classPrefix, "-integer-").concat(size, " ").concat(line ? "".concat(classPrefix, "-line") : '')
    }, formatThousands(price)), digits ? /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/ _react.default.createElement("div", {
        className: "".concat(classPrefix, "-decimal ").concat(classPrefix, "-decimal-").concat(size, " ").concat(line ? "".concat(classPrefix, "-line") : '')
    }, "."), /*#__PURE__*/ _react.default.createElement("div", {
        className: "".concat(classPrefix, "-decimal ").concat(classPrefix, "-decimal-").concat(size, " ").concat(line ? "".concat(classPrefix, "-line") : '')
    }, formatDecimal(price))) : null, symbol && position === 'after' ? renderSymbol() : null);
};
Price.displayName = 'NutPrice';
