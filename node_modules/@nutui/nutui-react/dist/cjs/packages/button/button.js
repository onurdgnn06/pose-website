"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Button", {
    enumerable: true,
    get: function() {
        return Button;
    }
});
var _interop_require_default = require("@swc/helpers/_/_interop_require_default");
var _interop_require_wildcard = require("@swc/helpers/_/_interop_require_wildcard");
var _define_property = require("@swc/helpers/_/_define_property");
var _object_spread = require("@swc/helpers/_/_object_spread");
var _object_spread_props = require("@swc/helpers/_/_object_spread_props");
var _object_without_properties = require("@swc/helpers/_/_object_without_properties");
var _react = /*#__PURE__*/ _interop_require_wildcard._(require("react"));
var _classnames = /*#__PURE__*/ _interop_require_default._(require("classnames"));
var _iconsreact = require("@nutui/icons-react");
var _typings = require("../../utils/typings");
var prefixCls = 'nut-button';
var defaultProps = (0, _object_spread_props._)((0, _object_spread._)({}, _typings.ComponentDefaults), {
    color: '',
    type: 'default',
    size: 'normal',
    shape: 'round',
    fill: 'outline',
    loading: false,
    disabled: false,
    block: false,
    icon: null,
    rightIcon: null,
    nativeType: 'button',
    onClick: function onClick() {}
});
var Button = /*#__PURE__*/ _react.default.forwardRef(function(props, ref) {
    var _ref = (0, _object_spread._)({}, defaultProps, props), color = _ref.color, shape = _ref.shape, fill = _ref.fill, loading = _ref.loading, disabled = _ref.disabled, type = _ref.type, size = _ref.size, block = _ref.block, icon = _ref.icon, rightIcon = _ref.rightIcon, children = _ref.children, className = _ref.className, style = _ref.style, nativeType = _ref.nativeType, onClick = _ref.onClick, rest = (0, _object_without_properties._)(_ref, [
        "color",
        "shape",
        "fill",
        "loading",
        "disabled",
        "type",
        "size",
        "block",
        "icon",
        "rightIcon",
        "children",
        "className",
        "style",
        "nativeType",
        "onClick"
    ]);
    var getStyle = (0, _react.useMemo)(function() {
        var style = {};
        if (color) {
            if (props.fill === 'outline' || props.fill === 'dashed') {
                style.color = color;
                if (!(color === null || color === void 0 ? void 0 : color.includes('gradient'))) {
                    style.borderColor = color;
                }
            } else {
                style.color = '#fff';
                style.background = color;
                style.borderColor = 'transparent';
            }
        }
        return style;
    }, [
        color,
        props.fill
    ]);
    var handleClick = (0, _react.useCallback)(function(e) {
        if (!loading && !disabled && onClick) {
            onClick(e);
        }
    }, [
        loading,
        disabled,
        onClick
    ]);
    var _obj;
    var buttonClassNames = (0, _classnames.default)(prefixCls, "".concat(prefixCls, "-").concat(type), (_obj = {}, (0, _define_property._)(_obj, "".concat(prefixCls, "-").concat(type, "-solid"), type === 'primary' && !props.fill), (0, _define_property._)(_obj, "".concat(prefixCls, "-").concat(fill), props.fill), (0, _define_property._)(_obj, "".concat(prefixCls, "-").concat(type, "-").concat(fill), props.fill), (0, _define_property._)(_obj, "".concat(prefixCls, "-").concat(size), size), (0, _define_property._)(_obj, "".concat(prefixCls, "-").concat(shape), shape), (0, _define_property._)(_obj, "".concat(prefixCls, "-block"), block), (0, _define_property._)(_obj, "".concat(prefixCls, "-disabled"), disabled || loading), (0, _define_property._)(_obj, "".concat(prefixCls, "-").concat(type).concat(props.fill ? "-".concat(fill) : '', "-disabled"), disabled || loading), (0, _define_property._)(_obj, "".concat(prefixCls, "-loading"), loading), (0, _define_property._)(_obj, "".concat(prefixCls, "-icononly"), !children), _obj), className);
    return /*#__PURE__*/ _react.default.createElement("button", (0, _object_spread_props._)((0, _object_spread._)({}, rest), {
        ref: ref,
        type: nativeType,
        className: buttonClassNames,
        style: (0, _object_spread._)({}, getStyle, style),
        onClick: handleClick
    }), /*#__PURE__*/ _react.default.createElement("div", {
        className: "nut-button-wrap"
    }, loading && /*#__PURE__*/ _react.default.createElement(_iconsreact.Loading, {
        className: "nut-icon-loading"
    }), !loading && icon, children && /*#__PURE__*/ _react.default.createElement("div", {
        className: "".concat(props.fill || disabled || loading ? "nut-button-".concat(type).concat(props.fill ? "-".concat(fill) : '').concat(disabled || loading ? '-disabled' : '') : '').concat(icon || loading ? ' nut-button-text' : '').concat(rightIcon ? ' nut-button-text-right' : '')
    }, children), rightIcon));
});
Button.displayName = 'NutButton';
