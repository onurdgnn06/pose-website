export function mergeProps() {
    for(var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++){
        items[_key] = arguments[_key];
    }
    var ret = {};
    items.forEach(function(item) {
        if (item) {
            Object.keys(item).forEach(function(key) {
                if (item[key] !== undefined) {
                    ret[key] = item[key];
                }
            });
        }
    });
    return ret;
}
/**
 * Merge props and return the first non-undefined value.
 * The later has higher priority. e.g. (10, 1, 5) => 5 wins.
 * This is useful with legacy props that have been deprecated.
 */ export function mergeProp(defaultProp) {
    for(var _len = arguments.length, propList = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        propList[_key - 1] = arguments[_key];
    }
    for(var i = propList.length - 1; i >= 0; i -= 1){
        if (propList[i] !== undefined) {
            return propList[i];
        }
    }
    return defaultProp;
}
