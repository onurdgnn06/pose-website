import React, { ReactNode } from 'react';
export interface FocusEffect {
    name: 'focus';
    scale: number;
}
type DefaultEffect = {
    children: ReactNode;
    springs: any;
    isVertical: boolean;
    loop: boolean;
    count: number;
    current: React.MutableRefObject<number>;
    swiperDirection: React.MutableRefObject<number>;
    effect: FocusEffect;
    transforms: React.MutableRefObject<number[]>;
    dragging: boolean;
};
export declare const focusEffect: (args: DefaultEffect) => React.JSX.Element[] | null | undefined;
export declare const useList: (effect: FocusEffect | undefined, count: number, current: React.MutableRefObject<number>) => [React.MutableRefObject<number[]>, (p: number[]) => void];
export declare const updateTransform: (transforms: React.MutableRefObject<number[]>, setTransforms: any, effect: FocusEffect, page: number) => void;
export {};
