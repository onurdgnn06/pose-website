import {
  __generator
} from "./chunk-B4D7QBZA.js";
import {
  require_react_dom
} from "./chunk-VRHMX22Y.js";
import {
  require_react
} from "./chunk-2UC5YKPU.js";
import {
  __commonJS,
  __toESM
} from "./chunk-UXIASGQL.js";

// node_modules/classnames/index.js
var require_classnames = __commonJS({
  "node_modules/classnames/index.js"(exports2, module2) {
    (function() {
      "use strict";
      var hasOwn = {}.hasOwnProperty;
      function classNames95() {
        var classes = "";
        for (var i6 = 0; i6 < arguments.length; i6++) {
          var arg = arguments[i6];
          if (arg) {
            classes = appendClass(classes, parseValue(arg));
          }
        }
        return classes;
      }
      function parseValue(arg) {
        if (typeof arg === "string" || typeof arg === "number") {
          return arg;
        }
        if (typeof arg !== "object") {
          return "";
        }
        if (Array.isArray(arg)) {
          return classNames95.apply(null, arg);
        }
        if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
          return arg.toString();
        }
        var classes = "";
        for (var key2 in arg) {
          if (hasOwn.call(arg, key2) && arg[key2]) {
            classes = appendClass(classes, key2);
          }
        }
        return classes;
      }
      function appendClass(value2, newClass) {
        if (!newClass) {
          return value2;
        }
        if (value2) {
          return value2 + " " + newClass;
        }
        return value2 + newClass;
      }
      if (typeof module2 !== "undefined" && module2.exports) {
        classNames95.default = classNames95;
        module2.exports = classNames95;
      } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
        define("classnames", [], function() {
          return classNames95;
        });
      } else {
        window.classNames = classNames95;
      }
    })();
  }
});

// node_modules/lodash.kebabcase/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.kebabcase/index.js"(exports2, module2) {
    var INFINITY = 1 / 0;
    var symbolTag = "[object Symbol]";
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f\\ufe20-\\ufe23";
    var rsComboSymbolsRange = "\\u20d0-\\u20f0";
    var rsDingbatRange = "\\u2700-\\u27bf";
    var rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff";
    var rsMathOpRange = "\\xac\\xb1\\xd7\\xf7";
    var rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf";
    var rsPunctuationRange = "\\u2000-\\u206f";
    var rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000";
    var rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde";
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    var rsApos = "['’]";
    var rsBreak = "[" + rsBreakRange + "]";
    var rsCombo = "[" + rsComboMarksRange + rsComboSymbolsRange + "]";
    var rsDigits = "\\d+";
    var rsDingbat = "[" + rsDingbatRange + "]";
    var rsLower = "[" + rsLowerRange + "]";
    var rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]";
    var rsFitz = "\\ud83c[\\udffb-\\udfff]";
    var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
    var rsNonAstral = "[^" + rsAstralRange + "]";
    var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
    var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
    var rsUpper = "[" + rsUpperRange + "]";
    var rsZWJ = "\\u200d";
    var rsLowerMisc = "(?:" + rsLower + "|" + rsMisc + ")";
    var rsUpperMisc = "(?:" + rsUpper + "|" + rsMisc + ")";
    var rsOptLowerContr = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?";
    var rsOptUpperContr = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?";
    var reOptMod = rsModifier + "?";
    var rsOptVar = "[" + rsVarRange + "]?";
    var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
    var rsSeq = rsOptVar + reOptMod + rsOptJoin;
    var rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq;
    var reApos = RegExp(rsApos, "g");
    var reComboMark = RegExp(rsCombo, "g");
    var reUnicodeWord = RegExp([
      rsUpper + "?" + rsLower + "+" + rsOptLowerContr + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
      rsUpperMisc + "+" + rsOptUpperContr + "(?=" + [rsBreak, rsUpper + rsLowerMisc, "$"].join("|") + ")",
      rsUpper + "?" + rsLowerMisc + "+" + rsOptLowerContr,
      rsUpper + "+" + rsOptUpperContr,
      rsDigits,
      rsEmoji
    ].join("|"), "g");
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    var deburredLetters = {
      // Latin-1 Supplement block.
      "À": "A",
      "Á": "A",
      "Â": "A",
      "Ã": "A",
      "Ä": "A",
      "Å": "A",
      "à": "a",
      "á": "a",
      "â": "a",
      "ã": "a",
      "ä": "a",
      "å": "a",
      "Ç": "C",
      "ç": "c",
      "Ð": "D",
      "ð": "d",
      "È": "E",
      "É": "E",
      "Ê": "E",
      "Ë": "E",
      "è": "e",
      "é": "e",
      "ê": "e",
      "ë": "e",
      "Ì": "I",
      "Í": "I",
      "Î": "I",
      "Ï": "I",
      "ì": "i",
      "í": "i",
      "î": "i",
      "ï": "i",
      "Ñ": "N",
      "ñ": "n",
      "Ò": "O",
      "Ó": "O",
      "Ô": "O",
      "Õ": "O",
      "Ö": "O",
      "Ø": "O",
      "ò": "o",
      "ó": "o",
      "ô": "o",
      "õ": "o",
      "ö": "o",
      "ø": "o",
      "Ù": "U",
      "Ú": "U",
      "Û": "U",
      "Ü": "U",
      "ù": "u",
      "ú": "u",
      "û": "u",
      "ü": "u",
      "Ý": "Y",
      "ý": "y",
      "ÿ": "y",
      "Æ": "Ae",
      "æ": "ae",
      "Þ": "Th",
      "þ": "th",
      "ß": "ss",
      // Latin Extended-A block.
      "Ā": "A",
      "Ă": "A",
      "Ą": "A",
      "ā": "a",
      "ă": "a",
      "ą": "a",
      "Ć": "C",
      "Ĉ": "C",
      "Ċ": "C",
      "Č": "C",
      "ć": "c",
      "ĉ": "c",
      "ċ": "c",
      "č": "c",
      "Ď": "D",
      "Đ": "D",
      "ď": "d",
      "đ": "d",
      "Ē": "E",
      "Ĕ": "E",
      "Ė": "E",
      "Ę": "E",
      "Ě": "E",
      "ē": "e",
      "ĕ": "e",
      "ė": "e",
      "ę": "e",
      "ě": "e",
      "Ĝ": "G",
      "Ğ": "G",
      "Ġ": "G",
      "Ģ": "G",
      "ĝ": "g",
      "ğ": "g",
      "ġ": "g",
      "ģ": "g",
      "Ĥ": "H",
      "Ħ": "H",
      "ĥ": "h",
      "ħ": "h",
      "Ĩ": "I",
      "Ī": "I",
      "Ĭ": "I",
      "Į": "I",
      "İ": "I",
      "ĩ": "i",
      "ī": "i",
      "ĭ": "i",
      "į": "i",
      "ı": "i",
      "Ĵ": "J",
      "ĵ": "j",
      "Ķ": "K",
      "ķ": "k",
      "ĸ": "k",
      "Ĺ": "L",
      "Ļ": "L",
      "Ľ": "L",
      "Ŀ": "L",
      "Ł": "L",
      "ĺ": "l",
      "ļ": "l",
      "ľ": "l",
      "ŀ": "l",
      "ł": "l",
      "Ń": "N",
      "Ņ": "N",
      "Ň": "N",
      "Ŋ": "N",
      "ń": "n",
      "ņ": "n",
      "ň": "n",
      "ŋ": "n",
      "Ō": "O",
      "Ŏ": "O",
      "Ő": "O",
      "ō": "o",
      "ŏ": "o",
      "ő": "o",
      "Ŕ": "R",
      "Ŗ": "R",
      "Ř": "R",
      "ŕ": "r",
      "ŗ": "r",
      "ř": "r",
      "Ś": "S",
      "Ŝ": "S",
      "Ş": "S",
      "Š": "S",
      "ś": "s",
      "ŝ": "s",
      "ş": "s",
      "š": "s",
      "Ţ": "T",
      "Ť": "T",
      "Ŧ": "T",
      "ţ": "t",
      "ť": "t",
      "ŧ": "t",
      "Ũ": "U",
      "Ū": "U",
      "Ŭ": "U",
      "Ů": "U",
      "Ű": "U",
      "Ų": "U",
      "ũ": "u",
      "ū": "u",
      "ŭ": "u",
      "ů": "u",
      "ű": "u",
      "ų": "u",
      "Ŵ": "W",
      "ŵ": "w",
      "Ŷ": "Y",
      "ŷ": "y",
      "Ÿ": "Y",
      "Ź": "Z",
      "Ż": "Z",
      "Ž": "Z",
      "ź": "z",
      "ż": "z",
      "ž": "z",
      "Ĳ": "IJ",
      "ĳ": "ij",
      "Œ": "Oe",
      "œ": "oe",
      "ŉ": "'n",
      "ſ": "ss"
    };
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    function arrayReduce(array4, iteratee, accumulator, initAccum) {
      var index2 = -1, length2 = array4 ? array4.length : 0;
      if (initAccum && length2) {
        accumulator = array4[++index2];
      }
      while (++index2 < length2) {
        accumulator = iteratee(accumulator, array4[index2], index2, array4);
      }
      return accumulator;
    }
    function asciiWords(string3) {
      return string3.match(reAsciiWord) || [];
    }
    function basePropertyOf(object4) {
      return function(key2) {
        return object4 == null ? void 0 : object4[key2];
      };
    }
    var deburrLetter = basePropertyOf(deburredLetters);
    function hasUnicodeWord(string3) {
      return reHasUnicodeWord.test(string3);
    }
    function unicodeWords(string3) {
      return string3.match(reUnicodeWord) || [];
    }
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var Symbol2 = root.Symbol;
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseToString(value2) {
      if (typeof value2 == "string") {
        return value2;
      }
      if (isSymbol(value2)) {
        return symbolToString ? symbolToString.call(value2) : "";
      }
      var result = value2 + "";
      return result == "0" && 1 / value2 == -INFINITY ? "-0" : result;
    }
    function createCompounder(callback) {
      return function(string3) {
        return arrayReduce(words(deburr(string3).replace(reApos, "")), callback, "");
      };
    }
    function isObjectLike(value2) {
      return !!value2 && typeof value2 == "object";
    }
    function isSymbol(value2) {
      return typeof value2 == "symbol" || isObjectLike(value2) && objectToString.call(value2) == symbolTag;
    }
    function toString(value2) {
      return value2 == null ? "" : baseToString(value2);
    }
    function deburr(string3) {
      string3 = toString(string3);
      return string3 && string3.replace(reLatin, deburrLetter).replace(reComboMark, "");
    }
    var kebabCase2 = createCompounder(function(result, word, index2) {
      return result + (index2 ? "-" : "") + word.toLowerCase();
    });
    function words(string3, pattern4, guard) {
      string3 = toString(string3);
      pattern4 = guard ? void 0 : pattern4;
      if (pattern4 === void 0) {
        return hasUnicodeWord(string3) ? unicodeWords(string3) : asciiWords(string3);
      }
      return string3.match(pattern4) || [];
    }
    module2.exports = kebabCase2;
  }
});

// node_modules/react-fast-compare/index.js
var require_react_fast_compare = __commonJS({
  "node_modules/react-fast-compare/index.js"(exports2, module2) {
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length2, i6, keys;
        if (Array.isArray(a)) {
          length2 = a.length;
          if (length2 != b.length)
            return false;
          for (i6 = length2; i6-- !== 0; )
            if (!equal(a[i6], b[i6]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i6 = it.next()).done)
            if (!b.has(i6.value[0]))
              return false;
          it = a.entries();
          while (!(i6 = it.next()).done)
            if (!equal(i6.value[1], b.get(i6.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i6 = it.next()).done)
            if (!b.has(i6.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length2 = a.length;
          if (length2 != b.length)
            return false;
          for (i6 = length2; i6-- !== 0; )
            if (a[i6] !== b[i6])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
          return a.toString() === b.toString();
        keys = Object.keys(a);
        length2 = keys.length;
        if (length2 !== Object.keys(b).length)
          return false;
        for (i6 = length2; i6-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys[i6]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i6 = length2; i6-- !== 0; ) {
          if ((keys[i6] === "_owner" || keys[i6] === "__v" || keys[i6] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys[i6]], b[keys[i6]]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module2.exports = function isEqual8(a, b) {
      try {
        return equal(a, b);
      } catch (error) {
        if ((error.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error;
      }
    };
  }
});

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports2) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type4) {
          return typeof type4 === "string" || typeof type4 === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type4 === REACT_FRAGMENT_TYPE || type4 === REACT_CONCURRENT_MODE_TYPE || type4 === REACT_PROFILER_TYPE || type4 === REACT_STRICT_MODE_TYPE || type4 === REACT_SUSPENSE_TYPE || type4 === REACT_SUSPENSE_LIST_TYPE || typeof type4 === "object" && type4 !== null && (type4.$$typeof === REACT_LAZY_TYPE || type4.$$typeof === REACT_MEMO_TYPE || type4.$$typeof === REACT_PROVIDER_TYPE || type4.$$typeof === REACT_CONTEXT_TYPE || type4.$$typeof === REACT_FORWARD_REF_TYPE || type4.$$typeof === REACT_FUNDAMENTAL_TYPE || type4.$$typeof === REACT_RESPONDER_TYPE || type4.$$typeof === REACT_SCOPE_TYPE || type4.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object4) {
          if (typeof object4 === "object" && object4 !== null) {
            var $$typeof = object4.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type4 = object4.type;
                switch (type4) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type4;
                  default:
                    var $$typeofType = type4 && type4.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment3 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object4) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object4) || typeOf(object4) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object4) {
          return typeOf(object4) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object4) {
          return typeOf(object4) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object4) {
          return typeOf(object4) === REACT_PROVIDER_TYPE;
        }
        function isElement2(object4) {
          return typeof object4 === "object" && object4 !== null && object4.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object4) {
          return typeOf(object4) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object4) {
          return typeOf(object4) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object4) {
          return typeOf(object4) === REACT_LAZY_TYPE;
        }
        function isMemo(object4) {
          return typeOf(object4) === REACT_MEMO_TYPE;
        }
        function isPortal(object4) {
          return typeOf(object4) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object4) {
          return typeOf(object4) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object4) {
          return typeOf(object4) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object4) {
          return typeOf(object4) === REACT_SUSPENSE_TYPE;
        }
        exports2.AsyncMode = AsyncMode;
        exports2.ConcurrentMode = ConcurrentMode;
        exports2.ContextConsumer = ContextConsumer;
        exports2.ContextProvider = ContextProvider;
        exports2.Element = Element2;
        exports2.ForwardRef = ForwardRef;
        exports2.Fragment = Fragment3;
        exports2.Lazy = Lazy;
        exports2.Memo = Memo;
        exports2.Portal = Portal;
        exports2.Profiler = Profiler;
        exports2.StrictMode = StrictMode;
        exports2.Suspense = Suspense;
        exports2.isAsyncMode = isAsyncMode;
        exports2.isConcurrentMode = isConcurrentMode;
        exports2.isContextConsumer = isContextConsumer;
        exports2.isContextProvider = isContextProvider;
        exports2.isElement = isElement2;
        exports2.isForwardRef = isForwardRef;
        exports2.isFragment = isFragment;
        exports2.isLazy = isLazy;
        exports2.isMemo = isMemo;
        exports2.isPortal = isPortal;
        exports2.isProfiler = isProfiler;
        exports2.isStrictMode = isStrictMode;
        exports2.isSuspense = isSuspense;
        exports2.isValidElementType = isValidElementType;
        exports2.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports2, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports2, module2) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val2) {
      if (val2 === null || val2 === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val2);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i6 = 0; i6 < 10; i6++) {
          test2["_" + String.fromCharCode(i6)] = i6;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n38) {
          return test2[n38];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module2.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to2 = toObject(target);
      var symbols;
      for (var s8 = 1; s8 < arguments.length; s8++) {
        from = Object(arguments[s8]);
        for (var key2 in from) {
          if (hasOwnProperty.call(from, key2)) {
            to2[key2] = from[key2];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i6 = 0; i6 < symbols.length; i6++) {
            if (propIsEnumerable.call(from, symbols[i6])) {
              to2[symbols[i6]] = from[symbols[i6]];
            }
          }
        }
      }
      return to2;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports2, module2) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module2.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports2, module2) {
    module2.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports2, module2) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text3) {
        var message = "Warning: " + text3;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values2, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module2.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports2, module2) {
    "use strict";
    var ReactIs = require_react_is();
    var assign2 = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text3) {
        var message = "Warning: " + text3;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module2.exports = function(isValidElement3, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is2(x2, y) {
        if (x2 === y) {
          return x2 !== 0 || 1 / x2 === 1 / y;
        } else {
          return x2 !== x2 && y !== y;
        }
      }
      function PropTypeError(message, data2) {
        this.message = message;
        this.data = data2 && typeof data2 === "object" ? data2 : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey2 = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey2] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey2] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i6 = 0; i6 < propValue.length; i6++) {
            var error = typeChecker(propValue, i6, componentName, location, propFullName + "[" + i6 + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement3(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i6 = 0; i6 < expectedValues.length; i6++) {
            if (is2(propValue, expectedValues[i6])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key2, value2) {
            var type4 = getPreciseType(value2);
            if (type4 === "symbol") {
              return String(value2);
            }
            return value2;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key2 in propValue) {
            if (has(propValue, key2)) {
              var error = typeChecker(propValue, key2, componentName, location, propFullName + "." + key2, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i6 = 0; i6 < arrayOfTypeCheckers.length; i6++) {
          var checker = arrayOfTypeCheckers[i6];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i6 + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i7 = 0; i7 < arrayOfTypeCheckers.length; i7++) {
            var checker2 = arrayOfTypeCheckers[i7];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key2, type4) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key2 + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type4 + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key2 in shapeTypes) {
            var checker = shapeTypes[key2];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key2, getPreciseType(checker));
            }
            var error = checker(propValue, key2, componentName, location, propFullName + "." + key2, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign2({}, props[propName], shapeTypes);
          for (var key2 in allKeys) {
            var checker = shapeTypes[key2];
            if (has(shapeTypes, key2) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key2, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key2 + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key2, componentName, location, propFullName + "." + key2, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement3(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value2) {
        var type4 = getPreciseType(value2);
        switch (type4) {
          case "array":
          case "object":
            return "an " + type4;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type4;
          default:
            return type4;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports2, module2) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module2.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module2.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/lottie-web/build/player/lottie.js
var require_lottie = __commonJS({
  "node_modules/lottie-web/build/player/lottie.js"(exports, module) {
    typeof document !== "undefined" && typeof navigator !== "undefined" && function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, global2.lottie = factory());
    }(exports, function() {
      "use strict";
      var svgNS = "http://www.w3.org/2000/svg";
      var locationHref = "";
      var _useWebWorker = false;
      var initialDefaultFrame = -999999;
      var setWebWorker = function setWebWorker2(flag) {
        _useWebWorker = !!flag;
      };
      var getWebWorker = function getWebWorker2() {
        return _useWebWorker;
      };
      var setLocationHref = function setLocationHref2(value2) {
        locationHref = value2;
      };
      var getLocationHref = function getLocationHref2() {
        return locationHref;
      };
      function createTag(type4) {
        return document.createElement(type4);
      }
      function extendPrototype(sources, destination) {
        var i6;
        var len = sources.length;
        var sourcePrototype;
        for (i6 = 0; i6 < len; i6 += 1) {
          sourcePrototype = sources[i6].prototype;
          for (var attr in sourcePrototype) {
            if (Object.prototype.hasOwnProperty.call(sourcePrototype, attr))
              destination.prototype[attr] = sourcePrototype[attr];
          }
        }
      }
      function getDescriptor(object4, prop) {
        return Object.getOwnPropertyDescriptor(object4, prop);
      }
      function createProxyFunction(prototype) {
        function ProxyFunction() {
        }
        ProxyFunction.prototype = prototype;
        return ProxyFunction;
      }
      var audioControllerFactory = function() {
        function AudioController(audioFactory) {
          this.audios = [];
          this.audioFactory = audioFactory;
          this._volume = 1;
          this._isMuted = false;
        }
        AudioController.prototype = {
          addAudio: function addAudio(audio) {
            this.audios.push(audio);
          },
          pause: function pause() {
            var i6;
            var len = this.audios.length;
            for (i6 = 0; i6 < len; i6 += 1) {
              this.audios[i6].pause();
            }
          },
          resume: function resume() {
            var i6;
            var len = this.audios.length;
            for (i6 = 0; i6 < len; i6 += 1) {
              this.audios[i6].resume();
            }
          },
          setRate: function setRate(rateValue) {
            var i6;
            var len = this.audios.length;
            for (i6 = 0; i6 < len; i6 += 1) {
              this.audios[i6].setRate(rateValue);
            }
          },
          createAudio: function createAudio(assetPath) {
            if (this.audioFactory) {
              return this.audioFactory(assetPath);
            }
            if (window.Howl) {
              return new window.Howl({
                src: [assetPath]
              });
            }
            return {
              isPlaying: false,
              play: function play() {
                this.isPlaying = true;
              },
              seek: function seek() {
                this.isPlaying = false;
              },
              playing: function playing() {
              },
              rate: function rate() {
              },
              setVolume: function setVolume() {
              }
            };
          },
          setAudioFactory: function setAudioFactory(audioFactory) {
            this.audioFactory = audioFactory;
          },
          setVolume: function setVolume(value2) {
            this._volume = value2;
            this._updateVolume();
          },
          mute: function mute() {
            this._isMuted = true;
            this._updateVolume();
          },
          unmute: function unmute() {
            this._isMuted = false;
            this._updateVolume();
          },
          getVolume: function getVolume() {
            return this._volume;
          },
          _updateVolume: function _updateVolume() {
            var i6;
            var len = this.audios.length;
            for (i6 = 0; i6 < len; i6 += 1) {
              this.audios[i6].volume(this._volume * (this._isMuted ? 0 : 1));
            }
          }
        };
        return function() {
          return new AudioController();
        };
      }();
      var createTypedArray = function() {
        function createRegularArray(type4, len) {
          var i6 = 0;
          var arr = [];
          var value2;
          switch (type4) {
            case "int16":
            case "uint8c":
              value2 = 1;
              break;
            default:
              value2 = 1.1;
              break;
          }
          for (i6 = 0; i6 < len; i6 += 1) {
            arr.push(value2);
          }
          return arr;
        }
        function createTypedArrayFactory(type4, len) {
          if (type4 === "float32") {
            return new Float32Array(len);
          }
          if (type4 === "int16") {
            return new Int16Array(len);
          }
          if (type4 === "uint8c") {
            return new Uint8ClampedArray(len);
          }
          return createRegularArray(type4, len);
        }
        if (typeof Uint8ClampedArray === "function" && typeof Float32Array === "function") {
          return createTypedArrayFactory;
        }
        return createRegularArray;
      }();
      function createSizedArray(len) {
        return Array.apply(null, {
          length: len
        });
      }
      function _typeof$6(o) {
        "@babel/helpers - typeof";
        return _typeof$6 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof$6(o);
      }
      var subframeEnabled = true;
      var expressionsPlugin = null;
      var expressionsInterfaces = null;
      var idPrefix$1 = "";
      var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
      var _shouldRoundValues = false;
      var bmPow = Math.pow;
      var bmSqrt = Math.sqrt;
      var bmFloor = Math.floor;
      var bmMax = Math.max;
      var bmMin = Math.min;
      var BMMath = {};
      (function() {
        var propertyNames = ["abs", "acos", "acosh", "asin", "asinh", "atan", "atanh", "atan2", "ceil", "cbrt", "expm1", "clz32", "cos", "cosh", "exp", "floor", "fround", "hypot", "imul", "log", "log1p", "log2", "log10", "max", "min", "pow", "random", "round", "sign", "sin", "sinh", "sqrt", "tan", "tanh", "trunc", "E", "LN10", "LN2", "LOG10E", "LOG2E", "PI", "SQRT1_2", "SQRT2"];
        var i6;
        var len = propertyNames.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          BMMath[propertyNames[i6]] = Math[propertyNames[i6]];
        }
      })();
      function ProjectInterface$1() {
        return {};
      }
      BMMath.random = Math.random;
      BMMath.abs = function(val2) {
        var tOfVal = _typeof$6(val2);
        if (tOfVal === "object" && val2.length) {
          var absArr = createSizedArray(val2.length);
          var i6;
          var len = val2.length;
          for (i6 = 0; i6 < len; i6 += 1) {
            absArr[i6] = Math.abs(val2[i6]);
          }
          return absArr;
        }
        return Math.abs(val2);
      };
      var defaultCurveSegments = 150;
      var degToRads = Math.PI / 180;
      var roundCorner = 0.5519;
      function roundValues(flag) {
        _shouldRoundValues = !!flag;
      }
      function bmRnd(value2) {
        if (_shouldRoundValues) {
          return Math.round(value2);
        }
        return value2;
      }
      function styleDiv(element) {
        element.style.position = "absolute";
        element.style.top = 0;
        element.style.left = 0;
        element.style.display = "block";
        element.style.transformOrigin = "0 0";
        element.style.webkitTransformOrigin = "0 0";
        element.style.backfaceVisibility = "visible";
        element.style.webkitBackfaceVisibility = "visible";
        element.style.transformStyle = "preserve-3d";
        element.style.webkitTransformStyle = "preserve-3d";
        element.style.mozTransformStyle = "preserve-3d";
      }
      function BMEnterFrameEvent(type4, currentTime, totalTime, frameMultiplier) {
        this.type = type4;
        this.currentTime = currentTime;
        this.totalTime = totalTime;
        this.direction = frameMultiplier < 0 ? -1 : 1;
      }
      function BMCompleteEvent(type4, frameMultiplier) {
        this.type = type4;
        this.direction = frameMultiplier < 0 ? -1 : 1;
      }
      function BMCompleteLoopEvent(type4, totalLoops, currentLoop, frameMultiplier) {
        this.type = type4;
        this.currentLoop = currentLoop;
        this.totalLoops = totalLoops;
        this.direction = frameMultiplier < 0 ? -1 : 1;
      }
      function BMSegmentStartEvent(type4, firstFrame, totalFrames) {
        this.type = type4;
        this.firstFrame = firstFrame;
        this.totalFrames = totalFrames;
      }
      function BMDestroyEvent(type4, target) {
        this.type = type4;
        this.target = target;
      }
      function BMRenderFrameErrorEvent(nativeError, currentTime) {
        this.type = "renderFrameError";
        this.nativeError = nativeError;
        this.currentTime = currentTime;
      }
      function BMConfigErrorEvent(nativeError) {
        this.type = "configError";
        this.nativeError = nativeError;
      }
      function BMAnimationConfigErrorEvent(type4, nativeError) {
        this.type = type4;
        this.nativeError = nativeError;
      }
      var createElementID = function() {
        var _count = 0;
        return function createID() {
          _count += 1;
          return idPrefix$1 + "__lottie_element_" + _count;
        };
      }();
      function HSVtoRGB(h3, s8, v3) {
        var r;
        var g;
        var b;
        var i6;
        var f;
        var p10;
        var q;
        var t;
        i6 = Math.floor(h3 * 6);
        f = h3 * 6 - i6;
        p10 = v3 * (1 - s8);
        q = v3 * (1 - f * s8);
        t = v3 * (1 - (1 - f) * s8);
        switch (i6 % 6) {
          case 0:
            r = v3;
            g = t;
            b = p10;
            break;
          case 1:
            r = q;
            g = v3;
            b = p10;
            break;
          case 2:
            r = p10;
            g = v3;
            b = t;
            break;
          case 3:
            r = p10;
            g = q;
            b = v3;
            break;
          case 4:
            r = t;
            g = p10;
            b = v3;
            break;
          case 5:
            r = v3;
            g = p10;
            b = q;
            break;
          default:
            break;
        }
        return [r, g, b];
      }
      function RGBtoHSV(r, g, b) {
        var max = Math.max(r, g, b);
        var min = Math.min(r, g, b);
        var d30 = max - min;
        var h3;
        var s8 = max === 0 ? 0 : d30 / max;
        var v3 = max / 255;
        switch (max) {
          case min:
            h3 = 0;
            break;
          case r:
            h3 = g - b + d30 * (g < b ? 6 : 0);
            h3 /= 6 * d30;
            break;
          case g:
            h3 = b - r + d30 * 2;
            h3 /= 6 * d30;
            break;
          case b:
            h3 = r - g + d30 * 4;
            h3 /= 6 * d30;
            break;
          default:
            break;
        }
        return [h3, s8, v3];
      }
      function addSaturationToRGB(color, offset) {
        var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
        hsv[1] += offset;
        if (hsv[1] > 1) {
          hsv[1] = 1;
        } else if (hsv[1] <= 0) {
          hsv[1] = 0;
        }
        return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
      }
      function addBrightnessToRGB(color, offset) {
        var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
        hsv[2] += offset;
        if (hsv[2] > 1) {
          hsv[2] = 1;
        } else if (hsv[2] < 0) {
          hsv[2] = 0;
        }
        return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
      }
      function addHueToRGB(color, offset) {
        var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
        hsv[0] += offset / 360;
        if (hsv[0] > 1) {
          hsv[0] -= 1;
        } else if (hsv[0] < 0) {
          hsv[0] += 1;
        }
        return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
      }
      var rgbToHex = function() {
        var colorMap = [];
        var i6;
        var hex2;
        for (i6 = 0; i6 < 256; i6 += 1) {
          hex2 = i6.toString(16);
          colorMap[i6] = hex2.length === 1 ? "0" + hex2 : hex2;
        }
        return function(r, g, b) {
          if (r < 0) {
            r = 0;
          }
          if (g < 0) {
            g = 0;
          }
          if (b < 0) {
            b = 0;
          }
          return "#" + colorMap[r] + colorMap[g] + colorMap[b];
        };
      }();
      var setSubframeEnabled = function setSubframeEnabled2(flag) {
        subframeEnabled = !!flag;
      };
      var getSubframeEnabled = function getSubframeEnabled2() {
        return subframeEnabled;
      };
      var setExpressionsPlugin = function setExpressionsPlugin2(value2) {
        expressionsPlugin = value2;
      };
      var getExpressionsPlugin = function getExpressionsPlugin2() {
        return expressionsPlugin;
      };
      var setExpressionInterfaces = function setExpressionInterfaces2(value2) {
        expressionsInterfaces = value2;
      };
      var getExpressionInterfaces = function getExpressionInterfaces2() {
        return expressionsInterfaces;
      };
      var setDefaultCurveSegments = function setDefaultCurveSegments2(value2) {
        defaultCurveSegments = value2;
      };
      var getDefaultCurveSegments = function getDefaultCurveSegments2() {
        return defaultCurveSegments;
      };
      var setIdPrefix = function setIdPrefix2(value2) {
        idPrefix$1 = value2;
      };
      var getIdPrefix = function getIdPrefix2() {
        return idPrefix$1;
      };
      function createNS(type4) {
        return document.createElementNS(svgNS, type4);
      }
      function _typeof$5(o) {
        "@babel/helpers - typeof";
        return _typeof$5 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof$5(o);
      }
      var dataManager = function() {
        var _counterId = 1;
        var processes = [];
        var workerFn;
        var workerInstance;
        var workerProxy = {
          onmessage: function onmessage() {
          },
          postMessage: function postMessage(path) {
            workerFn({
              data: path
            });
          }
        };
        var _workerSelf = {
          postMessage: function postMessage(data2) {
            workerProxy.onmessage({
              data: data2
            });
          }
        };
        function createWorker(fn) {
          if (window.Worker && window.Blob && getWebWorker()) {
            var blob = new Blob(["var _workerSelf = self; self.onmessage = ", fn.toString()], {
              type: "text/javascript"
            });
            var url2 = URL.createObjectURL(blob);
            return new Worker(url2);
          }
          workerFn = fn;
          return workerProxy;
        }
        function setupWorker() {
          if (!workerInstance) {
            workerInstance = createWorker(function workerStart(e2) {
              function dataFunctionManager() {
                function completeLayers(layers, comps) {
                  var layerData;
                  var i6;
                  var len = layers.length;
                  var j;
                  var jLen;
                  var k2;
                  var kLen;
                  for (i6 = 0; i6 < len; i6 += 1) {
                    layerData = layers[i6];
                    if ("ks" in layerData && !layerData.completed) {
                      layerData.completed = true;
                      if (layerData.hasMask) {
                        var maskProps = layerData.masksProperties;
                        jLen = maskProps.length;
                        for (j = 0; j < jLen; j += 1) {
                          if (maskProps[j].pt.k.i) {
                            convertPathsToAbsoluteValues(maskProps[j].pt.k);
                          } else {
                            kLen = maskProps[j].pt.k.length;
                            for (k2 = 0; k2 < kLen; k2 += 1) {
                              if (maskProps[j].pt.k[k2].s) {
                                convertPathsToAbsoluteValues(maskProps[j].pt.k[k2].s[0]);
                              }
                              if (maskProps[j].pt.k[k2].e) {
                                convertPathsToAbsoluteValues(maskProps[j].pt.k[k2].e[0]);
                              }
                            }
                          }
                        }
                      }
                      if (layerData.ty === 0) {
                        layerData.layers = findCompLayers(layerData.refId, comps);
                        completeLayers(layerData.layers, comps);
                      } else if (layerData.ty === 4) {
                        completeShapes(layerData.shapes);
                      } else if (layerData.ty === 5) {
                        completeText(layerData);
                      }
                    }
                  }
                }
                function completeChars(chars, assets) {
                  if (chars) {
                    var i6 = 0;
                    var len = chars.length;
                    for (i6 = 0; i6 < len; i6 += 1) {
                      if (chars[i6].t === 1) {
                        chars[i6].data.layers = findCompLayers(chars[i6].data.refId, assets);
                        completeLayers(chars[i6].data.layers, assets);
                      }
                    }
                  }
                }
                function findComp(id, comps) {
                  var i6 = 0;
                  var len = comps.length;
                  while (i6 < len) {
                    if (comps[i6].id === id) {
                      return comps[i6];
                    }
                    i6 += 1;
                  }
                  return null;
                }
                function findCompLayers(id, comps) {
                  var comp2 = findComp(id, comps);
                  if (comp2) {
                    if (!comp2.layers.__used) {
                      comp2.layers.__used = true;
                      return comp2.layers;
                    }
                    return JSON.parse(JSON.stringify(comp2.layers));
                  }
                  return null;
                }
                function completeShapes(arr) {
                  var i6;
                  var len = arr.length;
                  var j;
                  var jLen;
                  for (i6 = len - 1; i6 >= 0; i6 -= 1) {
                    if (arr[i6].ty === "sh") {
                      if (arr[i6].ks.k.i) {
                        convertPathsToAbsoluteValues(arr[i6].ks.k);
                      } else {
                        jLen = arr[i6].ks.k.length;
                        for (j = 0; j < jLen; j += 1) {
                          if (arr[i6].ks.k[j].s) {
                            convertPathsToAbsoluteValues(arr[i6].ks.k[j].s[0]);
                          }
                          if (arr[i6].ks.k[j].e) {
                            convertPathsToAbsoluteValues(arr[i6].ks.k[j].e[0]);
                          }
                        }
                      }
                    } else if (arr[i6].ty === "gr") {
                      completeShapes(arr[i6].it);
                    }
                  }
                }
                function convertPathsToAbsoluteValues(path) {
                  var i6;
                  var len = path.i.length;
                  for (i6 = 0; i6 < len; i6 += 1) {
                    path.i[i6][0] += path.v[i6][0];
                    path.i[i6][1] += path.v[i6][1];
                    path.o[i6][0] += path.v[i6][0];
                    path.o[i6][1] += path.v[i6][1];
                  }
                }
                function checkVersion(minimum, animVersionString) {
                  var animVersion = animVersionString ? animVersionString.split(".") : [100, 100, 100];
                  if (minimum[0] > animVersion[0]) {
                    return true;
                  }
                  if (animVersion[0] > minimum[0]) {
                    return false;
                  }
                  if (minimum[1] > animVersion[1]) {
                    return true;
                  }
                  if (animVersion[1] > minimum[1]) {
                    return false;
                  }
                  if (minimum[2] > animVersion[2]) {
                    return true;
                  }
                  if (animVersion[2] > minimum[2]) {
                    return false;
                  }
                  return null;
                }
                var checkText = function() {
                  var minimumVersion = [4, 4, 14];
                  function updateTextLayer(textLayer) {
                    var documentData = textLayer.t.d;
                    textLayer.t.d = {
                      k: [{
                        s: documentData,
                        t: 0
                      }]
                    };
                  }
                  function iterateLayers(layers) {
                    var i6;
                    var len = layers.length;
                    for (i6 = 0; i6 < len; i6 += 1) {
                      if (layers[i6].ty === 5) {
                        updateTextLayer(layers[i6]);
                      }
                    }
                  }
                  return function(animationData2) {
                    if (checkVersion(minimumVersion, animationData2.v)) {
                      iterateLayers(animationData2.layers);
                      if (animationData2.assets) {
                        var i6;
                        var len = animationData2.assets.length;
                        for (i6 = 0; i6 < len; i6 += 1) {
                          if (animationData2.assets[i6].layers) {
                            iterateLayers(animationData2.assets[i6].layers);
                          }
                        }
                      }
                    }
                  };
                }();
                var checkChars = function() {
                  var minimumVersion = [4, 7, 99];
                  return function(animationData2) {
                    if (animationData2.chars && !checkVersion(minimumVersion, animationData2.v)) {
                      var i6;
                      var len = animationData2.chars.length;
                      for (i6 = 0; i6 < len; i6 += 1) {
                        var charData = animationData2.chars[i6];
                        if (charData.data && charData.data.shapes) {
                          completeShapes(charData.data.shapes);
                          charData.data.ip = 0;
                          charData.data.op = 99999;
                          charData.data.st = 0;
                          charData.data.sr = 1;
                          charData.data.ks = {
                            p: {
                              k: [0, 0],
                              a: 0
                            },
                            s: {
                              k: [100, 100],
                              a: 0
                            },
                            a: {
                              k: [0, 0],
                              a: 0
                            },
                            r: {
                              k: 0,
                              a: 0
                            },
                            o: {
                              k: 100,
                              a: 0
                            }
                          };
                          if (!animationData2.chars[i6].t) {
                            charData.data.shapes.push({
                              ty: "no"
                            });
                            charData.data.shapes[0].it.push({
                              p: {
                                k: [0, 0],
                                a: 0
                              },
                              s: {
                                k: [100, 100],
                                a: 0
                              },
                              a: {
                                k: [0, 0],
                                a: 0
                              },
                              r: {
                                k: 0,
                                a: 0
                              },
                              o: {
                                k: 100,
                                a: 0
                              },
                              sk: {
                                k: 0,
                                a: 0
                              },
                              sa: {
                                k: 0,
                                a: 0
                              },
                              ty: "tr"
                            });
                          }
                        }
                      }
                    }
                  };
                }();
                var checkPathProperties = function() {
                  var minimumVersion = [5, 7, 15];
                  function updateTextLayer(textLayer) {
                    var pathData = textLayer.t.p;
                    if (typeof pathData.a === "number") {
                      pathData.a = {
                        a: 0,
                        k: pathData.a
                      };
                    }
                    if (typeof pathData.p === "number") {
                      pathData.p = {
                        a: 0,
                        k: pathData.p
                      };
                    }
                    if (typeof pathData.r === "number") {
                      pathData.r = {
                        a: 0,
                        k: pathData.r
                      };
                    }
                  }
                  function iterateLayers(layers) {
                    var i6;
                    var len = layers.length;
                    for (i6 = 0; i6 < len; i6 += 1) {
                      if (layers[i6].ty === 5) {
                        updateTextLayer(layers[i6]);
                      }
                    }
                  }
                  return function(animationData2) {
                    if (checkVersion(minimumVersion, animationData2.v)) {
                      iterateLayers(animationData2.layers);
                      if (animationData2.assets) {
                        var i6;
                        var len = animationData2.assets.length;
                        for (i6 = 0; i6 < len; i6 += 1) {
                          if (animationData2.assets[i6].layers) {
                            iterateLayers(animationData2.assets[i6].layers);
                          }
                        }
                      }
                    }
                  };
                }();
                var checkColors = function() {
                  var minimumVersion = [4, 1, 9];
                  function iterateShapes(shapes) {
                    var i6;
                    var len = shapes.length;
                    var j;
                    var jLen;
                    for (i6 = 0; i6 < len; i6 += 1) {
                      if (shapes[i6].ty === "gr") {
                        iterateShapes(shapes[i6].it);
                      } else if (shapes[i6].ty === "fl" || shapes[i6].ty === "st") {
                        if (shapes[i6].c.k && shapes[i6].c.k[0].i) {
                          jLen = shapes[i6].c.k.length;
                          for (j = 0; j < jLen; j += 1) {
                            if (shapes[i6].c.k[j].s) {
                              shapes[i6].c.k[j].s[0] /= 255;
                              shapes[i6].c.k[j].s[1] /= 255;
                              shapes[i6].c.k[j].s[2] /= 255;
                              shapes[i6].c.k[j].s[3] /= 255;
                            }
                            if (shapes[i6].c.k[j].e) {
                              shapes[i6].c.k[j].e[0] /= 255;
                              shapes[i6].c.k[j].e[1] /= 255;
                              shapes[i6].c.k[j].e[2] /= 255;
                              shapes[i6].c.k[j].e[3] /= 255;
                            }
                          }
                        } else {
                          shapes[i6].c.k[0] /= 255;
                          shapes[i6].c.k[1] /= 255;
                          shapes[i6].c.k[2] /= 255;
                          shapes[i6].c.k[3] /= 255;
                        }
                      }
                    }
                  }
                  function iterateLayers(layers) {
                    var i6;
                    var len = layers.length;
                    for (i6 = 0; i6 < len; i6 += 1) {
                      if (layers[i6].ty === 4) {
                        iterateShapes(layers[i6].shapes);
                      }
                    }
                  }
                  return function(animationData2) {
                    if (checkVersion(minimumVersion, animationData2.v)) {
                      iterateLayers(animationData2.layers);
                      if (animationData2.assets) {
                        var i6;
                        var len = animationData2.assets.length;
                        for (i6 = 0; i6 < len; i6 += 1) {
                          if (animationData2.assets[i6].layers) {
                            iterateLayers(animationData2.assets[i6].layers);
                          }
                        }
                      }
                    }
                  };
                }();
                var checkShapes = function() {
                  var minimumVersion = [4, 4, 18];
                  function completeClosingShapes(arr) {
                    var i6;
                    var len = arr.length;
                    var j;
                    var jLen;
                    for (i6 = len - 1; i6 >= 0; i6 -= 1) {
                      if (arr[i6].ty === "sh") {
                        if (arr[i6].ks.k.i) {
                          arr[i6].ks.k.c = arr[i6].closed;
                        } else {
                          jLen = arr[i6].ks.k.length;
                          for (j = 0; j < jLen; j += 1) {
                            if (arr[i6].ks.k[j].s) {
                              arr[i6].ks.k[j].s[0].c = arr[i6].closed;
                            }
                            if (arr[i6].ks.k[j].e) {
                              arr[i6].ks.k[j].e[0].c = arr[i6].closed;
                            }
                          }
                        }
                      } else if (arr[i6].ty === "gr") {
                        completeClosingShapes(arr[i6].it);
                      }
                    }
                  }
                  function iterateLayers(layers) {
                    var layerData;
                    var i6;
                    var len = layers.length;
                    var j;
                    var jLen;
                    var k2;
                    var kLen;
                    for (i6 = 0; i6 < len; i6 += 1) {
                      layerData = layers[i6];
                      if (layerData.hasMask) {
                        var maskProps = layerData.masksProperties;
                        jLen = maskProps.length;
                        for (j = 0; j < jLen; j += 1) {
                          if (maskProps[j].pt.k.i) {
                            maskProps[j].pt.k.c = maskProps[j].cl;
                          } else {
                            kLen = maskProps[j].pt.k.length;
                            for (k2 = 0; k2 < kLen; k2 += 1) {
                              if (maskProps[j].pt.k[k2].s) {
                                maskProps[j].pt.k[k2].s[0].c = maskProps[j].cl;
                              }
                              if (maskProps[j].pt.k[k2].e) {
                                maskProps[j].pt.k[k2].e[0].c = maskProps[j].cl;
                              }
                            }
                          }
                        }
                      }
                      if (layerData.ty === 4) {
                        completeClosingShapes(layerData.shapes);
                      }
                    }
                  }
                  return function(animationData2) {
                    if (checkVersion(minimumVersion, animationData2.v)) {
                      iterateLayers(animationData2.layers);
                      if (animationData2.assets) {
                        var i6;
                        var len = animationData2.assets.length;
                        for (i6 = 0; i6 < len; i6 += 1) {
                          if (animationData2.assets[i6].layers) {
                            iterateLayers(animationData2.assets[i6].layers);
                          }
                        }
                      }
                    }
                  };
                }();
                function completeData(animationData2) {
                  if (animationData2.__complete) {
                    return;
                  }
                  checkColors(animationData2);
                  checkText(animationData2);
                  checkChars(animationData2);
                  checkPathProperties(animationData2);
                  checkShapes(animationData2);
                  completeLayers(animationData2.layers, animationData2.assets);
                  completeChars(animationData2.chars, animationData2.assets);
                  animationData2.__complete = true;
                }
                function completeText(data2) {
                  if (data2.t.a.length === 0 && !("m" in data2.t.p)) {
                  }
                }
                var moduleOb = {};
                moduleOb.completeData = completeData;
                moduleOb.checkColors = checkColors;
                moduleOb.checkChars = checkChars;
                moduleOb.checkPathProperties = checkPathProperties;
                moduleOb.checkShapes = checkShapes;
                moduleOb.completeLayers = completeLayers;
                return moduleOb;
              }
              if (!_workerSelf.dataManager) {
                _workerSelf.dataManager = dataFunctionManager();
              }
              if (!_workerSelf.assetLoader) {
                _workerSelf.assetLoader = function() {
                  function formatResponse(xhr) {
                    var contentTypeHeader = xhr.getResponseHeader("content-type");
                    if (contentTypeHeader && xhr.responseType === "json" && contentTypeHeader.indexOf("json") !== -1) {
                      return xhr.response;
                    }
                    if (xhr.response && _typeof$5(xhr.response) === "object") {
                      return xhr.response;
                    }
                    if (xhr.response && typeof xhr.response === "string") {
                      return JSON.parse(xhr.response);
                    }
                    if (xhr.responseText) {
                      return JSON.parse(xhr.responseText);
                    }
                    return null;
                  }
                  function loadAsset(path, fullPath, callback, errorCallback) {
                    var response;
                    var xhr = new XMLHttpRequest();
                    try {
                      xhr.responseType = "json";
                    } catch (err) {
                    }
                    xhr.onreadystatechange = function() {
                      if (xhr.readyState === 4) {
                        if (xhr.status === 200) {
                          response = formatResponse(xhr);
                          callback(response);
                        } else {
                          try {
                            response = formatResponse(xhr);
                            callback(response);
                          } catch (err) {
                            if (errorCallback) {
                              errorCallback(err);
                            }
                          }
                        }
                      }
                    };
                    try {
                      xhr.open(["G", "E", "T"].join(""), path, true);
                    } catch (error) {
                      xhr.open(["G", "E", "T"].join(""), fullPath + "/" + path, true);
                    }
                    xhr.send();
                  }
                  return {
                    load: loadAsset
                  };
                }();
              }
              if (e2.data.type === "loadAnimation") {
                _workerSelf.assetLoader.load(e2.data.path, e2.data.fullPath, function(data2) {
                  _workerSelf.dataManager.completeData(data2);
                  _workerSelf.postMessage({
                    id: e2.data.id,
                    payload: data2,
                    status: "success"
                  });
                }, function() {
                  _workerSelf.postMessage({
                    id: e2.data.id,
                    status: "error"
                  });
                });
              } else if (e2.data.type === "complete") {
                var animation = e2.data.animation;
                _workerSelf.dataManager.completeData(animation);
                _workerSelf.postMessage({
                  id: e2.data.id,
                  payload: animation,
                  status: "success"
                });
              } else if (e2.data.type === "loadData") {
                _workerSelf.assetLoader.load(e2.data.path, e2.data.fullPath, function(data2) {
                  _workerSelf.postMessage({
                    id: e2.data.id,
                    payload: data2,
                    status: "success"
                  });
                }, function() {
                  _workerSelf.postMessage({
                    id: e2.data.id,
                    status: "error"
                  });
                });
              }
            });
            workerInstance.onmessage = function(event) {
              var data2 = event.data;
              var id = data2.id;
              var process2 = processes[id];
              processes[id] = null;
              if (data2.status === "success") {
                process2.onComplete(data2.payload);
              } else if (process2.onError) {
                process2.onError();
              }
            };
          }
        }
        function createProcess(onComplete, onError) {
          _counterId += 1;
          var id = "processId_" + _counterId;
          processes[id] = {
            onComplete,
            onError
          };
          return id;
        }
        function loadAnimation2(path, onComplete, onError) {
          setupWorker();
          var processId = createProcess(onComplete, onError);
          workerInstance.postMessage({
            type: "loadAnimation",
            path,
            fullPath: window.location.origin + window.location.pathname,
            id: processId
          });
        }
        function loadData(path, onComplete, onError) {
          setupWorker();
          var processId = createProcess(onComplete, onError);
          workerInstance.postMessage({
            type: "loadData",
            path,
            fullPath: window.location.origin + window.location.pathname,
            id: processId
          });
        }
        function completeAnimation(anim, onComplete, onError) {
          setupWorker();
          var processId = createProcess(onComplete, onError);
          workerInstance.postMessage({
            type: "complete",
            animation: anim,
            id: processId
          });
        }
        return {
          loadAnimation: loadAnimation2,
          loadData,
          completeAnimation
        };
      }();
      var ImagePreloader = function() {
        var proxyImage = function() {
          var canvas = createTag("canvas");
          canvas.width = 1;
          canvas.height = 1;
          var ctx2 = canvas.getContext("2d");
          ctx2.fillStyle = "rgba(0,0,0,0)";
          ctx2.fillRect(0, 0, 1, 1);
          return canvas;
        }();
        function imageLoaded() {
          this.loadedAssets += 1;
          if (this.loadedAssets === this.totalImages && this.loadedFootagesCount === this.totalFootages) {
            if (this.imagesLoadedCb) {
              this.imagesLoadedCb(null);
            }
          }
        }
        function footageLoaded() {
          this.loadedFootagesCount += 1;
          if (this.loadedAssets === this.totalImages && this.loadedFootagesCount === this.totalFootages) {
            if (this.imagesLoadedCb) {
              this.imagesLoadedCb(null);
            }
          }
        }
        function getAssetsPath(assetData, assetsPath, originalPath) {
          var path = "";
          if (assetData.e) {
            path = assetData.p;
          } else if (assetsPath) {
            var imagePath = assetData.p;
            if (imagePath.indexOf("images/") !== -1) {
              imagePath = imagePath.split("/")[1];
            }
            path = assetsPath + imagePath;
          } else {
            path = originalPath;
            path += assetData.u ? assetData.u : "";
            path += assetData.p;
          }
          return path;
        }
        function testImageLoaded(img) {
          var _count = 0;
          var intervalId = setInterval((function() {
            var box = img.getBBox();
            if (box.width || _count > 500) {
              this._imageLoaded();
              clearInterval(intervalId);
            }
            _count += 1;
          }).bind(this), 50);
        }
        function createImageData(assetData) {
          var path = getAssetsPath(assetData, this.assetsPath, this.path);
          var img = createNS("image");
          if (isSafari) {
            this.testImageLoaded(img);
          } else {
            img.addEventListener("load", this._imageLoaded, false);
          }
          img.addEventListener("error", (function() {
            ob2.img = proxyImage;
            this._imageLoaded();
          }).bind(this), false);
          img.setAttributeNS("http://www.w3.org/1999/xlink", "href", path);
          if (this._elementHelper.append) {
            this._elementHelper.append(img);
          } else {
            this._elementHelper.appendChild(img);
          }
          var ob2 = {
            img,
            assetData
          };
          return ob2;
        }
        function createImgData(assetData) {
          var path = getAssetsPath(assetData, this.assetsPath, this.path);
          var img = createTag("img");
          img.crossOrigin = "anonymous";
          img.addEventListener("load", this._imageLoaded, false);
          img.addEventListener("error", (function() {
            ob2.img = proxyImage;
            this._imageLoaded();
          }).bind(this), false);
          img.src = path;
          var ob2 = {
            img,
            assetData
          };
          return ob2;
        }
        function createFootageData(data2) {
          var ob2 = {
            assetData: data2
          };
          var path = getAssetsPath(data2, this.assetsPath, this.path);
          dataManager.loadData(path, (function(footageData) {
            ob2.img = footageData;
            this._footageLoaded();
          }).bind(this), (function() {
            ob2.img = {};
            this._footageLoaded();
          }).bind(this));
          return ob2;
        }
        function loadAssets(assets, cb) {
          this.imagesLoadedCb = cb;
          var i6;
          var len = assets.length;
          for (i6 = 0; i6 < len; i6 += 1) {
            if (!assets[i6].layers) {
              if (!assets[i6].t || assets[i6].t === "seq") {
                this.totalImages += 1;
                this.images.push(this._createImageData(assets[i6]));
              } else if (assets[i6].t === 3) {
                this.totalFootages += 1;
                this.images.push(this.createFootageData(assets[i6]));
              }
            }
          }
        }
        function setPath(path) {
          this.path = path || "";
        }
        function setAssetsPath(path) {
          this.assetsPath = path || "";
        }
        function getAsset(assetData) {
          var i6 = 0;
          var len = this.images.length;
          while (i6 < len) {
            if (this.images[i6].assetData === assetData) {
              return this.images[i6].img;
            }
            i6 += 1;
          }
          return null;
        }
        function destroy() {
          this.imagesLoadedCb = null;
          this.images.length = 0;
        }
        function loadedImages() {
          return this.totalImages === this.loadedAssets;
        }
        function loadedFootages() {
          return this.totalFootages === this.loadedFootagesCount;
        }
        function setCacheType(type4, elementHelper) {
          if (type4 === "svg") {
            this._elementHelper = elementHelper;
            this._createImageData = this.createImageData.bind(this);
          } else {
            this._createImageData = this.createImgData.bind(this);
          }
        }
        function ImagePreloaderFactory() {
          this._imageLoaded = imageLoaded.bind(this);
          this._footageLoaded = footageLoaded.bind(this);
          this.testImageLoaded = testImageLoaded.bind(this);
          this.createFootageData = createFootageData.bind(this);
          this.assetsPath = "";
          this.path = "";
          this.totalImages = 0;
          this.totalFootages = 0;
          this.loadedAssets = 0;
          this.loadedFootagesCount = 0;
          this.imagesLoadedCb = null;
          this.images = [];
        }
        ImagePreloaderFactory.prototype = {
          loadAssets,
          setAssetsPath,
          setPath,
          loadedImages,
          loadedFootages,
          destroy,
          getAsset,
          createImgData,
          createImageData,
          imageLoaded,
          footageLoaded,
          setCacheType
        };
        return ImagePreloaderFactory;
      }();
      function BaseEvent() {
      }
      BaseEvent.prototype = {
        triggerEvent: function triggerEvent(eventName, args) {
          if (this._cbs[eventName]) {
            var callbacks = this._cbs[eventName];
            for (var i6 = 0; i6 < callbacks.length; i6 += 1) {
              callbacks[i6](args);
            }
          }
        },
        addEventListener: function addEventListener(eventName, callback) {
          if (!this._cbs[eventName]) {
            this._cbs[eventName] = [];
          }
          this._cbs[eventName].push(callback);
          return (function() {
            this.removeEventListener(eventName, callback);
          }).bind(this);
        },
        removeEventListener: function removeEventListener(eventName, callback) {
          if (!callback) {
            this._cbs[eventName] = null;
          } else if (this._cbs[eventName]) {
            var i6 = 0;
            var len = this._cbs[eventName].length;
            while (i6 < len) {
              if (this._cbs[eventName][i6] === callback) {
                this._cbs[eventName].splice(i6, 1);
                i6 -= 1;
                len -= 1;
              }
              i6 += 1;
            }
            if (!this._cbs[eventName].length) {
              this._cbs[eventName] = null;
            }
          }
        }
      };
      var markerParser = function() {
        function parsePayloadLines(payload) {
          var lines = payload.split("\r\n");
          var keys = {};
          var line;
          var keysCount = 0;
          for (var i6 = 0; i6 < lines.length; i6 += 1) {
            line = lines[i6].split(":");
            if (line.length === 2) {
              keys[line[0]] = line[1].trim();
              keysCount += 1;
            }
          }
          if (keysCount === 0) {
            throw new Error();
          }
          return keys;
        }
        return function(_markers) {
          var markers = [];
          for (var i6 = 0; i6 < _markers.length; i6 += 1) {
            var _marker = _markers[i6];
            var markerData = {
              time: _marker.tm,
              duration: _marker.dr
            };
            try {
              markerData.payload = JSON.parse(_markers[i6].cm);
            } catch (_) {
              try {
                markerData.payload = parsePayloadLines(_markers[i6].cm);
              } catch (__) {
                markerData.payload = {
                  name: _markers[i6].cm
                };
              }
            }
            markers.push(markerData);
          }
          return markers;
        };
      }();
      var ProjectInterface = function() {
        function registerComposition(comp2) {
          this.compositions.push(comp2);
        }
        return function() {
          function _thisProjectFunction(name2) {
            var i6 = 0;
            var len = this.compositions.length;
            while (i6 < len) {
              if (this.compositions[i6].data && this.compositions[i6].data.nm === name2) {
                if (this.compositions[i6].prepareFrame && this.compositions[i6].data.xt) {
                  this.compositions[i6].prepareFrame(this.currentFrame);
                }
                return this.compositions[i6].compInterface;
              }
              i6 += 1;
            }
            return null;
          }
          _thisProjectFunction.compositions = [];
          _thisProjectFunction.currentFrame = 0;
          _thisProjectFunction.registerComposition = registerComposition;
          return _thisProjectFunction;
        };
      }();
      var renderers = {};
      var registerRenderer = function registerRenderer2(key2, value2) {
        renderers[key2] = value2;
      };
      function getRenderer(key2) {
        return renderers[key2];
      }
      function getRegisteredRenderer() {
        if (renderers.canvas) {
          return "canvas";
        }
        for (var key2 in renderers) {
          if (renderers[key2]) {
            return key2;
          }
        }
        return "";
      }
      function _typeof$4(o) {
        "@babel/helpers - typeof";
        return _typeof$4 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof$4(o);
      }
      var AnimationItem = function AnimationItem2() {
        this._cbs = [];
        this.name = "";
        this.path = "";
        this.isLoaded = false;
        this.currentFrame = 0;
        this.currentRawFrame = 0;
        this.firstFrame = 0;
        this.totalFrames = 0;
        this.frameRate = 0;
        this.frameMult = 0;
        this.playSpeed = 1;
        this.playDirection = 1;
        this.playCount = 0;
        this.animationData = {};
        this.assets = [];
        this.isPaused = true;
        this.autoplay = false;
        this.loop = true;
        this.renderer = null;
        this.animationID = createElementID();
        this.assetsPath = "";
        this.timeCompleted = 0;
        this.segmentPos = 0;
        this.isSubframeEnabled = getSubframeEnabled();
        this.segments = [];
        this._idle = true;
        this._completedLoop = false;
        this.projectInterface = ProjectInterface();
        this.imagePreloader = new ImagePreloader();
        this.audioController = audioControllerFactory();
        this.markers = [];
        this.configAnimation = this.configAnimation.bind(this);
        this.onSetupError = this.onSetupError.bind(this);
        this.onSegmentComplete = this.onSegmentComplete.bind(this);
        this.drawnFrameEvent = new BMEnterFrameEvent("drawnFrame", 0, 0, 0);
        this.expressionsPlugin = getExpressionsPlugin();
      };
      extendPrototype([BaseEvent], AnimationItem);
      AnimationItem.prototype.setParams = function(params) {
        if (params.wrapper || params.container) {
          this.wrapper = params.wrapper || params.container;
        }
        var animType = "svg";
        if (params.animType) {
          animType = params.animType;
        } else if (params.renderer) {
          animType = params.renderer;
        }
        var RendererClass = getRenderer(animType);
        this.renderer = new RendererClass(this, params.rendererSettings);
        this.imagePreloader.setCacheType(animType, this.renderer.globalData.defs);
        this.renderer.setProjectInterface(this.projectInterface);
        this.animType = animType;
        if (params.loop === "" || params.loop === null || params.loop === void 0 || params.loop === true) {
          this.loop = true;
        } else if (params.loop === false) {
          this.loop = false;
        } else {
          this.loop = parseInt(params.loop, 10);
        }
        this.autoplay = "autoplay" in params ? params.autoplay : true;
        this.name = params.name ? params.name : "";
        this.autoloadSegments = Object.prototype.hasOwnProperty.call(params, "autoloadSegments") ? params.autoloadSegments : true;
        this.assetsPath = params.assetsPath;
        this.initialSegment = params.initialSegment;
        if (params.audioFactory) {
          this.audioController.setAudioFactory(params.audioFactory);
        }
        if (params.animationData) {
          this.setupAnimation(params.animationData);
        } else if (params.path) {
          if (params.path.lastIndexOf("\\") !== -1) {
            this.path = params.path.substr(0, params.path.lastIndexOf("\\") + 1);
          } else {
            this.path = params.path.substr(0, params.path.lastIndexOf("/") + 1);
          }
          this.fileName = params.path.substr(params.path.lastIndexOf("/") + 1);
          this.fileName = this.fileName.substr(0, this.fileName.lastIndexOf(".json"));
          dataManager.loadAnimation(params.path, this.configAnimation, this.onSetupError);
        }
      };
      AnimationItem.prototype.onSetupError = function() {
        this.trigger("data_failed");
      };
      AnimationItem.prototype.setupAnimation = function(data2) {
        dataManager.completeAnimation(data2, this.configAnimation);
      };
      AnimationItem.prototype.setData = function(wrapper, animationData2) {
        if (animationData2) {
          if (_typeof$4(animationData2) !== "object") {
            animationData2 = JSON.parse(animationData2);
          }
        }
        var params = {
          wrapper,
          animationData: animationData2
        };
        var wrapperAttributes = wrapper.attributes;
        params.path = wrapperAttributes.getNamedItem("data-animation-path") ? wrapperAttributes.getNamedItem("data-animation-path").value : wrapperAttributes.getNamedItem("data-bm-path") ? wrapperAttributes.getNamedItem("data-bm-path").value : wrapperAttributes.getNamedItem("bm-path") ? wrapperAttributes.getNamedItem("bm-path").value : "";
        params.animType = wrapperAttributes.getNamedItem("data-anim-type") ? wrapperAttributes.getNamedItem("data-anim-type").value : wrapperAttributes.getNamedItem("data-bm-type") ? wrapperAttributes.getNamedItem("data-bm-type").value : wrapperAttributes.getNamedItem("bm-type") ? wrapperAttributes.getNamedItem("bm-type").value : wrapperAttributes.getNamedItem("data-bm-renderer") ? wrapperAttributes.getNamedItem("data-bm-renderer").value : wrapperAttributes.getNamedItem("bm-renderer") ? wrapperAttributes.getNamedItem("bm-renderer").value : getRegisteredRenderer() || "canvas";
        var loop2 = wrapperAttributes.getNamedItem("data-anim-loop") ? wrapperAttributes.getNamedItem("data-anim-loop").value : wrapperAttributes.getNamedItem("data-bm-loop") ? wrapperAttributes.getNamedItem("data-bm-loop").value : wrapperAttributes.getNamedItem("bm-loop") ? wrapperAttributes.getNamedItem("bm-loop").value : "";
        if (loop2 === "false") {
          params.loop = false;
        } else if (loop2 === "true") {
          params.loop = true;
        } else if (loop2 !== "") {
          params.loop = parseInt(loop2, 10);
        }
        var autoplay = wrapperAttributes.getNamedItem("data-anim-autoplay") ? wrapperAttributes.getNamedItem("data-anim-autoplay").value : wrapperAttributes.getNamedItem("data-bm-autoplay") ? wrapperAttributes.getNamedItem("data-bm-autoplay").value : wrapperAttributes.getNamedItem("bm-autoplay") ? wrapperAttributes.getNamedItem("bm-autoplay").value : true;
        params.autoplay = autoplay !== "false";
        params.name = wrapperAttributes.getNamedItem("data-name") ? wrapperAttributes.getNamedItem("data-name").value : wrapperAttributes.getNamedItem("data-bm-name") ? wrapperAttributes.getNamedItem("data-bm-name").value : wrapperAttributes.getNamedItem("bm-name") ? wrapperAttributes.getNamedItem("bm-name").value : "";
        var prerender = wrapperAttributes.getNamedItem("data-anim-prerender") ? wrapperAttributes.getNamedItem("data-anim-prerender").value : wrapperAttributes.getNamedItem("data-bm-prerender") ? wrapperAttributes.getNamedItem("data-bm-prerender").value : wrapperAttributes.getNamedItem("bm-prerender") ? wrapperAttributes.getNamedItem("bm-prerender").value : "";
        if (prerender === "false") {
          params.prerender = false;
        }
        if (!params.path) {
          this.trigger("destroy");
        } else {
          this.setParams(params);
        }
      };
      AnimationItem.prototype.includeLayers = function(data2) {
        if (data2.op > this.animationData.op) {
          this.animationData.op = data2.op;
          this.totalFrames = Math.floor(data2.op - this.animationData.ip);
        }
        var layers = this.animationData.layers;
        var i6;
        var len = layers.length;
        var newLayers = data2.layers;
        var j;
        var jLen = newLayers.length;
        for (j = 0; j < jLen; j += 1) {
          i6 = 0;
          while (i6 < len) {
            if (layers[i6].id === newLayers[j].id) {
              layers[i6] = newLayers[j];
              break;
            }
            i6 += 1;
          }
        }
        if (data2.chars || data2.fonts) {
          this.renderer.globalData.fontManager.addChars(data2.chars);
          this.renderer.globalData.fontManager.addFonts(data2.fonts, this.renderer.globalData.defs);
        }
        if (data2.assets) {
          len = data2.assets.length;
          for (i6 = 0; i6 < len; i6 += 1) {
            this.animationData.assets.push(data2.assets[i6]);
          }
        }
        this.animationData.__complete = false;
        dataManager.completeAnimation(this.animationData, this.onSegmentComplete);
      };
      AnimationItem.prototype.onSegmentComplete = function(data2) {
        this.animationData = data2;
        var expressionsPlugin2 = getExpressionsPlugin();
        if (expressionsPlugin2) {
          expressionsPlugin2.initExpressions(this);
        }
        this.loadNextSegment();
      };
      AnimationItem.prototype.loadNextSegment = function() {
        var segments = this.animationData.segments;
        if (!segments || segments.length === 0 || !this.autoloadSegments) {
          this.trigger("data_ready");
          this.timeCompleted = this.totalFrames;
          return;
        }
        var segment = segments.shift();
        this.timeCompleted = segment.time * this.frameRate;
        var segmentPath = this.path + this.fileName + "_" + this.segmentPos + ".json";
        this.segmentPos += 1;
        dataManager.loadData(segmentPath, this.includeLayers.bind(this), (function() {
          this.trigger("data_failed");
        }).bind(this));
      };
      AnimationItem.prototype.loadSegments = function() {
        var segments = this.animationData.segments;
        if (!segments) {
          this.timeCompleted = this.totalFrames;
        }
        this.loadNextSegment();
      };
      AnimationItem.prototype.imagesLoaded = function() {
        this.trigger("loaded_images");
        this.checkLoaded();
      };
      AnimationItem.prototype.preloadImages = function() {
        this.imagePreloader.setAssetsPath(this.assetsPath);
        this.imagePreloader.setPath(this.path);
        this.imagePreloader.loadAssets(this.animationData.assets, this.imagesLoaded.bind(this));
      };
      AnimationItem.prototype.configAnimation = function(animData) {
        if (!this.renderer) {
          return;
        }
        try {
          this.animationData = animData;
          if (this.initialSegment) {
            this.totalFrames = Math.floor(this.initialSegment[1] - this.initialSegment[0]);
            this.firstFrame = Math.round(this.initialSegment[0]);
          } else {
            this.totalFrames = Math.floor(this.animationData.op - this.animationData.ip);
            this.firstFrame = Math.round(this.animationData.ip);
          }
          this.renderer.configAnimation(animData);
          if (!animData.assets) {
            animData.assets = [];
          }
          this.assets = this.animationData.assets;
          this.frameRate = this.animationData.fr;
          this.frameMult = this.animationData.fr / 1e3;
          this.renderer.searchExtraCompositions(animData.assets);
          this.markers = markerParser(animData.markers || []);
          this.trigger("config_ready");
          this.preloadImages();
          this.loadSegments();
          this.updaFrameModifier();
          this.waitForFontsLoaded();
          if (this.isPaused) {
            this.audioController.pause();
          }
        } catch (error) {
          this.triggerConfigError(error);
        }
      };
      AnimationItem.prototype.waitForFontsLoaded = function() {
        if (!this.renderer) {
          return;
        }
        if (this.renderer.globalData.fontManager.isLoaded) {
          this.checkLoaded();
        } else {
          setTimeout(this.waitForFontsLoaded.bind(this), 20);
        }
      };
      AnimationItem.prototype.checkLoaded = function() {
        if (!this.isLoaded && this.renderer.globalData.fontManager.isLoaded && (this.imagePreloader.loadedImages() || this.renderer.rendererType !== "canvas") && this.imagePreloader.loadedFootages()) {
          this.isLoaded = true;
          var expressionsPlugin2 = getExpressionsPlugin();
          if (expressionsPlugin2) {
            expressionsPlugin2.initExpressions(this);
          }
          this.renderer.initItems();
          setTimeout((function() {
            this.trigger("DOMLoaded");
          }).bind(this), 0);
          this.gotoFrame();
          if (this.autoplay) {
            this.play();
          }
        }
      };
      AnimationItem.prototype.resize = function(width2, height2) {
        var _width = typeof width2 === "number" ? width2 : void 0;
        var _height = typeof height2 === "number" ? height2 : void 0;
        this.renderer.updateContainerSize(_width, _height);
      };
      AnimationItem.prototype.setSubframe = function(flag) {
        this.isSubframeEnabled = !!flag;
      };
      AnimationItem.prototype.gotoFrame = function() {
        this.currentFrame = this.isSubframeEnabled ? this.currentRawFrame : ~~this.currentRawFrame;
        if (this.timeCompleted !== this.totalFrames && this.currentFrame > this.timeCompleted) {
          this.currentFrame = this.timeCompleted;
        }
        this.trigger("enterFrame");
        this.renderFrame();
        this.trigger("drawnFrame");
      };
      AnimationItem.prototype.renderFrame = function() {
        if (this.isLoaded === false || !this.renderer) {
          return;
        }
        try {
          if (this.expressionsPlugin) {
            this.expressionsPlugin.resetFrame();
          }
          this.renderer.renderFrame(this.currentFrame + this.firstFrame);
        } catch (error) {
          this.triggerRenderFrameError(error);
        }
      };
      AnimationItem.prototype.play = function(name2) {
        if (name2 && this.name !== name2) {
          return;
        }
        if (this.isPaused === true) {
          this.isPaused = false;
          this.trigger("_play");
          this.audioController.resume();
          if (this._idle) {
            this._idle = false;
            this.trigger("_active");
          }
        }
      };
      AnimationItem.prototype.pause = function(name2) {
        if (name2 && this.name !== name2) {
          return;
        }
        if (this.isPaused === false) {
          this.isPaused = true;
          this.trigger("_pause");
          this._idle = true;
          this.trigger("_idle");
          this.audioController.pause();
        }
      };
      AnimationItem.prototype.togglePause = function(name2) {
        if (name2 && this.name !== name2) {
          return;
        }
        if (this.isPaused === true) {
          this.play();
        } else {
          this.pause();
        }
      };
      AnimationItem.prototype.stop = function(name2) {
        if (name2 && this.name !== name2) {
          return;
        }
        this.pause();
        this.playCount = 0;
        this._completedLoop = false;
        this.setCurrentRawFrameValue(0);
      };
      AnimationItem.prototype.getMarkerData = function(markerName) {
        var marker;
        for (var i6 = 0; i6 < this.markers.length; i6 += 1) {
          marker = this.markers[i6];
          if (marker.payload && marker.payload.name === markerName) {
            return marker;
          }
        }
        return null;
      };
      AnimationItem.prototype.goToAndStop = function(value2, isFrame, name2) {
        if (name2 && this.name !== name2) {
          return;
        }
        var numValue = Number(value2);
        if (isNaN(numValue)) {
          var marker = this.getMarkerData(value2);
          if (marker) {
            this.goToAndStop(marker.time, true);
          }
        } else if (isFrame) {
          this.setCurrentRawFrameValue(value2);
        } else {
          this.setCurrentRawFrameValue(value2 * this.frameModifier);
        }
        this.pause();
      };
      AnimationItem.prototype.goToAndPlay = function(value2, isFrame, name2) {
        if (name2 && this.name !== name2) {
          return;
        }
        var numValue = Number(value2);
        if (isNaN(numValue)) {
          var marker = this.getMarkerData(value2);
          if (marker) {
            if (!marker.duration) {
              this.goToAndStop(marker.time, true);
            } else {
              this.playSegments([marker.time, marker.time + marker.duration], true);
            }
          }
        } else {
          this.goToAndStop(numValue, isFrame, name2);
        }
        this.play();
      };
      AnimationItem.prototype.advanceTime = function(value2) {
        if (this.isPaused === true || this.isLoaded === false) {
          return;
        }
        var nextValue = this.currentRawFrame + value2 * this.frameModifier;
        var _isComplete = false;
        if (nextValue >= this.totalFrames - 1 && this.frameModifier > 0) {
          if (!this.loop || this.playCount === this.loop) {
            if (!this.checkSegments(nextValue > this.totalFrames ? nextValue % this.totalFrames : 0)) {
              _isComplete = true;
              nextValue = this.totalFrames - 1;
            }
          } else if (nextValue >= this.totalFrames) {
            this.playCount += 1;
            if (!this.checkSegments(nextValue % this.totalFrames)) {
              this.setCurrentRawFrameValue(nextValue % this.totalFrames);
              this._completedLoop = true;
              this.trigger("loopComplete");
            }
          } else {
            this.setCurrentRawFrameValue(nextValue);
          }
        } else if (nextValue < 0) {
          if (!this.checkSegments(nextValue % this.totalFrames)) {
            if (this.loop && !(this.playCount-- <= 0 && this.loop !== true)) {
              this.setCurrentRawFrameValue(this.totalFrames + nextValue % this.totalFrames);
              if (!this._completedLoop) {
                this._completedLoop = true;
              } else {
                this.trigger("loopComplete");
              }
            } else {
              _isComplete = true;
              nextValue = 0;
            }
          }
        } else {
          this.setCurrentRawFrameValue(nextValue);
        }
        if (_isComplete) {
          this.setCurrentRawFrameValue(nextValue);
          this.pause();
          this.trigger("complete");
        }
      };
      AnimationItem.prototype.adjustSegment = function(arr, offset) {
        this.playCount = 0;
        if (arr[1] < arr[0]) {
          if (this.frameModifier > 0) {
            if (this.playSpeed < 0) {
              this.setSpeed(-this.playSpeed);
            } else {
              this.setDirection(-1);
            }
          }
          this.totalFrames = arr[0] - arr[1];
          this.timeCompleted = this.totalFrames;
          this.firstFrame = arr[1];
          this.setCurrentRawFrameValue(this.totalFrames - 1e-3 - offset);
        } else if (arr[1] > arr[0]) {
          if (this.frameModifier < 0) {
            if (this.playSpeed < 0) {
              this.setSpeed(-this.playSpeed);
            } else {
              this.setDirection(1);
            }
          }
          this.totalFrames = arr[1] - arr[0];
          this.timeCompleted = this.totalFrames;
          this.firstFrame = arr[0];
          this.setCurrentRawFrameValue(1e-3 + offset);
        }
        this.trigger("segmentStart");
      };
      AnimationItem.prototype.setSegment = function(init, end) {
        var pendingFrame = -1;
        if (this.isPaused) {
          if (this.currentRawFrame + this.firstFrame < init) {
            pendingFrame = init;
          } else if (this.currentRawFrame + this.firstFrame > end) {
            pendingFrame = end - init;
          }
        }
        this.firstFrame = init;
        this.totalFrames = end - init;
        this.timeCompleted = this.totalFrames;
        if (pendingFrame !== -1) {
          this.goToAndStop(pendingFrame, true);
        }
      };
      AnimationItem.prototype.playSegments = function(arr, forceFlag) {
        if (forceFlag) {
          this.segments.length = 0;
        }
        if (_typeof$4(arr[0]) === "object") {
          var i6;
          var len = arr.length;
          for (i6 = 0; i6 < len; i6 += 1) {
            this.segments.push(arr[i6]);
          }
        } else {
          this.segments.push(arr);
        }
        if (this.segments.length && forceFlag) {
          this.adjustSegment(this.segments.shift(), 0);
        }
        if (this.isPaused) {
          this.play();
        }
      };
      AnimationItem.prototype.resetSegments = function(forceFlag) {
        this.segments.length = 0;
        this.segments.push([this.animationData.ip, this.animationData.op]);
        if (forceFlag) {
          this.checkSegments(0);
        }
      };
      AnimationItem.prototype.checkSegments = function(offset) {
        if (this.segments.length) {
          this.adjustSegment(this.segments.shift(), offset);
          return true;
        }
        return false;
      };
      AnimationItem.prototype.destroy = function(name2) {
        if (name2 && this.name !== name2 || !this.renderer) {
          return;
        }
        this.renderer.destroy();
        this.imagePreloader.destroy();
        this.trigger("destroy");
        this._cbs = null;
        this.onEnterFrame = null;
        this.onLoopComplete = null;
        this.onComplete = null;
        this.onSegmentStart = null;
        this.onDestroy = null;
        this.renderer = null;
        this.expressionsPlugin = null;
        this.imagePreloader = null;
        this.projectInterface = null;
      };
      AnimationItem.prototype.setCurrentRawFrameValue = function(value2) {
        this.currentRawFrame = value2;
        this.gotoFrame();
      };
      AnimationItem.prototype.setSpeed = function(val2) {
        this.playSpeed = val2;
        this.updaFrameModifier();
      };
      AnimationItem.prototype.setDirection = function(val2) {
        this.playDirection = val2 < 0 ? -1 : 1;
        this.updaFrameModifier();
      };
      AnimationItem.prototype.setLoop = function(isLooping) {
        this.loop = isLooping;
      };
      AnimationItem.prototype.setVolume = function(val2, name2) {
        if (name2 && this.name !== name2) {
          return;
        }
        this.audioController.setVolume(val2);
      };
      AnimationItem.prototype.getVolume = function() {
        return this.audioController.getVolume();
      };
      AnimationItem.prototype.mute = function(name2) {
        if (name2 && this.name !== name2) {
          return;
        }
        this.audioController.mute();
      };
      AnimationItem.prototype.unmute = function(name2) {
        if (name2 && this.name !== name2) {
          return;
        }
        this.audioController.unmute();
      };
      AnimationItem.prototype.updaFrameModifier = function() {
        this.frameModifier = this.frameMult * this.playSpeed * this.playDirection;
        this.audioController.setRate(this.playSpeed * this.playDirection);
      };
      AnimationItem.prototype.getPath = function() {
        return this.path;
      };
      AnimationItem.prototype.getAssetsPath = function(assetData) {
        var path = "";
        if (assetData.e) {
          path = assetData.p;
        } else if (this.assetsPath) {
          var imagePath = assetData.p;
          if (imagePath.indexOf("images/") !== -1) {
            imagePath = imagePath.split("/")[1];
          }
          path = this.assetsPath + imagePath;
        } else {
          path = this.path;
          path += assetData.u ? assetData.u : "";
          path += assetData.p;
        }
        return path;
      };
      AnimationItem.prototype.getAssetData = function(id) {
        var i6 = 0;
        var len = this.assets.length;
        while (i6 < len) {
          if (id === this.assets[i6].id) {
            return this.assets[i6];
          }
          i6 += 1;
        }
        return null;
      };
      AnimationItem.prototype.hide = function() {
        this.renderer.hide();
      };
      AnimationItem.prototype.show = function() {
        this.renderer.show();
      };
      AnimationItem.prototype.getDuration = function(isFrame) {
        return isFrame ? this.totalFrames : this.totalFrames / this.frameRate;
      };
      AnimationItem.prototype.updateDocumentData = function(path, documentData, index2) {
        try {
          var element = this.renderer.getElementByPath(path);
          element.updateDocumentData(documentData, index2);
        } catch (error) {
        }
      };
      AnimationItem.prototype.trigger = function(name2) {
        if (this._cbs && this._cbs[name2]) {
          switch (name2) {
            case "enterFrame":
              this.triggerEvent(name2, new BMEnterFrameEvent(name2, this.currentFrame, this.totalFrames, this.frameModifier));
              break;
            case "drawnFrame":
              this.drawnFrameEvent.currentTime = this.currentFrame;
              this.drawnFrameEvent.totalTime = this.totalFrames;
              this.drawnFrameEvent.direction = this.frameModifier;
              this.triggerEvent(name2, this.drawnFrameEvent);
              break;
            case "loopComplete":
              this.triggerEvent(name2, new BMCompleteLoopEvent(name2, this.loop, this.playCount, this.frameMult));
              break;
            case "complete":
              this.triggerEvent(name2, new BMCompleteEvent(name2, this.frameMult));
              break;
            case "segmentStart":
              this.triggerEvent(name2, new BMSegmentStartEvent(name2, this.firstFrame, this.totalFrames));
              break;
            case "destroy":
              this.triggerEvent(name2, new BMDestroyEvent(name2, this));
              break;
            default:
              this.triggerEvent(name2);
          }
        }
        if (name2 === "enterFrame" && this.onEnterFrame) {
          this.onEnterFrame.call(this, new BMEnterFrameEvent(name2, this.currentFrame, this.totalFrames, this.frameMult));
        }
        if (name2 === "loopComplete" && this.onLoopComplete) {
          this.onLoopComplete.call(this, new BMCompleteLoopEvent(name2, this.loop, this.playCount, this.frameMult));
        }
        if (name2 === "complete" && this.onComplete) {
          this.onComplete.call(this, new BMCompleteEvent(name2, this.frameMult));
        }
        if (name2 === "segmentStart" && this.onSegmentStart) {
          this.onSegmentStart.call(this, new BMSegmentStartEvent(name2, this.firstFrame, this.totalFrames));
        }
        if (name2 === "destroy" && this.onDestroy) {
          this.onDestroy.call(this, new BMDestroyEvent(name2, this));
        }
      };
      AnimationItem.prototype.triggerRenderFrameError = function(nativeError) {
        var error = new BMRenderFrameErrorEvent(nativeError, this.currentFrame);
        this.triggerEvent("error", error);
        if (this.onError) {
          this.onError.call(this, error);
        }
      };
      AnimationItem.prototype.triggerConfigError = function(nativeError) {
        var error = new BMConfigErrorEvent(nativeError, this.currentFrame);
        this.triggerEvent("error", error);
        if (this.onError) {
          this.onError.call(this, error);
        }
      };
      var animationManager = function() {
        var moduleOb = {};
        var registeredAnimations = [];
        var initTime = 0;
        var len = 0;
        var playingAnimationsNum = 0;
        var _stopped = true;
        var _isFrozen = false;
        function removeElement(ev) {
          var i6 = 0;
          var animItem = ev.target;
          while (i6 < len) {
            if (registeredAnimations[i6].animation === animItem) {
              registeredAnimations.splice(i6, 1);
              i6 -= 1;
              len -= 1;
              if (!animItem.isPaused) {
                subtractPlayingCount();
              }
            }
            i6 += 1;
          }
        }
        function registerAnimation(element, animationData2) {
          if (!element) {
            return null;
          }
          var i6 = 0;
          while (i6 < len) {
            if (registeredAnimations[i6].elem === element && registeredAnimations[i6].elem !== null) {
              return registeredAnimations[i6].animation;
            }
            i6 += 1;
          }
          var animItem = new AnimationItem();
          setupAnimation(animItem, element);
          animItem.setData(element, animationData2);
          return animItem;
        }
        function getRegisteredAnimations() {
          var i6;
          var lenAnims = registeredAnimations.length;
          var animations = [];
          for (i6 = 0; i6 < lenAnims; i6 += 1) {
            animations.push(registeredAnimations[i6].animation);
          }
          return animations;
        }
        function addPlayingCount() {
          playingAnimationsNum += 1;
          activate();
        }
        function subtractPlayingCount() {
          playingAnimationsNum -= 1;
        }
        function setupAnimation(animItem, element) {
          animItem.addEventListener("destroy", removeElement);
          animItem.addEventListener("_active", addPlayingCount);
          animItem.addEventListener("_idle", subtractPlayingCount);
          registeredAnimations.push({
            elem: element,
            animation: animItem
          });
          len += 1;
        }
        function loadAnimation2(params) {
          var animItem = new AnimationItem();
          setupAnimation(animItem, null);
          animItem.setParams(params);
          return animItem;
        }
        function setSpeed(val2, animation) {
          var i6;
          for (i6 = 0; i6 < len; i6 += 1) {
            registeredAnimations[i6].animation.setSpeed(val2, animation);
          }
        }
        function setDirection(val2, animation) {
          var i6;
          for (i6 = 0; i6 < len; i6 += 1) {
            registeredAnimations[i6].animation.setDirection(val2, animation);
          }
        }
        function play(animation) {
          var i6;
          for (i6 = 0; i6 < len; i6 += 1) {
            registeredAnimations[i6].animation.play(animation);
          }
        }
        function resume(nowTime) {
          var elapsedTime = nowTime - initTime;
          var i6;
          for (i6 = 0; i6 < len; i6 += 1) {
            registeredAnimations[i6].animation.advanceTime(elapsedTime);
          }
          initTime = nowTime;
          if (playingAnimationsNum && !_isFrozen) {
            window.requestAnimationFrame(resume);
          } else {
            _stopped = true;
          }
        }
        function first(nowTime) {
          initTime = nowTime;
          window.requestAnimationFrame(resume);
        }
        function pause(animation) {
          var i6;
          for (i6 = 0; i6 < len; i6 += 1) {
            registeredAnimations[i6].animation.pause(animation);
          }
        }
        function goToAndStop(value2, isFrame, animation) {
          var i6;
          for (i6 = 0; i6 < len; i6 += 1) {
            registeredAnimations[i6].animation.goToAndStop(value2, isFrame, animation);
          }
        }
        function stop2(animation) {
          var i6;
          for (i6 = 0; i6 < len; i6 += 1) {
            registeredAnimations[i6].animation.stop(animation);
          }
        }
        function togglePause(animation) {
          var i6;
          for (i6 = 0; i6 < len; i6 += 1) {
            registeredAnimations[i6].animation.togglePause(animation);
          }
        }
        function destroy(animation) {
          var i6;
          for (i6 = len - 1; i6 >= 0; i6 -= 1) {
            registeredAnimations[i6].animation.destroy(animation);
          }
        }
        function searchAnimations2(animationData2, standalone2, renderer2) {
          var animElements = [].concat([].slice.call(document.getElementsByClassName("lottie")), [].slice.call(document.getElementsByClassName("bodymovin")));
          var i6;
          var lenAnims = animElements.length;
          for (i6 = 0; i6 < lenAnims; i6 += 1) {
            if (renderer2) {
              animElements[i6].setAttribute("data-bm-type", renderer2);
            }
            registerAnimation(animElements[i6], animationData2);
          }
          if (standalone2 && lenAnims === 0) {
            if (!renderer2) {
              renderer2 = "svg";
            }
            var body = document.getElementsByTagName("body")[0];
            body.innerText = "";
            var div2 = createTag("div");
            div2.style.width = "100%";
            div2.style.height = "100%";
            div2.setAttribute("data-bm-type", renderer2);
            body.appendChild(div2);
            registerAnimation(div2, animationData2);
          }
        }
        function resize() {
          var i6;
          for (i6 = 0; i6 < len; i6 += 1) {
            registeredAnimations[i6].animation.resize();
          }
        }
        function activate() {
          if (!_isFrozen && playingAnimationsNum) {
            if (_stopped) {
              window.requestAnimationFrame(first);
              _stopped = false;
            }
          }
        }
        function freeze() {
          _isFrozen = true;
        }
        function unfreeze() {
          _isFrozen = false;
          activate();
        }
        function setVolume(val2, animation) {
          var i6;
          for (i6 = 0; i6 < len; i6 += 1) {
            registeredAnimations[i6].animation.setVolume(val2, animation);
          }
        }
        function mute(animation) {
          var i6;
          for (i6 = 0; i6 < len; i6 += 1) {
            registeredAnimations[i6].animation.mute(animation);
          }
        }
        function unmute(animation) {
          var i6;
          for (i6 = 0; i6 < len; i6 += 1) {
            registeredAnimations[i6].animation.unmute(animation);
          }
        }
        moduleOb.registerAnimation = registerAnimation;
        moduleOb.loadAnimation = loadAnimation2;
        moduleOb.setSpeed = setSpeed;
        moduleOb.setDirection = setDirection;
        moduleOb.play = play;
        moduleOb.pause = pause;
        moduleOb.stop = stop2;
        moduleOb.togglePause = togglePause;
        moduleOb.searchAnimations = searchAnimations2;
        moduleOb.resize = resize;
        moduleOb.goToAndStop = goToAndStop;
        moduleOb.destroy = destroy;
        moduleOb.freeze = freeze;
        moduleOb.unfreeze = unfreeze;
        moduleOb.setVolume = setVolume;
        moduleOb.mute = mute;
        moduleOb.unmute = unmute;
        moduleOb.getRegisteredAnimations = getRegisteredAnimations;
        return moduleOb;
      }();
      var BezierFactory = function() {
        var ob2 = {};
        ob2.getBezierEasing = getBezierEasing;
        var beziers = {};
        function getBezierEasing(a, b, c10, d30, nm) {
          var str = nm || ("bez_" + a + "_" + b + "_" + c10 + "_" + d30).replace(/\./g, "p");
          if (beziers[str]) {
            return beziers[str];
          }
          var bezEasing = new BezierEasing([a, b, c10, d30]);
          beziers[str] = bezEasing;
          return bezEasing;
        }
        var NEWTON_ITERATIONS = 4;
        var NEWTON_MIN_SLOPE = 1e-3;
        var SUBDIVISION_PRECISION = 1e-7;
        var SUBDIVISION_MAX_ITERATIONS = 10;
        var kSplineTableSize = 11;
        var kSampleStepSize = 1 / (kSplineTableSize - 1);
        var float32ArraySupported = typeof Float32Array === "function";
        function A(aA1, aA2) {
          return 1 - 3 * aA2 + 3 * aA1;
        }
        function B(aA1, aA2) {
          return 3 * aA2 - 6 * aA1;
        }
        function C(aA1) {
          return 3 * aA1;
        }
        function calcBezier(aT, aA1, aA2) {
          return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
        }
        function getSlope(aT, aA1, aA2) {
          return 3 * A(aA1, aA2) * aT * aT + 2 * B(aA1, aA2) * aT + C(aA1);
        }
        function binarySubdivide(aX, aA, aB, mX1, mX2) {
          var currentX, currentT, i6 = 0;
          do {
            currentT = aA + (aB - aA) / 2;
            currentX = calcBezier(currentT, mX1, mX2) - aX;
            if (currentX > 0) {
              aB = currentT;
            } else {
              aA = currentT;
            }
          } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i6 < SUBDIVISION_MAX_ITERATIONS);
          return currentT;
        }
        function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
          for (var i6 = 0; i6 < NEWTON_ITERATIONS; ++i6) {
            var currentSlope = getSlope(aGuessT, mX1, mX2);
            if (currentSlope === 0)
              return aGuessT;
            var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
            aGuessT -= currentX / currentSlope;
          }
          return aGuessT;
        }
        function BezierEasing(points) {
          this._p = points;
          this._mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
          this._precomputed = false;
          this.get = this.get.bind(this);
        }
        BezierEasing.prototype = {
          get: function get(x2) {
            var mX1 = this._p[0], mY1 = this._p[1], mX2 = this._p[2], mY2 = this._p[3];
            if (!this._precomputed)
              this._precompute();
            if (mX1 === mY1 && mX2 === mY2)
              return x2;
            if (x2 === 0)
              return 0;
            if (x2 === 1)
              return 1;
            return calcBezier(this._getTForX(x2), mY1, mY2);
          },
          // Private part
          _precompute: function _precompute() {
            var mX1 = this._p[0], mY1 = this._p[1], mX2 = this._p[2], mY2 = this._p[3];
            this._precomputed = true;
            if (mX1 !== mY1 || mX2 !== mY2) {
              this._calcSampleValues();
            }
          },
          _calcSampleValues: function _calcSampleValues() {
            var mX1 = this._p[0], mX2 = this._p[2];
            for (var i6 = 0; i6 < kSplineTableSize; ++i6) {
              this._mSampleValues[i6] = calcBezier(i6 * kSampleStepSize, mX1, mX2);
            }
          },
          /**
               * getTForX chose the fastest heuristic to determine the percentage value precisely from a given X projection.
               */
          _getTForX: function _getTForX(aX) {
            var mX1 = this._p[0], mX2 = this._p[2], mSampleValues = this._mSampleValues;
            var intervalStart = 0;
            var currentSample = 1;
            var lastSample = kSplineTableSize - 1;
            for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
              intervalStart += kSampleStepSize;
            }
            --currentSample;
            var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample]);
            var guessForT = intervalStart + dist * kSampleStepSize;
            var initialSlope = getSlope(guessForT, mX1, mX2);
            if (initialSlope >= NEWTON_MIN_SLOPE) {
              return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
            }
            if (initialSlope === 0) {
              return guessForT;
            }
            return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
          }
        };
        return ob2;
      }();
      var pooling = function() {
        function _double(arr) {
          return arr.concat(createSizedArray(arr.length));
        }
        return {
          "double": _double
        };
      }();
      var poolFactory = function() {
        return function(initialLength, _create, _release) {
          var _length = 0;
          var _maxLength = initialLength;
          var pool = createSizedArray(_maxLength);
          var ob2 = {
            newElement,
            release
          };
          function newElement() {
            var element;
            if (_length) {
              _length -= 1;
              element = pool[_length];
            } else {
              element = _create();
            }
            return element;
          }
          function release(element) {
            if (_length === _maxLength) {
              pool = pooling["double"](pool);
              _maxLength *= 2;
            }
            if (_release) {
              _release(element);
            }
            pool[_length] = element;
            _length += 1;
          }
          return ob2;
        };
      }();
      var bezierLengthPool = function() {
        function create() {
          return {
            addedLength: 0,
            percents: createTypedArray("float32", getDefaultCurveSegments()),
            lengths: createTypedArray("float32", getDefaultCurveSegments())
          };
        }
        return poolFactory(8, create);
      }();
      var segmentsLengthPool = function() {
        function create() {
          return {
            lengths: [],
            totalLength: 0
          };
        }
        function release(element) {
          var i6;
          var len = element.lengths.length;
          for (i6 = 0; i6 < len; i6 += 1) {
            bezierLengthPool.release(element.lengths[i6]);
          }
          element.lengths.length = 0;
        }
        return poolFactory(8, create, release);
      }();
      function bezFunction() {
        var math = Math;
        function pointOnLine2D(x1, y1, x2, y2, x3, y3) {
          var det1 = x1 * y2 + y1 * x3 + x2 * y3 - x3 * y2 - y3 * x1 - x2 * y1;
          return det1 > -1e-3 && det1 < 1e-3;
        }
        function pointOnLine3D(x1, y1, z1, x2, y2, z2, x3, y3, z3) {
          if (z1 === 0 && z2 === 0 && z3 === 0) {
            return pointOnLine2D(x1, y1, x2, y2, x3, y3);
          }
          var dist1 = math.sqrt(math.pow(x2 - x1, 2) + math.pow(y2 - y1, 2) + math.pow(z2 - z1, 2));
          var dist2 = math.sqrt(math.pow(x3 - x1, 2) + math.pow(y3 - y1, 2) + math.pow(z3 - z1, 2));
          var dist3 = math.sqrt(math.pow(x3 - x2, 2) + math.pow(y3 - y2, 2) + math.pow(z3 - z2, 2));
          var diffDist;
          if (dist1 > dist2) {
            if (dist1 > dist3) {
              diffDist = dist1 - dist2 - dist3;
            } else {
              diffDist = dist3 - dist2 - dist1;
            }
          } else if (dist3 > dist2) {
            diffDist = dist3 - dist2 - dist1;
          } else {
            diffDist = dist2 - dist1 - dist3;
          }
          return diffDist > -1e-4 && diffDist < 1e-4;
        }
        var getBezierLength = function() {
          return function(pt1, pt2, pt3, pt4) {
            var curveSegments = getDefaultCurveSegments();
            var k2;
            var i6;
            var len;
            var ptCoord;
            var perc;
            var addedLength = 0;
            var ptDistance;
            var point = [];
            var lastPoint = [];
            var lengthData = bezierLengthPool.newElement();
            len = pt3.length;
            for (k2 = 0; k2 < curveSegments; k2 += 1) {
              perc = k2 / (curveSegments - 1);
              ptDistance = 0;
              for (i6 = 0; i6 < len; i6 += 1) {
                ptCoord = bmPow(1 - perc, 3) * pt1[i6] + 3 * bmPow(1 - perc, 2) * perc * pt3[i6] + 3 * (1 - perc) * bmPow(perc, 2) * pt4[i6] + bmPow(perc, 3) * pt2[i6];
                point[i6] = ptCoord;
                if (lastPoint[i6] !== null) {
                  ptDistance += bmPow(point[i6] - lastPoint[i6], 2);
                }
                lastPoint[i6] = point[i6];
              }
              if (ptDistance) {
                ptDistance = bmSqrt(ptDistance);
                addedLength += ptDistance;
              }
              lengthData.percents[k2] = perc;
              lengthData.lengths[k2] = addedLength;
            }
            lengthData.addedLength = addedLength;
            return lengthData;
          };
        }();
        function getSegmentsLength(shapeData) {
          var segmentsLength = segmentsLengthPool.newElement();
          var closed = shapeData.c;
          var pathV = shapeData.v;
          var pathO = shapeData.o;
          var pathI = shapeData.i;
          var i6;
          var len = shapeData._length;
          var lengths = segmentsLength.lengths;
          var totalLength = 0;
          for (i6 = 0; i6 < len - 1; i6 += 1) {
            lengths[i6] = getBezierLength(pathV[i6], pathV[i6 + 1], pathO[i6], pathI[i6 + 1]);
            totalLength += lengths[i6].addedLength;
          }
          if (closed && len) {
            lengths[i6] = getBezierLength(pathV[i6], pathV[0], pathO[i6], pathI[0]);
            totalLength += lengths[i6].addedLength;
          }
          segmentsLength.totalLength = totalLength;
          return segmentsLength;
        }
        function BezierData(length2) {
          this.segmentLength = 0;
          this.points = new Array(length2);
        }
        function PointData(partial, point) {
          this.partialLength = partial;
          this.point = point;
        }
        var buildBezierData = function() {
          var storedData = {};
          return function(pt1, pt2, pt3, pt4) {
            var bezierName = (pt1[0] + "_" + pt1[1] + "_" + pt2[0] + "_" + pt2[1] + "_" + pt3[0] + "_" + pt3[1] + "_" + pt4[0] + "_" + pt4[1]).replace(/\./g, "p");
            if (!storedData[bezierName]) {
              var curveSegments = getDefaultCurveSegments();
              var k2;
              var i6;
              var len;
              var ptCoord;
              var perc;
              var addedLength = 0;
              var ptDistance;
              var point;
              var lastPoint = null;
              if (pt1.length === 2 && (pt1[0] !== pt2[0] || pt1[1] !== pt2[1]) && pointOnLine2D(pt1[0], pt1[1], pt2[0], pt2[1], pt1[0] + pt3[0], pt1[1] + pt3[1]) && pointOnLine2D(pt1[0], pt1[1], pt2[0], pt2[1], pt2[0] + pt4[0], pt2[1] + pt4[1])) {
                curveSegments = 2;
              }
              var bezierData = new BezierData(curveSegments);
              len = pt3.length;
              for (k2 = 0; k2 < curveSegments; k2 += 1) {
                point = createSizedArray(len);
                perc = k2 / (curveSegments - 1);
                ptDistance = 0;
                for (i6 = 0; i6 < len; i6 += 1) {
                  ptCoord = bmPow(1 - perc, 3) * pt1[i6] + 3 * bmPow(1 - perc, 2) * perc * (pt1[i6] + pt3[i6]) + 3 * (1 - perc) * bmPow(perc, 2) * (pt2[i6] + pt4[i6]) + bmPow(perc, 3) * pt2[i6];
                  point[i6] = ptCoord;
                  if (lastPoint !== null) {
                    ptDistance += bmPow(point[i6] - lastPoint[i6], 2);
                  }
                }
                ptDistance = bmSqrt(ptDistance);
                addedLength += ptDistance;
                bezierData.points[k2] = new PointData(ptDistance, point);
                lastPoint = point;
              }
              bezierData.segmentLength = addedLength;
              storedData[bezierName] = bezierData;
            }
            return storedData[bezierName];
          };
        }();
        function getDistancePerc(perc, bezierData) {
          var percents = bezierData.percents;
          var lengths = bezierData.lengths;
          var len = percents.length;
          var initPos = bmFloor((len - 1) * perc);
          var lengthPos = perc * bezierData.addedLength;
          var lPerc = 0;
          if (initPos === len - 1 || initPos === 0 || lengthPos === lengths[initPos]) {
            return percents[initPos];
          }
          var dir = lengths[initPos] > lengthPos ? -1 : 1;
          var flag = true;
          while (flag) {
            if (lengths[initPos] <= lengthPos && lengths[initPos + 1] > lengthPos) {
              lPerc = (lengthPos - lengths[initPos]) / (lengths[initPos + 1] - lengths[initPos]);
              flag = false;
            } else {
              initPos += dir;
            }
            if (initPos < 0 || initPos >= len - 1) {
              if (initPos === len - 1) {
                return percents[initPos];
              }
              flag = false;
            }
          }
          return percents[initPos] + (percents[initPos + 1] - percents[initPos]) * lPerc;
        }
        function getPointInSegment(pt1, pt2, pt3, pt4, percent, bezierData) {
          var t1 = getDistancePerc(percent, bezierData);
          var u1 = 1 - t1;
          var ptX = math.round((u1 * u1 * u1 * pt1[0] + (t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1) * pt3[0] + (t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1) * pt4[0] + t1 * t1 * t1 * pt2[0]) * 1e3) / 1e3;
          var ptY = math.round((u1 * u1 * u1 * pt1[1] + (t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1) * pt3[1] + (t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1) * pt4[1] + t1 * t1 * t1 * pt2[1]) * 1e3) / 1e3;
          return [ptX, ptY];
        }
        var bezierSegmentPoints = createTypedArray("float32", 8);
        function getNewSegment(pt1, pt2, pt3, pt4, startPerc, endPerc, bezierData) {
          if (startPerc < 0) {
            startPerc = 0;
          } else if (startPerc > 1) {
            startPerc = 1;
          }
          var t0 = getDistancePerc(startPerc, bezierData);
          endPerc = endPerc > 1 ? 1 : endPerc;
          var t1 = getDistancePerc(endPerc, bezierData);
          var i6;
          var len = pt1.length;
          var u0 = 1 - t0;
          var u1 = 1 - t1;
          var u0u0u0 = u0 * u0 * u0;
          var t0u0u0_3 = t0 * u0 * u0 * 3;
          var t0t0u0_3 = t0 * t0 * u0 * 3;
          var t0t0t0 = t0 * t0 * t0;
          var u0u0u1 = u0 * u0 * u1;
          var t0u0u1_3 = t0 * u0 * u1 + u0 * t0 * u1 + u0 * u0 * t1;
          var t0t0u1_3 = t0 * t0 * u1 + u0 * t0 * t1 + t0 * u0 * t1;
          var t0t0t1 = t0 * t0 * t1;
          var u0u1u1 = u0 * u1 * u1;
          var t0u1u1_3 = t0 * u1 * u1 + u0 * t1 * u1 + u0 * u1 * t1;
          var t0t1u1_3 = t0 * t1 * u1 + u0 * t1 * t1 + t0 * u1 * t1;
          var t0t1t1 = t0 * t1 * t1;
          var u1u1u1 = u1 * u1 * u1;
          var t1u1u1_3 = t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1;
          var t1t1u1_3 = t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1;
          var t1t1t1 = t1 * t1 * t1;
          for (i6 = 0; i6 < len; i6 += 1) {
            bezierSegmentPoints[i6 * 4] = math.round((u0u0u0 * pt1[i6] + t0u0u0_3 * pt3[i6] + t0t0u0_3 * pt4[i6] + t0t0t0 * pt2[i6]) * 1e3) / 1e3;
            bezierSegmentPoints[i6 * 4 + 1] = math.round((u0u0u1 * pt1[i6] + t0u0u1_3 * pt3[i6] + t0t0u1_3 * pt4[i6] + t0t0t1 * pt2[i6]) * 1e3) / 1e3;
            bezierSegmentPoints[i6 * 4 + 2] = math.round((u0u1u1 * pt1[i6] + t0u1u1_3 * pt3[i6] + t0t1u1_3 * pt4[i6] + t0t1t1 * pt2[i6]) * 1e3) / 1e3;
            bezierSegmentPoints[i6 * 4 + 3] = math.round((u1u1u1 * pt1[i6] + t1u1u1_3 * pt3[i6] + t1t1u1_3 * pt4[i6] + t1t1t1 * pt2[i6]) * 1e3) / 1e3;
          }
          return bezierSegmentPoints;
        }
        return {
          getSegmentsLength,
          getNewSegment,
          getPointInSegment,
          buildBezierData,
          pointOnLine2D,
          pointOnLine3D
        };
      }
      var bez = bezFunction();
      var initFrame = initialDefaultFrame;
      var mathAbs = Math.abs;
      function interpolateValue(frameNum, caching) {
        var offsetTime = this.offsetTime;
        var newValue;
        if (this.propType === "multidimensional") {
          newValue = createTypedArray("float32", this.pv.length);
        }
        var iterationIndex = caching.lastIndex;
        var i6 = iterationIndex;
        var len = this.keyframes.length - 1;
        var flag = true;
        var keyData;
        var nextKeyData;
        var keyframeMetadata;
        while (flag) {
          keyData = this.keyframes[i6];
          nextKeyData = this.keyframes[i6 + 1];
          if (i6 === len - 1 && frameNum >= nextKeyData.t - offsetTime) {
            if (keyData.h) {
              keyData = nextKeyData;
            }
            iterationIndex = 0;
            break;
          }
          if (nextKeyData.t - offsetTime > frameNum) {
            iterationIndex = i6;
            break;
          }
          if (i6 < len - 1) {
            i6 += 1;
          } else {
            iterationIndex = 0;
            flag = false;
          }
        }
        keyframeMetadata = this.keyframesMetadata[i6] || {};
        var k2;
        var kLen;
        var perc;
        var jLen;
        var j;
        var fnc;
        var nextKeyTime = nextKeyData.t - offsetTime;
        var keyTime = keyData.t - offsetTime;
        var endValue;
        if (keyData.to) {
          if (!keyframeMetadata.bezierData) {
            keyframeMetadata.bezierData = bez.buildBezierData(keyData.s, nextKeyData.s || keyData.e, keyData.to, keyData.ti);
          }
          var bezierData = keyframeMetadata.bezierData;
          if (frameNum >= nextKeyTime || frameNum < keyTime) {
            var ind = frameNum >= nextKeyTime ? bezierData.points.length - 1 : 0;
            kLen = bezierData.points[ind].point.length;
            for (k2 = 0; k2 < kLen; k2 += 1) {
              newValue[k2] = bezierData.points[ind].point[k2];
            }
          } else {
            if (keyframeMetadata.__fnct) {
              fnc = keyframeMetadata.__fnct;
            } else {
              fnc = BezierFactory.getBezierEasing(keyData.o.x, keyData.o.y, keyData.i.x, keyData.i.y, keyData.n).get;
              keyframeMetadata.__fnct = fnc;
            }
            perc = fnc((frameNum - keyTime) / (nextKeyTime - keyTime));
            var distanceInLine = bezierData.segmentLength * perc;
            var segmentPerc;
            var addedLength = caching.lastFrame < frameNum && caching._lastKeyframeIndex === i6 ? caching._lastAddedLength : 0;
            j = caching.lastFrame < frameNum && caching._lastKeyframeIndex === i6 ? caching._lastPoint : 0;
            flag = true;
            jLen = bezierData.points.length;
            while (flag) {
              addedLength += bezierData.points[j].partialLength;
              if (distanceInLine === 0 || perc === 0 || j === bezierData.points.length - 1) {
                kLen = bezierData.points[j].point.length;
                for (k2 = 0; k2 < kLen; k2 += 1) {
                  newValue[k2] = bezierData.points[j].point[k2];
                }
                break;
              } else if (distanceInLine >= addedLength && distanceInLine < addedLength + bezierData.points[j + 1].partialLength) {
                segmentPerc = (distanceInLine - addedLength) / bezierData.points[j + 1].partialLength;
                kLen = bezierData.points[j].point.length;
                for (k2 = 0; k2 < kLen; k2 += 1) {
                  newValue[k2] = bezierData.points[j].point[k2] + (bezierData.points[j + 1].point[k2] - bezierData.points[j].point[k2]) * segmentPerc;
                }
                break;
              }
              if (j < jLen - 1) {
                j += 1;
              } else {
                flag = false;
              }
            }
            caching._lastPoint = j;
            caching._lastAddedLength = addedLength - bezierData.points[j].partialLength;
            caching._lastKeyframeIndex = i6;
          }
        } else {
          var outX;
          var outY;
          var inX;
          var inY;
          var keyValue;
          len = keyData.s.length;
          endValue = nextKeyData.s || keyData.e;
          if (this.sh && keyData.h !== 1) {
            if (frameNum >= nextKeyTime) {
              newValue[0] = endValue[0];
              newValue[1] = endValue[1];
              newValue[2] = endValue[2];
            } else if (frameNum <= keyTime) {
              newValue[0] = keyData.s[0];
              newValue[1] = keyData.s[1];
              newValue[2] = keyData.s[2];
            } else {
              var quatStart = createQuaternion(keyData.s);
              var quatEnd = createQuaternion(endValue);
              var time2 = (frameNum - keyTime) / (nextKeyTime - keyTime);
              quaternionToEuler(newValue, slerp(quatStart, quatEnd, time2));
            }
          } else {
            for (i6 = 0; i6 < len; i6 += 1) {
              if (keyData.h !== 1) {
                if (frameNum >= nextKeyTime) {
                  perc = 1;
                } else if (frameNum < keyTime) {
                  perc = 0;
                } else {
                  if (keyData.o.x.constructor === Array) {
                    if (!keyframeMetadata.__fnct) {
                      keyframeMetadata.__fnct = [];
                    }
                    if (!keyframeMetadata.__fnct[i6]) {
                      outX = keyData.o.x[i6] === void 0 ? keyData.o.x[0] : keyData.o.x[i6];
                      outY = keyData.o.y[i6] === void 0 ? keyData.o.y[0] : keyData.o.y[i6];
                      inX = keyData.i.x[i6] === void 0 ? keyData.i.x[0] : keyData.i.x[i6];
                      inY = keyData.i.y[i6] === void 0 ? keyData.i.y[0] : keyData.i.y[i6];
                      fnc = BezierFactory.getBezierEasing(outX, outY, inX, inY).get;
                      keyframeMetadata.__fnct[i6] = fnc;
                    } else {
                      fnc = keyframeMetadata.__fnct[i6];
                    }
                  } else if (!keyframeMetadata.__fnct) {
                    outX = keyData.o.x;
                    outY = keyData.o.y;
                    inX = keyData.i.x;
                    inY = keyData.i.y;
                    fnc = BezierFactory.getBezierEasing(outX, outY, inX, inY).get;
                    keyData.keyframeMetadata = fnc;
                  } else {
                    fnc = keyframeMetadata.__fnct;
                  }
                  perc = fnc((frameNum - keyTime) / (nextKeyTime - keyTime));
                }
              }
              endValue = nextKeyData.s || keyData.e;
              keyValue = keyData.h === 1 ? keyData.s[i6] : keyData.s[i6] + (endValue[i6] - keyData.s[i6]) * perc;
              if (this.propType === "multidimensional") {
                newValue[i6] = keyValue;
              } else {
                newValue = keyValue;
              }
            }
          }
        }
        caching.lastIndex = iterationIndex;
        return newValue;
      }
      function slerp(a, b, t) {
        var out = [];
        var ax = a[0];
        var ay = a[1];
        var az = a[2];
        var aw = a[3];
        var bx = b[0];
        var by = b[1];
        var bz = b[2];
        var bw = b[3];
        var omega;
        var cosom;
        var sinom;
        var scale0;
        var scale1;
        cosom = ax * bx + ay * by + az * bz + aw * bw;
        if (cosom < 0) {
          cosom = -cosom;
          bx = -bx;
          by = -by;
          bz = -bz;
          bw = -bw;
        }
        if (1 - cosom > 1e-6) {
          omega = Math.acos(cosom);
          sinom = Math.sin(omega);
          scale0 = Math.sin((1 - t) * omega) / sinom;
          scale1 = Math.sin(t * omega) / sinom;
        } else {
          scale0 = 1 - t;
          scale1 = t;
        }
        out[0] = scale0 * ax + scale1 * bx;
        out[1] = scale0 * ay + scale1 * by;
        out[2] = scale0 * az + scale1 * bz;
        out[3] = scale0 * aw + scale1 * bw;
        return out;
      }
      function quaternionToEuler(out, quat) {
        var qx = quat[0];
        var qy = quat[1];
        var qz = quat[2];
        var qw = quat[3];
        var heading = Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy * qy - 2 * qz * qz);
        var attitude = Math.asin(2 * qx * qy + 2 * qz * qw);
        var bank = Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx * qx - 2 * qz * qz);
        out[0] = heading / degToRads;
        out[1] = attitude / degToRads;
        out[2] = bank / degToRads;
      }
      function createQuaternion(values2) {
        var heading = values2[0] * degToRads;
        var attitude = values2[1] * degToRads;
        var bank = values2[2] * degToRads;
        var c12 = Math.cos(heading / 2);
        var c23 = Math.cos(attitude / 2);
        var c33 = Math.cos(bank / 2);
        var s1 = Math.sin(heading / 2);
        var s22 = Math.sin(attitude / 2);
        var s32 = Math.sin(bank / 2);
        var w = c12 * c23 * c33 - s1 * s22 * s32;
        var x2 = s1 * s22 * c33 + c12 * c23 * s32;
        var y = s1 * c23 * c33 + c12 * s22 * s32;
        var z = c12 * s22 * c33 - s1 * c23 * s32;
        return [x2, y, z, w];
      }
      function getValueAtCurrentTime() {
        var frameNum = this.comp.renderedFrame - this.offsetTime;
        var initTime = this.keyframes[0].t - this.offsetTime;
        var endTime = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;
        if (!(frameNum === this._caching.lastFrame || this._caching.lastFrame !== initFrame && (this._caching.lastFrame >= endTime && frameNum >= endTime || this._caching.lastFrame < initTime && frameNum < initTime))) {
          if (this._caching.lastFrame >= frameNum) {
            this._caching._lastKeyframeIndex = -1;
            this._caching.lastIndex = 0;
          }
          var renderResult = this.interpolateValue(frameNum, this._caching);
          this.pv = renderResult;
        }
        this._caching.lastFrame = frameNum;
        return this.pv;
      }
      function setVValue(val2) {
        var multipliedValue;
        if (this.propType === "unidimensional") {
          multipliedValue = val2 * this.mult;
          if (mathAbs(this.v - multipliedValue) > 1e-5) {
            this.v = multipliedValue;
            this._mdf = true;
          }
        } else {
          var i6 = 0;
          var len = this.v.length;
          while (i6 < len) {
            multipliedValue = val2[i6] * this.mult;
            if (mathAbs(this.v[i6] - multipliedValue) > 1e-5) {
              this.v[i6] = multipliedValue;
              this._mdf = true;
            }
            i6 += 1;
          }
        }
      }
      function processEffectsSequence() {
        if (this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) {
          return;
        }
        if (this.lock) {
          this.setVValue(this.pv);
          return;
        }
        this.lock = true;
        this._mdf = this._isFirstFrame;
        var i6;
        var len = this.effectsSequence.length;
        var finalValue = this.kf ? this.pv : this.data.k;
        for (i6 = 0; i6 < len; i6 += 1) {
          finalValue = this.effectsSequence[i6](finalValue);
        }
        this.setVValue(finalValue);
        this._isFirstFrame = false;
        this.lock = false;
        this.frameId = this.elem.globalData.frameId;
      }
      function addEffect(effectFunction) {
        this.effectsSequence.push(effectFunction);
        this.container.addDynamicProperty(this);
      }
      function ValueProperty(elem2, data2, mult, container) {
        this.propType = "unidimensional";
        this.mult = mult || 1;
        this.data = data2;
        this.v = mult ? data2.k * mult : data2.k;
        this.pv = data2.k;
        this._mdf = false;
        this.elem = elem2;
        this.container = container;
        this.comp = elem2.comp;
        this.k = false;
        this.kf = false;
        this.vel = 0;
        this.effectsSequence = [];
        this._isFirstFrame = true;
        this.getValue = processEffectsSequence;
        this.setVValue = setVValue;
        this.addEffect = addEffect;
      }
      function MultiDimensionalProperty(elem2, data2, mult, container) {
        this.propType = "multidimensional";
        this.mult = mult || 1;
        this.data = data2;
        this._mdf = false;
        this.elem = elem2;
        this.container = container;
        this.comp = elem2.comp;
        this.k = false;
        this.kf = false;
        this.frameId = -1;
        var i6;
        var len = data2.k.length;
        this.v = createTypedArray("float32", len);
        this.pv = createTypedArray("float32", len);
        this.vel = createTypedArray("float32", len);
        for (i6 = 0; i6 < len; i6 += 1) {
          this.v[i6] = data2.k[i6] * this.mult;
          this.pv[i6] = data2.k[i6];
        }
        this._isFirstFrame = true;
        this.effectsSequence = [];
        this.getValue = processEffectsSequence;
        this.setVValue = setVValue;
        this.addEffect = addEffect;
      }
      function KeyframedValueProperty(elem2, data2, mult, container) {
        this.propType = "unidimensional";
        this.keyframes = data2.k;
        this.keyframesMetadata = [];
        this.offsetTime = elem2.data.st;
        this.frameId = -1;
        this._caching = {
          lastFrame: initFrame,
          lastIndex: 0,
          value: 0,
          _lastKeyframeIndex: -1
        };
        this.k = true;
        this.kf = true;
        this.data = data2;
        this.mult = mult || 1;
        this.elem = elem2;
        this.container = container;
        this.comp = elem2.comp;
        this.v = initFrame;
        this.pv = initFrame;
        this._isFirstFrame = true;
        this.getValue = processEffectsSequence;
        this.setVValue = setVValue;
        this.interpolateValue = interpolateValue;
        this.effectsSequence = [getValueAtCurrentTime.bind(this)];
        this.addEffect = addEffect;
      }
      function KeyframedMultidimensionalProperty(elem2, data2, mult, container) {
        this.propType = "multidimensional";
        var i6;
        var len = data2.k.length;
        var s8;
        var e2;
        var to2;
        var ti;
        for (i6 = 0; i6 < len - 1; i6 += 1) {
          if (data2.k[i6].to && data2.k[i6].s && data2.k[i6 + 1] && data2.k[i6 + 1].s) {
            s8 = data2.k[i6].s;
            e2 = data2.k[i6 + 1].s;
            to2 = data2.k[i6].to;
            ti = data2.k[i6].ti;
            if (s8.length === 2 && !(s8[0] === e2[0] && s8[1] === e2[1]) && bez.pointOnLine2D(s8[0], s8[1], e2[0], e2[1], s8[0] + to2[0], s8[1] + to2[1]) && bez.pointOnLine2D(s8[0], s8[1], e2[0], e2[1], e2[0] + ti[0], e2[1] + ti[1]) || s8.length === 3 && !(s8[0] === e2[0] && s8[1] === e2[1] && s8[2] === e2[2]) && bez.pointOnLine3D(s8[0], s8[1], s8[2], e2[0], e2[1], e2[2], s8[0] + to2[0], s8[1] + to2[1], s8[2] + to2[2]) && bez.pointOnLine3D(s8[0], s8[1], s8[2], e2[0], e2[1], e2[2], e2[0] + ti[0], e2[1] + ti[1], e2[2] + ti[2])) {
              data2.k[i6].to = null;
              data2.k[i6].ti = null;
            }
            if (s8[0] === e2[0] && s8[1] === e2[1] && to2[0] === 0 && to2[1] === 0 && ti[0] === 0 && ti[1] === 0) {
              if (s8.length === 2 || s8[2] === e2[2] && to2[2] === 0 && ti[2] === 0) {
                data2.k[i6].to = null;
                data2.k[i6].ti = null;
              }
            }
          }
        }
        this.effectsSequence = [getValueAtCurrentTime.bind(this)];
        this.data = data2;
        this.keyframes = data2.k;
        this.keyframesMetadata = [];
        this.offsetTime = elem2.data.st;
        this.k = true;
        this.kf = true;
        this._isFirstFrame = true;
        this.mult = mult || 1;
        this.elem = elem2;
        this.container = container;
        this.comp = elem2.comp;
        this.getValue = processEffectsSequence;
        this.setVValue = setVValue;
        this.interpolateValue = interpolateValue;
        this.frameId = -1;
        var arrLen = data2.k[0].s.length;
        this.v = createTypedArray("float32", arrLen);
        this.pv = createTypedArray("float32", arrLen);
        for (i6 = 0; i6 < arrLen; i6 += 1) {
          this.v[i6] = initFrame;
          this.pv[i6] = initFrame;
        }
        this._caching = {
          lastFrame: initFrame,
          lastIndex: 0,
          value: createTypedArray("float32", arrLen)
        };
        this.addEffect = addEffect;
      }
      var PropertyFactory = function() {
        function getProp2(elem2, data2, type4, mult, container) {
          if (data2.sid) {
            data2 = elem2.globalData.slotManager.getProp(data2);
          }
          var p10;
          if (!data2.k.length) {
            p10 = new ValueProperty(elem2, data2, mult, container);
          } else if (typeof data2.k[0] === "number") {
            p10 = new MultiDimensionalProperty(elem2, data2, mult, container);
          } else {
            switch (type4) {
              case 0:
                p10 = new KeyframedValueProperty(elem2, data2, mult, container);
                break;
              case 1:
                p10 = new KeyframedMultidimensionalProperty(elem2, data2, mult, container);
                break;
              default:
                break;
            }
          }
          if (p10.effectsSequence.length) {
            container.addDynamicProperty(p10);
          }
          return p10;
        }
        var ob2 = {
          getProp: getProp2
        };
        return ob2;
      }();
      function DynamicPropertyContainer() {
      }
      DynamicPropertyContainer.prototype = {
        addDynamicProperty: function addDynamicProperty(prop) {
          if (this.dynamicProperties.indexOf(prop) === -1) {
            this.dynamicProperties.push(prop);
            this.container.addDynamicProperty(this);
            this._isAnimated = true;
          }
        },
        iterateDynamicProperties: function iterateDynamicProperties() {
          this._mdf = false;
          var i6;
          var len = this.dynamicProperties.length;
          for (i6 = 0; i6 < len; i6 += 1) {
            this.dynamicProperties[i6].getValue();
            if (this.dynamicProperties[i6]._mdf) {
              this._mdf = true;
            }
          }
        },
        initDynamicPropertyContainer: function initDynamicPropertyContainer(container) {
          this.container = container;
          this.dynamicProperties = [];
          this._mdf = false;
          this._isAnimated = false;
        }
      };
      var pointPool = function() {
        function create() {
          return createTypedArray("float32", 2);
        }
        return poolFactory(8, create);
      }();
      function ShapePath() {
        this.c = false;
        this._length = 0;
        this._maxLength = 8;
        this.v = createSizedArray(this._maxLength);
        this.o = createSizedArray(this._maxLength);
        this.i = createSizedArray(this._maxLength);
      }
      ShapePath.prototype.setPathData = function(closed, len) {
        this.c = closed;
        this.setLength(len);
        var i6 = 0;
        while (i6 < len) {
          this.v[i6] = pointPool.newElement();
          this.o[i6] = pointPool.newElement();
          this.i[i6] = pointPool.newElement();
          i6 += 1;
        }
      };
      ShapePath.prototype.setLength = function(len) {
        while (this._maxLength < len) {
          this.doubleArrayLength();
        }
        this._length = len;
      };
      ShapePath.prototype.doubleArrayLength = function() {
        this.v = this.v.concat(createSizedArray(this._maxLength));
        this.i = this.i.concat(createSizedArray(this._maxLength));
        this.o = this.o.concat(createSizedArray(this._maxLength));
        this._maxLength *= 2;
      };
      ShapePath.prototype.setXYAt = function(x2, y, type4, pos, replace) {
        var arr;
        this._length = Math.max(this._length, pos + 1);
        if (this._length >= this._maxLength) {
          this.doubleArrayLength();
        }
        switch (type4) {
          case "v":
            arr = this.v;
            break;
          case "i":
            arr = this.i;
            break;
          case "o":
            arr = this.o;
            break;
          default:
            arr = [];
            break;
        }
        if (!arr[pos] || arr[pos] && !replace) {
          arr[pos] = pointPool.newElement();
        }
        arr[pos][0] = x2;
        arr[pos][1] = y;
      };
      ShapePath.prototype.setTripleAt = function(vX, vY, oX, oY, iX, iY, pos, replace) {
        this.setXYAt(vX, vY, "v", pos, replace);
        this.setXYAt(oX, oY, "o", pos, replace);
        this.setXYAt(iX, iY, "i", pos, replace);
      };
      ShapePath.prototype.reverse = function() {
        var newPath = new ShapePath();
        newPath.setPathData(this.c, this._length);
        var vertices = this.v;
        var outPoints = this.o;
        var inPoints = this.i;
        var init = 0;
        if (this.c) {
          newPath.setTripleAt(vertices[0][0], vertices[0][1], inPoints[0][0], inPoints[0][1], outPoints[0][0], outPoints[0][1], 0, false);
          init = 1;
        }
        var cnt = this._length - 1;
        var len = this._length;
        var i6;
        for (i6 = init; i6 < len; i6 += 1) {
          newPath.setTripleAt(vertices[cnt][0], vertices[cnt][1], inPoints[cnt][0], inPoints[cnt][1], outPoints[cnt][0], outPoints[cnt][1], i6, false);
          cnt -= 1;
        }
        return newPath;
      };
      ShapePath.prototype.length = function() {
        return this._length;
      };
      var shapePool = function() {
        function create() {
          return new ShapePath();
        }
        function release(shapePath) {
          var len = shapePath._length;
          var i6;
          for (i6 = 0; i6 < len; i6 += 1) {
            pointPool.release(shapePath.v[i6]);
            pointPool.release(shapePath.i[i6]);
            pointPool.release(shapePath.o[i6]);
            shapePath.v[i6] = null;
            shapePath.i[i6] = null;
            shapePath.o[i6] = null;
          }
          shapePath._length = 0;
          shapePath.c = false;
        }
        function clone2(shape) {
          var cloned = factory.newElement();
          var i6;
          var len = shape._length === void 0 ? shape.v.length : shape._length;
          cloned.setLength(len);
          cloned.c = shape.c;
          for (i6 = 0; i6 < len; i6 += 1) {
            cloned.setTripleAt(shape.v[i6][0], shape.v[i6][1], shape.o[i6][0], shape.o[i6][1], shape.i[i6][0], shape.i[i6][1], i6);
          }
          return cloned;
        }
        var factory = poolFactory(4, create, release);
        factory.clone = clone2;
        return factory;
      }();
      function ShapeCollection() {
        this._length = 0;
        this._maxLength = 4;
        this.shapes = createSizedArray(this._maxLength);
      }
      ShapeCollection.prototype.addShape = function(shapeData) {
        if (this._length === this._maxLength) {
          this.shapes = this.shapes.concat(createSizedArray(this._maxLength));
          this._maxLength *= 2;
        }
        this.shapes[this._length] = shapeData;
        this._length += 1;
      };
      ShapeCollection.prototype.releaseShapes = function() {
        var i6;
        for (i6 = 0; i6 < this._length; i6 += 1) {
          shapePool.release(this.shapes[i6]);
        }
        this._length = 0;
      };
      var shapeCollectionPool = function() {
        var ob2 = {
          newShapeCollection,
          release
        };
        var _length = 0;
        var _maxLength = 4;
        var pool = createSizedArray(_maxLength);
        function newShapeCollection() {
          var shapeCollection;
          if (_length) {
            _length -= 1;
            shapeCollection = pool[_length];
          } else {
            shapeCollection = new ShapeCollection();
          }
          return shapeCollection;
        }
        function release(shapeCollection) {
          var i6;
          var len = shapeCollection._length;
          for (i6 = 0; i6 < len; i6 += 1) {
            shapePool.release(shapeCollection.shapes[i6]);
          }
          shapeCollection._length = 0;
          if (_length === _maxLength) {
            pool = pooling["double"](pool);
            _maxLength *= 2;
          }
          pool[_length] = shapeCollection;
          _length += 1;
        }
        return ob2;
      }();
      var ShapePropertyFactory = function() {
        var initFrame2 = -999999;
        function interpolateShape(frameNum, previousValue, caching) {
          var iterationIndex = caching.lastIndex;
          var keyPropS;
          var keyPropE;
          var isHold;
          var j;
          var k2;
          var jLen;
          var kLen;
          var perc;
          var vertexValue;
          var kf = this.keyframes;
          if (frameNum < kf[0].t - this.offsetTime) {
            keyPropS = kf[0].s[0];
            isHold = true;
            iterationIndex = 0;
          } else if (frameNum >= kf[kf.length - 1].t - this.offsetTime) {
            keyPropS = kf[kf.length - 1].s ? kf[kf.length - 1].s[0] : kf[kf.length - 2].e[0];
            isHold = true;
          } else {
            var i6 = iterationIndex;
            var len = kf.length - 1;
            var flag = true;
            var keyData;
            var nextKeyData;
            var keyframeMetadata;
            while (flag) {
              keyData = kf[i6];
              nextKeyData = kf[i6 + 1];
              if (nextKeyData.t - this.offsetTime > frameNum) {
                break;
              }
              if (i6 < len - 1) {
                i6 += 1;
              } else {
                flag = false;
              }
            }
            keyframeMetadata = this.keyframesMetadata[i6] || {};
            isHold = keyData.h === 1;
            iterationIndex = i6;
            if (!isHold) {
              if (frameNum >= nextKeyData.t - this.offsetTime) {
                perc = 1;
              } else if (frameNum < keyData.t - this.offsetTime) {
                perc = 0;
              } else {
                var fnc;
                if (keyframeMetadata.__fnct) {
                  fnc = keyframeMetadata.__fnct;
                } else {
                  fnc = BezierFactory.getBezierEasing(keyData.o.x, keyData.o.y, keyData.i.x, keyData.i.y).get;
                  keyframeMetadata.__fnct = fnc;
                }
                perc = fnc((frameNum - (keyData.t - this.offsetTime)) / (nextKeyData.t - this.offsetTime - (keyData.t - this.offsetTime)));
              }
              keyPropE = nextKeyData.s ? nextKeyData.s[0] : keyData.e[0];
            }
            keyPropS = keyData.s[0];
          }
          jLen = previousValue._length;
          kLen = keyPropS.i[0].length;
          caching.lastIndex = iterationIndex;
          for (j = 0; j < jLen; j += 1) {
            for (k2 = 0; k2 < kLen; k2 += 1) {
              vertexValue = isHold ? keyPropS.i[j][k2] : keyPropS.i[j][k2] + (keyPropE.i[j][k2] - keyPropS.i[j][k2]) * perc;
              previousValue.i[j][k2] = vertexValue;
              vertexValue = isHold ? keyPropS.o[j][k2] : keyPropS.o[j][k2] + (keyPropE.o[j][k2] - keyPropS.o[j][k2]) * perc;
              previousValue.o[j][k2] = vertexValue;
              vertexValue = isHold ? keyPropS.v[j][k2] : keyPropS.v[j][k2] + (keyPropE.v[j][k2] - keyPropS.v[j][k2]) * perc;
              previousValue.v[j][k2] = vertexValue;
            }
          }
        }
        function interpolateShapeCurrentTime() {
          var frameNum = this.comp.renderedFrame - this.offsetTime;
          var initTime = this.keyframes[0].t - this.offsetTime;
          var endTime = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;
          var lastFrame = this._caching.lastFrame;
          if (!(lastFrame !== initFrame2 && (lastFrame < initTime && frameNum < initTime || lastFrame > endTime && frameNum > endTime))) {
            this._caching.lastIndex = lastFrame < frameNum ? this._caching.lastIndex : 0;
            this.interpolateShape(frameNum, this.pv, this._caching);
          }
          this._caching.lastFrame = frameNum;
          return this.pv;
        }
        function resetShape() {
          this.paths = this.localShapeCollection;
        }
        function shapesEqual(shape1, shape2) {
          if (shape1._length !== shape2._length || shape1.c !== shape2.c) {
            return false;
          }
          var i6;
          var len = shape1._length;
          for (i6 = 0; i6 < len; i6 += 1) {
            if (shape1.v[i6][0] !== shape2.v[i6][0] || shape1.v[i6][1] !== shape2.v[i6][1] || shape1.o[i6][0] !== shape2.o[i6][0] || shape1.o[i6][1] !== shape2.o[i6][1] || shape1.i[i6][0] !== shape2.i[i6][0] || shape1.i[i6][1] !== shape2.i[i6][1]) {
              return false;
            }
          }
          return true;
        }
        function setVValue2(newPath) {
          if (!shapesEqual(this.v, newPath)) {
            this.v = shapePool.clone(newPath);
            this.localShapeCollection.releaseShapes();
            this.localShapeCollection.addShape(this.v);
            this._mdf = true;
            this.paths = this.localShapeCollection;
          }
        }
        function processEffectsSequence2() {
          if (this.elem.globalData.frameId === this.frameId) {
            return;
          }
          if (!this.effectsSequence.length) {
            this._mdf = false;
            return;
          }
          if (this.lock) {
            this.setVValue(this.pv);
            return;
          }
          this.lock = true;
          this._mdf = false;
          var finalValue;
          if (this.kf) {
            finalValue = this.pv;
          } else if (this.data.ks) {
            finalValue = this.data.ks.k;
          } else {
            finalValue = this.data.pt.k;
          }
          var i6;
          var len = this.effectsSequence.length;
          for (i6 = 0; i6 < len; i6 += 1) {
            finalValue = this.effectsSequence[i6](finalValue);
          }
          this.setVValue(finalValue);
          this.lock = false;
          this.frameId = this.elem.globalData.frameId;
        }
        function ShapeProperty(elem2, data2, type4) {
          this.propType = "shape";
          this.comp = elem2.comp;
          this.container = elem2;
          this.elem = elem2;
          this.data = data2;
          this.k = false;
          this.kf = false;
          this._mdf = false;
          var pathData = type4 === 3 ? data2.pt.k : data2.ks.k;
          this.v = shapePool.clone(pathData);
          this.pv = shapePool.clone(this.v);
          this.localShapeCollection = shapeCollectionPool.newShapeCollection();
          this.paths = this.localShapeCollection;
          this.paths.addShape(this.v);
          this.reset = resetShape;
          this.effectsSequence = [];
        }
        function addEffect2(effectFunction) {
          this.effectsSequence.push(effectFunction);
          this.container.addDynamicProperty(this);
        }
        ShapeProperty.prototype.interpolateShape = interpolateShape;
        ShapeProperty.prototype.getValue = processEffectsSequence2;
        ShapeProperty.prototype.setVValue = setVValue2;
        ShapeProperty.prototype.addEffect = addEffect2;
        function KeyframedShapeProperty(elem2, data2, type4) {
          this.propType = "shape";
          this.comp = elem2.comp;
          this.elem = elem2;
          this.container = elem2;
          this.offsetTime = elem2.data.st;
          this.keyframes = type4 === 3 ? data2.pt.k : data2.ks.k;
          this.keyframesMetadata = [];
          this.k = true;
          this.kf = true;
          var len = this.keyframes[0].s[0].i.length;
          this.v = shapePool.newElement();
          this.v.setPathData(this.keyframes[0].s[0].c, len);
          this.pv = shapePool.clone(this.v);
          this.localShapeCollection = shapeCollectionPool.newShapeCollection();
          this.paths = this.localShapeCollection;
          this.paths.addShape(this.v);
          this.lastFrame = initFrame2;
          this.reset = resetShape;
          this._caching = {
            lastFrame: initFrame2,
            lastIndex: 0
          };
          this.effectsSequence = [interpolateShapeCurrentTime.bind(this)];
        }
        KeyframedShapeProperty.prototype.getValue = processEffectsSequence2;
        KeyframedShapeProperty.prototype.interpolateShape = interpolateShape;
        KeyframedShapeProperty.prototype.setVValue = setVValue2;
        KeyframedShapeProperty.prototype.addEffect = addEffect2;
        var EllShapeProperty = function() {
          var cPoint = roundCorner;
          function EllShapePropertyFactory(elem2, data2) {
            this.v = shapePool.newElement();
            this.v.setPathData(true, 4);
            this.localShapeCollection = shapeCollectionPool.newShapeCollection();
            this.paths = this.localShapeCollection;
            this.localShapeCollection.addShape(this.v);
            this.d = data2.d;
            this.elem = elem2;
            this.comp = elem2.comp;
            this.frameId = -1;
            this.initDynamicPropertyContainer(elem2);
            this.p = PropertyFactory.getProp(elem2, data2.p, 1, 0, this);
            this.s = PropertyFactory.getProp(elem2, data2.s, 1, 0, this);
            if (this.dynamicProperties.length) {
              this.k = true;
            } else {
              this.k = false;
              this.convertEllToPath();
            }
          }
          EllShapePropertyFactory.prototype = {
            reset: resetShape,
            getValue: function getValue2() {
              if (this.elem.globalData.frameId === this.frameId) {
                return;
              }
              this.frameId = this.elem.globalData.frameId;
              this.iterateDynamicProperties();
              if (this._mdf) {
                this.convertEllToPath();
              }
            },
            convertEllToPath: function convertEllToPath() {
              var p0 = this.p.v[0];
              var p1 = this.p.v[1];
              var s0 = this.s.v[0] / 2;
              var s1 = this.s.v[1] / 2;
              var _cw = this.d !== 3;
              var _v = this.v;
              _v.v[0][0] = p0;
              _v.v[0][1] = p1 - s1;
              _v.v[1][0] = _cw ? p0 + s0 : p0 - s0;
              _v.v[1][1] = p1;
              _v.v[2][0] = p0;
              _v.v[2][1] = p1 + s1;
              _v.v[3][0] = _cw ? p0 - s0 : p0 + s0;
              _v.v[3][1] = p1;
              _v.i[0][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
              _v.i[0][1] = p1 - s1;
              _v.i[1][0] = _cw ? p0 + s0 : p0 - s0;
              _v.i[1][1] = p1 - s1 * cPoint;
              _v.i[2][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
              _v.i[2][1] = p1 + s1;
              _v.i[3][0] = _cw ? p0 - s0 : p0 + s0;
              _v.i[3][1] = p1 + s1 * cPoint;
              _v.o[0][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
              _v.o[0][1] = p1 - s1;
              _v.o[1][0] = _cw ? p0 + s0 : p0 - s0;
              _v.o[1][1] = p1 + s1 * cPoint;
              _v.o[2][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
              _v.o[2][1] = p1 + s1;
              _v.o[3][0] = _cw ? p0 - s0 : p0 + s0;
              _v.o[3][1] = p1 - s1 * cPoint;
            }
          };
          extendPrototype([DynamicPropertyContainer], EllShapePropertyFactory);
          return EllShapePropertyFactory;
        }();
        var StarShapeProperty = function() {
          function StarShapePropertyFactory(elem2, data2) {
            this.v = shapePool.newElement();
            this.v.setPathData(true, 0);
            this.elem = elem2;
            this.comp = elem2.comp;
            this.data = data2;
            this.frameId = -1;
            this.d = data2.d;
            this.initDynamicPropertyContainer(elem2);
            if (data2.sy === 1) {
              this.ir = PropertyFactory.getProp(elem2, data2.ir, 0, 0, this);
              this.is = PropertyFactory.getProp(elem2, data2.is, 0, 0.01, this);
              this.convertToPath = this.convertStarToPath;
            } else {
              this.convertToPath = this.convertPolygonToPath;
            }
            this.pt = PropertyFactory.getProp(elem2, data2.pt, 0, 0, this);
            this.p = PropertyFactory.getProp(elem2, data2.p, 1, 0, this);
            this.r = PropertyFactory.getProp(elem2, data2.r, 0, degToRads, this);
            this.or = PropertyFactory.getProp(elem2, data2.or, 0, 0, this);
            this.os = PropertyFactory.getProp(elem2, data2.os, 0, 0.01, this);
            this.localShapeCollection = shapeCollectionPool.newShapeCollection();
            this.localShapeCollection.addShape(this.v);
            this.paths = this.localShapeCollection;
            if (this.dynamicProperties.length) {
              this.k = true;
            } else {
              this.k = false;
              this.convertToPath();
            }
          }
          StarShapePropertyFactory.prototype = {
            reset: resetShape,
            getValue: function getValue2() {
              if (this.elem.globalData.frameId === this.frameId) {
                return;
              }
              this.frameId = this.elem.globalData.frameId;
              this.iterateDynamicProperties();
              if (this._mdf) {
                this.convertToPath();
              }
            },
            convertStarToPath: function convertStarToPath() {
              var numPts = Math.floor(this.pt.v) * 2;
              var angle = Math.PI * 2 / numPts;
              var longFlag = true;
              var longRad = this.or.v;
              var shortRad = this.ir.v;
              var longRound = this.os.v;
              var shortRound = this.is.v;
              var longPerimSegment = 2 * Math.PI * longRad / (numPts * 2);
              var shortPerimSegment = 2 * Math.PI * shortRad / (numPts * 2);
              var i6;
              var rad;
              var roundness;
              var perimSegment;
              var currentAng = -Math.PI / 2;
              currentAng += this.r.v;
              var dir = this.data.d === 3 ? -1 : 1;
              this.v._length = 0;
              for (i6 = 0; i6 < numPts; i6 += 1) {
                rad = longFlag ? longRad : shortRad;
                roundness = longFlag ? longRound : shortRound;
                perimSegment = longFlag ? longPerimSegment : shortPerimSegment;
                var x2 = rad * Math.cos(currentAng);
                var y = rad * Math.sin(currentAng);
                var ox = x2 === 0 && y === 0 ? 0 : y / Math.sqrt(x2 * x2 + y * y);
                var oy = x2 === 0 && y === 0 ? 0 : -x2 / Math.sqrt(x2 * x2 + y * y);
                x2 += +this.p.v[0];
                y += +this.p.v[1];
                this.v.setTripleAt(x2, y, x2 - ox * perimSegment * roundness * dir, y - oy * perimSegment * roundness * dir, x2 + ox * perimSegment * roundness * dir, y + oy * perimSegment * roundness * dir, i6, true);
                longFlag = !longFlag;
                currentAng += angle * dir;
              }
            },
            convertPolygonToPath: function convertPolygonToPath() {
              var numPts = Math.floor(this.pt.v);
              var angle = Math.PI * 2 / numPts;
              var rad = this.or.v;
              var roundness = this.os.v;
              var perimSegment = 2 * Math.PI * rad / (numPts * 4);
              var i6;
              var currentAng = -Math.PI * 0.5;
              var dir = this.data.d === 3 ? -1 : 1;
              currentAng += this.r.v;
              this.v._length = 0;
              for (i6 = 0; i6 < numPts; i6 += 1) {
                var x2 = rad * Math.cos(currentAng);
                var y = rad * Math.sin(currentAng);
                var ox = x2 === 0 && y === 0 ? 0 : y / Math.sqrt(x2 * x2 + y * y);
                var oy = x2 === 0 && y === 0 ? 0 : -x2 / Math.sqrt(x2 * x2 + y * y);
                x2 += +this.p.v[0];
                y += +this.p.v[1];
                this.v.setTripleAt(x2, y, x2 - ox * perimSegment * roundness * dir, y - oy * perimSegment * roundness * dir, x2 + ox * perimSegment * roundness * dir, y + oy * perimSegment * roundness * dir, i6, true);
                currentAng += angle * dir;
              }
              this.paths.length = 0;
              this.paths[0] = this.v;
            }
          };
          extendPrototype([DynamicPropertyContainer], StarShapePropertyFactory);
          return StarShapePropertyFactory;
        }();
        var RectShapeProperty = function() {
          function RectShapePropertyFactory(elem2, data2) {
            this.v = shapePool.newElement();
            this.v.c = true;
            this.localShapeCollection = shapeCollectionPool.newShapeCollection();
            this.localShapeCollection.addShape(this.v);
            this.paths = this.localShapeCollection;
            this.elem = elem2;
            this.comp = elem2.comp;
            this.frameId = -1;
            this.d = data2.d;
            this.initDynamicPropertyContainer(elem2);
            this.p = PropertyFactory.getProp(elem2, data2.p, 1, 0, this);
            this.s = PropertyFactory.getProp(elem2, data2.s, 1, 0, this);
            this.r = PropertyFactory.getProp(elem2, data2.r, 0, 0, this);
            if (this.dynamicProperties.length) {
              this.k = true;
            } else {
              this.k = false;
              this.convertRectToPath();
            }
          }
          RectShapePropertyFactory.prototype = {
            convertRectToPath: function convertRectToPath() {
              var p0 = this.p.v[0];
              var p1 = this.p.v[1];
              var v0 = this.s.v[0] / 2;
              var v1 = this.s.v[1] / 2;
              var round = bmMin(v0, v1, this.r.v);
              var cPoint = round * (1 - roundCorner);
              this.v._length = 0;
              if (this.d === 2 || this.d === 1) {
                this.v.setTripleAt(p0 + v0, p1 - v1 + round, p0 + v0, p1 - v1 + round, p0 + v0, p1 - v1 + cPoint, 0, true);
                this.v.setTripleAt(p0 + v0, p1 + v1 - round, p0 + v0, p1 + v1 - cPoint, p0 + v0, p1 + v1 - round, 1, true);
                if (round !== 0) {
                  this.v.setTripleAt(p0 + v0 - round, p1 + v1, p0 + v0 - round, p1 + v1, p0 + v0 - cPoint, p1 + v1, 2, true);
                  this.v.setTripleAt(p0 - v0 + round, p1 + v1, p0 - v0 + cPoint, p1 + v1, p0 - v0 + round, p1 + v1, 3, true);
                  this.v.setTripleAt(p0 - v0, p1 + v1 - round, p0 - v0, p1 + v1 - round, p0 - v0, p1 + v1 - cPoint, 4, true);
                  this.v.setTripleAt(p0 - v0, p1 - v1 + round, p0 - v0, p1 - v1 + cPoint, p0 - v0, p1 - v1 + round, 5, true);
                  this.v.setTripleAt(p0 - v0 + round, p1 - v1, p0 - v0 + round, p1 - v1, p0 - v0 + cPoint, p1 - v1, 6, true);
                  this.v.setTripleAt(p0 + v0 - round, p1 - v1, p0 + v0 - cPoint, p1 - v1, p0 + v0 - round, p1 - v1, 7, true);
                } else {
                  this.v.setTripleAt(p0 - v0, p1 + v1, p0 - v0 + cPoint, p1 + v1, p0 - v0, p1 + v1, 2);
                  this.v.setTripleAt(p0 - v0, p1 - v1, p0 - v0, p1 - v1 + cPoint, p0 - v0, p1 - v1, 3);
                }
              } else {
                this.v.setTripleAt(p0 + v0, p1 - v1 + round, p0 + v0, p1 - v1 + cPoint, p0 + v0, p1 - v1 + round, 0, true);
                if (round !== 0) {
                  this.v.setTripleAt(p0 + v0 - round, p1 - v1, p0 + v0 - round, p1 - v1, p0 + v0 - cPoint, p1 - v1, 1, true);
                  this.v.setTripleAt(p0 - v0 + round, p1 - v1, p0 - v0 + cPoint, p1 - v1, p0 - v0 + round, p1 - v1, 2, true);
                  this.v.setTripleAt(p0 - v0, p1 - v1 + round, p0 - v0, p1 - v1 + round, p0 - v0, p1 - v1 + cPoint, 3, true);
                  this.v.setTripleAt(p0 - v0, p1 + v1 - round, p0 - v0, p1 + v1 - cPoint, p0 - v0, p1 + v1 - round, 4, true);
                  this.v.setTripleAt(p0 - v0 + round, p1 + v1, p0 - v0 + round, p1 + v1, p0 - v0 + cPoint, p1 + v1, 5, true);
                  this.v.setTripleAt(p0 + v0 - round, p1 + v1, p0 + v0 - cPoint, p1 + v1, p0 + v0 - round, p1 + v1, 6, true);
                  this.v.setTripleAt(p0 + v0, p1 + v1 - round, p0 + v0, p1 + v1 - round, p0 + v0, p1 + v1 - cPoint, 7, true);
                } else {
                  this.v.setTripleAt(p0 - v0, p1 - v1, p0 - v0 + cPoint, p1 - v1, p0 - v0, p1 - v1, 1, true);
                  this.v.setTripleAt(p0 - v0, p1 + v1, p0 - v0, p1 + v1 - cPoint, p0 - v0, p1 + v1, 2, true);
                  this.v.setTripleAt(p0 + v0, p1 + v1, p0 + v0 - cPoint, p1 + v1, p0 + v0, p1 + v1, 3, true);
                }
              }
            },
            getValue: function getValue2() {
              if (this.elem.globalData.frameId === this.frameId) {
                return;
              }
              this.frameId = this.elem.globalData.frameId;
              this.iterateDynamicProperties();
              if (this._mdf) {
                this.convertRectToPath();
              }
            },
            reset: resetShape
          };
          extendPrototype([DynamicPropertyContainer], RectShapePropertyFactory);
          return RectShapePropertyFactory;
        }();
        function getShapeProp(elem2, data2, type4) {
          var prop;
          if (type4 === 3 || type4 === 4) {
            var dataProp = type4 === 3 ? data2.pt : data2.ks;
            var keys = dataProp.k;
            if (keys.length) {
              prop = new KeyframedShapeProperty(elem2, data2, type4);
            } else {
              prop = new ShapeProperty(elem2, data2, type4);
            }
          } else if (type4 === 5) {
            prop = new RectShapeProperty(elem2, data2);
          } else if (type4 === 6) {
            prop = new EllShapeProperty(elem2, data2);
          } else if (type4 === 7) {
            prop = new StarShapeProperty(elem2, data2);
          }
          if (prop.k) {
            elem2.addDynamicProperty(prop);
          }
          return prop;
        }
        function getConstructorFunction() {
          return ShapeProperty;
        }
        function getKeyframedConstructorFunction() {
          return KeyframedShapeProperty;
        }
        var ob2 = {};
        ob2.getShapeProp = getShapeProp;
        ob2.getConstructorFunction = getConstructorFunction;
        ob2.getKeyframedConstructorFunction = getKeyframedConstructorFunction;
        return ob2;
      }();
      var Matrix = function() {
        var _cos = Math.cos;
        var _sin = Math.sin;
        var _tan = Math.tan;
        var _rnd = Math.round;
        function reset() {
          this.props[0] = 1;
          this.props[1] = 0;
          this.props[2] = 0;
          this.props[3] = 0;
          this.props[4] = 0;
          this.props[5] = 1;
          this.props[6] = 0;
          this.props[7] = 0;
          this.props[8] = 0;
          this.props[9] = 0;
          this.props[10] = 1;
          this.props[11] = 0;
          this.props[12] = 0;
          this.props[13] = 0;
          this.props[14] = 0;
          this.props[15] = 1;
          return this;
        }
        function rotate(angle) {
          if (angle === 0) {
            return this;
          }
          var mCos = _cos(angle);
          var mSin = _sin(angle);
          return this._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        }
        function rotateX(angle) {
          if (angle === 0) {
            return this;
          }
          var mCos = _cos(angle);
          var mSin = _sin(angle);
          return this._t(1, 0, 0, 0, 0, mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1);
        }
        function rotateY(angle) {
          if (angle === 0) {
            return this;
          }
          var mCos = _cos(angle);
          var mSin = _sin(angle);
          return this._t(mCos, 0, mSin, 0, 0, 1, 0, 0, -mSin, 0, mCos, 0, 0, 0, 0, 1);
        }
        function rotateZ(angle) {
          if (angle === 0) {
            return this;
          }
          var mCos = _cos(angle);
          var mSin = _sin(angle);
          return this._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        }
        function shear(sx, sy) {
          return this._t(1, sy, sx, 1, 0, 0);
        }
        function skew(ax, ay) {
          return this.shear(_tan(ax), _tan(ay));
        }
        function skewFromAxis(ax, angle) {
          var mCos = _cos(angle);
          var mSin = _sin(angle);
          return this._t(mCos, mSin, 0, 0, -mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(1, 0, 0, 0, _tan(ax), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        }
        function scale2(sx, sy, sz) {
          if (!sz && sz !== 0) {
            sz = 1;
          }
          if (sx === 1 && sy === 1 && sz === 1) {
            return this;
          }
          return this._t(sx, 0, 0, 0, 0, sy, 0, 0, 0, 0, sz, 0, 0, 0, 0, 1);
        }
        function setTransform(a, b, c10, d30, e2, f, g, h3, i6, j, k2, l7, m13, n38, o, p10) {
          this.props[0] = a;
          this.props[1] = b;
          this.props[2] = c10;
          this.props[3] = d30;
          this.props[4] = e2;
          this.props[5] = f;
          this.props[6] = g;
          this.props[7] = h3;
          this.props[8] = i6;
          this.props[9] = j;
          this.props[10] = k2;
          this.props[11] = l7;
          this.props[12] = m13;
          this.props[13] = n38;
          this.props[14] = o;
          this.props[15] = p10;
          return this;
        }
        function translate(tx, ty, tz) {
          tz = tz || 0;
          if (tx !== 0 || ty !== 0 || tz !== 0) {
            return this._t(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, tx, ty, tz, 1);
          }
          return this;
        }
        function transform2(a2, b2, c23, d210, e2, f2, g2, h22, i22, j2, k2, l22, m22, n210, o2, p22) {
          var _p = this.props;
          if (a2 === 1 && b2 === 0 && c23 === 0 && d210 === 0 && e2 === 0 && f2 === 1 && g2 === 0 && h22 === 0 && i22 === 0 && j2 === 0 && k2 === 1 && l22 === 0) {
            _p[12] = _p[12] * a2 + _p[15] * m22;
            _p[13] = _p[13] * f2 + _p[15] * n210;
            _p[14] = _p[14] * k2 + _p[15] * o2;
            _p[15] *= p22;
            this._identityCalculated = false;
            return this;
          }
          var a1 = _p[0];
          var b1 = _p[1];
          var c12 = _p[2];
          var d1 = _p[3];
          var e1 = _p[4];
          var f1 = _p[5];
          var g1 = _p[6];
          var h1 = _p[7];
          var i1 = _p[8];
          var j1 = _p[9];
          var k1 = _p[10];
          var l1 = _p[11];
          var m1 = _p[12];
          var n1 = _p[13];
          var o1 = _p[14];
          var p1 = _p[15];
          _p[0] = a1 * a2 + b1 * e2 + c12 * i22 + d1 * m22;
          _p[1] = a1 * b2 + b1 * f2 + c12 * j2 + d1 * n210;
          _p[2] = a1 * c23 + b1 * g2 + c12 * k2 + d1 * o2;
          _p[3] = a1 * d210 + b1 * h22 + c12 * l22 + d1 * p22;
          _p[4] = e1 * a2 + f1 * e2 + g1 * i22 + h1 * m22;
          _p[5] = e1 * b2 + f1 * f2 + g1 * j2 + h1 * n210;
          _p[6] = e1 * c23 + f1 * g2 + g1 * k2 + h1 * o2;
          _p[7] = e1 * d210 + f1 * h22 + g1 * l22 + h1 * p22;
          _p[8] = i1 * a2 + j1 * e2 + k1 * i22 + l1 * m22;
          _p[9] = i1 * b2 + j1 * f2 + k1 * j2 + l1 * n210;
          _p[10] = i1 * c23 + j1 * g2 + k1 * k2 + l1 * o2;
          _p[11] = i1 * d210 + j1 * h22 + k1 * l22 + l1 * p22;
          _p[12] = m1 * a2 + n1 * e2 + o1 * i22 + p1 * m22;
          _p[13] = m1 * b2 + n1 * f2 + o1 * j2 + p1 * n210;
          _p[14] = m1 * c23 + n1 * g2 + o1 * k2 + p1 * o2;
          _p[15] = m1 * d210 + n1 * h22 + o1 * l22 + p1 * p22;
          this._identityCalculated = false;
          return this;
        }
        function multiply(matrix) {
          var matrixProps = matrix.props;
          return this.transform(matrixProps[0], matrixProps[1], matrixProps[2], matrixProps[3], matrixProps[4], matrixProps[5], matrixProps[6], matrixProps[7], matrixProps[8], matrixProps[9], matrixProps[10], matrixProps[11], matrixProps[12], matrixProps[13], matrixProps[14], matrixProps[15]);
        }
        function isIdentity() {
          if (!this._identityCalculated) {
            this._identity = !(this.props[0] !== 1 || this.props[1] !== 0 || this.props[2] !== 0 || this.props[3] !== 0 || this.props[4] !== 0 || this.props[5] !== 1 || this.props[6] !== 0 || this.props[7] !== 0 || this.props[8] !== 0 || this.props[9] !== 0 || this.props[10] !== 1 || this.props[11] !== 0 || this.props[12] !== 0 || this.props[13] !== 0 || this.props[14] !== 0 || this.props[15] !== 1);
            this._identityCalculated = true;
          }
          return this._identity;
        }
        function equals(matr) {
          var i6 = 0;
          while (i6 < 16) {
            if (matr.props[i6] !== this.props[i6]) {
              return false;
            }
            i6 += 1;
          }
          return true;
        }
        function clone2(matr) {
          var i6;
          for (i6 = 0; i6 < 16; i6 += 1) {
            matr.props[i6] = this.props[i6];
          }
          return matr;
        }
        function cloneFromProps(props) {
          var i6;
          for (i6 = 0; i6 < 16; i6 += 1) {
            this.props[i6] = props[i6];
          }
        }
        function applyToPoint(x2, y, z) {
          return {
            x: x2 * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12],
            y: x2 * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13],
            z: x2 * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14]
          };
        }
        function applyToX(x2, y, z) {
          return x2 * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12];
        }
        function applyToY(x2, y, z) {
          return x2 * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13];
        }
        function applyToZ(x2, y, z) {
          return x2 * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14];
        }
        function getInverseMatrix() {
          var determinant = this.props[0] * this.props[5] - this.props[1] * this.props[4];
          var a = this.props[5] / determinant;
          var b = -this.props[1] / determinant;
          var c10 = -this.props[4] / determinant;
          var d30 = this.props[0] / determinant;
          var e2 = (this.props[4] * this.props[13] - this.props[5] * this.props[12]) / determinant;
          var f = -(this.props[0] * this.props[13] - this.props[1] * this.props[12]) / determinant;
          var inverseMatrix = new Matrix();
          inverseMatrix.props[0] = a;
          inverseMatrix.props[1] = b;
          inverseMatrix.props[4] = c10;
          inverseMatrix.props[5] = d30;
          inverseMatrix.props[12] = e2;
          inverseMatrix.props[13] = f;
          return inverseMatrix;
        }
        function inversePoint(pt) {
          var inverseMatrix = this.getInverseMatrix();
          return inverseMatrix.applyToPointArray(pt[0], pt[1], pt[2] || 0);
        }
        function inversePoints(pts) {
          var i6;
          var len = pts.length;
          var retPts = [];
          for (i6 = 0; i6 < len; i6 += 1) {
            retPts[i6] = inversePoint(pts[i6]);
          }
          return retPts;
        }
        function applyToTriplePoints(pt1, pt2, pt3) {
          var arr = createTypedArray("float32", 6);
          if (this.isIdentity()) {
            arr[0] = pt1[0];
            arr[1] = pt1[1];
            arr[2] = pt2[0];
            arr[3] = pt2[1];
            arr[4] = pt3[0];
            arr[5] = pt3[1];
          } else {
            var p0 = this.props[0];
            var p1 = this.props[1];
            var p42 = this.props[4];
            var p52 = this.props[5];
            var p12 = this.props[12];
            var p13 = this.props[13];
            arr[0] = pt1[0] * p0 + pt1[1] * p42 + p12;
            arr[1] = pt1[0] * p1 + pt1[1] * p52 + p13;
            arr[2] = pt2[0] * p0 + pt2[1] * p42 + p12;
            arr[3] = pt2[0] * p1 + pt2[1] * p52 + p13;
            arr[4] = pt3[0] * p0 + pt3[1] * p42 + p12;
            arr[5] = pt3[0] * p1 + pt3[1] * p52 + p13;
          }
          return arr;
        }
        function applyToPointArray(x2, y, z) {
          var arr;
          if (this.isIdentity()) {
            arr = [x2, y, z];
          } else {
            arr = [x2 * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12], x2 * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13], x2 * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14]];
          }
          return arr;
        }
        function applyToPointStringified(x2, y) {
          if (this.isIdentity()) {
            return x2 + "," + y;
          }
          var _p = this.props;
          return Math.round((x2 * _p[0] + y * _p[4] + _p[12]) * 100) / 100 + "," + Math.round((x2 * _p[1] + y * _p[5] + _p[13]) * 100) / 100;
        }
        function toCSS() {
          var i6 = 0;
          var props = this.props;
          var cssValue = "matrix3d(";
          var v3 = 1e4;
          while (i6 < 16) {
            cssValue += _rnd(props[i6] * v3) / v3;
            cssValue += i6 === 15 ? ")" : ",";
            i6 += 1;
          }
          return cssValue;
        }
        function roundMatrixProperty(val2) {
          var v3 = 1e4;
          if (val2 < 1e-6 && val2 > 0 || val2 > -1e-6 && val2 < 0) {
            return _rnd(val2 * v3) / v3;
          }
          return val2;
        }
        function to2dCSS() {
          var props = this.props;
          var _a = roundMatrixProperty(props[0]);
          var _b = roundMatrixProperty(props[1]);
          var _c = roundMatrixProperty(props[4]);
          var _d = roundMatrixProperty(props[5]);
          var _e = roundMatrixProperty(props[12]);
          var _f = roundMatrixProperty(props[13]);
          return "matrix(" + _a + "," + _b + "," + _c + "," + _d + "," + _e + "," + _f + ")";
        }
        return function() {
          this.reset = reset;
          this.rotate = rotate;
          this.rotateX = rotateX;
          this.rotateY = rotateY;
          this.rotateZ = rotateZ;
          this.skew = skew;
          this.skewFromAxis = skewFromAxis;
          this.shear = shear;
          this.scale = scale2;
          this.setTransform = setTransform;
          this.translate = translate;
          this.transform = transform2;
          this.multiply = multiply;
          this.applyToPoint = applyToPoint;
          this.applyToX = applyToX;
          this.applyToY = applyToY;
          this.applyToZ = applyToZ;
          this.applyToPointArray = applyToPointArray;
          this.applyToTriplePoints = applyToTriplePoints;
          this.applyToPointStringified = applyToPointStringified;
          this.toCSS = toCSS;
          this.to2dCSS = to2dCSS;
          this.clone = clone2;
          this.cloneFromProps = cloneFromProps;
          this.equals = equals;
          this.inversePoints = inversePoints;
          this.inversePoint = inversePoint;
          this.getInverseMatrix = getInverseMatrix;
          this._t = this.transform;
          this.isIdentity = isIdentity;
          this._identity = true;
          this._identityCalculated = false;
          this.props = createTypedArray("float32", 16);
          this.reset();
        };
      }();
      function _typeof$3(o) {
        "@babel/helpers - typeof";
        return _typeof$3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof$3(o);
      }
      var lottie = {};
      var standalone = "__[STANDALONE]__";
      var animationData = "__[ANIMATIONDATA]__";
      var renderer = "";
      function setLocation(href) {
        setLocationHref(href);
      }
      function searchAnimations() {
        if (standalone === true) {
          animationManager.searchAnimations(animationData, standalone, renderer);
        } else {
          animationManager.searchAnimations();
        }
      }
      function setSubframeRendering(flag) {
        setSubframeEnabled(flag);
      }
      function setPrefix(prefix2) {
        setIdPrefix(prefix2);
      }
      function loadAnimation(params) {
        if (standalone === true) {
          params.animationData = JSON.parse(animationData);
        }
        return animationManager.loadAnimation(params);
      }
      function setQuality(value2) {
        if (typeof value2 === "string") {
          switch (value2) {
            case "high":
              setDefaultCurveSegments(200);
              break;
            default:
            case "medium":
              setDefaultCurveSegments(50);
              break;
            case "low":
              setDefaultCurveSegments(10);
              break;
          }
        } else if (!isNaN(value2) && value2 > 1) {
          setDefaultCurveSegments(value2);
        }
        if (getDefaultCurveSegments() >= 50) {
          roundValues(false);
        } else {
          roundValues(true);
        }
      }
      function inBrowser() {
        return typeof navigator !== "undefined";
      }
      function installPlugin(type4, plugin) {
        if (type4 === "expressions") {
          setExpressionsPlugin(plugin);
        }
      }
      function getFactory(name2) {
        switch (name2) {
          case "propertyFactory":
            return PropertyFactory;
          case "shapePropertyFactory":
            return ShapePropertyFactory;
          case "matrix":
            return Matrix;
          default:
            return null;
        }
      }
      lottie.play = animationManager.play;
      lottie.pause = animationManager.pause;
      lottie.setLocationHref = setLocation;
      lottie.togglePause = animationManager.togglePause;
      lottie.setSpeed = animationManager.setSpeed;
      lottie.setDirection = animationManager.setDirection;
      lottie.stop = animationManager.stop;
      lottie.searchAnimations = searchAnimations;
      lottie.registerAnimation = animationManager.registerAnimation;
      lottie.loadAnimation = loadAnimation;
      lottie.setSubframeRendering = setSubframeRendering;
      lottie.resize = animationManager.resize;
      lottie.goToAndStop = animationManager.goToAndStop;
      lottie.destroy = animationManager.destroy;
      lottie.setQuality = setQuality;
      lottie.inBrowser = inBrowser;
      lottie.installPlugin = installPlugin;
      lottie.freeze = animationManager.freeze;
      lottie.unfreeze = animationManager.unfreeze;
      lottie.setVolume = animationManager.setVolume;
      lottie.mute = animationManager.mute;
      lottie.unmute = animationManager.unmute;
      lottie.getRegisteredAnimations = animationManager.getRegisteredAnimations;
      lottie.useWebWorker = setWebWorker;
      lottie.setIDPrefix = setPrefix;
      lottie.__getFactory = getFactory;
      lottie.version = "5.13.0";
      function checkReady() {
        if (document.readyState === "complete") {
          clearInterval(readyStateCheckInterval);
          searchAnimations();
        }
      }
      function getQueryVariable(variable) {
        var vars = queryString.split("&");
        for (var i6 = 0; i6 < vars.length; i6 += 1) {
          var pair = vars[i6].split("=");
          if (decodeURIComponent(pair[0]) == variable) {
            return decodeURIComponent(pair[1]);
          }
        }
        return null;
      }
      var queryString = "";
      if (standalone) {
        var scripts = document.getElementsByTagName("script");
        var index = scripts.length - 1;
        var myScript = scripts[index] || {
          src: ""
        };
        queryString = myScript.src ? myScript.src.replace(/^[^\?]+\??/, "") : "";
        renderer = getQueryVariable("renderer");
      }
      var readyStateCheckInterval = setInterval(checkReady, 100);
      try {
        if (!((typeof exports === "undefined" ? "undefined" : _typeof$3(exports)) === "object" && typeof module !== "undefined") && !(typeof define === "function" && define.amd)) {
          window.bodymovin = lottie;
        }
      } catch (err) {
      }
      var ShapeModifiers = function() {
        var ob2 = {};
        var modifiers = {};
        ob2.registerModifier = registerModifier;
        ob2.getModifier = getModifier;
        function registerModifier(nm, factory) {
          if (!modifiers[nm]) {
            modifiers[nm] = factory;
          }
        }
        function getModifier(nm, elem2, data2) {
          return new modifiers[nm](elem2, data2);
        }
        return ob2;
      }();
      function ShapeModifier() {
      }
      ShapeModifier.prototype.initModifierProperties = function() {
      };
      ShapeModifier.prototype.addShapeToModifier = function() {
      };
      ShapeModifier.prototype.addShape = function(data2) {
        if (!this.closed) {
          data2.sh.container.addDynamicProperty(data2.sh);
          var shapeData = {
            shape: data2.sh,
            data: data2,
            localShapeCollection: shapeCollectionPool.newShapeCollection()
          };
          this.shapes.push(shapeData);
          this.addShapeToModifier(shapeData);
          if (this._isAnimated) {
            data2.setAsAnimated();
          }
        }
      };
      ShapeModifier.prototype.init = function(elem2, data2) {
        this.shapes = [];
        this.elem = elem2;
        this.initDynamicPropertyContainer(elem2);
        this.initModifierProperties(elem2, data2);
        this.frameId = initialDefaultFrame;
        this.closed = false;
        this.k = false;
        if (this.dynamicProperties.length) {
          this.k = true;
        } else {
          this.getValue(true);
        }
      };
      ShapeModifier.prototype.processKeys = function() {
        if (this.elem.globalData.frameId === this.frameId) {
          return;
        }
        this.frameId = this.elem.globalData.frameId;
        this.iterateDynamicProperties();
      };
      extendPrototype([DynamicPropertyContainer], ShapeModifier);
      function TrimModifier() {
      }
      extendPrototype([ShapeModifier], TrimModifier);
      TrimModifier.prototype.initModifierProperties = function(elem2, data2) {
        this.s = PropertyFactory.getProp(elem2, data2.s, 0, 0.01, this);
        this.e = PropertyFactory.getProp(elem2, data2.e, 0, 0.01, this);
        this.o = PropertyFactory.getProp(elem2, data2.o, 0, 0, this);
        this.sValue = 0;
        this.eValue = 0;
        this.getValue = this.processKeys;
        this.m = data2.m;
        this._isAnimated = !!this.s.effectsSequence.length || !!this.e.effectsSequence.length || !!this.o.effectsSequence.length;
      };
      TrimModifier.prototype.addShapeToModifier = function(shapeData) {
        shapeData.pathsData = [];
      };
      TrimModifier.prototype.calculateShapeEdges = function(s8, e2, shapeLength, addedLength, totalModifierLength) {
        var segments = [];
        if (e2 <= 1) {
          segments.push({
            s: s8,
            e: e2
          });
        } else if (s8 >= 1) {
          segments.push({
            s: s8 - 1,
            e: e2 - 1
          });
        } else {
          segments.push({
            s: s8,
            e: 1
          });
          segments.push({
            s: 0,
            e: e2 - 1
          });
        }
        var shapeSegments = [];
        var i6;
        var len = segments.length;
        var segmentOb;
        for (i6 = 0; i6 < len; i6 += 1) {
          segmentOb = segments[i6];
          if (!(segmentOb.e * totalModifierLength < addedLength || segmentOb.s * totalModifierLength > addedLength + shapeLength)) {
            var shapeS;
            var shapeE;
            if (segmentOb.s * totalModifierLength <= addedLength) {
              shapeS = 0;
            } else {
              shapeS = (segmentOb.s * totalModifierLength - addedLength) / shapeLength;
            }
            if (segmentOb.e * totalModifierLength >= addedLength + shapeLength) {
              shapeE = 1;
            } else {
              shapeE = (segmentOb.e * totalModifierLength - addedLength) / shapeLength;
            }
            shapeSegments.push([shapeS, shapeE]);
          }
        }
        if (!shapeSegments.length) {
          shapeSegments.push([0, 0]);
        }
        return shapeSegments;
      };
      TrimModifier.prototype.releasePathsData = function(pathsData) {
        var i6;
        var len = pathsData.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          segmentsLengthPool.release(pathsData[i6]);
        }
        pathsData.length = 0;
        return pathsData;
      };
      TrimModifier.prototype.processShapes = function(_isFirstFrame) {
        var s8;
        var e2;
        if (this._mdf || _isFirstFrame) {
          var o = this.o.v % 360 / 360;
          if (o < 0) {
            o += 1;
          }
          if (this.s.v > 1) {
            s8 = 1 + o;
          } else if (this.s.v < 0) {
            s8 = 0 + o;
          } else {
            s8 = this.s.v + o;
          }
          if (this.e.v > 1) {
            e2 = 1 + o;
          } else if (this.e.v < 0) {
            e2 = 0 + o;
          } else {
            e2 = this.e.v + o;
          }
          if (s8 > e2) {
            var _s = s8;
            s8 = e2;
            e2 = _s;
          }
          s8 = Math.round(s8 * 1e4) * 1e-4;
          e2 = Math.round(e2 * 1e4) * 1e-4;
          this.sValue = s8;
          this.eValue = e2;
        } else {
          s8 = this.sValue;
          e2 = this.eValue;
        }
        var shapePaths;
        var i6;
        var len = this.shapes.length;
        var j;
        var jLen;
        var pathsData;
        var pathData;
        var totalShapeLength;
        var totalModifierLength = 0;
        if (e2 === s8) {
          for (i6 = 0; i6 < len; i6 += 1) {
            this.shapes[i6].localShapeCollection.releaseShapes();
            this.shapes[i6].shape._mdf = true;
            this.shapes[i6].shape.paths = this.shapes[i6].localShapeCollection;
            if (this._mdf) {
              this.shapes[i6].pathsData.length = 0;
            }
          }
        } else if (!(e2 === 1 && s8 === 0 || e2 === 0 && s8 === 1)) {
          var segments = [];
          var shapeData;
          var localShapeCollection;
          for (i6 = 0; i6 < len; i6 += 1) {
            shapeData = this.shapes[i6];
            if (!shapeData.shape._mdf && !this._mdf && !_isFirstFrame && this.m !== 2) {
              shapeData.shape.paths = shapeData.localShapeCollection;
            } else {
              shapePaths = shapeData.shape.paths;
              jLen = shapePaths._length;
              totalShapeLength = 0;
              if (!shapeData.shape._mdf && shapeData.pathsData.length) {
                totalShapeLength = shapeData.totalShapeLength;
              } else {
                pathsData = this.releasePathsData(shapeData.pathsData);
                for (j = 0; j < jLen; j += 1) {
                  pathData = bez.getSegmentsLength(shapePaths.shapes[j]);
                  pathsData.push(pathData);
                  totalShapeLength += pathData.totalLength;
                }
                shapeData.totalShapeLength = totalShapeLength;
                shapeData.pathsData = pathsData;
              }
              totalModifierLength += totalShapeLength;
              shapeData.shape._mdf = true;
            }
          }
          var shapeS = s8;
          var shapeE = e2;
          var addedLength = 0;
          var edges;
          for (i6 = len - 1; i6 >= 0; i6 -= 1) {
            shapeData = this.shapes[i6];
            if (shapeData.shape._mdf) {
              localShapeCollection = shapeData.localShapeCollection;
              localShapeCollection.releaseShapes();
              if (this.m === 2 && len > 1) {
                edges = this.calculateShapeEdges(s8, e2, shapeData.totalShapeLength, addedLength, totalModifierLength);
                addedLength += shapeData.totalShapeLength;
              } else {
                edges = [[shapeS, shapeE]];
              }
              jLen = edges.length;
              for (j = 0; j < jLen; j += 1) {
                shapeS = edges[j][0];
                shapeE = edges[j][1];
                segments.length = 0;
                if (shapeE <= 1) {
                  segments.push({
                    s: shapeData.totalShapeLength * shapeS,
                    e: shapeData.totalShapeLength * shapeE
                  });
                } else if (shapeS >= 1) {
                  segments.push({
                    s: shapeData.totalShapeLength * (shapeS - 1),
                    e: shapeData.totalShapeLength * (shapeE - 1)
                  });
                } else {
                  segments.push({
                    s: shapeData.totalShapeLength * shapeS,
                    e: shapeData.totalShapeLength
                  });
                  segments.push({
                    s: 0,
                    e: shapeData.totalShapeLength * (shapeE - 1)
                  });
                }
                var newShapesData = this.addShapes(shapeData, segments[0]);
                if (segments[0].s !== segments[0].e) {
                  if (segments.length > 1) {
                    var lastShapeInCollection = shapeData.shape.paths.shapes[shapeData.shape.paths._length - 1];
                    if (lastShapeInCollection.c) {
                      var lastShape = newShapesData.pop();
                      this.addPaths(newShapesData, localShapeCollection);
                      newShapesData = this.addShapes(shapeData, segments[1], lastShape);
                    } else {
                      this.addPaths(newShapesData, localShapeCollection);
                      newShapesData = this.addShapes(shapeData, segments[1]);
                    }
                  }
                  this.addPaths(newShapesData, localShapeCollection);
                }
              }
              shapeData.shape.paths = localShapeCollection;
            }
          }
        } else if (this._mdf) {
          for (i6 = 0; i6 < len; i6 += 1) {
            this.shapes[i6].pathsData.length = 0;
            this.shapes[i6].shape._mdf = true;
          }
        }
      };
      TrimModifier.prototype.addPaths = function(newPaths, localShapeCollection) {
        var i6;
        var len = newPaths.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          localShapeCollection.addShape(newPaths[i6]);
        }
      };
      TrimModifier.prototype.addSegment = function(pt1, pt2, pt3, pt4, shapePath, pos, newShape) {
        shapePath.setXYAt(pt2[0], pt2[1], "o", pos);
        shapePath.setXYAt(pt3[0], pt3[1], "i", pos + 1);
        if (newShape) {
          shapePath.setXYAt(pt1[0], pt1[1], "v", pos);
        }
        shapePath.setXYAt(pt4[0], pt4[1], "v", pos + 1);
      };
      TrimModifier.prototype.addSegmentFromArray = function(points, shapePath, pos, newShape) {
        shapePath.setXYAt(points[1], points[5], "o", pos);
        shapePath.setXYAt(points[2], points[6], "i", pos + 1);
        if (newShape) {
          shapePath.setXYAt(points[0], points[4], "v", pos);
        }
        shapePath.setXYAt(points[3], points[7], "v", pos + 1);
      };
      TrimModifier.prototype.addShapes = function(shapeData, shapeSegment, shapePath) {
        var pathsData = shapeData.pathsData;
        var shapePaths = shapeData.shape.paths.shapes;
        var i6;
        var len = shapeData.shape.paths._length;
        var j;
        var jLen;
        var addedLength = 0;
        var currentLengthData;
        var segmentCount;
        var lengths;
        var segment;
        var shapes = [];
        var initPos;
        var newShape = true;
        if (!shapePath) {
          shapePath = shapePool.newElement();
          segmentCount = 0;
          initPos = 0;
        } else {
          segmentCount = shapePath._length;
          initPos = shapePath._length;
        }
        shapes.push(shapePath);
        for (i6 = 0; i6 < len; i6 += 1) {
          lengths = pathsData[i6].lengths;
          shapePath.c = shapePaths[i6].c;
          jLen = shapePaths[i6].c ? lengths.length : lengths.length + 1;
          for (j = 1; j < jLen; j += 1) {
            currentLengthData = lengths[j - 1];
            if (addedLength + currentLengthData.addedLength < shapeSegment.s) {
              addedLength += currentLengthData.addedLength;
              shapePath.c = false;
            } else if (addedLength > shapeSegment.e) {
              shapePath.c = false;
              break;
            } else {
              if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + currentLengthData.addedLength) {
                this.addSegment(shapePaths[i6].v[j - 1], shapePaths[i6].o[j - 1], shapePaths[i6].i[j], shapePaths[i6].v[j], shapePath, segmentCount, newShape);
                newShape = false;
              } else {
                segment = bez.getNewSegment(shapePaths[i6].v[j - 1], shapePaths[i6].v[j], shapePaths[i6].o[j - 1], shapePaths[i6].i[j], (shapeSegment.s - addedLength) / currentLengthData.addedLength, (shapeSegment.e - addedLength) / currentLengthData.addedLength, lengths[j - 1]);
                this.addSegmentFromArray(segment, shapePath, segmentCount, newShape);
                newShape = false;
                shapePath.c = false;
              }
              addedLength += currentLengthData.addedLength;
              segmentCount += 1;
            }
          }
          if (shapePaths[i6].c && lengths.length) {
            currentLengthData = lengths[j - 1];
            if (addedLength <= shapeSegment.e) {
              var segmentLength = lengths[j - 1].addedLength;
              if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + segmentLength) {
                this.addSegment(shapePaths[i6].v[j - 1], shapePaths[i6].o[j - 1], shapePaths[i6].i[0], shapePaths[i6].v[0], shapePath, segmentCount, newShape);
                newShape = false;
              } else {
                segment = bez.getNewSegment(shapePaths[i6].v[j - 1], shapePaths[i6].v[0], shapePaths[i6].o[j - 1], shapePaths[i6].i[0], (shapeSegment.s - addedLength) / segmentLength, (shapeSegment.e - addedLength) / segmentLength, lengths[j - 1]);
                this.addSegmentFromArray(segment, shapePath, segmentCount, newShape);
                newShape = false;
                shapePath.c = false;
              }
            } else {
              shapePath.c = false;
            }
            addedLength += currentLengthData.addedLength;
            segmentCount += 1;
          }
          if (shapePath._length) {
            shapePath.setXYAt(shapePath.v[initPos][0], shapePath.v[initPos][1], "i", initPos);
            shapePath.setXYAt(shapePath.v[shapePath._length - 1][0], shapePath.v[shapePath._length - 1][1], "o", shapePath._length - 1);
          }
          if (addedLength > shapeSegment.e) {
            break;
          }
          if (i6 < len - 1) {
            shapePath = shapePool.newElement();
            newShape = true;
            shapes.push(shapePath);
            segmentCount = 0;
          }
        }
        return shapes;
      };
      function PuckerAndBloatModifier() {
      }
      extendPrototype([ShapeModifier], PuckerAndBloatModifier);
      PuckerAndBloatModifier.prototype.initModifierProperties = function(elem2, data2) {
        this.getValue = this.processKeys;
        this.amount = PropertyFactory.getProp(elem2, data2.a, 0, null, this);
        this._isAnimated = !!this.amount.effectsSequence.length;
      };
      PuckerAndBloatModifier.prototype.processPath = function(path, amount) {
        var percent = amount / 100;
        var centerPoint = [0, 0];
        var pathLength = path._length;
        var i6 = 0;
        for (i6 = 0; i6 < pathLength; i6 += 1) {
          centerPoint[0] += path.v[i6][0];
          centerPoint[1] += path.v[i6][1];
        }
        centerPoint[0] /= pathLength;
        centerPoint[1] /= pathLength;
        var clonedPath = shapePool.newElement();
        clonedPath.c = path.c;
        var vX;
        var vY;
        var oX;
        var oY;
        var iX;
        var iY;
        for (i6 = 0; i6 < pathLength; i6 += 1) {
          vX = path.v[i6][0] + (centerPoint[0] - path.v[i6][0]) * percent;
          vY = path.v[i6][1] + (centerPoint[1] - path.v[i6][1]) * percent;
          oX = path.o[i6][0] + (centerPoint[0] - path.o[i6][0]) * -percent;
          oY = path.o[i6][1] + (centerPoint[1] - path.o[i6][1]) * -percent;
          iX = path.i[i6][0] + (centerPoint[0] - path.i[i6][0]) * -percent;
          iY = path.i[i6][1] + (centerPoint[1] - path.i[i6][1]) * -percent;
          clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, i6);
        }
        return clonedPath;
      };
      PuckerAndBloatModifier.prototype.processShapes = function(_isFirstFrame) {
        var shapePaths;
        var i6;
        var len = this.shapes.length;
        var j;
        var jLen;
        var amount = this.amount.v;
        if (amount !== 0) {
          var shapeData;
          var localShapeCollection;
          for (i6 = 0; i6 < len; i6 += 1) {
            shapeData = this.shapes[i6];
            localShapeCollection = shapeData.localShapeCollection;
            if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
              localShapeCollection.releaseShapes();
              shapeData.shape._mdf = true;
              shapePaths = shapeData.shape.paths.shapes;
              jLen = shapeData.shape.paths._length;
              for (j = 0; j < jLen; j += 1) {
                localShapeCollection.addShape(this.processPath(shapePaths[j], amount));
              }
            }
            shapeData.shape.paths = shapeData.localShapeCollection;
          }
        }
        if (!this.dynamicProperties.length) {
          this._mdf = false;
        }
      };
      var TransformPropertyFactory = function() {
        var defaultVector = [0, 0];
        function applyToMatrix(mat) {
          var _mdf = this._mdf;
          this.iterateDynamicProperties();
          this._mdf = this._mdf || _mdf;
          if (this.a) {
            mat.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
          }
          if (this.s) {
            mat.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
          }
          if (this.sk) {
            mat.skewFromAxis(-this.sk.v, this.sa.v);
          }
          if (this.r) {
            mat.rotate(-this.r.v);
          } else {
            mat.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
          }
          if (this.data.p.s) {
            if (this.data.p.z) {
              mat.translate(this.px.v, this.py.v, -this.pz.v);
            } else {
              mat.translate(this.px.v, this.py.v, 0);
            }
          } else {
            mat.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);
          }
        }
        function processKeys(forceRender) {
          if (this.elem.globalData.frameId === this.frameId) {
            return;
          }
          if (this._isDirty) {
            this.precalculateMatrix();
            this._isDirty = false;
          }
          this.iterateDynamicProperties();
          if (this._mdf || forceRender) {
            var frameRate;
            this.v.cloneFromProps(this.pre.props);
            if (this.appliedTransformations < 1) {
              this.v.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
            }
            if (this.appliedTransformations < 2) {
              this.v.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
            }
            if (this.sk && this.appliedTransformations < 3) {
              this.v.skewFromAxis(-this.sk.v, this.sa.v);
            }
            if (this.r && this.appliedTransformations < 4) {
              this.v.rotate(-this.r.v);
            } else if (!this.r && this.appliedTransformations < 4) {
              this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
            }
            if (this.autoOriented) {
              var v1;
              var v22;
              frameRate = this.elem.globalData.frameRate;
              if (this.p && this.p.keyframes && this.p.getValueAtTime) {
                if (this.p._caching.lastFrame + this.p.offsetTime <= this.p.keyframes[0].t) {
                  v1 = this.p.getValueAtTime((this.p.keyframes[0].t + 0.01) / frameRate, 0);
                  v22 = this.p.getValueAtTime(this.p.keyframes[0].t / frameRate, 0);
                } else if (this.p._caching.lastFrame + this.p.offsetTime >= this.p.keyframes[this.p.keyframes.length - 1].t) {
                  v1 = this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length - 1].t / frameRate, 0);
                  v22 = this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length - 1].t - 0.05) / frameRate, 0);
                } else {
                  v1 = this.p.pv;
                  v22 = this.p.getValueAtTime((this.p._caching.lastFrame + this.p.offsetTime - 0.01) / frameRate, this.p.offsetTime);
                }
              } else if (this.px && this.px.keyframes && this.py.keyframes && this.px.getValueAtTime && this.py.getValueAtTime) {
                v1 = [];
                v22 = [];
                var px = this.px;
                var py = this.py;
                if (px._caching.lastFrame + px.offsetTime <= px.keyframes[0].t) {
                  v1[0] = px.getValueAtTime((px.keyframes[0].t + 0.01) / frameRate, 0);
                  v1[1] = py.getValueAtTime((py.keyframes[0].t + 0.01) / frameRate, 0);
                  v22[0] = px.getValueAtTime(px.keyframes[0].t / frameRate, 0);
                  v22[1] = py.getValueAtTime(py.keyframes[0].t / frameRate, 0);
                } else if (px._caching.lastFrame + px.offsetTime >= px.keyframes[px.keyframes.length - 1].t) {
                  v1[0] = px.getValueAtTime(px.keyframes[px.keyframes.length - 1].t / frameRate, 0);
                  v1[1] = py.getValueAtTime(py.keyframes[py.keyframes.length - 1].t / frameRate, 0);
                  v22[0] = px.getValueAtTime((px.keyframes[px.keyframes.length - 1].t - 0.01) / frameRate, 0);
                  v22[1] = py.getValueAtTime((py.keyframes[py.keyframes.length - 1].t - 0.01) / frameRate, 0);
                } else {
                  v1 = [px.pv, py.pv];
                  v22[0] = px.getValueAtTime((px._caching.lastFrame + px.offsetTime - 0.01) / frameRate, px.offsetTime);
                  v22[1] = py.getValueAtTime((py._caching.lastFrame + py.offsetTime - 0.01) / frameRate, py.offsetTime);
                }
              } else {
                v22 = defaultVector;
                v1 = v22;
              }
              this.v.rotate(-Math.atan2(v1[1] - v22[1], v1[0] - v22[0]));
            }
            if (this.data.p && this.data.p.s) {
              if (this.data.p.z) {
                this.v.translate(this.px.v, this.py.v, -this.pz.v);
              } else {
                this.v.translate(this.px.v, this.py.v, 0);
              }
            } else {
              this.v.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);
            }
          }
          this.frameId = this.elem.globalData.frameId;
        }
        function precalculateMatrix() {
          this.appliedTransformations = 0;
          this.pre.reset();
          if (!this.a.effectsSequence.length) {
            this.pre.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
            this.appliedTransformations = 1;
          } else {
            return;
          }
          if (!this.s.effectsSequence.length) {
            this.pre.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
            this.appliedTransformations = 2;
          } else {
            return;
          }
          if (this.sk) {
            if (!this.sk.effectsSequence.length && !this.sa.effectsSequence.length) {
              this.pre.skewFromAxis(-this.sk.v, this.sa.v);
              this.appliedTransformations = 3;
            } else {
              return;
            }
          }
          if (this.r) {
            if (!this.r.effectsSequence.length) {
              this.pre.rotate(-this.r.v);
              this.appliedTransformations = 4;
            }
          } else if (!this.rz.effectsSequence.length && !this.ry.effectsSequence.length && !this.rx.effectsSequence.length && !this.or.effectsSequence.length) {
            this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
            this.appliedTransformations = 4;
          }
        }
        function autoOrient() {
        }
        function addDynamicProperty(prop) {
          this._addDynamicProperty(prop);
          this.elem.addDynamicProperty(prop);
          this._isDirty = true;
        }
        function TransformProperty(elem2, data2, container) {
          this.elem = elem2;
          this.frameId = -1;
          this.propType = "transform";
          this.data = data2;
          this.v = new Matrix();
          this.pre = new Matrix();
          this.appliedTransformations = 0;
          this.initDynamicPropertyContainer(container || elem2);
          if (data2.p && data2.p.s) {
            this.px = PropertyFactory.getProp(elem2, data2.p.x, 0, 0, this);
            this.py = PropertyFactory.getProp(elem2, data2.p.y, 0, 0, this);
            if (data2.p.z) {
              this.pz = PropertyFactory.getProp(elem2, data2.p.z, 0, 0, this);
            }
          } else {
            this.p = PropertyFactory.getProp(elem2, data2.p || {
              k: [0, 0, 0]
            }, 1, 0, this);
          }
          if (data2.rx) {
            this.rx = PropertyFactory.getProp(elem2, data2.rx, 0, degToRads, this);
            this.ry = PropertyFactory.getProp(elem2, data2.ry, 0, degToRads, this);
            this.rz = PropertyFactory.getProp(elem2, data2.rz, 0, degToRads, this);
            if (data2.or.k[0].ti) {
              var i6;
              var len = data2.or.k.length;
              for (i6 = 0; i6 < len; i6 += 1) {
                data2.or.k[i6].to = null;
                data2.or.k[i6].ti = null;
              }
            }
            this.or = PropertyFactory.getProp(elem2, data2.or, 1, degToRads, this);
            this.or.sh = true;
          } else {
            this.r = PropertyFactory.getProp(elem2, data2.r || {
              k: 0
            }, 0, degToRads, this);
          }
          if (data2.sk) {
            this.sk = PropertyFactory.getProp(elem2, data2.sk, 0, degToRads, this);
            this.sa = PropertyFactory.getProp(elem2, data2.sa, 0, degToRads, this);
          }
          this.a = PropertyFactory.getProp(elem2, data2.a || {
            k: [0, 0, 0]
          }, 1, 0, this);
          this.s = PropertyFactory.getProp(elem2, data2.s || {
            k: [100, 100, 100]
          }, 1, 0.01, this);
          if (data2.o) {
            this.o = PropertyFactory.getProp(elem2, data2.o, 0, 0.01, elem2);
          } else {
            this.o = {
              _mdf: false,
              v: 1
            };
          }
          this._isDirty = true;
          if (!this.dynamicProperties.length) {
            this.getValue(true);
          }
        }
        TransformProperty.prototype = {
          applyToMatrix,
          getValue: processKeys,
          precalculateMatrix,
          autoOrient
        };
        extendPrototype([DynamicPropertyContainer], TransformProperty);
        TransformProperty.prototype.addDynamicProperty = addDynamicProperty;
        TransformProperty.prototype._addDynamicProperty = DynamicPropertyContainer.prototype.addDynamicProperty;
        function getTransformProperty(elem2, data2, container) {
          return new TransformProperty(elem2, data2, container);
        }
        return {
          getTransformProperty
        };
      }();
      function RepeaterModifier() {
      }
      extendPrototype([ShapeModifier], RepeaterModifier);
      RepeaterModifier.prototype.initModifierProperties = function(elem2, data2) {
        this.getValue = this.processKeys;
        this.c = PropertyFactory.getProp(elem2, data2.c, 0, null, this);
        this.o = PropertyFactory.getProp(elem2, data2.o, 0, null, this);
        this.tr = TransformPropertyFactory.getTransformProperty(elem2, data2.tr, this);
        this.so = PropertyFactory.getProp(elem2, data2.tr.so, 0, 0.01, this);
        this.eo = PropertyFactory.getProp(elem2, data2.tr.eo, 0, 0.01, this);
        this.data = data2;
        if (!this.dynamicProperties.length) {
          this.getValue(true);
        }
        this._isAnimated = !!this.dynamicProperties.length;
        this.pMatrix = new Matrix();
        this.rMatrix = new Matrix();
        this.sMatrix = new Matrix();
        this.tMatrix = new Matrix();
        this.matrix = new Matrix();
      };
      RepeaterModifier.prototype.applyTransforms = function(pMatrix, rMatrix, sMatrix, transform2, perc, inv) {
        var dir = inv ? -1 : 1;
        var scaleX = transform2.s.v[0] + (1 - transform2.s.v[0]) * (1 - perc);
        var scaleY = transform2.s.v[1] + (1 - transform2.s.v[1]) * (1 - perc);
        pMatrix.translate(transform2.p.v[0] * dir * perc, transform2.p.v[1] * dir * perc, transform2.p.v[2]);
        rMatrix.translate(-transform2.a.v[0], -transform2.a.v[1], transform2.a.v[2]);
        rMatrix.rotate(-transform2.r.v * dir * perc);
        rMatrix.translate(transform2.a.v[0], transform2.a.v[1], transform2.a.v[2]);
        sMatrix.translate(-transform2.a.v[0], -transform2.a.v[1], transform2.a.v[2]);
        sMatrix.scale(inv ? 1 / scaleX : scaleX, inv ? 1 / scaleY : scaleY);
        sMatrix.translate(transform2.a.v[0], transform2.a.v[1], transform2.a.v[2]);
      };
      RepeaterModifier.prototype.init = function(elem2, arr, pos, elemsData) {
        this.elem = elem2;
        this.arr = arr;
        this.pos = pos;
        this.elemsData = elemsData;
        this._currentCopies = 0;
        this._elements = [];
        this._groups = [];
        this.frameId = -1;
        this.initDynamicPropertyContainer(elem2);
        this.initModifierProperties(elem2, arr[pos]);
        while (pos > 0) {
          pos -= 1;
          this._elements.unshift(arr[pos]);
        }
        if (this.dynamicProperties.length) {
          this.k = true;
        } else {
          this.getValue(true);
        }
      };
      RepeaterModifier.prototype.resetElements = function(elements) {
        var i6;
        var len = elements.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          elements[i6]._processed = false;
          if (elements[i6].ty === "gr") {
            this.resetElements(elements[i6].it);
          }
        }
      };
      RepeaterModifier.prototype.cloneElements = function(elements) {
        var newElements = JSON.parse(JSON.stringify(elements));
        this.resetElements(newElements);
        return newElements;
      };
      RepeaterModifier.prototype.changeGroupRender = function(elements, renderFlag) {
        var i6;
        var len = elements.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          elements[i6]._render = renderFlag;
          if (elements[i6].ty === "gr") {
            this.changeGroupRender(elements[i6].it, renderFlag);
          }
        }
      };
      RepeaterModifier.prototype.processShapes = function(_isFirstFrame) {
        var items;
        var itemsTransform;
        var i6;
        var dir;
        var cont;
        var hasReloaded = false;
        if (this._mdf || _isFirstFrame) {
          var copies = Math.ceil(this.c.v);
          if (this._groups.length < copies) {
            while (this._groups.length < copies) {
              var group = {
                it: this.cloneElements(this._elements),
                ty: "gr"
              };
              group.it.push({
                a: {
                  a: 0,
                  ix: 1,
                  k: [0, 0]
                },
                nm: "Transform",
                o: {
                  a: 0,
                  ix: 7,
                  k: 100
                },
                p: {
                  a: 0,
                  ix: 2,
                  k: [0, 0]
                },
                r: {
                  a: 1,
                  ix: 6,
                  k: [{
                    s: 0,
                    e: 0,
                    t: 0
                  }, {
                    s: 0,
                    e: 0,
                    t: 1
                  }]
                },
                s: {
                  a: 0,
                  ix: 3,
                  k: [100, 100]
                },
                sa: {
                  a: 0,
                  ix: 5,
                  k: 0
                },
                sk: {
                  a: 0,
                  ix: 4,
                  k: 0
                },
                ty: "tr"
              });
              this.arr.splice(0, 0, group);
              this._groups.splice(0, 0, group);
              this._currentCopies += 1;
            }
            this.elem.reloadShapes();
            hasReloaded = true;
          }
          cont = 0;
          var renderFlag;
          for (i6 = 0; i6 <= this._groups.length - 1; i6 += 1) {
            renderFlag = cont < copies;
            this._groups[i6]._render = renderFlag;
            this.changeGroupRender(this._groups[i6].it, renderFlag);
            if (!renderFlag) {
              var elems = this.elemsData[i6].it;
              var transformData2 = elems[elems.length - 1];
              if (transformData2.transform.op.v !== 0) {
                transformData2.transform.op._mdf = true;
                transformData2.transform.op.v = 0;
              } else {
                transformData2.transform.op._mdf = false;
              }
            }
            cont += 1;
          }
          this._currentCopies = copies;
          var offset = this.o.v;
          var offsetModulo = offset % 1;
          var roundOffset = offset > 0 ? Math.floor(offset) : Math.ceil(offset);
          var pProps = this.pMatrix.props;
          var rProps = this.rMatrix.props;
          var sProps = this.sMatrix.props;
          this.pMatrix.reset();
          this.rMatrix.reset();
          this.sMatrix.reset();
          this.tMatrix.reset();
          this.matrix.reset();
          var iteration = 0;
          if (offset > 0) {
            while (iteration < roundOffset) {
              this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);
              iteration += 1;
            }
            if (offsetModulo) {
              this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, offsetModulo, false);
              iteration += offsetModulo;
            }
          } else if (offset < 0) {
            while (iteration > roundOffset) {
              this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, true);
              iteration -= 1;
            }
            if (offsetModulo) {
              this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, -offsetModulo, true);
              iteration -= offsetModulo;
            }
          }
          i6 = this.data.m === 1 ? 0 : this._currentCopies - 1;
          dir = this.data.m === 1 ? 1 : -1;
          cont = this._currentCopies;
          var j;
          var jLen;
          while (cont) {
            items = this.elemsData[i6].it;
            itemsTransform = items[items.length - 1].transform.mProps.v.props;
            jLen = itemsTransform.length;
            items[items.length - 1].transform.mProps._mdf = true;
            items[items.length - 1].transform.op._mdf = true;
            items[items.length - 1].transform.op.v = this._currentCopies === 1 ? this.so.v : this.so.v + (this.eo.v - this.so.v) * (i6 / (this._currentCopies - 1));
            if (iteration !== 0) {
              if (i6 !== 0 && dir === 1 || i6 !== this._currentCopies - 1 && dir === -1) {
                this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);
              }
              this.matrix.transform(rProps[0], rProps[1], rProps[2], rProps[3], rProps[4], rProps[5], rProps[6], rProps[7], rProps[8], rProps[9], rProps[10], rProps[11], rProps[12], rProps[13], rProps[14], rProps[15]);
              this.matrix.transform(sProps[0], sProps[1], sProps[2], sProps[3], sProps[4], sProps[5], sProps[6], sProps[7], sProps[8], sProps[9], sProps[10], sProps[11], sProps[12], sProps[13], sProps[14], sProps[15]);
              this.matrix.transform(pProps[0], pProps[1], pProps[2], pProps[3], pProps[4], pProps[5], pProps[6], pProps[7], pProps[8], pProps[9], pProps[10], pProps[11], pProps[12], pProps[13], pProps[14], pProps[15]);
              for (j = 0; j < jLen; j += 1) {
                itemsTransform[j] = this.matrix.props[j];
              }
              this.matrix.reset();
            } else {
              this.matrix.reset();
              for (j = 0; j < jLen; j += 1) {
                itemsTransform[j] = this.matrix.props[j];
              }
            }
            iteration += 1;
            cont -= 1;
            i6 += dir;
          }
        } else {
          cont = this._currentCopies;
          i6 = 0;
          dir = 1;
          while (cont) {
            items = this.elemsData[i6].it;
            itemsTransform = items[items.length - 1].transform.mProps.v.props;
            items[items.length - 1].transform.mProps._mdf = false;
            items[items.length - 1].transform.op._mdf = false;
            cont -= 1;
            i6 += dir;
          }
        }
        return hasReloaded;
      };
      RepeaterModifier.prototype.addShape = function() {
      };
      function RoundCornersModifier() {
      }
      extendPrototype([ShapeModifier], RoundCornersModifier);
      RoundCornersModifier.prototype.initModifierProperties = function(elem2, data2) {
        this.getValue = this.processKeys;
        this.rd = PropertyFactory.getProp(elem2, data2.r, 0, null, this);
        this._isAnimated = !!this.rd.effectsSequence.length;
      };
      RoundCornersModifier.prototype.processPath = function(path, round) {
        var clonedPath = shapePool.newElement();
        clonedPath.c = path.c;
        var i6;
        var len = path._length;
        var currentV;
        var currentI;
        var currentO;
        var closerV;
        var distance;
        var newPosPerc;
        var index2 = 0;
        var vX;
        var vY;
        var oX;
        var oY;
        var iX;
        var iY;
        for (i6 = 0; i6 < len; i6 += 1) {
          currentV = path.v[i6];
          currentO = path.o[i6];
          currentI = path.i[i6];
          if (currentV[0] === currentO[0] && currentV[1] === currentO[1] && currentV[0] === currentI[0] && currentV[1] === currentI[1]) {
            if ((i6 === 0 || i6 === len - 1) && !path.c) {
              clonedPath.setTripleAt(currentV[0], currentV[1], currentO[0], currentO[1], currentI[0], currentI[1], index2);
              index2 += 1;
            } else {
              if (i6 === 0) {
                closerV = path.v[len - 1];
              } else {
                closerV = path.v[i6 - 1];
              }
              distance = Math.sqrt(Math.pow(currentV[0] - closerV[0], 2) + Math.pow(currentV[1] - closerV[1], 2));
              newPosPerc = distance ? Math.min(distance / 2, round) / distance : 0;
              iX = currentV[0] + (closerV[0] - currentV[0]) * newPosPerc;
              vX = iX;
              iY = currentV[1] - (currentV[1] - closerV[1]) * newPosPerc;
              vY = iY;
              oX = vX - (vX - currentV[0]) * roundCorner;
              oY = vY - (vY - currentV[1]) * roundCorner;
              clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, index2);
              index2 += 1;
              if (i6 === len - 1) {
                closerV = path.v[0];
              } else {
                closerV = path.v[i6 + 1];
              }
              distance = Math.sqrt(Math.pow(currentV[0] - closerV[0], 2) + Math.pow(currentV[1] - closerV[1], 2));
              newPosPerc = distance ? Math.min(distance / 2, round) / distance : 0;
              oX = currentV[0] + (closerV[0] - currentV[0]) * newPosPerc;
              vX = oX;
              oY = currentV[1] + (closerV[1] - currentV[1]) * newPosPerc;
              vY = oY;
              iX = vX - (vX - currentV[0]) * roundCorner;
              iY = vY - (vY - currentV[1]) * roundCorner;
              clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, index2);
              index2 += 1;
            }
          } else {
            clonedPath.setTripleAt(path.v[i6][0], path.v[i6][1], path.o[i6][0], path.o[i6][1], path.i[i6][0], path.i[i6][1], index2);
            index2 += 1;
          }
        }
        return clonedPath;
      };
      RoundCornersModifier.prototype.processShapes = function(_isFirstFrame) {
        var shapePaths;
        var i6;
        var len = this.shapes.length;
        var j;
        var jLen;
        var rd = this.rd.v;
        if (rd !== 0) {
          var shapeData;
          var localShapeCollection;
          for (i6 = 0; i6 < len; i6 += 1) {
            shapeData = this.shapes[i6];
            localShapeCollection = shapeData.localShapeCollection;
            if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
              localShapeCollection.releaseShapes();
              shapeData.shape._mdf = true;
              shapePaths = shapeData.shape.paths.shapes;
              jLen = shapeData.shape.paths._length;
              for (j = 0; j < jLen; j += 1) {
                localShapeCollection.addShape(this.processPath(shapePaths[j], rd));
              }
            }
            shapeData.shape.paths = shapeData.localShapeCollection;
          }
        }
        if (!this.dynamicProperties.length) {
          this._mdf = false;
        }
      };
      function floatEqual(a, b) {
        return Math.abs(a - b) * 1e5 <= Math.min(Math.abs(a), Math.abs(b));
      }
      function floatZero(f) {
        return Math.abs(f) <= 1e-5;
      }
      function lerp(p0, p1, amount) {
        return p0 * (1 - amount) + p1 * amount;
      }
      function lerpPoint(p0, p1, amount) {
        return [lerp(p0[0], p1[0], amount), lerp(p0[1], p1[1], amount)];
      }
      function quadRoots(a, b, c10) {
        if (a === 0)
          return [];
        var s8 = b * b - 4 * a * c10;
        if (s8 < 0)
          return [];
        var singleRoot = -b / (2 * a);
        if (s8 === 0)
          return [singleRoot];
        var delta = Math.sqrt(s8) / (2 * a);
        return [singleRoot - delta, singleRoot + delta];
      }
      function polynomialCoefficients(p0, p1, p22, p32) {
        return [-p0 + 3 * p1 - 3 * p22 + p32, 3 * p0 - 6 * p1 + 3 * p22, -3 * p0 + 3 * p1, p0];
      }
      function singlePoint(p10) {
        return new PolynomialBezier(p10, p10, p10, p10, false);
      }
      function PolynomialBezier(p0, p1, p22, p32, linearize) {
        if (linearize && pointEqual(p0, p1)) {
          p1 = lerpPoint(p0, p32, 1 / 3);
        }
        if (linearize && pointEqual(p22, p32)) {
          p22 = lerpPoint(p0, p32, 2 / 3);
        }
        var coeffx = polynomialCoefficients(p0[0], p1[0], p22[0], p32[0]);
        var coeffy = polynomialCoefficients(p0[1], p1[1], p22[1], p32[1]);
        this.a = [coeffx[0], coeffy[0]];
        this.b = [coeffx[1], coeffy[1]];
        this.c = [coeffx[2], coeffy[2]];
        this.d = [coeffx[3], coeffy[3]];
        this.points = [p0, p1, p22, p32];
      }
      PolynomialBezier.prototype.point = function(t) {
        return [((this.a[0] * t + this.b[0]) * t + this.c[0]) * t + this.d[0], ((this.a[1] * t + this.b[1]) * t + this.c[1]) * t + this.d[1]];
      };
      PolynomialBezier.prototype.derivative = function(t) {
        return [(3 * t * this.a[0] + 2 * this.b[0]) * t + this.c[0], (3 * t * this.a[1] + 2 * this.b[1]) * t + this.c[1]];
      };
      PolynomialBezier.prototype.tangentAngle = function(t) {
        var p10 = this.derivative(t);
        return Math.atan2(p10[1], p10[0]);
      };
      PolynomialBezier.prototype.normalAngle = function(t) {
        var p10 = this.derivative(t);
        return Math.atan2(p10[0], p10[1]);
      };
      PolynomialBezier.prototype.inflectionPoints = function() {
        var denom = this.a[1] * this.b[0] - this.a[0] * this.b[1];
        if (floatZero(denom))
          return [];
        var tcusp = -0.5 * (this.a[1] * this.c[0] - this.a[0] * this.c[1]) / denom;
        var square = tcusp * tcusp - 1 / 3 * (this.b[1] * this.c[0] - this.b[0] * this.c[1]) / denom;
        if (square < 0)
          return [];
        var root = Math.sqrt(square);
        if (floatZero(root)) {
          if (root > 0 && root < 1)
            return [tcusp];
          return [];
        }
        return [tcusp - root, tcusp + root].filter(function(r) {
          return r > 0 && r < 1;
        });
      };
      PolynomialBezier.prototype.split = function(t) {
        if (t <= 0)
          return [singlePoint(this.points[0]), this];
        if (t >= 1)
          return [this, singlePoint(this.points[this.points.length - 1])];
        var p10 = lerpPoint(this.points[0], this.points[1], t);
        var p11 = lerpPoint(this.points[1], this.points[2], t);
        var p12 = lerpPoint(this.points[2], this.points[3], t);
        var p20 = lerpPoint(p10, p11, t);
        var p21 = lerpPoint(p11, p12, t);
        var p32 = lerpPoint(p20, p21, t);
        return [new PolynomialBezier(this.points[0], p10, p20, p32, true), new PolynomialBezier(p32, p21, p12, this.points[3], true)];
      };
      function extrema(bez2, comp2) {
        var min = bez2.points[0][comp2];
        var max = bez2.points[bez2.points.length - 1][comp2];
        if (min > max) {
          var e2 = max;
          max = min;
          min = e2;
        }
        var f = quadRoots(3 * bez2.a[comp2], 2 * bez2.b[comp2], bez2.c[comp2]);
        for (var i6 = 0; i6 < f.length; i6 += 1) {
          if (f[i6] > 0 && f[i6] < 1) {
            var val2 = bez2.point(f[i6])[comp2];
            if (val2 < min)
              min = val2;
            else if (val2 > max)
              max = val2;
          }
        }
        return {
          min,
          max
        };
      }
      PolynomialBezier.prototype.bounds = function() {
        return {
          x: extrema(this, 0),
          y: extrema(this, 1)
        };
      };
      PolynomialBezier.prototype.boundingBox = function() {
        var bounds = this.bounds();
        return {
          left: bounds.x.min,
          right: bounds.x.max,
          top: bounds.y.min,
          bottom: bounds.y.max,
          width: bounds.x.max - bounds.x.min,
          height: bounds.y.max - bounds.y.min,
          cx: (bounds.x.max + bounds.x.min) / 2,
          cy: (bounds.y.max + bounds.y.min) / 2
        };
      };
      function intersectData(bez2, t1, t2) {
        var box = bez2.boundingBox();
        return {
          cx: box.cx,
          cy: box.cy,
          width: box.width,
          height: box.height,
          bez: bez2,
          t: (t1 + t2) / 2,
          t1,
          t2
        };
      }
      function splitData(data2) {
        var split = data2.bez.split(0.5);
        return [intersectData(split[0], data2.t1, data2.t), intersectData(split[1], data2.t, data2.t2)];
      }
      function boxIntersect(b1, b2) {
        return Math.abs(b1.cx - b2.cx) * 2 < b1.width + b2.width && Math.abs(b1.cy - b2.cy) * 2 < b1.height + b2.height;
      }
      function intersectsImpl(d1, d210, depth, tolerance, intersections, maxRecursion) {
        if (!boxIntersect(d1, d210))
          return;
        if (depth >= maxRecursion || d1.width <= tolerance && d1.height <= tolerance && d210.width <= tolerance && d210.height <= tolerance) {
          intersections.push([d1.t, d210.t]);
          return;
        }
        var d1s = splitData(d1);
        var d2s = splitData(d210);
        intersectsImpl(d1s[0], d2s[0], depth + 1, tolerance, intersections, maxRecursion);
        intersectsImpl(d1s[0], d2s[1], depth + 1, tolerance, intersections, maxRecursion);
        intersectsImpl(d1s[1], d2s[0], depth + 1, tolerance, intersections, maxRecursion);
        intersectsImpl(d1s[1], d2s[1], depth + 1, tolerance, intersections, maxRecursion);
      }
      PolynomialBezier.prototype.intersections = function(other, tolerance, maxRecursion) {
        if (tolerance === void 0)
          tolerance = 2;
        if (maxRecursion === void 0)
          maxRecursion = 7;
        var intersections = [];
        intersectsImpl(intersectData(this, 0, 1), intersectData(other, 0, 1), 0, tolerance, intersections, maxRecursion);
        return intersections;
      };
      PolynomialBezier.shapeSegment = function(shapePath, index2) {
        var nextIndex = (index2 + 1) % shapePath.length();
        return new PolynomialBezier(shapePath.v[index2], shapePath.o[index2], shapePath.i[nextIndex], shapePath.v[nextIndex], true);
      };
      PolynomialBezier.shapeSegmentInverted = function(shapePath, index2) {
        var nextIndex = (index2 + 1) % shapePath.length();
        return new PolynomialBezier(shapePath.v[nextIndex], shapePath.i[nextIndex], shapePath.o[index2], shapePath.v[index2], true);
      };
      function crossProduct(a, b) {
        return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
      }
      function lineIntersection(start1, end1, start2, end2) {
        var v1 = [start1[0], start1[1], 1];
        var v22 = [end1[0], end1[1], 1];
        var v3 = [start2[0], start2[1], 1];
        var v4 = [end2[0], end2[1], 1];
        var r = crossProduct(crossProduct(v1, v22), crossProduct(v3, v4));
        if (floatZero(r[2]))
          return null;
        return [r[0] / r[2], r[1] / r[2]];
      }
      function polarOffset(p10, angle, length2) {
        return [p10[0] + Math.cos(angle) * length2, p10[1] - Math.sin(angle) * length2];
      }
      function pointDistance(p1, p22) {
        return Math.hypot(p1[0] - p22[0], p1[1] - p22[1]);
      }
      function pointEqual(p1, p22) {
        return floatEqual(p1[0], p22[0]) && floatEqual(p1[1], p22[1]);
      }
      function ZigZagModifier() {
      }
      extendPrototype([ShapeModifier], ZigZagModifier);
      ZigZagModifier.prototype.initModifierProperties = function(elem2, data2) {
        this.getValue = this.processKeys;
        this.amplitude = PropertyFactory.getProp(elem2, data2.s, 0, null, this);
        this.frequency = PropertyFactory.getProp(elem2, data2.r, 0, null, this);
        this.pointsType = PropertyFactory.getProp(elem2, data2.pt, 0, null, this);
        this._isAnimated = this.amplitude.effectsSequence.length !== 0 || this.frequency.effectsSequence.length !== 0 || this.pointsType.effectsSequence.length !== 0;
      };
      function setPoint(outputBezier, point, angle, direction, amplitude, outAmplitude, inAmplitude) {
        var angO = angle - Math.PI / 2;
        var angI = angle + Math.PI / 2;
        var px = point[0] + Math.cos(angle) * direction * amplitude;
        var py = point[1] - Math.sin(angle) * direction * amplitude;
        outputBezier.setTripleAt(px, py, px + Math.cos(angO) * outAmplitude, py - Math.sin(angO) * outAmplitude, px + Math.cos(angI) * inAmplitude, py - Math.sin(angI) * inAmplitude, outputBezier.length());
      }
      function getPerpendicularVector(pt1, pt2) {
        var vector = [pt2[0] - pt1[0], pt2[1] - pt1[1]];
        var rot = -Math.PI * 0.5;
        var rotatedVector = [Math.cos(rot) * vector[0] - Math.sin(rot) * vector[1], Math.sin(rot) * vector[0] + Math.cos(rot) * vector[1]];
        return rotatedVector;
      }
      function getProjectingAngle(path, cur) {
        var prevIndex = cur === 0 ? path.length() - 1 : cur - 1;
        var nextIndex = (cur + 1) % path.length();
        var prevPoint = path.v[prevIndex];
        var nextPoint = path.v[nextIndex];
        var pVector = getPerpendicularVector(prevPoint, nextPoint);
        return Math.atan2(0, 1) - Math.atan2(pVector[1], pVector[0]);
      }
      function zigZagCorner(outputBezier, path, cur, amplitude, frequency, pointType, direction) {
        var angle = getProjectingAngle(path, cur);
        var point = path.v[cur % path._length];
        var prevPoint = path.v[cur === 0 ? path._length - 1 : cur - 1];
        var nextPoint = path.v[(cur + 1) % path._length];
        var prevDist = pointType === 2 ? Math.sqrt(Math.pow(point[0] - prevPoint[0], 2) + Math.pow(point[1] - prevPoint[1], 2)) : 0;
        var nextDist = pointType === 2 ? Math.sqrt(Math.pow(point[0] - nextPoint[0], 2) + Math.pow(point[1] - nextPoint[1], 2)) : 0;
        setPoint(outputBezier, path.v[cur % path._length], angle, direction, amplitude, nextDist / ((frequency + 1) * 2), prevDist / ((frequency + 1) * 2), pointType);
      }
      function zigZagSegment(outputBezier, segment, amplitude, frequency, pointType, direction) {
        for (var i6 = 0; i6 < frequency; i6 += 1) {
          var t = (i6 + 1) / (frequency + 1);
          var dist = pointType === 2 ? Math.sqrt(Math.pow(segment.points[3][0] - segment.points[0][0], 2) + Math.pow(segment.points[3][1] - segment.points[0][1], 2)) : 0;
          var angle = segment.normalAngle(t);
          var point = segment.point(t);
          setPoint(outputBezier, point, angle, direction, amplitude, dist / ((frequency + 1) * 2), dist / ((frequency + 1) * 2), pointType);
          direction = -direction;
        }
        return direction;
      }
      ZigZagModifier.prototype.processPath = function(path, amplitude, frequency, pointType) {
        var count = path._length;
        var clonedPath = shapePool.newElement();
        clonedPath.c = path.c;
        if (!path.c) {
          count -= 1;
        }
        if (count === 0)
          return clonedPath;
        var direction = -1;
        var segment = PolynomialBezier.shapeSegment(path, 0);
        zigZagCorner(clonedPath, path, 0, amplitude, frequency, pointType, direction);
        for (var i6 = 0; i6 < count; i6 += 1) {
          direction = zigZagSegment(clonedPath, segment, amplitude, frequency, pointType, -direction);
          if (i6 === count - 1 && !path.c) {
            segment = null;
          } else {
            segment = PolynomialBezier.shapeSegment(path, (i6 + 1) % count);
          }
          zigZagCorner(clonedPath, path, i6 + 1, amplitude, frequency, pointType, direction);
        }
        return clonedPath;
      };
      ZigZagModifier.prototype.processShapes = function(_isFirstFrame) {
        var shapePaths;
        var i6;
        var len = this.shapes.length;
        var j;
        var jLen;
        var amplitude = this.amplitude.v;
        var frequency = Math.max(0, Math.round(this.frequency.v));
        var pointType = this.pointsType.v;
        if (amplitude !== 0) {
          var shapeData;
          var localShapeCollection;
          for (i6 = 0; i6 < len; i6 += 1) {
            shapeData = this.shapes[i6];
            localShapeCollection = shapeData.localShapeCollection;
            if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
              localShapeCollection.releaseShapes();
              shapeData.shape._mdf = true;
              shapePaths = shapeData.shape.paths.shapes;
              jLen = shapeData.shape.paths._length;
              for (j = 0; j < jLen; j += 1) {
                localShapeCollection.addShape(this.processPath(shapePaths[j], amplitude, frequency, pointType));
              }
            }
            shapeData.shape.paths = shapeData.localShapeCollection;
          }
        }
        if (!this.dynamicProperties.length) {
          this._mdf = false;
        }
      };
      function linearOffset(p1, p22, amount) {
        var angle = Math.atan2(p22[0] - p1[0], p22[1] - p1[1]);
        return [polarOffset(p1, angle, amount), polarOffset(p22, angle, amount)];
      }
      function offsetSegment(segment, amount) {
        var p0;
        var p1a;
        var p1b;
        var p2b;
        var p2a;
        var p32;
        var e2;
        e2 = linearOffset(segment.points[0], segment.points[1], amount);
        p0 = e2[0];
        p1a = e2[1];
        e2 = linearOffset(segment.points[1], segment.points[2], amount);
        p1b = e2[0];
        p2b = e2[1];
        e2 = linearOffset(segment.points[2], segment.points[3], amount);
        p2a = e2[0];
        p32 = e2[1];
        var p1 = lineIntersection(p0, p1a, p1b, p2b);
        if (p1 === null)
          p1 = p1a;
        var p22 = lineIntersection(p2a, p32, p1b, p2b);
        if (p22 === null)
          p22 = p2a;
        return new PolynomialBezier(p0, p1, p22, p32);
      }
      function joinLines(outputBezier, seg1, seg2, lineJoin, miterLimit) {
        var p0 = seg1.points[3];
        var p1 = seg2.points[0];
        if (lineJoin === 3)
          return p0;
        if (pointEqual(p0, p1))
          return p0;
        if (lineJoin === 2) {
          var angleOut = -seg1.tangentAngle(1);
          var angleIn = -seg2.tangentAngle(0) + Math.PI;
          var center = lineIntersection(p0, polarOffset(p0, angleOut + Math.PI / 2, 100), p1, polarOffset(p1, angleOut + Math.PI / 2, 100));
          var radius = center ? pointDistance(center, p0) : pointDistance(p0, p1) / 2;
          var tan = polarOffset(p0, angleOut, 2 * radius * roundCorner);
          outputBezier.setXYAt(tan[0], tan[1], "o", outputBezier.length() - 1);
          tan = polarOffset(p1, angleIn, 2 * radius * roundCorner);
          outputBezier.setTripleAt(p1[0], p1[1], p1[0], p1[1], tan[0], tan[1], outputBezier.length());
          return p1;
        }
        var t0 = pointEqual(p0, seg1.points[2]) ? seg1.points[0] : seg1.points[2];
        var t1 = pointEqual(p1, seg2.points[1]) ? seg2.points[3] : seg2.points[1];
        var intersection = lineIntersection(t0, p0, p1, t1);
        if (intersection && pointDistance(intersection, p0) < miterLimit) {
          outputBezier.setTripleAt(intersection[0], intersection[1], intersection[0], intersection[1], intersection[0], intersection[1], outputBezier.length());
          return intersection;
        }
        return p0;
      }
      function getIntersection(a, b) {
        var intersect = a.intersections(b);
        if (intersect.length && floatEqual(intersect[0][0], 1))
          intersect.shift();
        if (intersect.length)
          return intersect[0];
        return null;
      }
      function pruneSegmentIntersection(a, b) {
        var outa = a.slice();
        var outb = b.slice();
        var intersect = getIntersection(a[a.length - 1], b[0]);
        if (intersect) {
          outa[a.length - 1] = a[a.length - 1].split(intersect[0])[0];
          outb[0] = b[0].split(intersect[1])[1];
        }
        if (a.length > 1 && b.length > 1) {
          intersect = getIntersection(a[0], b[b.length - 1]);
          if (intersect) {
            return [[a[0].split(intersect[0])[0]], [b[b.length - 1].split(intersect[1])[1]]];
          }
        }
        return [outa, outb];
      }
      function pruneIntersections(segments) {
        var e2;
        for (var i6 = 1; i6 < segments.length; i6 += 1) {
          e2 = pruneSegmentIntersection(segments[i6 - 1], segments[i6]);
          segments[i6 - 1] = e2[0];
          segments[i6] = e2[1];
        }
        if (segments.length > 1) {
          e2 = pruneSegmentIntersection(segments[segments.length - 1], segments[0]);
          segments[segments.length - 1] = e2[0];
          segments[0] = e2[1];
        }
        return segments;
      }
      function offsetSegmentSplit(segment, amount) {
        var flex = segment.inflectionPoints();
        var left;
        var right;
        var split;
        var mid;
        if (flex.length === 0) {
          return [offsetSegment(segment, amount)];
        }
        if (flex.length === 1 || floatEqual(flex[1], 1)) {
          split = segment.split(flex[0]);
          left = split[0];
          right = split[1];
          return [offsetSegment(left, amount), offsetSegment(right, amount)];
        }
        split = segment.split(flex[0]);
        left = split[0];
        var t = (flex[1] - flex[0]) / (1 - flex[0]);
        split = split[1].split(t);
        mid = split[0];
        right = split[1];
        return [offsetSegment(left, amount), offsetSegment(mid, amount), offsetSegment(right, amount)];
      }
      function OffsetPathModifier() {
      }
      extendPrototype([ShapeModifier], OffsetPathModifier);
      OffsetPathModifier.prototype.initModifierProperties = function(elem2, data2) {
        this.getValue = this.processKeys;
        this.amount = PropertyFactory.getProp(elem2, data2.a, 0, null, this);
        this.miterLimit = PropertyFactory.getProp(elem2, data2.ml, 0, null, this);
        this.lineJoin = data2.lj;
        this._isAnimated = this.amount.effectsSequence.length !== 0;
      };
      OffsetPathModifier.prototype.processPath = function(inputBezier, amount, lineJoin, miterLimit) {
        var outputBezier = shapePool.newElement();
        outputBezier.c = inputBezier.c;
        var count = inputBezier.length();
        if (!inputBezier.c) {
          count -= 1;
        }
        var i6;
        var j;
        var segment;
        var multiSegments = [];
        for (i6 = 0; i6 < count; i6 += 1) {
          segment = PolynomialBezier.shapeSegment(inputBezier, i6);
          multiSegments.push(offsetSegmentSplit(segment, amount));
        }
        if (!inputBezier.c) {
          for (i6 = count - 1; i6 >= 0; i6 -= 1) {
            segment = PolynomialBezier.shapeSegmentInverted(inputBezier, i6);
            multiSegments.push(offsetSegmentSplit(segment, amount));
          }
        }
        multiSegments = pruneIntersections(multiSegments);
        var lastPoint = null;
        var lastSeg = null;
        for (i6 = 0; i6 < multiSegments.length; i6 += 1) {
          var multiSegment = multiSegments[i6];
          if (lastSeg)
            lastPoint = joinLines(outputBezier, lastSeg, multiSegment[0], lineJoin, miterLimit);
          lastSeg = multiSegment[multiSegment.length - 1];
          for (j = 0; j < multiSegment.length; j += 1) {
            segment = multiSegment[j];
            if (lastPoint && pointEqual(segment.points[0], lastPoint)) {
              outputBezier.setXYAt(segment.points[1][0], segment.points[1][1], "o", outputBezier.length() - 1);
            } else {
              outputBezier.setTripleAt(segment.points[0][0], segment.points[0][1], segment.points[1][0], segment.points[1][1], segment.points[0][0], segment.points[0][1], outputBezier.length());
            }
            outputBezier.setTripleAt(segment.points[3][0], segment.points[3][1], segment.points[3][0], segment.points[3][1], segment.points[2][0], segment.points[2][1], outputBezier.length());
            lastPoint = segment.points[3];
          }
        }
        if (multiSegments.length)
          joinLines(outputBezier, lastSeg, multiSegments[0][0], lineJoin, miterLimit);
        return outputBezier;
      };
      OffsetPathModifier.prototype.processShapes = function(_isFirstFrame) {
        var shapePaths;
        var i6;
        var len = this.shapes.length;
        var j;
        var jLen;
        var amount = this.amount.v;
        var miterLimit = this.miterLimit.v;
        var lineJoin = this.lineJoin;
        if (amount !== 0) {
          var shapeData;
          var localShapeCollection;
          for (i6 = 0; i6 < len; i6 += 1) {
            shapeData = this.shapes[i6];
            localShapeCollection = shapeData.localShapeCollection;
            if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
              localShapeCollection.releaseShapes();
              shapeData.shape._mdf = true;
              shapePaths = shapeData.shape.paths.shapes;
              jLen = shapeData.shape.paths._length;
              for (j = 0; j < jLen; j += 1) {
                localShapeCollection.addShape(this.processPath(shapePaths[j], amount, lineJoin, miterLimit));
              }
            }
            shapeData.shape.paths = shapeData.localShapeCollection;
          }
        }
        if (!this.dynamicProperties.length) {
          this._mdf = false;
        }
      };
      function getFontProperties(fontData) {
        var styles = fontData.fStyle ? fontData.fStyle.split(" ") : [];
        var fWeight = "normal";
        var fStyle = "normal";
        var len = styles.length;
        var styleName;
        for (var i6 = 0; i6 < len; i6 += 1) {
          styleName = styles[i6].toLowerCase();
          switch (styleName) {
            case "italic":
              fStyle = "italic";
              break;
            case "bold":
              fWeight = "700";
              break;
            case "black":
              fWeight = "900";
              break;
            case "medium":
              fWeight = "500";
              break;
            case "regular":
            case "normal":
              fWeight = "400";
              break;
            case "light":
            case "thin":
              fWeight = "200";
              break;
            default:
              break;
          }
        }
        return {
          style: fStyle,
          weight: fontData.fWeight || fWeight
        };
      }
      var FontManager = function() {
        var maxWaitingTime = 5e3;
        var emptyChar = {
          w: 0,
          size: 0,
          shapes: [],
          data: {
            shapes: []
          }
        };
        var combinedCharacters = [];
        combinedCharacters = combinedCharacters.concat([2304, 2305, 2306, 2307, 2362, 2363, 2364, 2364, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2387, 2388, 2389, 2390, 2391, 2402, 2403]);
        var BLACK_FLAG_CODE_POINT = 127988;
        var CANCEL_TAG_CODE_POINT = 917631;
        var A_TAG_CODE_POINT = 917601;
        var Z_TAG_CODE_POINT = 917626;
        var VARIATION_SELECTOR_16_CODE_POINT = 65039;
        var ZERO_WIDTH_JOINER_CODE_POINT = 8205;
        var REGIONAL_CHARACTER_A_CODE_POINT = 127462;
        var REGIONAL_CHARACTER_Z_CODE_POINT = 127487;
        var surrogateModifiers = ["d83cdffb", "d83cdffc", "d83cdffd", "d83cdffe", "d83cdfff"];
        function trimFontOptions(font) {
          var familyArray = font.split(",");
          var i6;
          var len = familyArray.length;
          var enabledFamilies = [];
          for (i6 = 0; i6 < len; i6 += 1) {
            if (familyArray[i6] !== "sans-serif" && familyArray[i6] !== "monospace") {
              enabledFamilies.push(familyArray[i6]);
            }
          }
          return enabledFamilies.join(",");
        }
        function setUpNode(font, family) {
          var parentNode = createTag("span");
          parentNode.setAttribute("aria-hidden", true);
          parentNode.style.fontFamily = family;
          var node = createTag("span");
          node.innerText = "giItT1WQy@!-/#";
          parentNode.style.position = "absolute";
          parentNode.style.left = "-10000px";
          parentNode.style.top = "-10000px";
          parentNode.style.fontSize = "300px";
          parentNode.style.fontVariant = "normal";
          parentNode.style.fontStyle = "normal";
          parentNode.style.fontWeight = "normal";
          parentNode.style.letterSpacing = "0";
          parentNode.appendChild(node);
          document.body.appendChild(parentNode);
          var width2 = node.offsetWidth;
          node.style.fontFamily = trimFontOptions(font) + ", " + family;
          return {
            node,
            w: width2,
            parent: parentNode
          };
        }
        function checkLoadedFonts() {
          var i6;
          var len = this.fonts.length;
          var node;
          var w;
          var loadedCount = len;
          for (i6 = 0; i6 < len; i6 += 1) {
            if (this.fonts[i6].loaded) {
              loadedCount -= 1;
            } else if (this.fonts[i6].fOrigin === "n" || this.fonts[i6].origin === 0) {
              this.fonts[i6].loaded = true;
            } else {
              node = this.fonts[i6].monoCase.node;
              w = this.fonts[i6].monoCase.w;
              if (node.offsetWidth !== w) {
                loadedCount -= 1;
                this.fonts[i6].loaded = true;
              } else {
                node = this.fonts[i6].sansCase.node;
                w = this.fonts[i6].sansCase.w;
                if (node.offsetWidth !== w) {
                  loadedCount -= 1;
                  this.fonts[i6].loaded = true;
                }
              }
              if (this.fonts[i6].loaded) {
                this.fonts[i6].sansCase.parent.parentNode.removeChild(this.fonts[i6].sansCase.parent);
                this.fonts[i6].monoCase.parent.parentNode.removeChild(this.fonts[i6].monoCase.parent);
              }
            }
          }
          if (loadedCount !== 0 && Date.now() - this.initTime < maxWaitingTime) {
            setTimeout(this.checkLoadedFontsBinded, 20);
          } else {
            setTimeout(this.setIsLoadedBinded, 10);
          }
        }
        function createHelper(fontData, def) {
          var engine = document.body && def ? "svg" : "canvas";
          var helper;
          var fontProps = getFontProperties(fontData);
          if (engine === "svg") {
            var tHelper = createNS("text");
            tHelper.style.fontSize = "100px";
            tHelper.setAttribute("font-family", fontData.fFamily);
            tHelper.setAttribute("font-style", fontProps.style);
            tHelper.setAttribute("font-weight", fontProps.weight);
            tHelper.textContent = "1";
            if (fontData.fClass) {
              tHelper.style.fontFamily = "inherit";
              tHelper.setAttribute("class", fontData.fClass);
            } else {
              tHelper.style.fontFamily = fontData.fFamily;
            }
            def.appendChild(tHelper);
            helper = tHelper;
          } else {
            var tCanvasHelper = new OffscreenCanvas(500, 500).getContext("2d");
            tCanvasHelper.font = fontProps.style + " " + fontProps.weight + " 100px " + fontData.fFamily;
            helper = tCanvasHelper;
          }
          function measure(text3) {
            if (engine === "svg") {
              helper.textContent = text3;
              return helper.getComputedTextLength();
            }
            return helper.measureText(text3).width;
          }
          return {
            measureText: measure
          };
        }
        function addFonts(fontData, defs) {
          if (!fontData) {
            this.isLoaded = true;
            return;
          }
          if (this.chars) {
            this.isLoaded = true;
            this.fonts = fontData.list;
            return;
          }
          if (!document.body) {
            this.isLoaded = true;
            fontData.list.forEach(function(data2) {
              data2.helper = createHelper(data2);
              data2.cache = {};
            });
            this.fonts = fontData.list;
            return;
          }
          var fontArr = fontData.list;
          var i6;
          var len = fontArr.length;
          var _pendingFonts = len;
          for (i6 = 0; i6 < len; i6 += 1) {
            var shouldLoadFont = true;
            var loadedSelector;
            var j;
            fontArr[i6].loaded = false;
            fontArr[i6].monoCase = setUpNode(fontArr[i6].fFamily, "monospace");
            fontArr[i6].sansCase = setUpNode(fontArr[i6].fFamily, "sans-serif");
            if (!fontArr[i6].fPath) {
              fontArr[i6].loaded = true;
              _pendingFonts -= 1;
            } else if (fontArr[i6].fOrigin === "p" || fontArr[i6].origin === 3) {
              loadedSelector = document.querySelectorAll('style[f-forigin="p"][f-family="' + fontArr[i6].fFamily + '"], style[f-origin="3"][f-family="' + fontArr[i6].fFamily + '"]');
              if (loadedSelector.length > 0) {
                shouldLoadFont = false;
              }
              if (shouldLoadFont) {
                var s8 = createTag("style");
                s8.setAttribute("f-forigin", fontArr[i6].fOrigin);
                s8.setAttribute("f-origin", fontArr[i6].origin);
                s8.setAttribute("f-family", fontArr[i6].fFamily);
                s8.type = "text/css";
                s8.innerText = "@font-face {font-family: " + fontArr[i6].fFamily + "; font-style: normal; src: url('" + fontArr[i6].fPath + "');}";
                defs.appendChild(s8);
              }
            } else if (fontArr[i6].fOrigin === "g" || fontArr[i6].origin === 1) {
              loadedSelector = document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]');
              for (j = 0; j < loadedSelector.length; j += 1) {
                if (loadedSelector[j].href.indexOf(fontArr[i6].fPath) !== -1) {
                  shouldLoadFont = false;
                }
              }
              if (shouldLoadFont) {
                var l7 = createTag("link");
                l7.setAttribute("f-forigin", fontArr[i6].fOrigin);
                l7.setAttribute("f-origin", fontArr[i6].origin);
                l7.type = "text/css";
                l7.rel = "stylesheet";
                l7.href = fontArr[i6].fPath;
                document.body.appendChild(l7);
              }
            } else if (fontArr[i6].fOrigin === "t" || fontArr[i6].origin === 2) {
              loadedSelector = document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]');
              for (j = 0; j < loadedSelector.length; j += 1) {
                if (fontArr[i6].fPath === loadedSelector[j].src) {
                  shouldLoadFont = false;
                }
              }
              if (shouldLoadFont) {
                var sc = createTag("link");
                sc.setAttribute("f-forigin", fontArr[i6].fOrigin);
                sc.setAttribute("f-origin", fontArr[i6].origin);
                sc.setAttribute("rel", "stylesheet");
                sc.setAttribute("href", fontArr[i6].fPath);
                defs.appendChild(sc);
              }
            }
            fontArr[i6].helper = createHelper(fontArr[i6], defs);
            fontArr[i6].cache = {};
            this.fonts.push(fontArr[i6]);
          }
          if (_pendingFonts === 0) {
            this.isLoaded = true;
          } else {
            setTimeout(this.checkLoadedFonts.bind(this), 100);
          }
        }
        function addChars(chars) {
          if (!chars) {
            return;
          }
          if (!this.chars) {
            this.chars = [];
          }
          var i6;
          var len = chars.length;
          var j;
          var jLen = this.chars.length;
          var found;
          for (i6 = 0; i6 < len; i6 += 1) {
            j = 0;
            found = false;
            while (j < jLen) {
              if (this.chars[j].style === chars[i6].style && this.chars[j].fFamily === chars[i6].fFamily && this.chars[j].ch === chars[i6].ch) {
                found = true;
              }
              j += 1;
            }
            if (!found) {
              this.chars.push(chars[i6]);
              jLen += 1;
            }
          }
        }
        function getCharData(_char, style, font) {
          var i6 = 0;
          var len = this.chars.length;
          while (i6 < len) {
            if (this.chars[i6].ch === _char && this.chars[i6].style === style && this.chars[i6].fFamily === font) {
              return this.chars[i6];
            }
            i6 += 1;
          }
          if ((typeof _char === "string" && _char.charCodeAt(0) !== 13 || !_char) && console && console.warn && !this._warned) {
            this._warned = true;
            console.warn("Missing character from exported characters list: ", _char, style, font);
          }
          return emptyChar;
        }
        function measureText(_char2, fontName, size) {
          var fontData = this.getFontByName(fontName);
          var index2 = _char2;
          if (!fontData.cache[index2]) {
            var tHelper = fontData.helper;
            if (_char2 === " ") {
              var doubleSize = tHelper.measureText("|" + _char2 + "|");
              var singleSize = tHelper.measureText("||");
              fontData.cache[index2] = (doubleSize - singleSize) / 100;
            } else {
              fontData.cache[index2] = tHelper.measureText(_char2) / 100;
            }
          }
          return fontData.cache[index2] * size;
        }
        function getFontByName(name2) {
          var i6 = 0;
          var len = this.fonts.length;
          while (i6 < len) {
            if (this.fonts[i6].fName === name2) {
              return this.fonts[i6];
            }
            i6 += 1;
          }
          return this.fonts[0];
        }
        function getCodePoint(string3) {
          var codePoint = 0;
          var first = string3.charCodeAt(0);
          if (first >= 55296 && first <= 56319) {
            var second = string3.charCodeAt(1);
            if (second >= 56320 && second <= 57343) {
              codePoint = (first - 55296) * 1024 + second - 56320 + 65536;
            }
          }
          return codePoint;
        }
        function isModifier(firstCharCode, secondCharCode) {
          var sum2 = firstCharCode.toString(16) + secondCharCode.toString(16);
          return surrogateModifiers.indexOf(sum2) !== -1;
        }
        function isZeroWidthJoiner(charCode) {
          return charCode === ZERO_WIDTH_JOINER_CODE_POINT;
        }
        function isVariationSelector(charCode) {
          return charCode === VARIATION_SELECTOR_16_CODE_POINT;
        }
        function isRegionalCode(string3) {
          var codePoint = getCodePoint(string3);
          if (codePoint >= REGIONAL_CHARACTER_A_CODE_POINT && codePoint <= REGIONAL_CHARACTER_Z_CODE_POINT) {
            return true;
          }
          return false;
        }
        function isFlagEmoji(string3) {
          return isRegionalCode(string3.substr(0, 2)) && isRegionalCode(string3.substr(2, 2));
        }
        function isCombinedCharacter(_char3) {
          return combinedCharacters.indexOf(_char3) !== -1;
        }
        function isRegionalFlag(text3, index2) {
          var codePoint = getCodePoint(text3.substr(index2, 2));
          if (codePoint !== BLACK_FLAG_CODE_POINT) {
            return false;
          }
          var count = 0;
          index2 += 2;
          while (count < 5) {
            codePoint = getCodePoint(text3.substr(index2, 2));
            if (codePoint < A_TAG_CODE_POINT || codePoint > Z_TAG_CODE_POINT) {
              return false;
            }
            count += 1;
            index2 += 2;
          }
          return getCodePoint(text3.substr(index2, 2)) === CANCEL_TAG_CODE_POINT;
        }
        function setIsLoaded() {
          this.isLoaded = true;
        }
        var Font = function Font2() {
          this.fonts = [];
          this.chars = null;
          this.typekitLoaded = 0;
          this.isLoaded = false;
          this._warned = false;
          this.initTime = Date.now();
          this.setIsLoadedBinded = this.setIsLoaded.bind(this);
          this.checkLoadedFontsBinded = this.checkLoadedFonts.bind(this);
        };
        Font.isModifier = isModifier;
        Font.isZeroWidthJoiner = isZeroWidthJoiner;
        Font.isFlagEmoji = isFlagEmoji;
        Font.isRegionalCode = isRegionalCode;
        Font.isCombinedCharacter = isCombinedCharacter;
        Font.isRegionalFlag = isRegionalFlag;
        Font.isVariationSelector = isVariationSelector;
        Font.BLACK_FLAG_CODE_POINT = BLACK_FLAG_CODE_POINT;
        var fontPrototype = {
          addChars,
          addFonts,
          getCharData,
          getFontByName,
          measureText,
          checkLoadedFonts,
          setIsLoaded
        };
        Font.prototype = fontPrototype;
        return Font;
      }();
      function SlotManager(animationData2) {
        this.animationData = animationData2;
      }
      SlotManager.prototype.getProp = function(data2) {
        if (this.animationData.slots && this.animationData.slots[data2.sid]) {
          return Object.assign(data2, this.animationData.slots[data2.sid].p);
        }
        return data2;
      };
      function slotFactory(animationData2) {
        return new SlotManager(animationData2);
      }
      function RenderableElement() {
      }
      RenderableElement.prototype = {
        initRenderable: function initRenderable() {
          this.isInRange = false;
          this.hidden = false;
          this.isTransparent = false;
          this.renderableComponents = [];
        },
        addRenderableComponent: function addRenderableComponent(component) {
          if (this.renderableComponents.indexOf(component) === -1) {
            this.renderableComponents.push(component);
          }
        },
        removeRenderableComponent: function removeRenderableComponent(component) {
          if (this.renderableComponents.indexOf(component) !== -1) {
            this.renderableComponents.splice(this.renderableComponents.indexOf(component), 1);
          }
        },
        prepareRenderableFrame: function prepareRenderableFrame(num) {
          this.checkLayerLimits(num);
        },
        checkTransparency: function checkTransparency() {
          if (this.finalTransform.mProp.o.v <= 0) {
            if (!this.isTransparent && this.globalData.renderConfig.hideOnTransparent) {
              this.isTransparent = true;
              this.hide();
            }
          } else if (this.isTransparent) {
            this.isTransparent = false;
            this.show();
          }
        },
        /**
           * @function
           * Initializes frame related properties.
           *
           * @param {number} num
           * current frame number in Layer's time
           *
           */
        checkLayerLimits: function checkLayerLimits(num) {
          if (this.data.ip - this.data.st <= num && this.data.op - this.data.st > num) {
            if (this.isInRange !== true) {
              this.globalData._mdf = true;
              this._mdf = true;
              this.isInRange = true;
              this.show();
            }
          } else if (this.isInRange !== false) {
            this.globalData._mdf = true;
            this.isInRange = false;
            this.hide();
          }
        },
        renderRenderable: function renderRenderable() {
          var i6;
          var len = this.renderableComponents.length;
          for (i6 = 0; i6 < len; i6 += 1) {
            this.renderableComponents[i6].renderFrame(this._isFirstFrame);
          }
        },
        sourceRectAtTime: function sourceRectAtTime2() {
          return {
            top: 0,
            left: 0,
            width: 100,
            height: 100
          };
        },
        getLayerSize: function getLayerSize() {
          if (this.data.ty === 5) {
            return {
              w: this.data.textData.width,
              h: this.data.textData.height
            };
          }
          return {
            w: this.data.width,
            h: this.data.height
          };
        }
      };
      var getBlendMode = function() {
        var blendModeEnums = {
          0: "source-over",
          1: "multiply",
          2: "screen",
          3: "overlay",
          4: "darken",
          5: "lighten",
          6: "color-dodge",
          7: "color-burn",
          8: "hard-light",
          9: "soft-light",
          10: "difference",
          11: "exclusion",
          12: "hue",
          13: "saturation",
          14: "color",
          15: "luminosity"
        };
        return function(mode) {
          return blendModeEnums[mode] || "";
        };
      }();
      function SliderEffect(data2, elem2, container) {
        this.p = PropertyFactory.getProp(elem2, data2.v, 0, 0, container);
      }
      function AngleEffect(data2, elem2, container) {
        this.p = PropertyFactory.getProp(elem2, data2.v, 0, 0, container);
      }
      function ColorEffect(data2, elem2, container) {
        this.p = PropertyFactory.getProp(elem2, data2.v, 1, 0, container);
      }
      function PointEffect(data2, elem2, container) {
        this.p = PropertyFactory.getProp(elem2, data2.v, 1, 0, container);
      }
      function LayerIndexEffect(data2, elem2, container) {
        this.p = PropertyFactory.getProp(elem2, data2.v, 0, 0, container);
      }
      function MaskIndexEffect(data2, elem2, container) {
        this.p = PropertyFactory.getProp(elem2, data2.v, 0, 0, container);
      }
      function CheckboxEffect(data2, elem2, container) {
        this.p = PropertyFactory.getProp(elem2, data2.v, 0, 0, container);
      }
      function NoValueEffect() {
        this.p = {};
      }
      function EffectsManager(data2, element) {
        var effects = data2.ef || [];
        this.effectElements = [];
        var i6;
        var len = effects.length;
        var effectItem;
        for (i6 = 0; i6 < len; i6 += 1) {
          effectItem = new GroupEffect(effects[i6], element);
          this.effectElements.push(effectItem);
        }
      }
      function GroupEffect(data2, element) {
        this.init(data2, element);
      }
      extendPrototype([DynamicPropertyContainer], GroupEffect);
      GroupEffect.prototype.getValue = GroupEffect.prototype.iterateDynamicProperties;
      GroupEffect.prototype.init = function(data2, element) {
        this.data = data2;
        this.effectElements = [];
        this.initDynamicPropertyContainer(element);
        var i6;
        var len = this.data.ef.length;
        var eff;
        var effects = this.data.ef;
        for (i6 = 0; i6 < len; i6 += 1) {
          eff = null;
          switch (effects[i6].ty) {
            case 0:
              eff = new SliderEffect(effects[i6], element, this);
              break;
            case 1:
              eff = new AngleEffect(effects[i6], element, this);
              break;
            case 2:
              eff = new ColorEffect(effects[i6], element, this);
              break;
            case 3:
              eff = new PointEffect(effects[i6], element, this);
              break;
            case 4:
            case 7:
              eff = new CheckboxEffect(effects[i6], element, this);
              break;
            case 10:
              eff = new LayerIndexEffect(effects[i6], element, this);
              break;
            case 11:
              eff = new MaskIndexEffect(effects[i6], element, this);
              break;
            case 5:
              eff = new EffectsManager(effects[i6], element, this);
              break;
            default:
              eff = new NoValueEffect(effects[i6], element, this);
              break;
          }
          if (eff) {
            this.effectElements.push(eff);
          }
        }
      };
      function BaseElement() {
      }
      BaseElement.prototype = {
        checkMasks: function checkMasks() {
          if (!this.data.hasMask) {
            return false;
          }
          var i6 = 0;
          var len = this.data.masksProperties.length;
          while (i6 < len) {
            if (this.data.masksProperties[i6].mode !== "n" && this.data.masksProperties[i6].cl !== false) {
              return true;
            }
            i6 += 1;
          }
          return false;
        },
        initExpressions: function initExpressions() {
          var expressionsInterfaces2 = getExpressionInterfaces();
          if (!expressionsInterfaces2) {
            return;
          }
          var LayerExpressionInterface2 = expressionsInterfaces2("layer");
          var EffectsExpressionInterface2 = expressionsInterfaces2("effects");
          var ShapeExpressionInterface2 = expressionsInterfaces2("shape");
          var TextExpressionInterface2 = expressionsInterfaces2("text");
          var CompExpressionInterface2 = expressionsInterfaces2("comp");
          this.layerInterface = LayerExpressionInterface2(this);
          if (this.data.hasMask && this.maskManager) {
            this.layerInterface.registerMaskInterface(this.maskManager);
          }
          var effectsInterface = EffectsExpressionInterface2.createEffectsInterface(this, this.layerInterface);
          this.layerInterface.registerEffectsInterface(effectsInterface);
          if (this.data.ty === 0 || this.data.xt) {
            this.compInterface = CompExpressionInterface2(this);
          } else if (this.data.ty === 4) {
            this.layerInterface.shapeInterface = ShapeExpressionInterface2(this.shapesData, this.itemsData, this.layerInterface);
            this.layerInterface.content = this.layerInterface.shapeInterface;
          } else if (this.data.ty === 5) {
            this.layerInterface.textInterface = TextExpressionInterface2(this);
            this.layerInterface.text = this.layerInterface.textInterface;
          }
        },
        setBlendMode: function setBlendMode() {
          var blendModeValue = getBlendMode(this.data.bm);
          var elem2 = this.baseElement || this.layerElement;
          elem2.style["mix-blend-mode"] = blendModeValue;
        },
        initBaseData: function initBaseData(data2, globalData2, comp2) {
          this.globalData = globalData2;
          this.comp = comp2;
          this.data = data2;
          this.layerId = createElementID();
          if (!this.data.sr) {
            this.data.sr = 1;
          }
          this.effectsManager = new EffectsManager(this.data, this, this.dynamicProperties);
        },
        getType: function getType() {
          return this.type;
        },
        sourceRectAtTime: function sourceRectAtTime2() {
        }
      };
      function FrameElement() {
      }
      FrameElement.prototype = {
        /**
           * @function
           * Initializes frame related properties.
           *
           */
        initFrame: function initFrame2() {
          this._isFirstFrame = false;
          this.dynamicProperties = [];
          this._mdf = false;
        },
        /**
           * @function
           * Calculates all dynamic values
           *
           * @param {number} num
           * current frame number in Layer's time
           * @param {boolean} isVisible
           * if layers is currently in range
           *
           */
        prepareProperties: function prepareProperties(num, isVisible) {
          var i6;
          var len = this.dynamicProperties.length;
          for (i6 = 0; i6 < len; i6 += 1) {
            if (isVisible || this._isParent && this.dynamicProperties[i6].propType === "transform") {
              this.dynamicProperties[i6].getValue();
              if (this.dynamicProperties[i6]._mdf) {
                this.globalData._mdf = true;
                this._mdf = true;
              }
            }
          }
        },
        addDynamicProperty: function addDynamicProperty(prop) {
          if (this.dynamicProperties.indexOf(prop) === -1) {
            this.dynamicProperties.push(prop);
          }
        }
      };
      function FootageElement(data2, globalData2, comp2) {
        this.initFrame();
        this.initRenderable();
        this.assetData = globalData2.getAssetData(data2.refId);
        this.footageData = globalData2.imageLoader.getAsset(this.assetData);
        this.initBaseData(data2, globalData2, comp2);
      }
      FootageElement.prototype.prepareFrame = function() {
      };
      extendPrototype([RenderableElement, BaseElement, FrameElement], FootageElement);
      FootageElement.prototype.getBaseElement = function() {
        return null;
      };
      FootageElement.prototype.renderFrame = function() {
      };
      FootageElement.prototype.destroy = function() {
      };
      FootageElement.prototype.initExpressions = function() {
        var expressionsInterfaces2 = getExpressionInterfaces();
        if (!expressionsInterfaces2) {
          return;
        }
        var FootageInterface2 = expressionsInterfaces2("footage");
        this.layerInterface = FootageInterface2(this);
      };
      FootageElement.prototype.getFootageData = function() {
        return this.footageData;
      };
      function AudioElement(data2, globalData2, comp2) {
        this.initFrame();
        this.initRenderable();
        this.assetData = globalData2.getAssetData(data2.refId);
        this.initBaseData(data2, globalData2, comp2);
        this._isPlaying = false;
        this._canPlay = false;
        var assetPath = this.globalData.getAssetsPath(this.assetData);
        this.audio = this.globalData.audioController.createAudio(assetPath);
        this._currentTime = 0;
        this.globalData.audioController.addAudio(this);
        this._volumeMultiplier = 1;
        this._volume = 1;
        this._previousVolume = null;
        this.tm = data2.tm ? PropertyFactory.getProp(this, data2.tm, 0, globalData2.frameRate, this) : {
          _placeholder: true
        };
        this.lv = PropertyFactory.getProp(this, data2.au && data2.au.lv ? data2.au.lv : {
          k: [100]
        }, 1, 0.01, this);
      }
      AudioElement.prototype.prepareFrame = function(num) {
        this.prepareRenderableFrame(num, true);
        this.prepareProperties(num, true);
        if (!this.tm._placeholder) {
          var timeRemapped = this.tm.v;
          this._currentTime = timeRemapped;
        } else {
          this._currentTime = num / this.data.sr;
        }
        this._volume = this.lv.v[0];
        var totalVolume = this._volume * this._volumeMultiplier;
        if (this._previousVolume !== totalVolume) {
          this._previousVolume = totalVolume;
          this.audio.volume(totalVolume);
        }
      };
      extendPrototype([RenderableElement, BaseElement, FrameElement], AudioElement);
      AudioElement.prototype.renderFrame = function() {
        if (this.isInRange && this._canPlay) {
          if (!this._isPlaying) {
            this.audio.play();
            this.audio.seek(this._currentTime / this.globalData.frameRate);
            this._isPlaying = true;
          } else if (!this.audio.playing() || Math.abs(this._currentTime / this.globalData.frameRate - this.audio.seek()) > 0.1) {
            this.audio.seek(this._currentTime / this.globalData.frameRate);
          }
        }
      };
      AudioElement.prototype.show = function() {
      };
      AudioElement.prototype.hide = function() {
        this.audio.pause();
        this._isPlaying = false;
      };
      AudioElement.prototype.pause = function() {
        this.audio.pause();
        this._isPlaying = false;
        this._canPlay = false;
      };
      AudioElement.prototype.resume = function() {
        this._canPlay = true;
      };
      AudioElement.prototype.setRate = function(rateValue) {
        this.audio.rate(rateValue);
      };
      AudioElement.prototype.volume = function(volumeValue) {
        this._volumeMultiplier = volumeValue;
        this._previousVolume = volumeValue * this._volume;
        this.audio.volume(this._previousVolume);
      };
      AudioElement.prototype.getBaseElement = function() {
        return null;
      };
      AudioElement.prototype.destroy = function() {
      };
      AudioElement.prototype.sourceRectAtTime = function() {
      };
      AudioElement.prototype.initExpressions = function() {
      };
      function BaseRenderer() {
      }
      BaseRenderer.prototype.checkLayers = function(num) {
        var i6;
        var len = this.layers.length;
        var data2;
        this.completeLayers = true;
        for (i6 = len - 1; i6 >= 0; i6 -= 1) {
          if (!this.elements[i6]) {
            data2 = this.layers[i6];
            if (data2.ip - data2.st <= num - this.layers[i6].st && data2.op - data2.st > num - this.layers[i6].st) {
              this.buildItem(i6);
            }
          }
          this.completeLayers = this.elements[i6] ? this.completeLayers : false;
        }
        this.checkPendingElements();
      };
      BaseRenderer.prototype.createItem = function(layer) {
        switch (layer.ty) {
          case 2:
            return this.createImage(layer);
          case 0:
            return this.createComp(layer);
          case 1:
            return this.createSolid(layer);
          case 3:
            return this.createNull(layer);
          case 4:
            return this.createShape(layer);
          case 5:
            return this.createText(layer);
          case 6:
            return this.createAudio(layer);
          case 13:
            return this.createCamera(layer);
          case 15:
            return this.createFootage(layer);
          default:
            return this.createNull(layer);
        }
      };
      BaseRenderer.prototype.createCamera = function() {
        throw new Error("You're using a 3d camera. Try the html renderer.");
      };
      BaseRenderer.prototype.createAudio = function(data2) {
        return new AudioElement(data2, this.globalData, this);
      };
      BaseRenderer.prototype.createFootage = function(data2) {
        return new FootageElement(data2, this.globalData, this);
      };
      BaseRenderer.prototype.buildAllItems = function() {
        var i6;
        var len = this.layers.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          this.buildItem(i6);
        }
        this.checkPendingElements();
      };
      BaseRenderer.prototype.includeLayers = function(newLayers) {
        this.completeLayers = false;
        var i6;
        var len = newLayers.length;
        var j;
        var jLen = this.layers.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          j = 0;
          while (j < jLen) {
            if (this.layers[j].id === newLayers[i6].id) {
              this.layers[j] = newLayers[i6];
              break;
            }
            j += 1;
          }
        }
      };
      BaseRenderer.prototype.setProjectInterface = function(pInterface) {
        this.globalData.projectInterface = pInterface;
      };
      BaseRenderer.prototype.initItems = function() {
        if (!this.globalData.progressiveLoad) {
          this.buildAllItems();
        }
      };
      BaseRenderer.prototype.buildElementParenting = function(element, parentName, hierarchy) {
        var elements = this.elements;
        var layers = this.layers;
        var i6 = 0;
        var len = layers.length;
        while (i6 < len) {
          if (layers[i6].ind == parentName) {
            if (!elements[i6] || elements[i6] === true) {
              this.buildItem(i6);
              this.addPendingElement(element);
            } else {
              hierarchy.push(elements[i6]);
              elements[i6].setAsParent();
              if (layers[i6].parent !== void 0) {
                this.buildElementParenting(element, layers[i6].parent, hierarchy);
              } else {
                element.setHierarchy(hierarchy);
              }
            }
          }
          i6 += 1;
        }
      };
      BaseRenderer.prototype.addPendingElement = function(element) {
        this.pendingElements.push(element);
      };
      BaseRenderer.prototype.searchExtraCompositions = function(assets) {
        var i6;
        var len = assets.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          if (assets[i6].xt) {
            var comp2 = this.createComp(assets[i6]);
            comp2.initExpressions();
            this.globalData.projectInterface.registerComposition(comp2);
          }
        }
      };
      BaseRenderer.prototype.getElementById = function(ind) {
        var i6;
        var len = this.elements.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          if (this.elements[i6].data.ind === ind) {
            return this.elements[i6];
          }
        }
        return null;
      };
      BaseRenderer.prototype.getElementByPath = function(path) {
        var pathValue = path.shift();
        var element;
        if (typeof pathValue === "number") {
          element = this.elements[pathValue];
        } else {
          var i6;
          var len = this.elements.length;
          for (i6 = 0; i6 < len; i6 += 1) {
            if (this.elements[i6].data.nm === pathValue) {
              element = this.elements[i6];
              break;
            }
          }
        }
        if (path.length === 0) {
          return element;
        }
        return element.getElementByPath(path);
      };
      BaseRenderer.prototype.setupGlobalData = function(animData, fontsContainer) {
        this.globalData.fontManager = new FontManager();
        this.globalData.slotManager = slotFactory(animData);
        this.globalData.fontManager.addChars(animData.chars);
        this.globalData.fontManager.addFonts(animData.fonts, fontsContainer);
        this.globalData.getAssetData = this.animationItem.getAssetData.bind(this.animationItem);
        this.globalData.getAssetsPath = this.animationItem.getAssetsPath.bind(this.animationItem);
        this.globalData.imageLoader = this.animationItem.imagePreloader;
        this.globalData.audioController = this.animationItem.audioController;
        this.globalData.frameId = 0;
        this.globalData.frameRate = animData.fr;
        this.globalData.nm = animData.nm;
        this.globalData.compSize = {
          w: animData.w,
          h: animData.h
        };
      };
      var effectTypes = {
        TRANSFORM_EFFECT: "transformEFfect"
      };
      function TransformElement() {
      }
      TransformElement.prototype = {
        initTransform: function initTransform() {
          var mat = new Matrix();
          this.finalTransform = {
            mProp: this.data.ks ? TransformPropertyFactory.getTransformProperty(this, this.data.ks, this) : {
              o: 0
            },
            _matMdf: false,
            _localMatMdf: false,
            _opMdf: false,
            mat,
            localMat: mat,
            localOpacity: 1
          };
          if (this.data.ao) {
            this.finalTransform.mProp.autoOriented = true;
          }
          if (this.data.ty !== 11) {
          }
        },
        renderTransform: function renderTransform() {
          this.finalTransform._opMdf = this.finalTransform.mProp.o._mdf || this._isFirstFrame;
          this.finalTransform._matMdf = this.finalTransform.mProp._mdf || this._isFirstFrame;
          if (this.hierarchy) {
            var mat;
            var finalMat = this.finalTransform.mat;
            var i6 = 0;
            var len = this.hierarchy.length;
            if (!this.finalTransform._matMdf) {
              while (i6 < len) {
                if (this.hierarchy[i6].finalTransform.mProp._mdf) {
                  this.finalTransform._matMdf = true;
                  break;
                }
                i6 += 1;
              }
            }
            if (this.finalTransform._matMdf) {
              mat = this.finalTransform.mProp.v.props;
              finalMat.cloneFromProps(mat);
              for (i6 = 0; i6 < len; i6 += 1) {
                finalMat.multiply(this.hierarchy[i6].finalTransform.mProp.v);
              }
            }
          }
          if (!this.localTransforms || this.finalTransform._matMdf) {
            this.finalTransform._localMatMdf = this.finalTransform._matMdf;
          }
          if (this.finalTransform._opMdf) {
            this.finalTransform.localOpacity = this.finalTransform.mProp.o.v;
          }
        },
        renderLocalTransform: function renderLocalTransform() {
          if (this.localTransforms) {
            var i6 = 0;
            var len = this.localTransforms.length;
            this.finalTransform._localMatMdf = this.finalTransform._matMdf;
            if (!this.finalTransform._localMatMdf || !this.finalTransform._opMdf) {
              while (i6 < len) {
                if (this.localTransforms[i6]._mdf) {
                  this.finalTransform._localMatMdf = true;
                }
                if (this.localTransforms[i6]._opMdf && !this.finalTransform._opMdf) {
                  this.finalTransform.localOpacity = this.finalTransform.mProp.o.v;
                  this.finalTransform._opMdf = true;
                }
                i6 += 1;
              }
            }
            if (this.finalTransform._localMatMdf) {
              var localMat = this.finalTransform.localMat;
              this.localTransforms[0].matrix.clone(localMat);
              for (i6 = 1; i6 < len; i6 += 1) {
                var lmat = this.localTransforms[i6].matrix;
                localMat.multiply(lmat);
              }
              localMat.multiply(this.finalTransform.mat);
            }
            if (this.finalTransform._opMdf) {
              var localOp = this.finalTransform.localOpacity;
              for (i6 = 0; i6 < len; i6 += 1) {
                localOp *= this.localTransforms[i6].opacity * 0.01;
              }
              this.finalTransform.localOpacity = localOp;
            }
          }
        },
        searchEffectTransforms: function searchEffectTransforms() {
          if (this.renderableEffectsManager) {
            var transformEffects = this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);
            if (transformEffects.length) {
              this.localTransforms = [];
              this.finalTransform.localMat = new Matrix();
              var i6 = 0;
              var len = transformEffects.length;
              for (i6 = 0; i6 < len; i6 += 1) {
                this.localTransforms.push(transformEffects[i6]);
              }
            }
          }
        },
        globalToLocal: function globalToLocal(pt) {
          var transforms = [];
          transforms.push(this.finalTransform);
          var flag = true;
          var comp2 = this.comp;
          while (flag) {
            if (comp2.finalTransform) {
              if (comp2.data.hasMask) {
                transforms.splice(0, 0, comp2.finalTransform);
              }
              comp2 = comp2.comp;
            } else {
              flag = false;
            }
          }
          var i6;
          var len = transforms.length;
          var ptNew;
          for (i6 = 0; i6 < len; i6 += 1) {
            ptNew = transforms[i6].mat.applyToPointArray(0, 0, 0);
            pt = [pt[0] - ptNew[0], pt[1] - ptNew[1], 0];
          }
          return pt;
        },
        mHelper: new Matrix()
      };
      function MaskElement(data2, element, globalData2) {
        this.data = data2;
        this.element = element;
        this.globalData = globalData2;
        this.storedData = [];
        this.masksProperties = this.data.masksProperties || [];
        this.maskElement = null;
        var defs = this.globalData.defs;
        var i6;
        var len = this.masksProperties ? this.masksProperties.length : 0;
        this.viewData = createSizedArray(len);
        this.solidPath = "";
        var path;
        var properties = this.masksProperties;
        var count = 0;
        var currentMasks = [];
        var j;
        var jLen;
        var layerId = createElementID();
        var rect;
        var expansor;
        var feMorph;
        var x2;
        var maskType = "clipPath";
        var maskRef = "clip-path";
        for (i6 = 0; i6 < len; i6 += 1) {
          if (properties[i6].mode !== "a" && properties[i6].mode !== "n" || properties[i6].inv || properties[i6].o.k !== 100 || properties[i6].o.x) {
            maskType = "mask";
            maskRef = "mask";
          }
          if ((properties[i6].mode === "s" || properties[i6].mode === "i") && count === 0) {
            rect = createNS("rect");
            rect.setAttribute("fill", "#ffffff");
            rect.setAttribute("width", this.element.comp.data.w || 0);
            rect.setAttribute("height", this.element.comp.data.h || 0);
            currentMasks.push(rect);
          } else {
            rect = null;
          }
          path = createNS("path");
          if (properties[i6].mode === "n") {
            this.viewData[i6] = {
              op: PropertyFactory.getProp(this.element, properties[i6].o, 0, 0.01, this.element),
              prop: ShapePropertyFactory.getShapeProp(this.element, properties[i6], 3),
              elem: path,
              lastPath: ""
            };
            defs.appendChild(path);
          } else {
            count += 1;
            path.setAttribute("fill", properties[i6].mode === "s" ? "#000000" : "#ffffff");
            path.setAttribute("clip-rule", "nonzero");
            var filterID;
            if (properties[i6].x.k !== 0) {
              maskType = "mask";
              maskRef = "mask";
              x2 = PropertyFactory.getProp(this.element, properties[i6].x, 0, null, this.element);
              filterID = createElementID();
              expansor = createNS("filter");
              expansor.setAttribute("id", filterID);
              feMorph = createNS("feMorphology");
              feMorph.setAttribute("operator", "erode");
              feMorph.setAttribute("in", "SourceGraphic");
              feMorph.setAttribute("radius", "0");
              expansor.appendChild(feMorph);
              defs.appendChild(expansor);
              path.setAttribute("stroke", properties[i6].mode === "s" ? "#000000" : "#ffffff");
            } else {
              feMorph = null;
              x2 = null;
            }
            this.storedData[i6] = {
              elem: path,
              x: x2,
              expan: feMorph,
              lastPath: "",
              lastOperator: "",
              filterId: filterID,
              lastRadius: 0
            };
            if (properties[i6].mode === "i") {
              jLen = currentMasks.length;
              var g = createNS("g");
              for (j = 0; j < jLen; j += 1) {
                g.appendChild(currentMasks[j]);
              }
              var mask2 = createNS("mask");
              mask2.setAttribute("mask-type", "alpha");
              mask2.setAttribute("id", layerId + "_" + count);
              mask2.appendChild(path);
              defs.appendChild(mask2);
              g.setAttribute("mask", "url(" + getLocationHref() + "#" + layerId + "_" + count + ")");
              currentMasks.length = 0;
              currentMasks.push(g);
            } else {
              currentMasks.push(path);
            }
            if (properties[i6].inv && !this.solidPath) {
              this.solidPath = this.createLayerSolidPath();
            }
            this.viewData[i6] = {
              elem: path,
              lastPath: "",
              op: PropertyFactory.getProp(this.element, properties[i6].o, 0, 0.01, this.element),
              prop: ShapePropertyFactory.getShapeProp(this.element, properties[i6], 3),
              invRect: rect
            };
            if (!this.viewData[i6].prop.k) {
              this.drawPath(properties[i6], this.viewData[i6].prop.v, this.viewData[i6]);
            }
          }
        }
        this.maskElement = createNS(maskType);
        len = currentMasks.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          this.maskElement.appendChild(currentMasks[i6]);
        }
        if (count > 0) {
          this.maskElement.setAttribute("id", layerId);
          this.element.maskedElement.setAttribute(maskRef, "url(" + getLocationHref() + "#" + layerId + ")");
          defs.appendChild(this.maskElement);
        }
        if (this.viewData.length) {
          this.element.addRenderableComponent(this);
        }
      }
      MaskElement.prototype.getMaskProperty = function(pos) {
        return this.viewData[pos].prop;
      };
      MaskElement.prototype.renderFrame = function(isFirstFrame) {
        var finalMat = this.element.finalTransform.mat;
        var i6;
        var len = this.masksProperties.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          if (this.viewData[i6].prop._mdf || isFirstFrame) {
            this.drawPath(this.masksProperties[i6], this.viewData[i6].prop.v, this.viewData[i6]);
          }
          if (this.viewData[i6].op._mdf || isFirstFrame) {
            this.viewData[i6].elem.setAttribute("fill-opacity", this.viewData[i6].op.v);
          }
          if (this.masksProperties[i6].mode !== "n") {
            if (this.viewData[i6].invRect && (this.element.finalTransform.mProp._mdf || isFirstFrame)) {
              this.viewData[i6].invRect.setAttribute("transform", finalMat.getInverseMatrix().to2dCSS());
            }
            if (this.storedData[i6].x && (this.storedData[i6].x._mdf || isFirstFrame)) {
              var feMorph = this.storedData[i6].expan;
              if (this.storedData[i6].x.v < 0) {
                if (this.storedData[i6].lastOperator !== "erode") {
                  this.storedData[i6].lastOperator = "erode";
                  this.storedData[i6].elem.setAttribute("filter", "url(" + getLocationHref() + "#" + this.storedData[i6].filterId + ")");
                }
                feMorph.setAttribute("radius", -this.storedData[i6].x.v);
              } else {
                if (this.storedData[i6].lastOperator !== "dilate") {
                  this.storedData[i6].lastOperator = "dilate";
                  this.storedData[i6].elem.setAttribute("filter", null);
                }
                this.storedData[i6].elem.setAttribute("stroke-width", this.storedData[i6].x.v * 2);
              }
            }
          }
        }
      };
      MaskElement.prototype.getMaskelement = function() {
        return this.maskElement;
      };
      MaskElement.prototype.createLayerSolidPath = function() {
        var path = "M0,0 ";
        path += " h" + this.globalData.compSize.w;
        path += " v" + this.globalData.compSize.h;
        path += " h-" + this.globalData.compSize.w;
        path += " v-" + this.globalData.compSize.h + " ";
        return path;
      };
      MaskElement.prototype.drawPath = function(pathData, pathNodes, viewData) {
        var pathString = " M" + pathNodes.v[0][0] + "," + pathNodes.v[0][1];
        var i6;
        var len;
        len = pathNodes._length;
        for (i6 = 1; i6 < len; i6 += 1) {
          pathString += " C" + pathNodes.o[i6 - 1][0] + "," + pathNodes.o[i6 - 1][1] + " " + pathNodes.i[i6][0] + "," + pathNodes.i[i6][1] + " " + pathNodes.v[i6][0] + "," + pathNodes.v[i6][1];
        }
        if (pathNodes.c && len > 1) {
          pathString += " C" + pathNodes.o[i6 - 1][0] + "," + pathNodes.o[i6 - 1][1] + " " + pathNodes.i[0][0] + "," + pathNodes.i[0][1] + " " + pathNodes.v[0][0] + "," + pathNodes.v[0][1];
        }
        if (viewData.lastPath !== pathString) {
          var pathShapeValue = "";
          if (viewData.elem) {
            if (pathNodes.c) {
              pathShapeValue = pathData.inv ? this.solidPath + pathString : pathString;
            }
            viewData.elem.setAttribute("d", pathShapeValue);
          }
          viewData.lastPath = pathString;
        }
      };
      MaskElement.prototype.destroy = function() {
        this.element = null;
        this.globalData = null;
        this.maskElement = null;
        this.data = null;
        this.masksProperties = null;
      };
      var filtersFactory = function() {
        var ob2 = {};
        ob2.createFilter = createFilter;
        ob2.createAlphaToLuminanceFilter = createAlphaToLuminanceFilter;
        function createFilter(filId, skipCoordinates) {
          var fil = createNS("filter");
          fil.setAttribute("id", filId);
          if (skipCoordinates !== true) {
            fil.setAttribute("filterUnits", "objectBoundingBox");
            fil.setAttribute("x", "0%");
            fil.setAttribute("y", "0%");
            fil.setAttribute("width", "100%");
            fil.setAttribute("height", "100%");
          }
          return fil;
        }
        function createAlphaToLuminanceFilter() {
          var feColorMatrix = createNS("feColorMatrix");
          feColorMatrix.setAttribute("type", "matrix");
          feColorMatrix.setAttribute("color-interpolation-filters", "sRGB");
          feColorMatrix.setAttribute("values", "0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1");
          return feColorMatrix;
        }
        return ob2;
      }();
      var featureSupport = function() {
        var ob2 = {
          maskType: true,
          svgLumaHidden: true,
          offscreenCanvas: typeof OffscreenCanvas !== "undefined"
        };
        if (/MSIE 10/i.test(navigator.userAgent) || /MSIE 9/i.test(navigator.userAgent) || /rv:11.0/i.test(navigator.userAgent) || /Edge\/\d./i.test(navigator.userAgent)) {
          ob2.maskType = false;
        }
        if (/firefox/i.test(navigator.userAgent)) {
          ob2.svgLumaHidden = false;
        }
        return ob2;
      }();
      var registeredEffects$1 = {};
      var idPrefix = "filter_result_";
      function SVGEffects(elem2) {
        var i6;
        var source = "SourceGraphic";
        var len = elem2.data.ef ? elem2.data.ef.length : 0;
        var filId = createElementID();
        var fil = filtersFactory.createFilter(filId, true);
        var count = 0;
        this.filters = [];
        var filterManager;
        for (i6 = 0; i6 < len; i6 += 1) {
          filterManager = null;
          var type4 = elem2.data.ef[i6].ty;
          if (registeredEffects$1[type4]) {
            var Effect = registeredEffects$1[type4].effect;
            filterManager = new Effect(fil, elem2.effectsManager.effectElements[i6], elem2, idPrefix + count, source);
            source = idPrefix + count;
            if (registeredEffects$1[type4].countsAsEffect) {
              count += 1;
            }
          }
          if (filterManager) {
            this.filters.push(filterManager);
          }
        }
        if (count) {
          elem2.globalData.defs.appendChild(fil);
          elem2.layerElement.setAttribute("filter", "url(" + getLocationHref() + "#" + filId + ")");
        }
        if (this.filters.length) {
          elem2.addRenderableComponent(this);
        }
      }
      SVGEffects.prototype.renderFrame = function(_isFirstFrame) {
        var i6;
        var len = this.filters.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          this.filters[i6].renderFrame(_isFirstFrame);
        }
      };
      SVGEffects.prototype.getEffects = function(type4) {
        var i6;
        var len = this.filters.length;
        var effects = [];
        for (i6 = 0; i6 < len; i6 += 1) {
          if (this.filters[i6].type === type4) {
            effects.push(this.filters[i6]);
          }
        }
        return effects;
      };
      function registerEffect$1(id, effect2, countsAsEffect) {
        registeredEffects$1[id] = {
          effect: effect2,
          countsAsEffect
        };
      }
      function SVGBaseElement() {
      }
      SVGBaseElement.prototype = {
        initRendererElement: function initRendererElement() {
          this.layerElement = createNS("g");
        },
        createContainerElements: function createContainerElements() {
          this.matteElement = createNS("g");
          this.transformedElement = this.layerElement;
          this.maskedElement = this.layerElement;
          this._sizeChanged = false;
          var layerElementParent = null;
          if (this.data.td) {
            this.matteMasks = {};
            var gg = createNS("g");
            gg.setAttribute("id", this.layerId);
            gg.appendChild(this.layerElement);
            layerElementParent = gg;
            this.globalData.defs.appendChild(gg);
          } else if (this.data.tt) {
            this.matteElement.appendChild(this.layerElement);
            layerElementParent = this.matteElement;
            this.baseElement = this.matteElement;
          } else {
            this.baseElement = this.layerElement;
          }
          if (this.data.ln) {
            this.layerElement.setAttribute("id", this.data.ln);
          }
          if (this.data.cl) {
            this.layerElement.setAttribute("class", this.data.cl);
          }
          if (this.data.ty === 0 && !this.data.hd) {
            var cp = createNS("clipPath");
            var pt = createNS("path");
            pt.setAttribute("d", "M0,0 L" + this.data.w + ",0 L" + this.data.w + "," + this.data.h + " L0," + this.data.h + "z");
            var clipId = createElementID();
            cp.setAttribute("id", clipId);
            cp.appendChild(pt);
            this.globalData.defs.appendChild(cp);
            if (this.checkMasks()) {
              var cpGroup = createNS("g");
              cpGroup.setAttribute("clip-path", "url(" + getLocationHref() + "#" + clipId + ")");
              cpGroup.appendChild(this.layerElement);
              this.transformedElement = cpGroup;
              if (layerElementParent) {
                layerElementParent.appendChild(this.transformedElement);
              } else {
                this.baseElement = this.transformedElement;
              }
            } else {
              this.layerElement.setAttribute("clip-path", "url(" + getLocationHref() + "#" + clipId + ")");
            }
          }
          if (this.data.bm !== 0) {
            this.setBlendMode();
          }
        },
        renderElement: function renderElement() {
          if (this.finalTransform._localMatMdf) {
            this.transformedElement.setAttribute("transform", this.finalTransform.localMat.to2dCSS());
          }
          if (this.finalTransform._opMdf) {
            this.transformedElement.setAttribute("opacity", this.finalTransform.localOpacity);
          }
        },
        destroyBaseElement: function destroyBaseElement() {
          this.layerElement = null;
          this.matteElement = null;
          this.maskManager.destroy();
        },
        getBaseElement: function getBaseElement() {
          if (this.data.hd) {
            return null;
          }
          return this.baseElement;
        },
        createRenderableComponents: function createRenderableComponents() {
          this.maskManager = new MaskElement(this.data, this, this.globalData);
          this.renderableEffectsManager = new SVGEffects(this);
          this.searchEffectTransforms();
        },
        getMatte: function getMatte(matteType) {
          if (!this.matteMasks) {
            this.matteMasks = {};
          }
          if (!this.matteMasks[matteType]) {
            var id = this.layerId + "_" + matteType;
            var filId;
            var fil;
            var useElement;
            var gg;
            if (matteType === 1 || matteType === 3) {
              var masker = createNS("mask");
              masker.setAttribute("id", id);
              masker.setAttribute("mask-type", matteType === 3 ? "luminance" : "alpha");
              useElement = createNS("use");
              useElement.setAttributeNS("http://www.w3.org/1999/xlink", "href", "#" + this.layerId);
              masker.appendChild(useElement);
              this.globalData.defs.appendChild(masker);
              if (!featureSupport.maskType && matteType === 1) {
                masker.setAttribute("mask-type", "luminance");
                filId = createElementID();
                fil = filtersFactory.createFilter(filId);
                this.globalData.defs.appendChild(fil);
                fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
                gg = createNS("g");
                gg.appendChild(useElement);
                masker.appendChild(gg);
                gg.setAttribute("filter", "url(" + getLocationHref() + "#" + filId + ")");
              }
            } else if (matteType === 2) {
              var maskGroup = createNS("mask");
              maskGroup.setAttribute("id", id);
              maskGroup.setAttribute("mask-type", "alpha");
              var maskGrouper = createNS("g");
              maskGroup.appendChild(maskGrouper);
              filId = createElementID();
              fil = filtersFactory.createFilter(filId);
              var feCTr = createNS("feComponentTransfer");
              feCTr.setAttribute("in", "SourceGraphic");
              fil.appendChild(feCTr);
              var feFunc = createNS("feFuncA");
              feFunc.setAttribute("type", "table");
              feFunc.setAttribute("tableValues", "1.0 0.0");
              feCTr.appendChild(feFunc);
              this.globalData.defs.appendChild(fil);
              var alphaRect = createNS("rect");
              alphaRect.setAttribute("width", this.comp.data.w);
              alphaRect.setAttribute("height", this.comp.data.h);
              alphaRect.setAttribute("x", "0");
              alphaRect.setAttribute("y", "0");
              alphaRect.setAttribute("fill", "#ffffff");
              alphaRect.setAttribute("opacity", "0");
              maskGrouper.setAttribute("filter", "url(" + getLocationHref() + "#" + filId + ")");
              maskGrouper.appendChild(alphaRect);
              useElement = createNS("use");
              useElement.setAttributeNS("http://www.w3.org/1999/xlink", "href", "#" + this.layerId);
              maskGrouper.appendChild(useElement);
              if (!featureSupport.maskType) {
                maskGroup.setAttribute("mask-type", "luminance");
                fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
                gg = createNS("g");
                maskGrouper.appendChild(alphaRect);
                gg.appendChild(this.layerElement);
                maskGrouper.appendChild(gg);
              }
              this.globalData.defs.appendChild(maskGroup);
            }
            this.matteMasks[matteType] = id;
          }
          return this.matteMasks[matteType];
        },
        setMatte: function setMatte(id) {
          if (!this.matteElement) {
            return;
          }
          this.matteElement.setAttribute("mask", "url(" + getLocationHref() + "#" + id + ")");
        }
      };
      function HierarchyElement() {
      }
      HierarchyElement.prototype = {
        /**
           * @function
           * Initializes hierarchy properties
           *
           */
        initHierarchy: function initHierarchy() {
          this.hierarchy = [];
          this._isParent = false;
          this.checkParenting();
        },
        /**
           * @function
           * Sets layer's hierarchy.
           * @param {array} hierarch
           * layer's parent list
           *
           */
        setHierarchy: function setHierarchy(hierarchy) {
          this.hierarchy = hierarchy;
        },
        /**
           * @function
           * Sets layer as parent.
           *
           */
        setAsParent: function setAsParent() {
          this._isParent = true;
        },
        /**
           * @function
           * Searches layer's parenting chain
           *
           */
        checkParenting: function checkParenting() {
          if (this.data.parent !== void 0) {
            this.comp.buildElementParenting(this, this.data.parent, []);
          }
        }
      };
      function RenderableDOMElement() {
      }
      (function() {
        var _prototype = {
          initElement: function initElement(data2, globalData2, comp2) {
            this.initFrame();
            this.initBaseData(data2, globalData2, comp2);
            this.initTransform(data2, globalData2, comp2);
            this.initHierarchy();
            this.initRenderable();
            this.initRendererElement();
            this.createContainerElements();
            this.createRenderableComponents();
            this.createContent();
            this.hide();
          },
          hide: function hide2() {
            if (!this.hidden && (!this.isInRange || this.isTransparent)) {
              var elem2 = this.baseElement || this.layerElement;
              elem2.style.display = "none";
              this.hidden = true;
            }
          },
          show: function show2() {
            if (this.isInRange && !this.isTransparent) {
              if (!this.data.hd) {
                var elem2 = this.baseElement || this.layerElement;
                elem2.style.display = "block";
              }
              this.hidden = false;
              this._isFirstFrame = true;
            }
          },
          renderFrame: function renderFrame() {
            if (this.data.hd || this.hidden) {
              return;
            }
            this.renderTransform();
            this.renderRenderable();
            this.renderLocalTransform();
            this.renderElement();
            this.renderInnerContent();
            if (this._isFirstFrame) {
              this._isFirstFrame = false;
            }
          },
          renderInnerContent: function renderInnerContent() {
          },
          prepareFrame: function prepareFrame(num) {
            this._mdf = false;
            this.prepareRenderableFrame(num);
            this.prepareProperties(num, this.isInRange);
            this.checkTransparency();
          },
          destroy: function destroy() {
            this.innerElem = null;
            this.destroyBaseElement();
          }
        };
        extendPrototype([RenderableElement, createProxyFunction(_prototype)], RenderableDOMElement);
      })();
      function IImageElement(data2, globalData2, comp2) {
        this.assetData = globalData2.getAssetData(data2.refId);
        if (this.assetData && this.assetData.sid) {
          this.assetData = globalData2.slotManager.getProp(this.assetData);
        }
        this.initElement(data2, globalData2, comp2);
        this.sourceRect = {
          top: 0,
          left: 0,
          width: this.assetData.w,
          height: this.assetData.h
        };
      }
      extendPrototype([BaseElement, TransformElement, SVGBaseElement, HierarchyElement, FrameElement, RenderableDOMElement], IImageElement);
      IImageElement.prototype.createContent = function() {
        var assetPath = this.globalData.getAssetsPath(this.assetData);
        this.innerElem = createNS("image");
        this.innerElem.setAttribute("width", this.assetData.w + "px");
        this.innerElem.setAttribute("height", this.assetData.h + "px");
        this.innerElem.setAttribute("preserveAspectRatio", this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio);
        this.innerElem.setAttributeNS("http://www.w3.org/1999/xlink", "href", assetPath);
        this.layerElement.appendChild(this.innerElem);
      };
      IImageElement.prototype.sourceRectAtTime = function() {
        return this.sourceRect;
      };
      function ProcessedElement(element, position2) {
        this.elem = element;
        this.pos = position2;
      }
      function IShapeElement() {
      }
      IShapeElement.prototype = {
        addShapeToModifiers: function addShapeToModifiers(data2) {
          var i6;
          var len = this.shapeModifiers.length;
          for (i6 = 0; i6 < len; i6 += 1) {
            this.shapeModifiers[i6].addShape(data2);
          }
        },
        isShapeInAnimatedModifiers: function isShapeInAnimatedModifiers(data2) {
          var i6 = 0;
          var len = this.shapeModifiers.length;
          while (i6 < len) {
            if (this.shapeModifiers[i6].isAnimatedWithShape(data2)) {
              return true;
            }
          }
          return false;
        },
        renderModifiers: function renderModifiers() {
          if (!this.shapeModifiers.length) {
            return;
          }
          var i6;
          var len = this.shapes.length;
          for (i6 = 0; i6 < len; i6 += 1) {
            this.shapes[i6].sh.reset();
          }
          len = this.shapeModifiers.length;
          var shouldBreakProcess;
          for (i6 = len - 1; i6 >= 0; i6 -= 1) {
            shouldBreakProcess = this.shapeModifiers[i6].processShapes(this._isFirstFrame);
            if (shouldBreakProcess) {
              break;
            }
          }
        },
        searchProcessedElement: function searchProcessedElement(elem2) {
          var elements = this.processedElements;
          var i6 = 0;
          var len = elements.length;
          while (i6 < len) {
            if (elements[i6].elem === elem2) {
              return elements[i6].pos;
            }
            i6 += 1;
          }
          return 0;
        },
        addProcessedElement: function addProcessedElement(elem2, pos) {
          var elements = this.processedElements;
          var i6 = elements.length;
          while (i6) {
            i6 -= 1;
            if (elements[i6].elem === elem2) {
              elements[i6].pos = pos;
              return;
            }
          }
          elements.push(new ProcessedElement(elem2, pos));
        },
        prepareFrame: function prepareFrame(num) {
          this.prepareRenderableFrame(num);
          this.prepareProperties(num, this.isInRange);
        }
      };
      var lineCapEnum = {
        1: "butt",
        2: "round",
        3: "square"
      };
      var lineJoinEnum = {
        1: "miter",
        2: "round",
        3: "bevel"
      };
      function SVGShapeData(transformers, level, shape) {
        this.caches = [];
        this.styles = [];
        this.transformers = transformers;
        this.lStr = "";
        this.sh = shape;
        this.lvl = level;
        this._isAnimated = !!shape.k;
        var i6 = 0;
        var len = transformers.length;
        while (i6 < len) {
          if (transformers[i6].mProps.dynamicProperties.length) {
            this._isAnimated = true;
            break;
          }
          i6 += 1;
        }
      }
      SVGShapeData.prototype.setAsAnimated = function() {
        this._isAnimated = true;
      };
      function SVGStyleData(data2, level) {
        this.data = data2;
        this.type = data2.ty;
        this.d = "";
        this.lvl = level;
        this._mdf = false;
        this.closed = data2.hd === true;
        this.pElem = createNS("path");
        this.msElem = null;
      }
      SVGStyleData.prototype.reset = function() {
        this.d = "";
        this._mdf = false;
      };
      function DashProperty(elem2, data2, renderer2, container) {
        this.elem = elem2;
        this.frameId = -1;
        this.dataProps = createSizedArray(data2.length);
        this.renderer = renderer2;
        this.k = false;
        this.dashStr = "";
        this.dashArray = createTypedArray("float32", data2.length ? data2.length - 1 : 0);
        this.dashoffset = createTypedArray("float32", 1);
        this.initDynamicPropertyContainer(container);
        var i6;
        var len = data2.length || 0;
        var prop;
        for (i6 = 0; i6 < len; i6 += 1) {
          prop = PropertyFactory.getProp(elem2, data2[i6].v, 0, 0, this);
          this.k = prop.k || this.k;
          this.dataProps[i6] = {
            n: data2[i6].n,
            p: prop
          };
        }
        if (!this.k) {
          this.getValue(true);
        }
        this._isAnimated = this.k;
      }
      DashProperty.prototype.getValue = function(forceRender) {
        if (this.elem.globalData.frameId === this.frameId && !forceRender) {
          return;
        }
        this.frameId = this.elem.globalData.frameId;
        this.iterateDynamicProperties();
        this._mdf = this._mdf || forceRender;
        if (this._mdf) {
          var i6 = 0;
          var len = this.dataProps.length;
          if (this.renderer === "svg") {
            this.dashStr = "";
          }
          for (i6 = 0; i6 < len; i6 += 1) {
            if (this.dataProps[i6].n !== "o") {
              if (this.renderer === "svg") {
                this.dashStr += " " + this.dataProps[i6].p.v;
              } else {
                this.dashArray[i6] = this.dataProps[i6].p.v;
              }
            } else {
              this.dashoffset[0] = this.dataProps[i6].p.v;
            }
          }
        }
      };
      extendPrototype([DynamicPropertyContainer], DashProperty);
      function SVGStrokeStyleData(elem2, data2, styleOb) {
        this.initDynamicPropertyContainer(elem2);
        this.getValue = this.iterateDynamicProperties;
        this.o = PropertyFactory.getProp(elem2, data2.o, 0, 0.01, this);
        this.w = PropertyFactory.getProp(elem2, data2.w, 0, null, this);
        this.d = new DashProperty(elem2, data2.d || {}, "svg", this);
        this.c = PropertyFactory.getProp(elem2, data2.c, 1, 255, this);
        this.style = styleOb;
        this._isAnimated = !!this._isAnimated;
      }
      extendPrototype([DynamicPropertyContainer], SVGStrokeStyleData);
      function SVGFillStyleData(elem2, data2, styleOb) {
        this.initDynamicPropertyContainer(elem2);
        this.getValue = this.iterateDynamicProperties;
        this.o = PropertyFactory.getProp(elem2, data2.o, 0, 0.01, this);
        this.c = PropertyFactory.getProp(elem2, data2.c, 1, 255, this);
        this.style = styleOb;
      }
      extendPrototype([DynamicPropertyContainer], SVGFillStyleData);
      function SVGNoStyleData(elem2, data2, styleOb) {
        this.initDynamicPropertyContainer(elem2);
        this.getValue = this.iterateDynamicProperties;
        this.style = styleOb;
      }
      extendPrototype([DynamicPropertyContainer], SVGNoStyleData);
      function GradientProperty(elem2, data2, container) {
        this.data = data2;
        this.c = createTypedArray("uint8c", data2.p * 4);
        var cLength = data2.k.k[0].s ? data2.k.k[0].s.length - data2.p * 4 : data2.k.k.length - data2.p * 4;
        this.o = createTypedArray("float32", cLength);
        this._cmdf = false;
        this._omdf = false;
        this._collapsable = this.checkCollapsable();
        this._hasOpacity = cLength;
        this.initDynamicPropertyContainer(container);
        this.prop = PropertyFactory.getProp(elem2, data2.k, 1, null, this);
        this.k = this.prop.k;
        this.getValue(true);
      }
      GradientProperty.prototype.comparePoints = function(values2, points) {
        var i6 = 0;
        var len = this.o.length / 2;
        var diff;
        while (i6 < len) {
          diff = Math.abs(values2[i6 * 4] - values2[points * 4 + i6 * 2]);
          if (diff > 0.01) {
            return false;
          }
          i6 += 1;
        }
        return true;
      };
      GradientProperty.prototype.checkCollapsable = function() {
        if (this.o.length / 2 !== this.c.length / 4) {
          return false;
        }
        if (this.data.k.k[0].s) {
          var i6 = 0;
          var len = this.data.k.k.length;
          while (i6 < len) {
            if (!this.comparePoints(this.data.k.k[i6].s, this.data.p)) {
              return false;
            }
            i6 += 1;
          }
        } else if (!this.comparePoints(this.data.k.k, this.data.p)) {
          return false;
        }
        return true;
      };
      GradientProperty.prototype.getValue = function(forceRender) {
        this.prop.getValue();
        this._mdf = false;
        this._cmdf = false;
        this._omdf = false;
        if (this.prop._mdf || forceRender) {
          var i6;
          var len = this.data.p * 4;
          var mult;
          var val2;
          for (i6 = 0; i6 < len; i6 += 1) {
            mult = i6 % 4 === 0 ? 100 : 255;
            val2 = Math.round(this.prop.v[i6] * mult);
            if (this.c[i6] !== val2) {
              this.c[i6] = val2;
              this._cmdf = !forceRender;
            }
          }
          if (this.o.length) {
            len = this.prop.v.length;
            for (i6 = this.data.p * 4; i6 < len; i6 += 1) {
              mult = i6 % 2 === 0 ? 100 : 1;
              val2 = i6 % 2 === 0 ? Math.round(this.prop.v[i6] * 100) : this.prop.v[i6];
              if (this.o[i6 - this.data.p * 4] !== val2) {
                this.o[i6 - this.data.p * 4] = val2;
                this._omdf = !forceRender;
              }
            }
          }
          this._mdf = !forceRender;
        }
      };
      extendPrototype([DynamicPropertyContainer], GradientProperty);
      function SVGGradientFillStyleData(elem2, data2, styleOb) {
        this.initDynamicPropertyContainer(elem2);
        this.getValue = this.iterateDynamicProperties;
        this.initGradientData(elem2, data2, styleOb);
      }
      SVGGradientFillStyleData.prototype.initGradientData = function(elem2, data2, styleOb) {
        this.o = PropertyFactory.getProp(elem2, data2.o, 0, 0.01, this);
        this.s = PropertyFactory.getProp(elem2, data2.s, 1, null, this);
        this.e = PropertyFactory.getProp(elem2, data2.e, 1, null, this);
        this.h = PropertyFactory.getProp(elem2, data2.h || {
          k: 0
        }, 0, 0.01, this);
        this.a = PropertyFactory.getProp(elem2, data2.a || {
          k: 0
        }, 0, degToRads, this);
        this.g = new GradientProperty(elem2, data2.g, this);
        this.style = styleOb;
        this.stops = [];
        this.setGradientData(styleOb.pElem, data2);
        this.setGradientOpacity(data2, styleOb);
        this._isAnimated = !!this._isAnimated;
      };
      SVGGradientFillStyleData.prototype.setGradientData = function(pathElement, data2) {
        var gradientId = createElementID();
        var gfill = createNS(data2.t === 1 ? "linearGradient" : "radialGradient");
        gfill.setAttribute("id", gradientId);
        gfill.setAttribute("spreadMethod", "pad");
        gfill.setAttribute("gradientUnits", "userSpaceOnUse");
        var stops = [];
        var stop2;
        var j;
        var jLen;
        jLen = data2.g.p * 4;
        for (j = 0; j < jLen; j += 4) {
          stop2 = createNS("stop");
          gfill.appendChild(stop2);
          stops.push(stop2);
        }
        pathElement.setAttribute(data2.ty === "gf" ? "fill" : "stroke", "url(" + getLocationHref() + "#" + gradientId + ")");
        this.gf = gfill;
        this.cst = stops;
      };
      SVGGradientFillStyleData.prototype.setGradientOpacity = function(data2, styleOb) {
        if (this.g._hasOpacity && !this.g._collapsable) {
          var stop2;
          var j;
          var jLen;
          var mask2 = createNS("mask");
          var maskElement = createNS("path");
          mask2.appendChild(maskElement);
          var opacityId = createElementID();
          var maskId = createElementID();
          mask2.setAttribute("id", maskId);
          var opFill = createNS(data2.t === 1 ? "linearGradient" : "radialGradient");
          opFill.setAttribute("id", opacityId);
          opFill.setAttribute("spreadMethod", "pad");
          opFill.setAttribute("gradientUnits", "userSpaceOnUse");
          jLen = data2.g.k.k[0].s ? data2.g.k.k[0].s.length : data2.g.k.k.length;
          var stops = this.stops;
          for (j = data2.g.p * 4; j < jLen; j += 2) {
            stop2 = createNS("stop");
            stop2.setAttribute("stop-color", "rgb(255,255,255)");
            opFill.appendChild(stop2);
            stops.push(stop2);
          }
          maskElement.setAttribute(data2.ty === "gf" ? "fill" : "stroke", "url(" + getLocationHref() + "#" + opacityId + ")");
          if (data2.ty === "gs") {
            maskElement.setAttribute("stroke-linecap", lineCapEnum[data2.lc || 2]);
            maskElement.setAttribute("stroke-linejoin", lineJoinEnum[data2.lj || 2]);
            if (data2.lj === 1) {
              maskElement.setAttribute("stroke-miterlimit", data2.ml);
            }
          }
          this.of = opFill;
          this.ms = mask2;
          this.ost = stops;
          this.maskId = maskId;
          styleOb.msElem = maskElement;
        }
      };
      extendPrototype([DynamicPropertyContainer], SVGGradientFillStyleData);
      function SVGGradientStrokeStyleData(elem2, data2, styleOb) {
        this.initDynamicPropertyContainer(elem2);
        this.getValue = this.iterateDynamicProperties;
        this.w = PropertyFactory.getProp(elem2, data2.w, 0, null, this);
        this.d = new DashProperty(elem2, data2.d || {}, "svg", this);
        this.initGradientData(elem2, data2, styleOb);
        this._isAnimated = !!this._isAnimated;
      }
      extendPrototype([SVGGradientFillStyleData, DynamicPropertyContainer], SVGGradientStrokeStyleData);
      function ShapeGroupData() {
        this.it = [];
        this.prevViewData = [];
        this.gr = createNS("g");
      }
      function SVGTransformData(mProps, op, container) {
        this.transform = {
          mProps,
          op,
          container
        };
        this.elements = [];
        this._isAnimated = this.transform.mProps.dynamicProperties.length || this.transform.op.effectsSequence.length;
      }
      var buildShapeString = function buildShapeString2(pathNodes, length2, closed, mat) {
        if (length2 === 0) {
          return "";
        }
        var _o = pathNodes.o;
        var _i = pathNodes.i;
        var _v = pathNodes.v;
        var i6;
        var shapeString = " M" + mat.applyToPointStringified(_v[0][0], _v[0][1]);
        for (i6 = 1; i6 < length2; i6 += 1) {
          shapeString += " C" + mat.applyToPointStringified(_o[i6 - 1][0], _o[i6 - 1][1]) + " " + mat.applyToPointStringified(_i[i6][0], _i[i6][1]) + " " + mat.applyToPointStringified(_v[i6][0], _v[i6][1]);
        }
        if (closed && length2) {
          shapeString += " C" + mat.applyToPointStringified(_o[i6 - 1][0], _o[i6 - 1][1]) + " " + mat.applyToPointStringified(_i[0][0], _i[0][1]) + " " + mat.applyToPointStringified(_v[0][0], _v[0][1]);
          shapeString += "z";
        }
        return shapeString;
      };
      var SVGElementsRenderer = function() {
        var _identityMatrix = new Matrix();
        var _matrixHelper = new Matrix();
        var ob2 = {
          createRenderFunction
        };
        function createRenderFunction(data2) {
          switch (data2.ty) {
            case "fl":
              return renderFill;
            case "gf":
              return renderGradient;
            case "gs":
              return renderGradientStroke;
            case "st":
              return renderStroke;
            case "sh":
            case "el":
            case "rc":
            case "sr":
              return renderPath;
            case "tr":
              return renderContentTransform;
            case "no":
              return renderNoop;
            default:
              return null;
          }
        }
        function renderContentTransform(styleData, itemData, isFirstFrame) {
          if (isFirstFrame || itemData.transform.op._mdf) {
            itemData.transform.container.setAttribute("opacity", itemData.transform.op.v);
          }
          if (isFirstFrame || itemData.transform.mProps._mdf) {
            itemData.transform.container.setAttribute("transform", itemData.transform.mProps.v.to2dCSS());
          }
        }
        function renderNoop() {
        }
        function renderPath(styleData, itemData, isFirstFrame) {
          var j;
          var jLen;
          var pathStringTransformed;
          var redraw;
          var pathNodes;
          var l7;
          var lLen = itemData.styles.length;
          var lvl = itemData.lvl;
          var paths;
          var mat;
          var iterations;
          var k2;
          for (l7 = 0; l7 < lLen; l7 += 1) {
            redraw = itemData.sh._mdf || isFirstFrame;
            if (itemData.styles[l7].lvl < lvl) {
              mat = _matrixHelper.reset();
              iterations = lvl - itemData.styles[l7].lvl;
              k2 = itemData.transformers.length - 1;
              while (!redraw && iterations > 0) {
                redraw = itemData.transformers[k2].mProps._mdf || redraw;
                iterations -= 1;
                k2 -= 1;
              }
              if (redraw) {
                iterations = lvl - itemData.styles[l7].lvl;
                k2 = itemData.transformers.length - 1;
                while (iterations > 0) {
                  mat.multiply(itemData.transformers[k2].mProps.v);
                  iterations -= 1;
                  k2 -= 1;
                }
              }
            } else {
              mat = _identityMatrix;
            }
            paths = itemData.sh.paths;
            jLen = paths._length;
            if (redraw) {
              pathStringTransformed = "";
              for (j = 0; j < jLen; j += 1) {
                pathNodes = paths.shapes[j];
                if (pathNodes && pathNodes._length) {
                  pathStringTransformed += buildShapeString(pathNodes, pathNodes._length, pathNodes.c, mat);
                }
              }
              itemData.caches[l7] = pathStringTransformed;
            } else {
              pathStringTransformed = itemData.caches[l7];
            }
            itemData.styles[l7].d += styleData.hd === true ? "" : pathStringTransformed;
            itemData.styles[l7]._mdf = redraw || itemData.styles[l7]._mdf;
          }
        }
        function renderFill(styleData, itemData, isFirstFrame) {
          var styleElem = itemData.style;
          if (itemData.c._mdf || isFirstFrame) {
            styleElem.pElem.setAttribute("fill", "rgb(" + bmFloor(itemData.c.v[0]) + "," + bmFloor(itemData.c.v[1]) + "," + bmFloor(itemData.c.v[2]) + ")");
          }
          if (itemData.o._mdf || isFirstFrame) {
            styleElem.pElem.setAttribute("fill-opacity", itemData.o.v);
          }
        }
        function renderGradientStroke(styleData, itemData, isFirstFrame) {
          renderGradient(styleData, itemData, isFirstFrame);
          renderStroke(styleData, itemData, isFirstFrame);
        }
        function renderGradient(styleData, itemData, isFirstFrame) {
          var gfill = itemData.gf;
          var hasOpacity = itemData.g._hasOpacity;
          var pt1 = itemData.s.v;
          var pt2 = itemData.e.v;
          if (itemData.o._mdf || isFirstFrame) {
            var attr = styleData.ty === "gf" ? "fill-opacity" : "stroke-opacity";
            itemData.style.pElem.setAttribute(attr, itemData.o.v);
          }
          if (itemData.s._mdf || isFirstFrame) {
            var attr1 = styleData.t === 1 ? "x1" : "cx";
            var attr2 = attr1 === "x1" ? "y1" : "cy";
            gfill.setAttribute(attr1, pt1[0]);
            gfill.setAttribute(attr2, pt1[1]);
            if (hasOpacity && !itemData.g._collapsable) {
              itemData.of.setAttribute(attr1, pt1[0]);
              itemData.of.setAttribute(attr2, pt1[1]);
            }
          }
          var stops;
          var i6;
          var len;
          var stop2;
          if (itemData.g._cmdf || isFirstFrame) {
            stops = itemData.cst;
            var cValues = itemData.g.c;
            len = stops.length;
            for (i6 = 0; i6 < len; i6 += 1) {
              stop2 = stops[i6];
              stop2.setAttribute("offset", cValues[i6 * 4] + "%");
              stop2.setAttribute("stop-color", "rgb(" + cValues[i6 * 4 + 1] + "," + cValues[i6 * 4 + 2] + "," + cValues[i6 * 4 + 3] + ")");
            }
          }
          if (hasOpacity && (itemData.g._omdf || isFirstFrame)) {
            var oValues = itemData.g.o;
            if (itemData.g._collapsable) {
              stops = itemData.cst;
            } else {
              stops = itemData.ost;
            }
            len = stops.length;
            for (i6 = 0; i6 < len; i6 += 1) {
              stop2 = stops[i6];
              if (!itemData.g._collapsable) {
                stop2.setAttribute("offset", oValues[i6 * 2] + "%");
              }
              stop2.setAttribute("stop-opacity", oValues[i6 * 2 + 1]);
            }
          }
          if (styleData.t === 1) {
            if (itemData.e._mdf || isFirstFrame) {
              gfill.setAttribute("x2", pt2[0]);
              gfill.setAttribute("y2", pt2[1]);
              if (hasOpacity && !itemData.g._collapsable) {
                itemData.of.setAttribute("x2", pt2[0]);
                itemData.of.setAttribute("y2", pt2[1]);
              }
            }
          } else {
            var rad;
            if (itemData.s._mdf || itemData.e._mdf || isFirstFrame) {
              rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
              gfill.setAttribute("r", rad);
              if (hasOpacity && !itemData.g._collapsable) {
                itemData.of.setAttribute("r", rad);
              }
            }
            if (itemData.s._mdf || itemData.e._mdf || itemData.h._mdf || itemData.a._mdf || isFirstFrame) {
              if (!rad) {
                rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
              }
              var ang = Math.atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]);
              var percent = itemData.h.v;
              if (percent >= 1) {
                percent = 0.99;
              } else if (percent <= -1) {
                percent = -0.99;
              }
              var dist = rad * percent;
              var x2 = Math.cos(ang + itemData.a.v) * dist + pt1[0];
              var y = Math.sin(ang + itemData.a.v) * dist + pt1[1];
              gfill.setAttribute("fx", x2);
              gfill.setAttribute("fy", y);
              if (hasOpacity && !itemData.g._collapsable) {
                itemData.of.setAttribute("fx", x2);
                itemData.of.setAttribute("fy", y);
              }
            }
          }
        }
        function renderStroke(styleData, itemData, isFirstFrame) {
          var styleElem = itemData.style;
          var d30 = itemData.d;
          if (d30 && (d30._mdf || isFirstFrame) && d30.dashStr) {
            styleElem.pElem.setAttribute("stroke-dasharray", d30.dashStr);
            styleElem.pElem.setAttribute("stroke-dashoffset", d30.dashoffset[0]);
          }
          if (itemData.c && (itemData.c._mdf || isFirstFrame)) {
            styleElem.pElem.setAttribute("stroke", "rgb(" + bmFloor(itemData.c.v[0]) + "," + bmFloor(itemData.c.v[1]) + "," + bmFloor(itemData.c.v[2]) + ")");
          }
          if (itemData.o._mdf || isFirstFrame) {
            styleElem.pElem.setAttribute("stroke-opacity", itemData.o.v);
          }
          if (itemData.w._mdf || isFirstFrame) {
            styleElem.pElem.setAttribute("stroke-width", itemData.w.v);
            if (styleElem.msElem) {
              styleElem.msElem.setAttribute("stroke-width", itemData.w.v);
            }
          }
        }
        return ob2;
      }();
      function SVGShapeElement(data2, globalData2, comp2) {
        this.shapes = [];
        this.shapesData = data2.shapes;
        this.stylesList = [];
        this.shapeModifiers = [];
        this.itemsData = [];
        this.processedElements = [];
        this.animatedContents = [];
        this.initElement(data2, globalData2, comp2);
        this.prevViewData = [];
      }
      extendPrototype([BaseElement, TransformElement, SVGBaseElement, IShapeElement, HierarchyElement, FrameElement, RenderableDOMElement], SVGShapeElement);
      SVGShapeElement.prototype.initSecondaryElement = function() {
      };
      SVGShapeElement.prototype.identityMatrix = new Matrix();
      SVGShapeElement.prototype.buildExpressionInterface = function() {
      };
      SVGShapeElement.prototype.createContent = function() {
        this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], true);
        this.filterUniqueShapes();
      };
      SVGShapeElement.prototype.filterUniqueShapes = function() {
        var i6;
        var len = this.shapes.length;
        var shape;
        var j;
        var jLen = this.stylesList.length;
        var style;
        var tempShapes = [];
        var areAnimated = false;
        for (j = 0; j < jLen; j += 1) {
          style = this.stylesList[j];
          areAnimated = false;
          tempShapes.length = 0;
          for (i6 = 0; i6 < len; i6 += 1) {
            shape = this.shapes[i6];
            if (shape.styles.indexOf(style) !== -1) {
              tempShapes.push(shape);
              areAnimated = shape._isAnimated || areAnimated;
            }
          }
          if (tempShapes.length > 1 && areAnimated) {
            this.setShapesAsAnimated(tempShapes);
          }
        }
      };
      SVGShapeElement.prototype.setShapesAsAnimated = function(shapes) {
        var i6;
        var len = shapes.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          shapes[i6].setAsAnimated();
        }
      };
      SVGShapeElement.prototype.createStyleElement = function(data2, level) {
        var elementData;
        var styleOb = new SVGStyleData(data2, level);
        var pathElement = styleOb.pElem;
        if (data2.ty === "st") {
          elementData = new SVGStrokeStyleData(this, data2, styleOb);
        } else if (data2.ty === "fl") {
          elementData = new SVGFillStyleData(this, data2, styleOb);
        } else if (data2.ty === "gf" || data2.ty === "gs") {
          var GradientConstructor = data2.ty === "gf" ? SVGGradientFillStyleData : SVGGradientStrokeStyleData;
          elementData = new GradientConstructor(this, data2, styleOb);
          this.globalData.defs.appendChild(elementData.gf);
          if (elementData.maskId) {
            this.globalData.defs.appendChild(elementData.ms);
            this.globalData.defs.appendChild(elementData.of);
            pathElement.setAttribute("mask", "url(" + getLocationHref() + "#" + elementData.maskId + ")");
          }
        } else if (data2.ty === "no") {
          elementData = new SVGNoStyleData(this, data2, styleOb);
        }
        if (data2.ty === "st" || data2.ty === "gs") {
          pathElement.setAttribute("stroke-linecap", lineCapEnum[data2.lc || 2]);
          pathElement.setAttribute("stroke-linejoin", lineJoinEnum[data2.lj || 2]);
          pathElement.setAttribute("fill-opacity", "0");
          if (data2.lj === 1) {
            pathElement.setAttribute("stroke-miterlimit", data2.ml);
          }
        }
        if (data2.r === 2) {
          pathElement.setAttribute("fill-rule", "evenodd");
        }
        if (data2.ln) {
          pathElement.setAttribute("id", data2.ln);
        }
        if (data2.cl) {
          pathElement.setAttribute("class", data2.cl);
        }
        if (data2.bm) {
          pathElement.style["mix-blend-mode"] = getBlendMode(data2.bm);
        }
        this.stylesList.push(styleOb);
        this.addToAnimatedContents(data2, elementData);
        return elementData;
      };
      SVGShapeElement.prototype.createGroupElement = function(data2) {
        var elementData = new ShapeGroupData();
        if (data2.ln) {
          elementData.gr.setAttribute("id", data2.ln);
        }
        if (data2.cl) {
          elementData.gr.setAttribute("class", data2.cl);
        }
        if (data2.bm) {
          elementData.gr.style["mix-blend-mode"] = getBlendMode(data2.bm);
        }
        return elementData;
      };
      SVGShapeElement.prototype.createTransformElement = function(data2, container) {
        var transformProperty = TransformPropertyFactory.getTransformProperty(this, data2, this);
        var elementData = new SVGTransformData(transformProperty, transformProperty.o, container);
        this.addToAnimatedContents(data2, elementData);
        return elementData;
      };
      SVGShapeElement.prototype.createShapeElement = function(data2, ownTransformers, level) {
        var ty = 4;
        if (data2.ty === "rc") {
          ty = 5;
        } else if (data2.ty === "el") {
          ty = 6;
        } else if (data2.ty === "sr") {
          ty = 7;
        }
        var shapeProperty = ShapePropertyFactory.getShapeProp(this, data2, ty, this);
        var elementData = new SVGShapeData(ownTransformers, level, shapeProperty);
        this.shapes.push(elementData);
        this.addShapeToModifiers(elementData);
        this.addToAnimatedContents(data2, elementData);
        return elementData;
      };
      SVGShapeElement.prototype.addToAnimatedContents = function(data2, element) {
        var i6 = 0;
        var len = this.animatedContents.length;
        while (i6 < len) {
          if (this.animatedContents[i6].element === element) {
            return;
          }
          i6 += 1;
        }
        this.animatedContents.push({
          fn: SVGElementsRenderer.createRenderFunction(data2),
          element,
          data: data2
        });
      };
      SVGShapeElement.prototype.setElementStyles = function(elementData) {
        var arr = elementData.styles;
        var j;
        var jLen = this.stylesList.length;
        for (j = 0; j < jLen; j += 1) {
          if (arr.indexOf(this.stylesList[j]) === -1 && !this.stylesList[j].closed) {
            arr.push(this.stylesList[j]);
          }
        }
      };
      SVGShapeElement.prototype.reloadShapes = function() {
        this._isFirstFrame = true;
        var i6;
        var len = this.itemsData.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          this.prevViewData[i6] = this.itemsData[i6];
        }
        this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], true);
        this.filterUniqueShapes();
        len = this.dynamicProperties.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          this.dynamicProperties[i6].getValue();
        }
        this.renderModifiers();
      };
      SVGShapeElement.prototype.searchShapes = function(arr, itemsData, prevViewData, container, level, transformers, render2) {
        var ownTransformers = [].concat(transformers);
        var i6;
        var len = arr.length - 1;
        var j;
        var jLen;
        var ownStyles = [];
        var ownModifiers = [];
        var currentTransform;
        var modifier;
        var processedPos;
        for (i6 = len; i6 >= 0; i6 -= 1) {
          processedPos = this.searchProcessedElement(arr[i6]);
          if (!processedPos) {
            arr[i6]._render = render2;
          } else {
            itemsData[i6] = prevViewData[processedPos - 1];
          }
          if (arr[i6].ty === "fl" || arr[i6].ty === "st" || arr[i6].ty === "gf" || arr[i6].ty === "gs" || arr[i6].ty === "no") {
            if (!processedPos) {
              itemsData[i6] = this.createStyleElement(arr[i6], level);
            } else {
              itemsData[i6].style.closed = arr[i6].hd;
            }
            if (arr[i6]._render) {
              if (itemsData[i6].style.pElem.parentNode !== container) {
                container.appendChild(itemsData[i6].style.pElem);
              }
            }
            ownStyles.push(itemsData[i6].style);
          } else if (arr[i6].ty === "gr") {
            if (!processedPos) {
              itemsData[i6] = this.createGroupElement(arr[i6]);
            } else {
              jLen = itemsData[i6].it.length;
              for (j = 0; j < jLen; j += 1) {
                itemsData[i6].prevViewData[j] = itemsData[i6].it[j];
              }
            }
            this.searchShapes(arr[i6].it, itemsData[i6].it, itemsData[i6].prevViewData, itemsData[i6].gr, level + 1, ownTransformers, render2);
            if (arr[i6]._render) {
              if (itemsData[i6].gr.parentNode !== container) {
                container.appendChild(itemsData[i6].gr);
              }
            }
          } else if (arr[i6].ty === "tr") {
            if (!processedPos) {
              itemsData[i6] = this.createTransformElement(arr[i6], container);
            }
            currentTransform = itemsData[i6].transform;
            ownTransformers.push(currentTransform);
          } else if (arr[i6].ty === "sh" || arr[i6].ty === "rc" || arr[i6].ty === "el" || arr[i6].ty === "sr") {
            if (!processedPos) {
              itemsData[i6] = this.createShapeElement(arr[i6], ownTransformers, level);
            }
            this.setElementStyles(itemsData[i6]);
          } else if (arr[i6].ty === "tm" || arr[i6].ty === "rd" || arr[i6].ty === "ms" || arr[i6].ty === "pb" || arr[i6].ty === "zz" || arr[i6].ty === "op") {
            if (!processedPos) {
              modifier = ShapeModifiers.getModifier(arr[i6].ty);
              modifier.init(this, arr[i6]);
              itemsData[i6] = modifier;
              this.shapeModifiers.push(modifier);
            } else {
              modifier = itemsData[i6];
              modifier.closed = false;
            }
            ownModifiers.push(modifier);
          } else if (arr[i6].ty === "rp") {
            if (!processedPos) {
              modifier = ShapeModifiers.getModifier(arr[i6].ty);
              itemsData[i6] = modifier;
              modifier.init(this, arr, i6, itemsData);
              this.shapeModifiers.push(modifier);
              render2 = false;
            } else {
              modifier = itemsData[i6];
              modifier.closed = true;
            }
            ownModifiers.push(modifier);
          }
          this.addProcessedElement(arr[i6], i6 + 1);
        }
        len = ownStyles.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          ownStyles[i6].closed = true;
        }
        len = ownModifiers.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          ownModifiers[i6].closed = true;
        }
      };
      SVGShapeElement.prototype.renderInnerContent = function() {
        this.renderModifiers();
        var i6;
        var len = this.stylesList.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          this.stylesList[i6].reset();
        }
        this.renderShape();
        for (i6 = 0; i6 < len; i6 += 1) {
          if (this.stylesList[i6]._mdf || this._isFirstFrame) {
            if (this.stylesList[i6].msElem) {
              this.stylesList[i6].msElem.setAttribute("d", this.stylesList[i6].d);
              this.stylesList[i6].d = "M0 0" + this.stylesList[i6].d;
            }
            this.stylesList[i6].pElem.setAttribute("d", this.stylesList[i6].d || "M0 0");
          }
        }
      };
      SVGShapeElement.prototype.renderShape = function() {
        var i6;
        var len = this.animatedContents.length;
        var animatedContent;
        for (i6 = 0; i6 < len; i6 += 1) {
          animatedContent = this.animatedContents[i6];
          if ((this._isFirstFrame || animatedContent.element._isAnimated) && animatedContent.data !== true) {
            animatedContent.fn(animatedContent.data, animatedContent.element, this._isFirstFrame);
          }
        }
      };
      SVGShapeElement.prototype.destroy = function() {
        this.destroyBaseElement();
        this.shapesData = null;
        this.itemsData = null;
      };
      function LetterProps(o, sw, sc, fc, m13, p10) {
        this.o = o;
        this.sw = sw;
        this.sc = sc;
        this.fc = fc;
        this.m = m13;
        this.p = p10;
        this._mdf = {
          o: true,
          sw: !!sw,
          sc: !!sc,
          fc: !!fc,
          m: true,
          p: true
        };
      }
      LetterProps.prototype.update = function(o, sw, sc, fc, m13, p10) {
        this._mdf.o = false;
        this._mdf.sw = false;
        this._mdf.sc = false;
        this._mdf.fc = false;
        this._mdf.m = false;
        this._mdf.p = false;
        var updated = false;
        if (this.o !== o) {
          this.o = o;
          this._mdf.o = true;
          updated = true;
        }
        if (this.sw !== sw) {
          this.sw = sw;
          this._mdf.sw = true;
          updated = true;
        }
        if (this.sc !== sc) {
          this.sc = sc;
          this._mdf.sc = true;
          updated = true;
        }
        if (this.fc !== fc) {
          this.fc = fc;
          this._mdf.fc = true;
          updated = true;
        }
        if (this.m !== m13) {
          this.m = m13;
          this._mdf.m = true;
          updated = true;
        }
        if (p10.length && (this.p[0] !== p10[0] || this.p[1] !== p10[1] || this.p[4] !== p10[4] || this.p[5] !== p10[5] || this.p[12] !== p10[12] || this.p[13] !== p10[13])) {
          this.p = p10;
          this._mdf.p = true;
          updated = true;
        }
        return updated;
      };
      function TextProperty(elem2, data2) {
        this._frameId = initialDefaultFrame;
        this.pv = "";
        this.v = "";
        this.kf = false;
        this._isFirstFrame = true;
        this._mdf = false;
        if (data2.d && data2.d.sid) {
          data2.d = elem2.globalData.slotManager.getProp(data2.d);
        }
        this.data = data2;
        this.elem = elem2;
        this.comp = this.elem.comp;
        this.keysIndex = 0;
        this.canResize = false;
        this.minimumFontSize = 1;
        this.effectsSequence = [];
        this.currentData = {
          ascent: 0,
          boxWidth: this.defaultBoxWidth,
          f: "",
          fStyle: "",
          fWeight: "",
          fc: "",
          j: "",
          justifyOffset: "",
          l: [],
          lh: 0,
          lineWidths: [],
          ls: "",
          of: "",
          s: "",
          sc: "",
          sw: 0,
          t: 0,
          tr: 0,
          sz: 0,
          ps: null,
          fillColorAnim: false,
          strokeColorAnim: false,
          strokeWidthAnim: false,
          yOffset: 0,
          finalSize: 0,
          finalText: [],
          finalLineHeight: 0,
          __complete: false
        };
        this.copyData(this.currentData, this.data.d.k[0].s);
        if (!this.searchProperty()) {
          this.completeTextData(this.currentData);
        }
      }
      TextProperty.prototype.defaultBoxWidth = [0, 0];
      TextProperty.prototype.copyData = function(obj, data2) {
        for (var s8 in data2) {
          if (Object.prototype.hasOwnProperty.call(data2, s8)) {
            obj[s8] = data2[s8];
          }
        }
        return obj;
      };
      TextProperty.prototype.setCurrentData = function(data2) {
        if (!data2.__complete) {
          this.completeTextData(data2);
        }
        this.currentData = data2;
        this.currentData.boxWidth = this.currentData.boxWidth || this.defaultBoxWidth;
        this._mdf = true;
      };
      TextProperty.prototype.searchProperty = function() {
        return this.searchKeyframes();
      };
      TextProperty.prototype.searchKeyframes = function() {
        this.kf = this.data.d.k.length > 1;
        if (this.kf) {
          this.addEffect(this.getKeyframeValue.bind(this));
        }
        return this.kf;
      };
      TextProperty.prototype.addEffect = function(effectFunction) {
        this.effectsSequence.push(effectFunction);
        this.elem.addDynamicProperty(this);
      };
      TextProperty.prototype.getValue = function(_finalValue) {
        if ((this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) && !_finalValue) {
          return;
        }
        this.currentData.t = this.data.d.k[this.keysIndex].s.t;
        var currentValue = this.currentData;
        var currentIndex = this.keysIndex;
        if (this.lock) {
          this.setCurrentData(this.currentData);
          return;
        }
        this.lock = true;
        this._mdf = false;
        var i6;
        var len = this.effectsSequence.length;
        var finalValue = _finalValue || this.data.d.k[this.keysIndex].s;
        for (i6 = 0; i6 < len; i6 += 1) {
          if (currentIndex !== this.keysIndex) {
            finalValue = this.effectsSequence[i6](finalValue, finalValue.t);
          } else {
            finalValue = this.effectsSequence[i6](this.currentData, finalValue.t);
          }
        }
        if (currentValue !== finalValue) {
          this.setCurrentData(finalValue);
        }
        this.v = this.currentData;
        this.pv = this.v;
        this.lock = false;
        this.frameId = this.elem.globalData.frameId;
      };
      TextProperty.prototype.getKeyframeValue = function() {
        var textKeys = this.data.d.k;
        var frameNum = this.elem.comp.renderedFrame;
        var i6 = 0;
        var len = textKeys.length;
        while (i6 <= len - 1) {
          if (i6 === len - 1 || textKeys[i6 + 1].t > frameNum) {
            break;
          }
          i6 += 1;
        }
        if (this.keysIndex !== i6) {
          this.keysIndex = i6;
        }
        return this.data.d.k[this.keysIndex].s;
      };
      TextProperty.prototype.buildFinalText = function(text3) {
        var charactersArray = [];
        var i6 = 0;
        var len = text3.length;
        var charCode;
        var secondCharCode;
        var shouldCombine = false;
        var shouldCombineNext = false;
        var currentChars = "";
        while (i6 < len) {
          shouldCombine = shouldCombineNext;
          shouldCombineNext = false;
          charCode = text3.charCodeAt(i6);
          currentChars = text3.charAt(i6);
          if (FontManager.isCombinedCharacter(charCode)) {
            shouldCombine = true;
          } else if (charCode >= 55296 && charCode <= 56319) {
            if (FontManager.isRegionalFlag(text3, i6)) {
              currentChars = text3.substr(i6, 14);
            } else {
              secondCharCode = text3.charCodeAt(i6 + 1);
              if (secondCharCode >= 56320 && secondCharCode <= 57343) {
                if (FontManager.isModifier(charCode, secondCharCode)) {
                  currentChars = text3.substr(i6, 2);
                  shouldCombine = true;
                } else if (FontManager.isFlagEmoji(text3.substr(i6, 4))) {
                  currentChars = text3.substr(i6, 4);
                } else {
                  currentChars = text3.substr(i6, 2);
                }
              }
            }
          } else if (charCode > 56319) {
            secondCharCode = text3.charCodeAt(i6 + 1);
            if (FontManager.isVariationSelector(charCode)) {
              shouldCombine = true;
            }
          } else if (FontManager.isZeroWidthJoiner(charCode)) {
            shouldCombine = true;
            shouldCombineNext = true;
          }
          if (shouldCombine) {
            charactersArray[charactersArray.length - 1] += currentChars;
            shouldCombine = false;
          } else {
            charactersArray.push(currentChars);
          }
          i6 += currentChars.length;
        }
        return charactersArray;
      };
      TextProperty.prototype.completeTextData = function(documentData) {
        documentData.__complete = true;
        var fontManager = this.elem.globalData.fontManager;
        var data2 = this.data;
        var letters = [];
        var i6;
        var len;
        var newLineFlag;
        var index2 = 0;
        var val2;
        var anchorGrouping = data2.m.g;
        var currentSize = 0;
        var currentPos = 0;
        var currentLine = 0;
        var lineWidths = [];
        var lineWidth = 0;
        var maxLineWidth = 0;
        var j;
        var jLen;
        var fontData = fontManager.getFontByName(documentData.f);
        var charData;
        var cLength = 0;
        var fontProps = getFontProperties(fontData);
        documentData.fWeight = fontProps.weight;
        documentData.fStyle = fontProps.style;
        documentData.finalSize = documentData.s;
        documentData.finalText = this.buildFinalText(documentData.t);
        len = documentData.finalText.length;
        documentData.finalLineHeight = documentData.lh;
        var trackingOffset = documentData.tr / 1e3 * documentData.finalSize;
        var charCode;
        if (documentData.sz) {
          var flag = true;
          var boxWidth = documentData.sz[0];
          var boxHeight = documentData.sz[1];
          var currentHeight;
          var finalText;
          while (flag) {
            finalText = this.buildFinalText(documentData.t);
            currentHeight = 0;
            lineWidth = 0;
            len = finalText.length;
            trackingOffset = documentData.tr / 1e3 * documentData.finalSize;
            var lastSpaceIndex = -1;
            for (i6 = 0; i6 < len; i6 += 1) {
              charCode = finalText[i6].charCodeAt(0);
              newLineFlag = false;
              if (finalText[i6] === " ") {
                lastSpaceIndex = i6;
              } else if (charCode === 13 || charCode === 3) {
                lineWidth = 0;
                newLineFlag = true;
                currentHeight += documentData.finalLineHeight || documentData.finalSize * 1.2;
              }
              if (fontManager.chars) {
                charData = fontManager.getCharData(finalText[i6], fontData.fStyle, fontData.fFamily);
                cLength = newLineFlag ? 0 : charData.w * documentData.finalSize / 100;
              } else {
                cLength = fontManager.measureText(finalText[i6], documentData.f, documentData.finalSize);
              }
              if (lineWidth + cLength > boxWidth && finalText[i6] !== " ") {
                if (lastSpaceIndex === -1) {
                  len += 1;
                } else {
                  i6 = lastSpaceIndex;
                }
                currentHeight += documentData.finalLineHeight || documentData.finalSize * 1.2;
                finalText.splice(i6, lastSpaceIndex === i6 ? 1 : 0, "\r");
                lastSpaceIndex = -1;
                lineWidth = 0;
              } else {
                lineWidth += cLength;
                lineWidth += trackingOffset;
              }
            }
            currentHeight += fontData.ascent * documentData.finalSize / 100;
            if (this.canResize && documentData.finalSize > this.minimumFontSize && boxHeight < currentHeight) {
              documentData.finalSize -= 1;
              documentData.finalLineHeight = documentData.finalSize * documentData.lh / documentData.s;
            } else {
              documentData.finalText = finalText;
              len = documentData.finalText.length;
              flag = false;
            }
          }
        }
        lineWidth = -trackingOffset;
        cLength = 0;
        var uncollapsedSpaces = 0;
        var currentChar;
        for (i6 = 0; i6 < len; i6 += 1) {
          newLineFlag = false;
          currentChar = documentData.finalText[i6];
          charCode = currentChar.charCodeAt(0);
          if (charCode === 13 || charCode === 3) {
            uncollapsedSpaces = 0;
            lineWidths.push(lineWidth);
            maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
            lineWidth = -2 * trackingOffset;
            val2 = "";
            newLineFlag = true;
            currentLine += 1;
          } else {
            val2 = currentChar;
          }
          if (fontManager.chars) {
            charData = fontManager.getCharData(currentChar, fontData.fStyle, fontManager.getFontByName(documentData.f).fFamily);
            cLength = newLineFlag ? 0 : charData.w * documentData.finalSize / 100;
          } else {
            cLength = fontManager.measureText(val2, documentData.f, documentData.finalSize);
          }
          if (currentChar === " ") {
            uncollapsedSpaces += cLength + trackingOffset;
          } else {
            lineWidth += cLength + trackingOffset + uncollapsedSpaces;
            uncollapsedSpaces = 0;
          }
          letters.push({
            l: cLength,
            an: cLength,
            add: currentSize,
            n: newLineFlag,
            anIndexes: [],
            val: val2,
            line: currentLine,
            animatorJustifyOffset: 0
          });
          if (anchorGrouping == 2) {
            currentSize += cLength;
            if (val2 === "" || val2 === " " || i6 === len - 1) {
              if (val2 === "" || val2 === " ") {
                currentSize -= cLength;
              }
              while (currentPos <= i6) {
                letters[currentPos].an = currentSize;
                letters[currentPos].ind = index2;
                letters[currentPos].extra = cLength;
                currentPos += 1;
              }
              index2 += 1;
              currentSize = 0;
            }
          } else if (anchorGrouping == 3) {
            currentSize += cLength;
            if (val2 === "" || i6 === len - 1) {
              if (val2 === "") {
                currentSize -= cLength;
              }
              while (currentPos <= i6) {
                letters[currentPos].an = currentSize;
                letters[currentPos].ind = index2;
                letters[currentPos].extra = cLength;
                currentPos += 1;
              }
              currentSize = 0;
              index2 += 1;
            }
          } else {
            letters[index2].ind = index2;
            letters[index2].extra = 0;
            index2 += 1;
          }
        }
        documentData.l = letters;
        maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
        lineWidths.push(lineWidth);
        if (documentData.sz) {
          documentData.boxWidth = documentData.sz[0];
          documentData.justifyOffset = 0;
        } else {
          documentData.boxWidth = maxLineWidth;
          switch (documentData.j) {
            case 1:
              documentData.justifyOffset = -documentData.boxWidth;
              break;
            case 2:
              documentData.justifyOffset = -documentData.boxWidth / 2;
              break;
            default:
              documentData.justifyOffset = 0;
          }
        }
        documentData.lineWidths = lineWidths;
        var animators = data2.a;
        var animatorData;
        var letterData;
        jLen = animators.length;
        var based;
        var ind;
        var indexes = [];
        for (j = 0; j < jLen; j += 1) {
          animatorData = animators[j];
          if (animatorData.a.sc) {
            documentData.strokeColorAnim = true;
          }
          if (animatorData.a.sw) {
            documentData.strokeWidthAnim = true;
          }
          if (animatorData.a.fc || animatorData.a.fh || animatorData.a.fs || animatorData.a.fb) {
            documentData.fillColorAnim = true;
          }
          ind = 0;
          based = animatorData.s.b;
          for (i6 = 0; i6 < len; i6 += 1) {
            letterData = letters[i6];
            letterData.anIndexes[j] = ind;
            if (based == 1 && letterData.val !== "" || based == 2 && letterData.val !== "" && letterData.val !== " " || based == 3 && (letterData.n || letterData.val == " " || i6 == len - 1) || based == 4 && (letterData.n || i6 == len - 1)) {
              if (animatorData.s.rn === 1) {
                indexes.push(ind);
              }
              ind += 1;
            }
          }
          data2.a[j].s.totalChars = ind;
          var currentInd = -1;
          var newInd;
          if (animatorData.s.rn === 1) {
            for (i6 = 0; i6 < len; i6 += 1) {
              letterData = letters[i6];
              if (currentInd != letterData.anIndexes[j]) {
                currentInd = letterData.anIndexes[j];
                newInd = indexes.splice(Math.floor(Math.random() * indexes.length), 1)[0];
              }
              letterData.anIndexes[j] = newInd;
            }
          }
        }
        documentData.yOffset = documentData.finalLineHeight || documentData.finalSize * 1.2;
        documentData.ls = documentData.ls || 0;
        documentData.ascent = fontData.ascent * documentData.finalSize / 100;
      };
      TextProperty.prototype.updateDocumentData = function(newData, index2) {
        index2 = index2 === void 0 ? this.keysIndex : index2;
        var dData = this.copyData({}, this.data.d.k[index2].s);
        dData = this.copyData(dData, newData);
        this.data.d.k[index2].s = dData;
        this.recalculate(index2);
        this.setCurrentData(dData);
        this.elem.addDynamicProperty(this);
      };
      TextProperty.prototype.recalculate = function(index2) {
        var dData = this.data.d.k[index2].s;
        dData.__complete = false;
        this.keysIndex = 0;
        this._isFirstFrame = true;
        this.getValue(dData);
      };
      TextProperty.prototype.canResizeFont = function(_canResize) {
        this.canResize = _canResize;
        this.recalculate(this.keysIndex);
        this.elem.addDynamicProperty(this);
      };
      TextProperty.prototype.setMinimumFontSize = function(_fontValue) {
        this.minimumFontSize = Math.floor(_fontValue) || 1;
        this.recalculate(this.keysIndex);
        this.elem.addDynamicProperty(this);
      };
      var TextSelectorProp = function() {
        var max = Math.max;
        var min = Math.min;
        var floor = Math.floor;
        function TextSelectorPropFactory(elem2, data2) {
          this._currentTextLength = -1;
          this.k = false;
          this.data = data2;
          this.elem = elem2;
          this.comp = elem2.comp;
          this.finalS = 0;
          this.finalE = 0;
          this.initDynamicPropertyContainer(elem2);
          this.s = PropertyFactory.getProp(elem2, data2.s || {
            k: 0
          }, 0, 0, this);
          if ("e" in data2) {
            this.e = PropertyFactory.getProp(elem2, data2.e, 0, 0, this);
          } else {
            this.e = {
              v: 100
            };
          }
          this.o = PropertyFactory.getProp(elem2, data2.o || {
            k: 0
          }, 0, 0, this);
          this.xe = PropertyFactory.getProp(elem2, data2.xe || {
            k: 0
          }, 0, 0, this);
          this.ne = PropertyFactory.getProp(elem2, data2.ne || {
            k: 0
          }, 0, 0, this);
          this.sm = PropertyFactory.getProp(elem2, data2.sm || {
            k: 100
          }, 0, 0, this);
          this.a = PropertyFactory.getProp(elem2, data2.a, 0, 0.01, this);
          if (!this.dynamicProperties.length) {
            this.getValue();
          }
        }
        TextSelectorPropFactory.prototype = {
          getMult: function getMult(ind) {
            if (this._currentTextLength !== this.elem.textProperty.currentData.l.length) {
              this.getValue();
            }
            var x1 = 0;
            var y1 = 0;
            var x2 = 1;
            var y2 = 1;
            if (this.ne.v > 0) {
              x1 = this.ne.v / 100;
            } else {
              y1 = -this.ne.v / 100;
            }
            if (this.xe.v > 0) {
              x2 = 1 - this.xe.v / 100;
            } else {
              y2 = 1 + this.xe.v / 100;
            }
            var easer = BezierFactory.getBezierEasing(x1, y1, x2, y2).get;
            var mult = 0;
            var s8 = this.finalS;
            var e2 = this.finalE;
            var type4 = this.data.sh;
            if (type4 === 2) {
              if (e2 === s8) {
                mult = ind >= e2 ? 1 : 0;
              } else {
                mult = max(0, min(0.5 / (e2 - s8) + (ind - s8) / (e2 - s8), 1));
              }
              mult = easer(mult);
            } else if (type4 === 3) {
              if (e2 === s8) {
                mult = ind >= e2 ? 0 : 1;
              } else {
                mult = 1 - max(0, min(0.5 / (e2 - s8) + (ind - s8) / (e2 - s8), 1));
              }
              mult = easer(mult);
            } else if (type4 === 4) {
              if (e2 === s8) {
                mult = 0;
              } else {
                mult = max(0, min(0.5 / (e2 - s8) + (ind - s8) / (e2 - s8), 1));
                if (mult < 0.5) {
                  mult *= 2;
                } else {
                  mult = 1 - 2 * (mult - 0.5);
                }
              }
              mult = easer(mult);
            } else if (type4 === 5) {
              if (e2 === s8) {
                mult = 0;
              } else {
                var tot = e2 - s8;
                ind = min(max(0, ind + 0.5 - s8), e2 - s8);
                var x3 = -tot / 2 + ind;
                var a = tot / 2;
                mult = Math.sqrt(1 - x3 * x3 / (a * a));
              }
              mult = easer(mult);
            } else if (type4 === 6) {
              if (e2 === s8) {
                mult = 0;
              } else {
                ind = min(max(0, ind + 0.5 - s8), e2 - s8);
                mult = (1 + Math.cos(Math.PI + Math.PI * 2 * ind / (e2 - s8))) / 2;
              }
              mult = easer(mult);
            } else {
              if (ind >= floor(s8)) {
                if (ind - s8 < 0) {
                  mult = max(0, min(min(e2, 1) - (s8 - ind), 1));
                } else {
                  mult = max(0, min(e2 - ind, 1));
                }
              }
              mult = easer(mult);
            }
            if (this.sm.v !== 100) {
              var smoothness = this.sm.v * 0.01;
              if (smoothness === 0) {
                smoothness = 1e-8;
              }
              var threshold = 0.5 - smoothness * 0.5;
              if (mult < threshold) {
                mult = 0;
              } else {
                mult = (mult - threshold) / smoothness;
                if (mult > 1) {
                  mult = 1;
                }
              }
            }
            return mult * this.a.v;
          },
          getValue: function getValue2(newCharsFlag) {
            this.iterateDynamicProperties();
            this._mdf = newCharsFlag || this._mdf;
            this._currentTextLength = this.elem.textProperty.currentData.l.length || 0;
            if (newCharsFlag && this.data.r === 2) {
              this.e.v = this._currentTextLength;
            }
            var divisor = this.data.r === 2 ? 1 : 100 / this.data.totalChars;
            var o = this.o.v / divisor;
            var s8 = this.s.v / divisor + o;
            var e2 = this.e.v / divisor + o;
            if (s8 > e2) {
              var _s = s8;
              s8 = e2;
              e2 = _s;
            }
            this.finalS = s8;
            this.finalE = e2;
          }
        };
        extendPrototype([DynamicPropertyContainer], TextSelectorPropFactory);
        function getTextSelectorProp(elem2, data2, arr) {
          return new TextSelectorPropFactory(elem2, data2, arr);
        }
        return {
          getTextSelectorProp
        };
      }();
      function TextAnimatorDataProperty(elem2, animatorProps, container) {
        var defaultData = {
          propType: false
        };
        var getProp2 = PropertyFactory.getProp;
        var textAnimatorAnimatables = animatorProps.a;
        this.a = {
          r: textAnimatorAnimatables.r ? getProp2(elem2, textAnimatorAnimatables.r, 0, degToRads, container) : defaultData,
          rx: textAnimatorAnimatables.rx ? getProp2(elem2, textAnimatorAnimatables.rx, 0, degToRads, container) : defaultData,
          ry: textAnimatorAnimatables.ry ? getProp2(elem2, textAnimatorAnimatables.ry, 0, degToRads, container) : defaultData,
          sk: textAnimatorAnimatables.sk ? getProp2(elem2, textAnimatorAnimatables.sk, 0, degToRads, container) : defaultData,
          sa: textAnimatorAnimatables.sa ? getProp2(elem2, textAnimatorAnimatables.sa, 0, degToRads, container) : defaultData,
          s: textAnimatorAnimatables.s ? getProp2(elem2, textAnimatorAnimatables.s, 1, 0.01, container) : defaultData,
          a: textAnimatorAnimatables.a ? getProp2(elem2, textAnimatorAnimatables.a, 1, 0, container) : defaultData,
          o: textAnimatorAnimatables.o ? getProp2(elem2, textAnimatorAnimatables.o, 0, 0.01, container) : defaultData,
          p: textAnimatorAnimatables.p ? getProp2(elem2, textAnimatorAnimatables.p, 1, 0, container) : defaultData,
          sw: textAnimatorAnimatables.sw ? getProp2(elem2, textAnimatorAnimatables.sw, 0, 0, container) : defaultData,
          sc: textAnimatorAnimatables.sc ? getProp2(elem2, textAnimatorAnimatables.sc, 1, 0, container) : defaultData,
          fc: textAnimatorAnimatables.fc ? getProp2(elem2, textAnimatorAnimatables.fc, 1, 0, container) : defaultData,
          fh: textAnimatorAnimatables.fh ? getProp2(elem2, textAnimatorAnimatables.fh, 0, 0, container) : defaultData,
          fs: textAnimatorAnimatables.fs ? getProp2(elem2, textAnimatorAnimatables.fs, 0, 0.01, container) : defaultData,
          fb: textAnimatorAnimatables.fb ? getProp2(elem2, textAnimatorAnimatables.fb, 0, 0.01, container) : defaultData,
          t: textAnimatorAnimatables.t ? getProp2(elem2, textAnimatorAnimatables.t, 0, 0, container) : defaultData
        };
        this.s = TextSelectorProp.getTextSelectorProp(elem2, animatorProps.s, container);
        this.s.t = animatorProps.s.t;
      }
      function TextAnimatorProperty(textData, renderType, elem2) {
        this._isFirstFrame = true;
        this._hasMaskedPath = false;
        this._frameId = -1;
        this._textData = textData;
        this._renderType = renderType;
        this._elem = elem2;
        this._animatorsData = createSizedArray(this._textData.a.length);
        this._pathData = {};
        this._moreOptions = {
          alignment: {}
        };
        this.renderedLetters = [];
        this.lettersChangedFlag = false;
        this.initDynamicPropertyContainer(elem2);
      }
      TextAnimatorProperty.prototype.searchProperties = function() {
        var i6;
        var len = this._textData.a.length;
        var animatorProps;
        var getProp2 = PropertyFactory.getProp;
        for (i6 = 0; i6 < len; i6 += 1) {
          animatorProps = this._textData.a[i6];
          this._animatorsData[i6] = new TextAnimatorDataProperty(this._elem, animatorProps, this);
        }
        if (this._textData.p && "m" in this._textData.p) {
          this._pathData = {
            a: getProp2(this._elem, this._textData.p.a, 0, 0, this),
            f: getProp2(this._elem, this._textData.p.f, 0, 0, this),
            l: getProp2(this._elem, this._textData.p.l, 0, 0, this),
            r: getProp2(this._elem, this._textData.p.r, 0, 0, this),
            p: getProp2(this._elem, this._textData.p.p, 0, 0, this),
            m: this._elem.maskManager.getMaskProperty(this._textData.p.m)
          };
          this._hasMaskedPath = true;
        } else {
          this._hasMaskedPath = false;
        }
        this._moreOptions.alignment = getProp2(this._elem, this._textData.m.a, 1, 0, this);
      };
      TextAnimatorProperty.prototype.getMeasures = function(documentData, lettersChangedFlag) {
        this.lettersChangedFlag = lettersChangedFlag;
        if (!this._mdf && !this._isFirstFrame && !lettersChangedFlag && (!this._hasMaskedPath || !this._pathData.m._mdf)) {
          return;
        }
        this._isFirstFrame = false;
        var alignment = this._moreOptions.alignment.v;
        var animators = this._animatorsData;
        var textData = this._textData;
        var matrixHelper = this.mHelper;
        var renderType = this._renderType;
        var renderedLettersCount = this.renderedLetters.length;
        var xPos;
        var yPos;
        var i6;
        var len;
        var letters = documentData.l;
        var pathInfo;
        var currentLength;
        var currentPoint;
        var segmentLength;
        var flag;
        var pointInd;
        var segmentInd;
        var prevPoint;
        var points;
        var segments;
        var partialLength;
        var totalLength;
        var perc;
        var tanAngle;
        var mask2;
        if (this._hasMaskedPath) {
          mask2 = this._pathData.m;
          if (!this._pathData.n || this._pathData._mdf) {
            var paths = mask2.v;
            if (this._pathData.r.v) {
              paths = paths.reverse();
            }
            pathInfo = {
              tLength: 0,
              segments: []
            };
            len = paths._length - 1;
            var bezierData;
            totalLength = 0;
            for (i6 = 0; i6 < len; i6 += 1) {
              bezierData = bez.buildBezierData(paths.v[i6], paths.v[i6 + 1], [paths.o[i6][0] - paths.v[i6][0], paths.o[i6][1] - paths.v[i6][1]], [paths.i[i6 + 1][0] - paths.v[i6 + 1][0], paths.i[i6 + 1][1] - paths.v[i6 + 1][1]]);
              pathInfo.tLength += bezierData.segmentLength;
              pathInfo.segments.push(bezierData);
              totalLength += bezierData.segmentLength;
            }
            i6 = len;
            if (mask2.v.c) {
              bezierData = bez.buildBezierData(paths.v[i6], paths.v[0], [paths.o[i6][0] - paths.v[i6][0], paths.o[i6][1] - paths.v[i6][1]], [paths.i[0][0] - paths.v[0][0], paths.i[0][1] - paths.v[0][1]]);
              pathInfo.tLength += bezierData.segmentLength;
              pathInfo.segments.push(bezierData);
              totalLength += bezierData.segmentLength;
            }
            this._pathData.pi = pathInfo;
          }
          pathInfo = this._pathData.pi;
          currentLength = this._pathData.f.v;
          segmentInd = 0;
          pointInd = 1;
          segmentLength = 0;
          flag = true;
          segments = pathInfo.segments;
          if (currentLength < 0 && mask2.v.c) {
            if (pathInfo.tLength < Math.abs(currentLength)) {
              currentLength = -Math.abs(currentLength) % pathInfo.tLength;
            }
            segmentInd = segments.length - 1;
            points = segments[segmentInd].points;
            pointInd = points.length - 1;
            while (currentLength < 0) {
              currentLength += points[pointInd].partialLength;
              pointInd -= 1;
              if (pointInd < 0) {
                segmentInd -= 1;
                points = segments[segmentInd].points;
                pointInd = points.length - 1;
              }
            }
          }
          points = segments[segmentInd].points;
          prevPoint = points[pointInd - 1];
          currentPoint = points[pointInd];
          partialLength = currentPoint.partialLength;
        }
        len = letters.length;
        xPos = 0;
        yPos = 0;
        var yOff = documentData.finalSize * 1.2 * 0.714;
        var firstLine = true;
        var animatorProps;
        var animatorSelector;
        var j;
        var jLen;
        var letterValue;
        jLen = animators.length;
        var mult;
        var ind = -1;
        var offf;
        var xPathPos;
        var yPathPos;
        var initPathPos = currentLength;
        var initSegmentInd = segmentInd;
        var initPointInd = pointInd;
        var currentLine = -1;
        var elemOpacity;
        var sc;
        var sw;
        var fc;
        var k2;
        var letterSw;
        var letterSc;
        var letterFc;
        var letterM = "";
        var letterP = this.defaultPropsArray;
        var letterO;
        if (documentData.j === 2 || documentData.j === 1) {
          var animatorJustifyOffset = 0;
          var animatorFirstCharOffset = 0;
          var justifyOffsetMult = documentData.j === 2 ? -0.5 : -1;
          var lastIndex = 0;
          var isNewLine = true;
          for (i6 = 0; i6 < len; i6 += 1) {
            if (letters[i6].n) {
              if (animatorJustifyOffset) {
                animatorJustifyOffset += animatorFirstCharOffset;
              }
              while (lastIndex < i6) {
                letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
                lastIndex += 1;
              }
              animatorJustifyOffset = 0;
              isNewLine = true;
            } else {
              for (j = 0; j < jLen; j += 1) {
                animatorProps = animators[j].a;
                if (animatorProps.t.propType) {
                  if (isNewLine && documentData.j === 2) {
                    animatorFirstCharOffset += animatorProps.t.v * justifyOffsetMult;
                  }
                  animatorSelector = animators[j].s;
                  mult = animatorSelector.getMult(letters[i6].anIndexes[j], textData.a[j].s.totalChars);
                  if (mult.length) {
                    animatorJustifyOffset += animatorProps.t.v * mult[0] * justifyOffsetMult;
                  } else {
                    animatorJustifyOffset += animatorProps.t.v * mult * justifyOffsetMult;
                  }
                }
              }
              isNewLine = false;
            }
          }
          if (animatorJustifyOffset) {
            animatorJustifyOffset += animatorFirstCharOffset;
          }
          while (lastIndex < i6) {
            letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
            lastIndex += 1;
          }
        }
        for (i6 = 0; i6 < len; i6 += 1) {
          matrixHelper.reset();
          elemOpacity = 1;
          if (letters[i6].n) {
            xPos = 0;
            yPos += documentData.yOffset;
            yPos += firstLine ? 1 : 0;
            currentLength = initPathPos;
            firstLine = false;
            if (this._hasMaskedPath) {
              segmentInd = initSegmentInd;
              pointInd = initPointInd;
              points = segments[segmentInd].points;
              prevPoint = points[pointInd - 1];
              currentPoint = points[pointInd];
              partialLength = currentPoint.partialLength;
              segmentLength = 0;
            }
            letterM = "";
            letterFc = "";
            letterSw = "";
            letterO = "";
            letterP = this.defaultPropsArray;
          } else {
            if (this._hasMaskedPath) {
              if (currentLine !== letters[i6].line) {
                switch (documentData.j) {
                  case 1:
                    currentLength += totalLength - documentData.lineWidths[letters[i6].line];
                    break;
                  case 2:
                    currentLength += (totalLength - documentData.lineWidths[letters[i6].line]) / 2;
                    break;
                  default:
                    break;
                }
                currentLine = letters[i6].line;
              }
              if (ind !== letters[i6].ind) {
                if (letters[ind]) {
                  currentLength += letters[ind].extra;
                }
                currentLength += letters[i6].an / 2;
                ind = letters[i6].ind;
              }
              currentLength += alignment[0] * letters[i6].an * 5e-3;
              var animatorOffset = 0;
              for (j = 0; j < jLen; j += 1) {
                animatorProps = animators[j].a;
                if (animatorProps.p.propType) {
                  animatorSelector = animators[j].s;
                  mult = animatorSelector.getMult(letters[i6].anIndexes[j], textData.a[j].s.totalChars);
                  if (mult.length) {
                    animatorOffset += animatorProps.p.v[0] * mult[0];
                  } else {
                    animatorOffset += animatorProps.p.v[0] * mult;
                  }
                }
                if (animatorProps.a.propType) {
                  animatorSelector = animators[j].s;
                  mult = animatorSelector.getMult(letters[i6].anIndexes[j], textData.a[j].s.totalChars);
                  if (mult.length) {
                    animatorOffset += animatorProps.a.v[0] * mult[0];
                  } else {
                    animatorOffset += animatorProps.a.v[0] * mult;
                  }
                }
              }
              flag = true;
              if (this._pathData.a.v) {
                currentLength = letters[0].an * 0.5 + (totalLength - this._pathData.f.v - letters[0].an * 0.5 - letters[letters.length - 1].an * 0.5) * ind / (len - 1);
                currentLength += this._pathData.f.v;
              }
              while (flag) {
                if (segmentLength + partialLength >= currentLength + animatorOffset || !points) {
                  perc = (currentLength + animatorOffset - segmentLength) / currentPoint.partialLength;
                  xPathPos = prevPoint.point[0] + (currentPoint.point[0] - prevPoint.point[0]) * perc;
                  yPathPos = prevPoint.point[1] + (currentPoint.point[1] - prevPoint.point[1]) * perc;
                  matrixHelper.translate(-alignment[0] * letters[i6].an * 5e-3, -(alignment[1] * yOff) * 0.01);
                  flag = false;
                } else if (points) {
                  segmentLength += currentPoint.partialLength;
                  pointInd += 1;
                  if (pointInd >= points.length) {
                    pointInd = 0;
                    segmentInd += 1;
                    if (!segments[segmentInd]) {
                      if (mask2.v.c) {
                        pointInd = 0;
                        segmentInd = 0;
                        points = segments[segmentInd].points;
                      } else {
                        segmentLength -= currentPoint.partialLength;
                        points = null;
                      }
                    } else {
                      points = segments[segmentInd].points;
                    }
                  }
                  if (points) {
                    prevPoint = currentPoint;
                    currentPoint = points[pointInd];
                    partialLength = currentPoint.partialLength;
                  }
                }
              }
              offf = letters[i6].an / 2 - letters[i6].add;
              matrixHelper.translate(-offf, 0, 0);
            } else {
              offf = letters[i6].an / 2 - letters[i6].add;
              matrixHelper.translate(-offf, 0, 0);
              matrixHelper.translate(-alignment[0] * letters[i6].an * 5e-3, -alignment[1] * yOff * 0.01, 0);
            }
            for (j = 0; j < jLen; j += 1) {
              animatorProps = animators[j].a;
              if (animatorProps.t.propType) {
                animatorSelector = animators[j].s;
                mult = animatorSelector.getMult(letters[i6].anIndexes[j], textData.a[j].s.totalChars);
                if (xPos !== 0 || documentData.j !== 0) {
                  if (this._hasMaskedPath) {
                    if (mult.length) {
                      currentLength += animatorProps.t.v * mult[0];
                    } else {
                      currentLength += animatorProps.t.v * mult;
                    }
                  } else if (mult.length) {
                    xPos += animatorProps.t.v * mult[0];
                  } else {
                    xPos += animatorProps.t.v * mult;
                  }
                }
              }
            }
            if (documentData.strokeWidthAnim) {
              sw = documentData.sw || 0;
            }
            if (documentData.strokeColorAnim) {
              if (documentData.sc) {
                sc = [documentData.sc[0], documentData.sc[1], documentData.sc[2]];
              } else {
                sc = [0, 0, 0];
              }
            }
            if (documentData.fillColorAnim && documentData.fc) {
              fc = [documentData.fc[0], documentData.fc[1], documentData.fc[2]];
            }
            for (j = 0; j < jLen; j += 1) {
              animatorProps = animators[j].a;
              if (animatorProps.a.propType) {
                animatorSelector = animators[j].s;
                mult = animatorSelector.getMult(letters[i6].anIndexes[j], textData.a[j].s.totalChars);
                if (mult.length) {
                  matrixHelper.translate(-animatorProps.a.v[0] * mult[0], -animatorProps.a.v[1] * mult[1], animatorProps.a.v[2] * mult[2]);
                } else {
                  matrixHelper.translate(-animatorProps.a.v[0] * mult, -animatorProps.a.v[1] * mult, animatorProps.a.v[2] * mult);
                }
              }
            }
            for (j = 0; j < jLen; j += 1) {
              animatorProps = animators[j].a;
              if (animatorProps.s.propType) {
                animatorSelector = animators[j].s;
                mult = animatorSelector.getMult(letters[i6].anIndexes[j], textData.a[j].s.totalChars);
                if (mult.length) {
                  matrixHelper.scale(1 + (animatorProps.s.v[0] - 1) * mult[0], 1 + (animatorProps.s.v[1] - 1) * mult[1], 1);
                } else {
                  matrixHelper.scale(1 + (animatorProps.s.v[0] - 1) * mult, 1 + (animatorProps.s.v[1] - 1) * mult, 1);
                }
              }
            }
            for (j = 0; j < jLen; j += 1) {
              animatorProps = animators[j].a;
              animatorSelector = animators[j].s;
              mult = animatorSelector.getMult(letters[i6].anIndexes[j], textData.a[j].s.totalChars);
              if (animatorProps.sk.propType) {
                if (mult.length) {
                  matrixHelper.skewFromAxis(-animatorProps.sk.v * mult[0], animatorProps.sa.v * mult[1]);
                } else {
                  matrixHelper.skewFromAxis(-animatorProps.sk.v * mult, animatorProps.sa.v * mult);
                }
              }
              if (animatorProps.r.propType) {
                if (mult.length) {
                  matrixHelper.rotateZ(-animatorProps.r.v * mult[2]);
                } else {
                  matrixHelper.rotateZ(-animatorProps.r.v * mult);
                }
              }
              if (animatorProps.ry.propType) {
                if (mult.length) {
                  matrixHelper.rotateY(animatorProps.ry.v * mult[1]);
                } else {
                  matrixHelper.rotateY(animatorProps.ry.v * mult);
                }
              }
              if (animatorProps.rx.propType) {
                if (mult.length) {
                  matrixHelper.rotateX(animatorProps.rx.v * mult[0]);
                } else {
                  matrixHelper.rotateX(animatorProps.rx.v * mult);
                }
              }
              if (animatorProps.o.propType) {
                if (mult.length) {
                  elemOpacity += (animatorProps.o.v * mult[0] - elemOpacity) * mult[0];
                } else {
                  elemOpacity += (animatorProps.o.v * mult - elemOpacity) * mult;
                }
              }
              if (documentData.strokeWidthAnim && animatorProps.sw.propType) {
                if (mult.length) {
                  sw += animatorProps.sw.v * mult[0];
                } else {
                  sw += animatorProps.sw.v * mult;
                }
              }
              if (documentData.strokeColorAnim && animatorProps.sc.propType) {
                for (k2 = 0; k2 < 3; k2 += 1) {
                  if (mult.length) {
                    sc[k2] += (animatorProps.sc.v[k2] - sc[k2]) * mult[0];
                  } else {
                    sc[k2] += (animatorProps.sc.v[k2] - sc[k2]) * mult;
                  }
                }
              }
              if (documentData.fillColorAnim && documentData.fc) {
                if (animatorProps.fc.propType) {
                  for (k2 = 0; k2 < 3; k2 += 1) {
                    if (mult.length) {
                      fc[k2] += (animatorProps.fc.v[k2] - fc[k2]) * mult[0];
                    } else {
                      fc[k2] += (animatorProps.fc.v[k2] - fc[k2]) * mult;
                    }
                  }
                }
                if (animatorProps.fh.propType) {
                  if (mult.length) {
                    fc = addHueToRGB(fc, animatorProps.fh.v * mult[0]);
                  } else {
                    fc = addHueToRGB(fc, animatorProps.fh.v * mult);
                  }
                }
                if (animatorProps.fs.propType) {
                  if (mult.length) {
                    fc = addSaturationToRGB(fc, animatorProps.fs.v * mult[0]);
                  } else {
                    fc = addSaturationToRGB(fc, animatorProps.fs.v * mult);
                  }
                }
                if (animatorProps.fb.propType) {
                  if (mult.length) {
                    fc = addBrightnessToRGB(fc, animatorProps.fb.v * mult[0]);
                  } else {
                    fc = addBrightnessToRGB(fc, animatorProps.fb.v * mult);
                  }
                }
              }
            }
            for (j = 0; j < jLen; j += 1) {
              animatorProps = animators[j].a;
              if (animatorProps.p.propType) {
                animatorSelector = animators[j].s;
                mult = animatorSelector.getMult(letters[i6].anIndexes[j], textData.a[j].s.totalChars);
                if (this._hasMaskedPath) {
                  if (mult.length) {
                    matrixHelper.translate(0, animatorProps.p.v[1] * mult[0], -animatorProps.p.v[2] * mult[1]);
                  } else {
                    matrixHelper.translate(0, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);
                  }
                } else if (mult.length) {
                  matrixHelper.translate(animatorProps.p.v[0] * mult[0], animatorProps.p.v[1] * mult[1], -animatorProps.p.v[2] * mult[2]);
                } else {
                  matrixHelper.translate(animatorProps.p.v[0] * mult, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);
                }
              }
            }
            if (documentData.strokeWidthAnim) {
              letterSw = sw < 0 ? 0 : sw;
            }
            if (documentData.strokeColorAnim) {
              letterSc = "rgb(" + Math.round(sc[0] * 255) + "," + Math.round(sc[1] * 255) + "," + Math.round(sc[2] * 255) + ")";
            }
            if (documentData.fillColorAnim && documentData.fc) {
              letterFc = "rgb(" + Math.round(fc[0] * 255) + "," + Math.round(fc[1] * 255) + "," + Math.round(fc[2] * 255) + ")";
            }
            if (this._hasMaskedPath) {
              matrixHelper.translate(0, -documentData.ls);
              matrixHelper.translate(0, alignment[1] * yOff * 0.01 + yPos, 0);
              if (this._pathData.p.v) {
                tanAngle = (currentPoint.point[1] - prevPoint.point[1]) / (currentPoint.point[0] - prevPoint.point[0]);
                var rot = Math.atan(tanAngle) * 180 / Math.PI;
                if (currentPoint.point[0] < prevPoint.point[0]) {
                  rot += 180;
                }
                matrixHelper.rotate(-rot * Math.PI / 180);
              }
              matrixHelper.translate(xPathPos, yPathPos, 0);
              currentLength -= alignment[0] * letters[i6].an * 5e-3;
              if (letters[i6 + 1] && ind !== letters[i6 + 1].ind) {
                currentLength += letters[i6].an / 2;
                currentLength += documentData.tr * 1e-3 * documentData.finalSize;
              }
            } else {
              matrixHelper.translate(xPos, yPos, 0);
              if (documentData.ps) {
                matrixHelper.translate(documentData.ps[0], documentData.ps[1] + documentData.ascent, 0);
              }
              switch (documentData.j) {
                case 1:
                  matrixHelper.translate(letters[i6].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i6].line]), 0, 0);
                  break;
                case 2:
                  matrixHelper.translate(letters[i6].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i6].line]) / 2, 0, 0);
                  break;
                default:
                  break;
              }
              matrixHelper.translate(0, -documentData.ls);
              matrixHelper.translate(offf, 0, 0);
              matrixHelper.translate(alignment[0] * letters[i6].an * 5e-3, alignment[1] * yOff * 0.01, 0);
              xPos += letters[i6].l + documentData.tr * 1e-3 * documentData.finalSize;
            }
            if (renderType === "html") {
              letterM = matrixHelper.toCSS();
            } else if (renderType === "svg") {
              letterM = matrixHelper.to2dCSS();
            } else {
              letterP = [matrixHelper.props[0], matrixHelper.props[1], matrixHelper.props[2], matrixHelper.props[3], matrixHelper.props[4], matrixHelper.props[5], matrixHelper.props[6], matrixHelper.props[7], matrixHelper.props[8], matrixHelper.props[9], matrixHelper.props[10], matrixHelper.props[11], matrixHelper.props[12], matrixHelper.props[13], matrixHelper.props[14], matrixHelper.props[15]];
            }
            letterO = elemOpacity;
          }
          if (renderedLettersCount <= i6) {
            letterValue = new LetterProps(letterO, letterSw, letterSc, letterFc, letterM, letterP);
            this.renderedLetters.push(letterValue);
            renderedLettersCount += 1;
            this.lettersChangedFlag = true;
          } else {
            letterValue = this.renderedLetters[i6];
            this.lettersChangedFlag = letterValue.update(letterO, letterSw, letterSc, letterFc, letterM, letterP) || this.lettersChangedFlag;
          }
        }
      };
      TextAnimatorProperty.prototype.getValue = function() {
        if (this._elem.globalData.frameId === this._frameId) {
          return;
        }
        this._frameId = this._elem.globalData.frameId;
        this.iterateDynamicProperties();
      };
      TextAnimatorProperty.prototype.mHelper = new Matrix();
      TextAnimatorProperty.prototype.defaultPropsArray = [];
      extendPrototype([DynamicPropertyContainer], TextAnimatorProperty);
      function ITextElement() {
      }
      ITextElement.prototype.initElement = function(data2, globalData2, comp2) {
        this.lettersChangedFlag = true;
        this.initFrame();
        this.initBaseData(data2, globalData2, comp2);
        this.textProperty = new TextProperty(this, data2.t, this.dynamicProperties);
        this.textAnimator = new TextAnimatorProperty(data2.t, this.renderType, this);
        this.initTransform(data2, globalData2, comp2);
        this.initHierarchy();
        this.initRenderable();
        this.initRendererElement();
        this.createContainerElements();
        this.createRenderableComponents();
        this.createContent();
        this.hide();
        this.textAnimator.searchProperties(this.dynamicProperties);
      };
      ITextElement.prototype.prepareFrame = function(num) {
        this._mdf = false;
        this.prepareRenderableFrame(num);
        this.prepareProperties(num, this.isInRange);
      };
      ITextElement.prototype.createPathShape = function(matrixHelper, shapes) {
        var j;
        var jLen = shapes.length;
        var pathNodes;
        var shapeStr = "";
        for (j = 0; j < jLen; j += 1) {
          if (shapes[j].ty === "sh") {
            pathNodes = shapes[j].ks.k;
            shapeStr += buildShapeString(pathNodes, pathNodes.i.length, true, matrixHelper);
          }
        }
        return shapeStr;
      };
      ITextElement.prototype.updateDocumentData = function(newData, index2) {
        this.textProperty.updateDocumentData(newData, index2);
      };
      ITextElement.prototype.canResizeFont = function(_canResize) {
        this.textProperty.canResizeFont(_canResize);
      };
      ITextElement.prototype.setMinimumFontSize = function(_fontSize) {
        this.textProperty.setMinimumFontSize(_fontSize);
      };
      ITextElement.prototype.applyTextPropertiesToMatrix = function(documentData, matrixHelper, lineNumber, xPos, yPos) {
        if (documentData.ps) {
          matrixHelper.translate(documentData.ps[0], documentData.ps[1] + documentData.ascent, 0);
        }
        matrixHelper.translate(0, -documentData.ls, 0);
        switch (documentData.j) {
          case 1:
            matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber]), 0, 0);
            break;
          case 2:
            matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber]) / 2, 0, 0);
            break;
          default:
            break;
        }
        matrixHelper.translate(xPos, yPos, 0);
      };
      ITextElement.prototype.buildColor = function(colorData) {
        return "rgb(" + Math.round(colorData[0] * 255) + "," + Math.round(colorData[1] * 255) + "," + Math.round(colorData[2] * 255) + ")";
      };
      ITextElement.prototype.emptyProp = new LetterProps();
      ITextElement.prototype.destroy = function() {
      };
      ITextElement.prototype.validateText = function() {
        if (this.textProperty._mdf || this.textProperty._isFirstFrame) {
          this.buildNewText();
          this.textProperty._isFirstFrame = false;
          this.textProperty._mdf = false;
        }
      };
      var emptyShapeData = {
        shapes: []
      };
      function SVGTextLottieElement(data2, globalData2, comp2) {
        this.textSpans = [];
        this.renderType = "svg";
        this.initElement(data2, globalData2, comp2);
      }
      extendPrototype([BaseElement, TransformElement, SVGBaseElement, HierarchyElement, FrameElement, RenderableDOMElement, ITextElement], SVGTextLottieElement);
      SVGTextLottieElement.prototype.createContent = function() {
        if (this.data.singleShape && !this.globalData.fontManager.chars) {
          this.textContainer = createNS("text");
        }
      };
      SVGTextLottieElement.prototype.buildTextContents = function(textArray) {
        var i6 = 0;
        var len = textArray.length;
        var textContents = [];
        var currentTextContent = "";
        while (i6 < len) {
          if (textArray[i6] === String.fromCharCode(13) || textArray[i6] === String.fromCharCode(3)) {
            textContents.push(currentTextContent);
            currentTextContent = "";
          } else {
            currentTextContent += textArray[i6];
          }
          i6 += 1;
        }
        textContents.push(currentTextContent);
        return textContents;
      };
      SVGTextLottieElement.prototype.buildShapeData = function(data2, scale2) {
        if (data2.shapes && data2.shapes.length) {
          var shape = data2.shapes[0];
          if (shape.it) {
            var shapeItem = shape.it[shape.it.length - 1];
            if (shapeItem.s) {
              shapeItem.s.k[0] = scale2;
              shapeItem.s.k[1] = scale2;
            }
          }
        }
        return data2;
      };
      SVGTextLottieElement.prototype.buildNewText = function() {
        this.addDynamicProperty(this);
        var i6;
        var len;
        var documentData = this.textProperty.currentData;
        this.renderedLetters = createSizedArray(documentData ? documentData.l.length : 0);
        if (documentData.fc) {
          this.layerElement.setAttribute("fill", this.buildColor(documentData.fc));
        } else {
          this.layerElement.setAttribute("fill", "rgba(0,0,0,0)");
        }
        if (documentData.sc) {
          this.layerElement.setAttribute("stroke", this.buildColor(documentData.sc));
          this.layerElement.setAttribute("stroke-width", documentData.sw);
        }
        this.layerElement.setAttribute("font-size", documentData.finalSize);
        var fontData = this.globalData.fontManager.getFontByName(documentData.f);
        if (fontData.fClass) {
          this.layerElement.setAttribute("class", fontData.fClass);
        } else {
          this.layerElement.setAttribute("font-family", fontData.fFamily);
          var fWeight = documentData.fWeight;
          var fStyle = documentData.fStyle;
          this.layerElement.setAttribute("font-style", fStyle);
          this.layerElement.setAttribute("font-weight", fWeight);
        }
        this.layerElement.setAttribute("aria-label", documentData.t);
        var letters = documentData.l || [];
        var usesGlyphs = !!this.globalData.fontManager.chars;
        len = letters.length;
        var tSpan;
        var matrixHelper = this.mHelper;
        var shapeStr = "";
        var singleShape = this.data.singleShape;
        var xPos = 0;
        var yPos = 0;
        var firstLine = true;
        var trackingOffset = documentData.tr * 1e-3 * documentData.finalSize;
        if (singleShape && !usesGlyphs && !documentData.sz) {
          var tElement = this.textContainer;
          var justify = "start";
          switch (documentData.j) {
            case 1:
              justify = "end";
              break;
            case 2:
              justify = "middle";
              break;
            default:
              justify = "start";
              break;
          }
          tElement.setAttribute("text-anchor", justify);
          tElement.setAttribute("letter-spacing", trackingOffset);
          var textContent = this.buildTextContents(documentData.finalText);
          len = textContent.length;
          yPos = documentData.ps ? documentData.ps[1] + documentData.ascent : 0;
          for (i6 = 0; i6 < len; i6 += 1) {
            tSpan = this.textSpans[i6].span || createNS("tspan");
            tSpan.textContent = textContent[i6];
            tSpan.setAttribute("x", 0);
            tSpan.setAttribute("y", yPos);
            tSpan.style.display = "inherit";
            tElement.appendChild(tSpan);
            if (!this.textSpans[i6]) {
              this.textSpans[i6] = {
                span: null,
                glyph: null
              };
            }
            this.textSpans[i6].span = tSpan;
            yPos += documentData.finalLineHeight;
          }
          this.layerElement.appendChild(tElement);
        } else {
          var cachedSpansLength = this.textSpans.length;
          var charData;
          for (i6 = 0; i6 < len; i6 += 1) {
            if (!this.textSpans[i6]) {
              this.textSpans[i6] = {
                span: null,
                childSpan: null,
                glyph: null
              };
            }
            if (!usesGlyphs || !singleShape || i6 === 0) {
              tSpan = cachedSpansLength > i6 ? this.textSpans[i6].span : createNS(usesGlyphs ? "g" : "text");
              if (cachedSpansLength <= i6) {
                tSpan.setAttribute("stroke-linecap", "butt");
                tSpan.setAttribute("stroke-linejoin", "round");
                tSpan.setAttribute("stroke-miterlimit", "4");
                this.textSpans[i6].span = tSpan;
                if (usesGlyphs) {
                  var childSpan = createNS("g");
                  tSpan.appendChild(childSpan);
                  this.textSpans[i6].childSpan = childSpan;
                }
                this.textSpans[i6].span = tSpan;
                this.layerElement.appendChild(tSpan);
              }
              tSpan.style.display = "inherit";
            }
            matrixHelper.reset();
            if (singleShape) {
              if (letters[i6].n) {
                xPos = -trackingOffset;
                yPos += documentData.yOffset;
                yPos += firstLine ? 1 : 0;
                firstLine = false;
              }
              this.applyTextPropertiesToMatrix(documentData, matrixHelper, letters[i6].line, xPos, yPos);
              xPos += letters[i6].l || 0;
              xPos += trackingOffset;
            }
            if (usesGlyphs) {
              charData = this.globalData.fontManager.getCharData(documentData.finalText[i6], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
              var glyphElement;
              if (charData.t === 1) {
                glyphElement = new SVGCompElement(charData.data, this.globalData, this);
              } else {
                var data2 = emptyShapeData;
                if (charData.data && charData.data.shapes) {
                  data2 = this.buildShapeData(charData.data, documentData.finalSize);
                }
                glyphElement = new SVGShapeElement(data2, this.globalData, this);
              }
              if (this.textSpans[i6].glyph) {
                var glyph = this.textSpans[i6].glyph;
                this.textSpans[i6].childSpan.removeChild(glyph.layerElement);
                glyph.destroy();
              }
              this.textSpans[i6].glyph = glyphElement;
              glyphElement._debug = true;
              glyphElement.prepareFrame(0);
              glyphElement.renderFrame();
              this.textSpans[i6].childSpan.appendChild(glyphElement.layerElement);
              if (charData.t === 1) {
                this.textSpans[i6].childSpan.setAttribute("transform", "scale(" + documentData.finalSize / 100 + "," + documentData.finalSize / 100 + ")");
              }
            } else {
              if (singleShape) {
                tSpan.setAttribute("transform", "translate(" + matrixHelper.props[12] + "," + matrixHelper.props[13] + ")");
              }
              tSpan.textContent = letters[i6].val;
              tSpan.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space", "preserve");
            }
          }
          if (singleShape && tSpan) {
            tSpan.setAttribute("d", shapeStr);
          }
        }
        while (i6 < this.textSpans.length) {
          this.textSpans[i6].span.style.display = "none";
          i6 += 1;
        }
        this._sizeChanged = true;
      };
      SVGTextLottieElement.prototype.sourceRectAtTime = function() {
        this.prepareFrame(this.comp.renderedFrame - this.data.st);
        this.renderInnerContent();
        if (this._sizeChanged) {
          this._sizeChanged = false;
          var textBox = this.layerElement.getBBox();
          this.bbox = {
            top: textBox.y,
            left: textBox.x,
            width: textBox.width,
            height: textBox.height
          };
        }
        return this.bbox;
      };
      SVGTextLottieElement.prototype.getValue = function() {
        var i6;
        var len = this.textSpans.length;
        var glyphElement;
        this.renderedFrame = this.comp.renderedFrame;
        for (i6 = 0; i6 < len; i6 += 1) {
          glyphElement = this.textSpans[i6].glyph;
          if (glyphElement) {
            glyphElement.prepareFrame(this.comp.renderedFrame - this.data.st);
            if (glyphElement._mdf) {
              this._mdf = true;
            }
          }
        }
      };
      SVGTextLottieElement.prototype.renderInnerContent = function() {
        this.validateText();
        if (!this.data.singleShape || this._mdf) {
          this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
          if (this.lettersChangedFlag || this.textAnimator.lettersChangedFlag) {
            this._sizeChanged = true;
            var i6;
            var len;
            var renderedLetters = this.textAnimator.renderedLetters;
            var letters = this.textProperty.currentData.l;
            len = letters.length;
            var renderedLetter;
            var textSpan;
            var glyphElement;
            for (i6 = 0; i6 < len; i6 += 1) {
              if (!letters[i6].n) {
                renderedLetter = renderedLetters[i6];
                textSpan = this.textSpans[i6].span;
                glyphElement = this.textSpans[i6].glyph;
                if (glyphElement) {
                  glyphElement.renderFrame();
                }
                if (renderedLetter._mdf.m) {
                  textSpan.setAttribute("transform", renderedLetter.m);
                }
                if (renderedLetter._mdf.o) {
                  textSpan.setAttribute("opacity", renderedLetter.o);
                }
                if (renderedLetter._mdf.sw) {
                  textSpan.setAttribute("stroke-width", renderedLetter.sw);
                }
                if (renderedLetter._mdf.sc) {
                  textSpan.setAttribute("stroke", renderedLetter.sc);
                }
                if (renderedLetter._mdf.fc) {
                  textSpan.setAttribute("fill", renderedLetter.fc);
                }
              }
            }
          }
        }
      };
      function ISolidElement(data2, globalData2, comp2) {
        this.initElement(data2, globalData2, comp2);
      }
      extendPrototype([IImageElement], ISolidElement);
      ISolidElement.prototype.createContent = function() {
        var rect = createNS("rect");
        rect.setAttribute("width", this.data.sw);
        rect.setAttribute("height", this.data.sh);
        rect.setAttribute("fill", this.data.sc);
        this.layerElement.appendChild(rect);
      };
      function NullElement(data2, globalData2, comp2) {
        this.initFrame();
        this.initBaseData(data2, globalData2, comp2);
        this.initFrame();
        this.initTransform(data2, globalData2, comp2);
        this.initHierarchy();
      }
      NullElement.prototype.prepareFrame = function(num) {
        this.prepareProperties(num, true);
      };
      NullElement.prototype.renderFrame = function() {
      };
      NullElement.prototype.getBaseElement = function() {
        return null;
      };
      NullElement.prototype.destroy = function() {
      };
      NullElement.prototype.sourceRectAtTime = function() {
      };
      NullElement.prototype.hide = function() {
      };
      extendPrototype([BaseElement, TransformElement, HierarchyElement, FrameElement], NullElement);
      function SVGRendererBase() {
      }
      extendPrototype([BaseRenderer], SVGRendererBase);
      SVGRendererBase.prototype.createNull = function(data2) {
        return new NullElement(data2, this.globalData, this);
      };
      SVGRendererBase.prototype.createShape = function(data2) {
        return new SVGShapeElement(data2, this.globalData, this);
      };
      SVGRendererBase.prototype.createText = function(data2) {
        return new SVGTextLottieElement(data2, this.globalData, this);
      };
      SVGRendererBase.prototype.createImage = function(data2) {
        return new IImageElement(data2, this.globalData, this);
      };
      SVGRendererBase.prototype.createSolid = function(data2) {
        return new ISolidElement(data2, this.globalData, this);
      };
      SVGRendererBase.prototype.configAnimation = function(animData) {
        this.svgElement.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        this.svgElement.setAttribute("xmlns:xlink", "http://www.w3.org/1999/xlink");
        if (this.renderConfig.viewBoxSize) {
          this.svgElement.setAttribute("viewBox", this.renderConfig.viewBoxSize);
        } else {
          this.svgElement.setAttribute("viewBox", "0 0 " + animData.w + " " + animData.h);
        }
        if (!this.renderConfig.viewBoxOnly) {
          this.svgElement.setAttribute("width", animData.w);
          this.svgElement.setAttribute("height", animData.h);
          this.svgElement.style.width = "100%";
          this.svgElement.style.height = "100%";
          this.svgElement.style.transform = "translate3d(0,0,0)";
          this.svgElement.style.contentVisibility = this.renderConfig.contentVisibility;
        }
        if (this.renderConfig.width) {
          this.svgElement.setAttribute("width", this.renderConfig.width);
        }
        if (this.renderConfig.height) {
          this.svgElement.setAttribute("height", this.renderConfig.height);
        }
        if (this.renderConfig.className) {
          this.svgElement.setAttribute("class", this.renderConfig.className);
        }
        if (this.renderConfig.id) {
          this.svgElement.setAttribute("id", this.renderConfig.id);
        }
        if (this.renderConfig.focusable !== void 0) {
          this.svgElement.setAttribute("focusable", this.renderConfig.focusable);
        }
        this.svgElement.setAttribute("preserveAspectRatio", this.renderConfig.preserveAspectRatio);
        this.animationItem.wrapper.appendChild(this.svgElement);
        var defs = this.globalData.defs;
        this.setupGlobalData(animData, defs);
        this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;
        this.data = animData;
        var maskElement = createNS("clipPath");
        var rect = createNS("rect");
        rect.setAttribute("width", animData.w);
        rect.setAttribute("height", animData.h);
        rect.setAttribute("x", 0);
        rect.setAttribute("y", 0);
        var maskId = createElementID();
        maskElement.setAttribute("id", maskId);
        maskElement.appendChild(rect);
        this.layerElement.setAttribute("clip-path", "url(" + getLocationHref() + "#" + maskId + ")");
        defs.appendChild(maskElement);
        this.layers = animData.layers;
        this.elements = createSizedArray(animData.layers.length);
      };
      SVGRendererBase.prototype.destroy = function() {
        if (this.animationItem.wrapper) {
          this.animationItem.wrapper.innerText = "";
        }
        this.layerElement = null;
        this.globalData.defs = null;
        var i6;
        var len = this.layers ? this.layers.length : 0;
        for (i6 = 0; i6 < len; i6 += 1) {
          if (this.elements[i6] && this.elements[i6].destroy) {
            this.elements[i6].destroy();
          }
        }
        this.elements.length = 0;
        this.destroyed = true;
        this.animationItem = null;
      };
      SVGRendererBase.prototype.updateContainerSize = function() {
      };
      SVGRendererBase.prototype.findIndexByInd = function(ind) {
        var i6 = 0;
        var len = this.layers.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          if (this.layers[i6].ind === ind) {
            return i6;
          }
        }
        return -1;
      };
      SVGRendererBase.prototype.buildItem = function(pos) {
        var elements = this.elements;
        if (elements[pos] || this.layers[pos].ty === 99) {
          return;
        }
        elements[pos] = true;
        var element = this.createItem(this.layers[pos]);
        elements[pos] = element;
        if (getExpressionsPlugin()) {
          if (this.layers[pos].ty === 0) {
            this.globalData.projectInterface.registerComposition(element);
          }
          element.initExpressions();
        }
        this.appendElementInPos(element, pos);
        if (this.layers[pos].tt) {
          var elementIndex = "tp" in this.layers[pos] ? this.findIndexByInd(this.layers[pos].tp) : pos - 1;
          if (elementIndex === -1) {
            return;
          }
          if (!this.elements[elementIndex] || this.elements[elementIndex] === true) {
            this.buildItem(elementIndex);
            this.addPendingElement(element);
          } else {
            var matteElement = elements[elementIndex];
            var matteMask = matteElement.getMatte(this.layers[pos].tt);
            element.setMatte(matteMask);
          }
        }
      };
      SVGRendererBase.prototype.checkPendingElements = function() {
        while (this.pendingElements.length) {
          var element = this.pendingElements.pop();
          element.checkParenting();
          if (element.data.tt) {
            var i6 = 0;
            var len = this.elements.length;
            while (i6 < len) {
              if (this.elements[i6] === element) {
                var elementIndex = "tp" in element.data ? this.findIndexByInd(element.data.tp) : i6 - 1;
                var matteElement = this.elements[elementIndex];
                var matteMask = matteElement.getMatte(this.layers[i6].tt);
                element.setMatte(matteMask);
                break;
              }
              i6 += 1;
            }
          }
        }
      };
      SVGRendererBase.prototype.renderFrame = function(num) {
        if (this.renderedFrame === num || this.destroyed) {
          return;
        }
        if (num === null) {
          num = this.renderedFrame;
        } else {
          this.renderedFrame = num;
        }
        this.globalData.frameNum = num;
        this.globalData.frameId += 1;
        this.globalData.projectInterface.currentFrame = num;
        this.globalData._mdf = false;
        var i6;
        var len = this.layers.length;
        if (!this.completeLayers) {
          this.checkLayers(num);
        }
        for (i6 = len - 1; i6 >= 0; i6 -= 1) {
          if (this.completeLayers || this.elements[i6]) {
            this.elements[i6].prepareFrame(num - this.layers[i6].st);
          }
        }
        if (this.globalData._mdf) {
          for (i6 = 0; i6 < len; i6 += 1) {
            if (this.completeLayers || this.elements[i6]) {
              this.elements[i6].renderFrame();
            }
          }
        }
      };
      SVGRendererBase.prototype.appendElementInPos = function(element, pos) {
        var newElement = element.getBaseElement();
        if (!newElement) {
          return;
        }
        var i6 = 0;
        var nextElement;
        while (i6 < pos) {
          if (this.elements[i6] && this.elements[i6] !== true && this.elements[i6].getBaseElement()) {
            nextElement = this.elements[i6].getBaseElement();
          }
          i6 += 1;
        }
        if (nextElement) {
          this.layerElement.insertBefore(newElement, nextElement);
        } else {
          this.layerElement.appendChild(newElement);
        }
      };
      SVGRendererBase.prototype.hide = function() {
        this.layerElement.style.display = "none";
      };
      SVGRendererBase.prototype.show = function() {
        this.layerElement.style.display = "block";
      };
      function ICompElement() {
      }
      extendPrototype([BaseElement, TransformElement, HierarchyElement, FrameElement, RenderableDOMElement], ICompElement);
      ICompElement.prototype.initElement = function(data2, globalData2, comp2) {
        this.initFrame();
        this.initBaseData(data2, globalData2, comp2);
        this.initTransform(data2, globalData2, comp2);
        this.initRenderable();
        this.initHierarchy();
        this.initRendererElement();
        this.createContainerElements();
        this.createRenderableComponents();
        if (this.data.xt || !globalData2.progressiveLoad) {
          this.buildAllItems();
        }
        this.hide();
      };
      ICompElement.prototype.prepareFrame = function(num) {
        this._mdf = false;
        this.prepareRenderableFrame(num);
        this.prepareProperties(num, this.isInRange);
        if (!this.isInRange && !this.data.xt) {
          return;
        }
        if (!this.tm._placeholder) {
          var timeRemapped = this.tm.v;
          if (timeRemapped === this.data.op) {
            timeRemapped = this.data.op - 1;
          }
          this.renderedFrame = timeRemapped;
        } else {
          this.renderedFrame = num / this.data.sr;
        }
        var i6;
        var len = this.elements.length;
        if (!this.completeLayers) {
          this.checkLayers(this.renderedFrame);
        }
        for (i6 = len - 1; i6 >= 0; i6 -= 1) {
          if (this.completeLayers || this.elements[i6]) {
            this.elements[i6].prepareFrame(this.renderedFrame - this.layers[i6].st);
            if (this.elements[i6]._mdf) {
              this._mdf = true;
            }
          }
        }
      };
      ICompElement.prototype.renderInnerContent = function() {
        var i6;
        var len = this.layers.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          if (this.completeLayers || this.elements[i6]) {
            this.elements[i6].renderFrame();
          }
        }
      };
      ICompElement.prototype.setElements = function(elems) {
        this.elements = elems;
      };
      ICompElement.prototype.getElements = function() {
        return this.elements;
      };
      ICompElement.prototype.destroyElements = function() {
        var i6;
        var len = this.layers.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          if (this.elements[i6]) {
            this.elements[i6].destroy();
          }
        }
      };
      ICompElement.prototype.destroy = function() {
        this.destroyElements();
        this.destroyBaseElement();
      };
      function SVGCompElement(data2, globalData2, comp2) {
        this.layers = data2.layers;
        this.supports3d = true;
        this.completeLayers = false;
        this.pendingElements = [];
        this.elements = this.layers ? createSizedArray(this.layers.length) : [];
        this.initElement(data2, globalData2, comp2);
        this.tm = data2.tm ? PropertyFactory.getProp(this, data2.tm, 0, globalData2.frameRate, this) : {
          _placeholder: true
        };
      }
      extendPrototype([SVGRendererBase, ICompElement, SVGBaseElement], SVGCompElement);
      SVGCompElement.prototype.createComp = function(data2) {
        return new SVGCompElement(data2, this.globalData, this);
      };
      function SVGRenderer(animationItem, config3) {
        this.animationItem = animationItem;
        this.layers = null;
        this.renderedFrame = -1;
        this.svgElement = createNS("svg");
        var ariaLabel = "";
        if (config3 && config3.title) {
          var titleElement = createNS("title");
          var titleId = createElementID();
          titleElement.setAttribute("id", titleId);
          titleElement.textContent = config3.title;
          this.svgElement.appendChild(titleElement);
          ariaLabel += titleId;
        }
        if (config3 && config3.description) {
          var descElement = createNS("desc");
          var descId = createElementID();
          descElement.setAttribute("id", descId);
          descElement.textContent = config3.description;
          this.svgElement.appendChild(descElement);
          ariaLabel += " " + descId;
        }
        if (ariaLabel) {
          this.svgElement.setAttribute("aria-labelledby", ariaLabel);
        }
        var defs = createNS("defs");
        this.svgElement.appendChild(defs);
        var maskElement = createNS("g");
        this.svgElement.appendChild(maskElement);
        this.layerElement = maskElement;
        this.renderConfig = {
          preserveAspectRatio: config3 && config3.preserveAspectRatio || "xMidYMid meet",
          imagePreserveAspectRatio: config3 && config3.imagePreserveAspectRatio || "xMidYMid slice",
          contentVisibility: config3 && config3.contentVisibility || "visible",
          progressiveLoad: config3 && config3.progressiveLoad || false,
          hideOnTransparent: !(config3 && config3.hideOnTransparent === false),
          viewBoxOnly: config3 && config3.viewBoxOnly || false,
          viewBoxSize: config3 && config3.viewBoxSize || false,
          className: config3 && config3.className || "",
          id: config3 && config3.id || "",
          focusable: config3 && config3.focusable,
          filterSize: {
            width: config3 && config3.filterSize && config3.filterSize.width || "100%",
            height: config3 && config3.filterSize && config3.filterSize.height || "100%",
            x: config3 && config3.filterSize && config3.filterSize.x || "0%",
            y: config3 && config3.filterSize && config3.filterSize.y || "0%"
          },
          width: config3 && config3.width,
          height: config3 && config3.height,
          runExpressions: !config3 || config3.runExpressions === void 0 || config3.runExpressions
        };
        this.globalData = {
          _mdf: false,
          frameNum: -1,
          defs,
          renderConfig: this.renderConfig
        };
        this.elements = [];
        this.pendingElements = [];
        this.destroyed = false;
        this.rendererType = "svg";
      }
      extendPrototype([SVGRendererBase], SVGRenderer);
      SVGRenderer.prototype.createComp = function(data2) {
        return new SVGCompElement(data2, this.globalData, this);
      };
      function ShapeTransformManager() {
        this.sequences = {};
        this.sequenceList = [];
        this.transform_key_count = 0;
      }
      ShapeTransformManager.prototype = {
        addTransformSequence: function addTransformSequence(transforms) {
          var i6;
          var len = transforms.length;
          var key2 = "_";
          for (i6 = 0; i6 < len; i6 += 1) {
            key2 += transforms[i6].transform.key + "_";
          }
          var sequence = this.sequences[key2];
          if (!sequence) {
            sequence = {
              transforms: [].concat(transforms),
              finalTransform: new Matrix(),
              _mdf: false
            };
            this.sequences[key2] = sequence;
            this.sequenceList.push(sequence);
          }
          return sequence;
        },
        processSequence: function processSequence(sequence, isFirstFrame) {
          var i6 = 0;
          var len = sequence.transforms.length;
          var _mdf = isFirstFrame;
          while (i6 < len && !isFirstFrame) {
            if (sequence.transforms[i6].transform.mProps._mdf) {
              _mdf = true;
              break;
            }
            i6 += 1;
          }
          if (_mdf) {
            sequence.finalTransform.reset();
            for (i6 = len - 1; i6 >= 0; i6 -= 1) {
              sequence.finalTransform.multiply(sequence.transforms[i6].transform.mProps.v);
            }
          }
          sequence._mdf = _mdf;
        },
        processSequences: function processSequences(isFirstFrame) {
          var i6;
          var len = this.sequenceList.length;
          for (i6 = 0; i6 < len; i6 += 1) {
            this.processSequence(this.sequenceList[i6], isFirstFrame);
          }
        },
        getNewKey: function getNewKey() {
          this.transform_key_count += 1;
          return "_" + this.transform_key_count;
        }
      };
      var lumaLoader = function lumaLoader2() {
        var id = "__lottie_element_luma_buffer";
        var lumaBuffer = null;
        var lumaBufferCtx = null;
        var svg = null;
        function createLumaSvgFilter() {
          var _svg = createNS("svg");
          var fil = createNS("filter");
          var matrix = createNS("feColorMatrix");
          fil.setAttribute("id", id);
          matrix.setAttribute("type", "matrix");
          matrix.setAttribute("color-interpolation-filters", "sRGB");
          matrix.setAttribute("values", "0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0");
          fil.appendChild(matrix);
          _svg.appendChild(fil);
          _svg.setAttribute("id", id + "_svg");
          if (featureSupport.svgLumaHidden) {
            _svg.style.display = "none";
          }
          return _svg;
        }
        function loadLuma() {
          if (!lumaBuffer) {
            svg = createLumaSvgFilter();
            document.body.appendChild(svg);
            lumaBuffer = createTag("canvas");
            lumaBufferCtx = lumaBuffer.getContext("2d");
            lumaBufferCtx.filter = "url(#" + id + ")";
            lumaBufferCtx.fillStyle = "rgba(0,0,0,0)";
            lumaBufferCtx.fillRect(0, 0, 1, 1);
          }
        }
        function getLuma(canvas) {
          if (!lumaBuffer) {
            loadLuma();
          }
          lumaBuffer.width = canvas.width;
          lumaBuffer.height = canvas.height;
          lumaBufferCtx.filter = "url(#" + id + ")";
          return lumaBuffer;
        }
        return {
          load: loadLuma,
          get: getLuma
        };
      };
      function createCanvas(width2, height2) {
        if (featureSupport.offscreenCanvas) {
          return new OffscreenCanvas(width2, height2);
        }
        var canvas = createTag("canvas");
        canvas.width = width2;
        canvas.height = height2;
        return canvas;
      }
      var assetLoader = function() {
        return {
          loadLumaCanvas: lumaLoader.load,
          getLumaCanvas: lumaLoader.get,
          createCanvas
        };
      }();
      var registeredEffects = {};
      function CVEffects(elem2) {
        var i6;
        var len = elem2.data.ef ? elem2.data.ef.length : 0;
        this.filters = [];
        var filterManager;
        for (i6 = 0; i6 < len; i6 += 1) {
          filterManager = null;
          var type4 = elem2.data.ef[i6].ty;
          if (registeredEffects[type4]) {
            var Effect = registeredEffects[type4].effect;
            filterManager = new Effect(elem2.effectsManager.effectElements[i6], elem2);
          }
          if (filterManager) {
            this.filters.push(filterManager);
          }
        }
        if (this.filters.length) {
          elem2.addRenderableComponent(this);
        }
      }
      CVEffects.prototype.renderFrame = function(_isFirstFrame) {
        var i6;
        var len = this.filters.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          this.filters[i6].renderFrame(_isFirstFrame);
        }
      };
      CVEffects.prototype.getEffects = function(type4) {
        var i6;
        var len = this.filters.length;
        var effects = [];
        for (i6 = 0; i6 < len; i6 += 1) {
          if (this.filters[i6].type === type4) {
            effects.push(this.filters[i6]);
          }
        }
        return effects;
      };
      function registerEffect(id, effect2) {
        registeredEffects[id] = {
          effect: effect2
        };
      }
      function CVMaskElement(data2, element) {
        this.data = data2;
        this.element = element;
        this.masksProperties = this.data.masksProperties || [];
        this.viewData = createSizedArray(this.masksProperties.length);
        var i6;
        var len = this.masksProperties.length;
        var hasMasks = false;
        for (i6 = 0; i6 < len; i6 += 1) {
          if (this.masksProperties[i6].mode !== "n") {
            hasMasks = true;
          }
          this.viewData[i6] = ShapePropertyFactory.getShapeProp(this.element, this.masksProperties[i6], 3);
        }
        this.hasMasks = hasMasks;
        if (hasMasks) {
          this.element.addRenderableComponent(this);
        }
      }
      CVMaskElement.prototype.renderFrame = function() {
        if (!this.hasMasks) {
          return;
        }
        var transform2 = this.element.finalTransform.mat;
        var ctx2 = this.element.canvasContext;
        var i6;
        var len = this.masksProperties.length;
        var pt;
        var pts;
        var data2;
        ctx2.beginPath();
        for (i6 = 0; i6 < len; i6 += 1) {
          if (this.masksProperties[i6].mode !== "n") {
            if (this.masksProperties[i6].inv) {
              ctx2.moveTo(0, 0);
              ctx2.lineTo(this.element.globalData.compSize.w, 0);
              ctx2.lineTo(this.element.globalData.compSize.w, this.element.globalData.compSize.h);
              ctx2.lineTo(0, this.element.globalData.compSize.h);
              ctx2.lineTo(0, 0);
            }
            data2 = this.viewData[i6].v;
            pt = transform2.applyToPointArray(data2.v[0][0], data2.v[0][1], 0);
            ctx2.moveTo(pt[0], pt[1]);
            var j;
            var jLen = data2._length;
            for (j = 1; j < jLen; j += 1) {
              pts = transform2.applyToTriplePoints(data2.o[j - 1], data2.i[j], data2.v[j]);
              ctx2.bezierCurveTo(pts[0], pts[1], pts[2], pts[3], pts[4], pts[5]);
            }
            pts = transform2.applyToTriplePoints(data2.o[j - 1], data2.i[0], data2.v[0]);
            ctx2.bezierCurveTo(pts[0], pts[1], pts[2], pts[3], pts[4], pts[5]);
          }
        }
        this.element.globalData.renderer.save(true);
        ctx2.clip();
      };
      CVMaskElement.prototype.getMaskProperty = MaskElement.prototype.getMaskProperty;
      CVMaskElement.prototype.destroy = function() {
        this.element = null;
      };
      function CVBaseElement() {
      }
      var operationsMap = {
        1: "source-in",
        2: "source-out",
        3: "source-in",
        4: "source-out"
      };
      CVBaseElement.prototype = {
        createElements: function createElements() {
        },
        initRendererElement: function initRendererElement() {
        },
        createContainerElements: function createContainerElements() {
          if (this.data.tt >= 1) {
            this.buffers = [];
            var canvasContext = this.globalData.canvasContext;
            var bufferCanvas = assetLoader.createCanvas(canvasContext.canvas.width, canvasContext.canvas.height);
            this.buffers.push(bufferCanvas);
            var bufferCanvas2 = assetLoader.createCanvas(canvasContext.canvas.width, canvasContext.canvas.height);
            this.buffers.push(bufferCanvas2);
            if (this.data.tt >= 3 && !document._isProxy) {
              assetLoader.loadLumaCanvas();
            }
          }
          this.canvasContext = this.globalData.canvasContext;
          this.transformCanvas = this.globalData.transformCanvas;
          this.renderableEffectsManager = new CVEffects(this);
          this.searchEffectTransforms();
        },
        createContent: function createContent() {
        },
        setBlendMode: function setBlendMode() {
          var globalData2 = this.globalData;
          if (globalData2.blendMode !== this.data.bm) {
            globalData2.blendMode = this.data.bm;
            var blendModeValue = getBlendMode(this.data.bm);
            globalData2.canvasContext.globalCompositeOperation = blendModeValue;
          }
        },
        createRenderableComponents: function createRenderableComponents() {
          this.maskManager = new CVMaskElement(this.data, this);
          this.transformEffects = this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);
        },
        hideElement: function hideElement() {
          if (!this.hidden && (!this.isInRange || this.isTransparent)) {
            this.hidden = true;
          }
        },
        showElement: function showElement() {
          if (this.isInRange && !this.isTransparent) {
            this.hidden = false;
            this._isFirstFrame = true;
            this.maskManager._isFirstFrame = true;
          }
        },
        clearCanvas: function clearCanvas(canvasContext) {
          canvasContext.clearRect(this.transformCanvas.tx, this.transformCanvas.ty, this.transformCanvas.w * this.transformCanvas.sx, this.transformCanvas.h * this.transformCanvas.sy);
        },
        prepareLayer: function prepareLayer() {
          if (this.data.tt >= 1) {
            var buffer = this.buffers[0];
            var bufferCtx = buffer.getContext("2d");
            this.clearCanvas(bufferCtx);
            bufferCtx.drawImage(this.canvasContext.canvas, 0, 0);
            this.currentTransform = this.canvasContext.getTransform();
            this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);
            this.clearCanvas(this.canvasContext);
            this.canvasContext.setTransform(this.currentTransform);
          }
        },
        exitLayer: function exitLayer() {
          if (this.data.tt >= 1) {
            var buffer = this.buffers[1];
            var bufferCtx = buffer.getContext("2d");
            this.clearCanvas(bufferCtx);
            bufferCtx.drawImage(this.canvasContext.canvas, 0, 0);
            this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);
            this.clearCanvas(this.canvasContext);
            this.canvasContext.setTransform(this.currentTransform);
            var mask2 = this.comp.getElementById("tp" in this.data ? this.data.tp : this.data.ind - 1);
            mask2.renderFrame(true);
            this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);
            if (this.data.tt >= 3 && !document._isProxy) {
              var lumaBuffer = assetLoader.getLumaCanvas(this.canvasContext.canvas);
              var lumaBufferCtx = lumaBuffer.getContext("2d");
              lumaBufferCtx.drawImage(this.canvasContext.canvas, 0, 0);
              this.clearCanvas(this.canvasContext);
              this.canvasContext.drawImage(lumaBuffer, 0, 0);
            }
            this.canvasContext.globalCompositeOperation = operationsMap[this.data.tt];
            this.canvasContext.drawImage(buffer, 0, 0);
            this.canvasContext.globalCompositeOperation = "destination-over";
            this.canvasContext.drawImage(this.buffers[0], 0, 0);
            this.canvasContext.setTransform(this.currentTransform);
            this.canvasContext.globalCompositeOperation = "source-over";
          }
        },
        renderFrame: function renderFrame(forceRender) {
          if (this.hidden || this.data.hd) {
            return;
          }
          if (this.data.td === 1 && !forceRender) {
            return;
          }
          this.renderTransform();
          this.renderRenderable();
          this.renderLocalTransform();
          this.setBlendMode();
          var forceRealStack = this.data.ty === 0;
          this.prepareLayer();
          this.globalData.renderer.save(forceRealStack);
          this.globalData.renderer.ctxTransform(this.finalTransform.localMat.props);
          this.globalData.renderer.ctxOpacity(this.finalTransform.localOpacity);
          this.renderInnerContent();
          this.globalData.renderer.restore(forceRealStack);
          this.exitLayer();
          if (this.maskManager.hasMasks) {
            this.globalData.renderer.restore(true);
          }
          if (this._isFirstFrame) {
            this._isFirstFrame = false;
          }
        },
        destroy: function destroy() {
          this.canvasContext = null;
          this.data = null;
          this.globalData = null;
          this.maskManager.destroy();
        },
        mHelper: new Matrix()
      };
      CVBaseElement.prototype.hide = CVBaseElement.prototype.hideElement;
      CVBaseElement.prototype.show = CVBaseElement.prototype.showElement;
      function CVShapeData(element, data2, styles, transformsManager) {
        this.styledShapes = [];
        this.tr = [0, 0, 0, 0, 0, 0];
        var ty = 4;
        if (data2.ty === "rc") {
          ty = 5;
        } else if (data2.ty === "el") {
          ty = 6;
        } else if (data2.ty === "sr") {
          ty = 7;
        }
        this.sh = ShapePropertyFactory.getShapeProp(element, data2, ty, element);
        var i6;
        var len = styles.length;
        var styledShape;
        for (i6 = 0; i6 < len; i6 += 1) {
          if (!styles[i6].closed) {
            styledShape = {
              transforms: transformsManager.addTransformSequence(styles[i6].transforms),
              trNodes: []
            };
            this.styledShapes.push(styledShape);
            styles[i6].elements.push(styledShape);
          }
        }
      }
      CVShapeData.prototype.setAsAnimated = SVGShapeData.prototype.setAsAnimated;
      function CVShapeElement(data2, globalData2, comp2) {
        this.shapes = [];
        this.shapesData = data2.shapes;
        this.stylesList = [];
        this.itemsData = [];
        this.prevViewData = [];
        this.shapeModifiers = [];
        this.processedElements = [];
        this.transformsManager = new ShapeTransformManager();
        this.initElement(data2, globalData2, comp2);
      }
      extendPrototype([BaseElement, TransformElement, CVBaseElement, IShapeElement, HierarchyElement, FrameElement, RenderableElement], CVShapeElement);
      CVShapeElement.prototype.initElement = RenderableDOMElement.prototype.initElement;
      CVShapeElement.prototype.transformHelper = {
        opacity: 1,
        _opMdf: false
      };
      CVShapeElement.prototype.dashResetter = [];
      CVShapeElement.prototype.createContent = function() {
        this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, true, []);
      };
      CVShapeElement.prototype.createStyleElement = function(data2, transforms) {
        var styleElem = {
          data: data2,
          type: data2.ty,
          preTransforms: this.transformsManager.addTransformSequence(transforms),
          transforms: [],
          elements: [],
          closed: data2.hd === true
        };
        var elementData = {};
        if (data2.ty === "fl" || data2.ty === "st") {
          elementData.c = PropertyFactory.getProp(this, data2.c, 1, 255, this);
          if (!elementData.c.k) {
            styleElem.co = "rgb(" + bmFloor(elementData.c.v[0]) + "," + bmFloor(elementData.c.v[1]) + "," + bmFloor(elementData.c.v[2]) + ")";
          }
        } else if (data2.ty === "gf" || data2.ty === "gs") {
          elementData.s = PropertyFactory.getProp(this, data2.s, 1, null, this);
          elementData.e = PropertyFactory.getProp(this, data2.e, 1, null, this);
          elementData.h = PropertyFactory.getProp(this, data2.h || {
            k: 0
          }, 0, 0.01, this);
          elementData.a = PropertyFactory.getProp(this, data2.a || {
            k: 0
          }, 0, degToRads, this);
          elementData.g = new GradientProperty(this, data2.g, this);
        }
        elementData.o = PropertyFactory.getProp(this, data2.o, 0, 0.01, this);
        if (data2.ty === "st" || data2.ty === "gs") {
          styleElem.lc = lineCapEnum[data2.lc || 2];
          styleElem.lj = lineJoinEnum[data2.lj || 2];
          if (data2.lj == 1) {
            styleElem.ml = data2.ml;
          }
          elementData.w = PropertyFactory.getProp(this, data2.w, 0, null, this);
          if (!elementData.w.k) {
            styleElem.wi = elementData.w.v;
          }
          if (data2.d) {
            var d30 = new DashProperty(this, data2.d, "canvas", this);
            elementData.d = d30;
            if (!elementData.d.k) {
              styleElem.da = elementData.d.dashArray;
              styleElem["do"] = elementData.d.dashoffset[0];
            }
          }
        } else {
          styleElem.r = data2.r === 2 ? "evenodd" : "nonzero";
        }
        this.stylesList.push(styleElem);
        elementData.style = styleElem;
        return elementData;
      };
      CVShapeElement.prototype.createGroupElement = function() {
        var elementData = {
          it: [],
          prevViewData: []
        };
        return elementData;
      };
      CVShapeElement.prototype.createTransformElement = function(data2) {
        var elementData = {
          transform: {
            opacity: 1,
            _opMdf: false,
            key: this.transformsManager.getNewKey(),
            op: PropertyFactory.getProp(this, data2.o, 0, 0.01, this),
            mProps: TransformPropertyFactory.getTransformProperty(this, data2, this)
          }
        };
        return elementData;
      };
      CVShapeElement.prototype.createShapeElement = function(data2) {
        var elementData = new CVShapeData(this, data2, this.stylesList, this.transformsManager);
        this.shapes.push(elementData);
        this.addShapeToModifiers(elementData);
        return elementData;
      };
      CVShapeElement.prototype.reloadShapes = function() {
        this._isFirstFrame = true;
        var i6;
        var len = this.itemsData.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          this.prevViewData[i6] = this.itemsData[i6];
        }
        this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, true, []);
        len = this.dynamicProperties.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          this.dynamicProperties[i6].getValue();
        }
        this.renderModifiers();
        this.transformsManager.processSequences(this._isFirstFrame);
      };
      CVShapeElement.prototype.addTransformToStyleList = function(transform2) {
        var i6;
        var len = this.stylesList.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          if (!this.stylesList[i6].closed) {
            this.stylesList[i6].transforms.push(transform2);
          }
        }
      };
      CVShapeElement.prototype.removeTransformFromStyleList = function() {
        var i6;
        var len = this.stylesList.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          if (!this.stylesList[i6].closed) {
            this.stylesList[i6].transforms.pop();
          }
        }
      };
      CVShapeElement.prototype.closeStyles = function(styles) {
        var i6;
        var len = styles.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          styles[i6].closed = true;
        }
      };
      CVShapeElement.prototype.searchShapes = function(arr, itemsData, prevViewData, shouldRender, transforms) {
        var i6;
        var len = arr.length - 1;
        var j;
        var jLen;
        var ownStyles = [];
        var ownModifiers = [];
        var processedPos;
        var modifier;
        var currentTransform;
        var ownTransforms = [].concat(transforms);
        for (i6 = len; i6 >= 0; i6 -= 1) {
          processedPos = this.searchProcessedElement(arr[i6]);
          if (!processedPos) {
            arr[i6]._shouldRender = shouldRender;
          } else {
            itemsData[i6] = prevViewData[processedPos - 1];
          }
          if (arr[i6].ty === "fl" || arr[i6].ty === "st" || arr[i6].ty === "gf" || arr[i6].ty === "gs") {
            if (!processedPos) {
              itemsData[i6] = this.createStyleElement(arr[i6], ownTransforms);
            } else {
              itemsData[i6].style.closed = false;
            }
            ownStyles.push(itemsData[i6].style);
          } else if (arr[i6].ty === "gr") {
            if (!processedPos) {
              itemsData[i6] = this.createGroupElement(arr[i6]);
            } else {
              jLen = itemsData[i6].it.length;
              for (j = 0; j < jLen; j += 1) {
                itemsData[i6].prevViewData[j] = itemsData[i6].it[j];
              }
            }
            this.searchShapes(arr[i6].it, itemsData[i6].it, itemsData[i6].prevViewData, shouldRender, ownTransforms);
          } else if (arr[i6].ty === "tr") {
            if (!processedPos) {
              currentTransform = this.createTransformElement(arr[i6]);
              itemsData[i6] = currentTransform;
            }
            ownTransforms.push(itemsData[i6]);
            this.addTransformToStyleList(itemsData[i6]);
          } else if (arr[i6].ty === "sh" || arr[i6].ty === "rc" || arr[i6].ty === "el" || arr[i6].ty === "sr") {
            if (!processedPos) {
              itemsData[i6] = this.createShapeElement(arr[i6]);
            }
          } else if (arr[i6].ty === "tm" || arr[i6].ty === "rd" || arr[i6].ty === "pb" || arr[i6].ty === "zz" || arr[i6].ty === "op") {
            if (!processedPos) {
              modifier = ShapeModifiers.getModifier(arr[i6].ty);
              modifier.init(this, arr[i6]);
              itemsData[i6] = modifier;
              this.shapeModifiers.push(modifier);
            } else {
              modifier = itemsData[i6];
              modifier.closed = false;
            }
            ownModifiers.push(modifier);
          } else if (arr[i6].ty === "rp") {
            if (!processedPos) {
              modifier = ShapeModifiers.getModifier(arr[i6].ty);
              itemsData[i6] = modifier;
              modifier.init(this, arr, i6, itemsData);
              this.shapeModifiers.push(modifier);
              shouldRender = false;
            } else {
              modifier = itemsData[i6];
              modifier.closed = true;
            }
            ownModifiers.push(modifier);
          }
          this.addProcessedElement(arr[i6], i6 + 1);
        }
        this.removeTransformFromStyleList();
        this.closeStyles(ownStyles);
        len = ownModifiers.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          ownModifiers[i6].closed = true;
        }
      };
      CVShapeElement.prototype.renderInnerContent = function() {
        this.transformHelper.opacity = 1;
        this.transformHelper._opMdf = false;
        this.renderModifiers();
        this.transformsManager.processSequences(this._isFirstFrame);
        this.renderShape(this.transformHelper, this.shapesData, this.itemsData, true);
      };
      CVShapeElement.prototype.renderShapeTransform = function(parentTransform, groupTransform) {
        if (parentTransform._opMdf || groupTransform.op._mdf || this._isFirstFrame) {
          groupTransform.opacity = parentTransform.opacity;
          groupTransform.opacity *= groupTransform.op.v;
          groupTransform._opMdf = true;
        }
      };
      CVShapeElement.prototype.drawLayer = function() {
        var i6;
        var len = this.stylesList.length;
        var j;
        var jLen;
        var k2;
        var kLen;
        var elems;
        var nodes;
        var renderer2 = this.globalData.renderer;
        var ctx2 = this.globalData.canvasContext;
        var type4;
        var currentStyle;
        for (i6 = 0; i6 < len; i6 += 1) {
          currentStyle = this.stylesList[i6];
          type4 = currentStyle.type;
          if (!((type4 === "st" || type4 === "gs") && currentStyle.wi === 0 || !currentStyle.data._shouldRender || currentStyle.coOp === 0 || this.globalData.currentGlobalAlpha === 0)) {
            renderer2.save();
            elems = currentStyle.elements;
            if (type4 === "st" || type4 === "gs") {
              renderer2.ctxStrokeStyle(type4 === "st" ? currentStyle.co : currentStyle.grd);
              renderer2.ctxLineWidth(currentStyle.wi);
              renderer2.ctxLineCap(currentStyle.lc);
              renderer2.ctxLineJoin(currentStyle.lj);
              renderer2.ctxMiterLimit(currentStyle.ml || 0);
            } else {
              renderer2.ctxFillStyle(type4 === "fl" ? currentStyle.co : currentStyle.grd);
            }
            renderer2.ctxOpacity(currentStyle.coOp);
            if (type4 !== "st" && type4 !== "gs") {
              ctx2.beginPath();
            }
            renderer2.ctxTransform(currentStyle.preTransforms.finalTransform.props);
            jLen = elems.length;
            for (j = 0; j < jLen; j += 1) {
              if (type4 === "st" || type4 === "gs") {
                ctx2.beginPath();
                if (currentStyle.da) {
                  ctx2.setLineDash(currentStyle.da);
                  ctx2.lineDashOffset = currentStyle["do"];
                }
              }
              nodes = elems[j].trNodes;
              kLen = nodes.length;
              for (k2 = 0; k2 < kLen; k2 += 1) {
                if (nodes[k2].t === "m") {
                  ctx2.moveTo(nodes[k2].p[0], nodes[k2].p[1]);
                } else if (nodes[k2].t === "c") {
                  ctx2.bezierCurveTo(nodes[k2].pts[0], nodes[k2].pts[1], nodes[k2].pts[2], nodes[k2].pts[3], nodes[k2].pts[4], nodes[k2].pts[5]);
                } else {
                  ctx2.closePath();
                }
              }
              if (type4 === "st" || type4 === "gs") {
                renderer2.ctxStroke();
                if (currentStyle.da) {
                  ctx2.setLineDash(this.dashResetter);
                }
              }
            }
            if (type4 !== "st" && type4 !== "gs") {
              this.globalData.renderer.ctxFill(currentStyle.r);
            }
            renderer2.restore();
          }
        }
      };
      CVShapeElement.prototype.renderShape = function(parentTransform, items, data2, isMain) {
        var i6;
        var len = items.length - 1;
        var groupTransform;
        groupTransform = parentTransform;
        for (i6 = len; i6 >= 0; i6 -= 1) {
          if (items[i6].ty === "tr") {
            groupTransform = data2[i6].transform;
            this.renderShapeTransform(parentTransform, groupTransform);
          } else if (items[i6].ty === "sh" || items[i6].ty === "el" || items[i6].ty === "rc" || items[i6].ty === "sr") {
            this.renderPath(items[i6], data2[i6]);
          } else if (items[i6].ty === "fl") {
            this.renderFill(items[i6], data2[i6], groupTransform);
          } else if (items[i6].ty === "st") {
            this.renderStroke(items[i6], data2[i6], groupTransform);
          } else if (items[i6].ty === "gf" || items[i6].ty === "gs") {
            this.renderGradientFill(items[i6], data2[i6], groupTransform);
          } else if (items[i6].ty === "gr") {
            this.renderShape(groupTransform, items[i6].it, data2[i6].it);
          } else if (items[i6].ty === "tm") {
          }
        }
        if (isMain) {
          this.drawLayer();
        }
      };
      CVShapeElement.prototype.renderStyledShape = function(styledShape, shape) {
        if (this._isFirstFrame || shape._mdf || styledShape.transforms._mdf) {
          var shapeNodes = styledShape.trNodes;
          var paths = shape.paths;
          var i6;
          var len;
          var j;
          var jLen = paths._length;
          shapeNodes.length = 0;
          var groupTransformMat = styledShape.transforms.finalTransform;
          for (j = 0; j < jLen; j += 1) {
            var pathNodes = paths.shapes[j];
            if (pathNodes && pathNodes.v) {
              len = pathNodes._length;
              for (i6 = 1; i6 < len; i6 += 1) {
                if (i6 === 1) {
                  shapeNodes.push({
                    t: "m",
                    p: groupTransformMat.applyToPointArray(pathNodes.v[0][0], pathNodes.v[0][1], 0)
                  });
                }
                shapeNodes.push({
                  t: "c",
                  pts: groupTransformMat.applyToTriplePoints(pathNodes.o[i6 - 1], pathNodes.i[i6], pathNodes.v[i6])
                });
              }
              if (len === 1) {
                shapeNodes.push({
                  t: "m",
                  p: groupTransformMat.applyToPointArray(pathNodes.v[0][0], pathNodes.v[0][1], 0)
                });
              }
              if (pathNodes.c && len) {
                shapeNodes.push({
                  t: "c",
                  pts: groupTransformMat.applyToTriplePoints(pathNodes.o[i6 - 1], pathNodes.i[0], pathNodes.v[0])
                });
                shapeNodes.push({
                  t: "z"
                });
              }
            }
          }
          styledShape.trNodes = shapeNodes;
        }
      };
      CVShapeElement.prototype.renderPath = function(pathData, itemData) {
        if (pathData.hd !== true && pathData._shouldRender) {
          var i6;
          var len = itemData.styledShapes.length;
          for (i6 = 0; i6 < len; i6 += 1) {
            this.renderStyledShape(itemData.styledShapes[i6], itemData.sh);
          }
        }
      };
      CVShapeElement.prototype.renderFill = function(styleData, itemData, groupTransform) {
        var styleElem = itemData.style;
        if (itemData.c._mdf || this._isFirstFrame) {
          styleElem.co = "rgb(" + bmFloor(itemData.c.v[0]) + "," + bmFloor(itemData.c.v[1]) + "," + bmFloor(itemData.c.v[2]) + ")";
        }
        if (itemData.o._mdf || groupTransform._opMdf || this._isFirstFrame) {
          styleElem.coOp = itemData.o.v * groupTransform.opacity;
        }
      };
      CVShapeElement.prototype.renderGradientFill = function(styleData, itemData, groupTransform) {
        var styleElem = itemData.style;
        var grd;
        if (!styleElem.grd || itemData.g._mdf || itemData.s._mdf || itemData.e._mdf || styleData.t !== 1 && (itemData.h._mdf || itemData.a._mdf)) {
          var ctx2 = this.globalData.canvasContext;
          var pt1 = itemData.s.v;
          var pt2 = itemData.e.v;
          if (styleData.t === 1) {
            grd = ctx2.createLinearGradient(pt1[0], pt1[1], pt2[0], pt2[1]);
          } else {
            var rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
            var ang = Math.atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]);
            var percent = itemData.h.v;
            if (percent >= 1) {
              percent = 0.99;
            } else if (percent <= -1) {
              percent = -0.99;
            }
            var dist = rad * percent;
            var x2 = Math.cos(ang + itemData.a.v) * dist + pt1[0];
            var y = Math.sin(ang + itemData.a.v) * dist + pt1[1];
            grd = ctx2.createRadialGradient(x2, y, 0, pt1[0], pt1[1], rad);
          }
          var i6;
          var len = styleData.g.p;
          var cValues = itemData.g.c;
          var opacity = 1;
          for (i6 = 0; i6 < len; i6 += 1) {
            if (itemData.g._hasOpacity && itemData.g._collapsable) {
              opacity = itemData.g.o[i6 * 2 + 1];
            }
            grd.addColorStop(cValues[i6 * 4] / 100, "rgba(" + cValues[i6 * 4 + 1] + "," + cValues[i6 * 4 + 2] + "," + cValues[i6 * 4 + 3] + "," + opacity + ")");
          }
          styleElem.grd = grd;
        }
        styleElem.coOp = itemData.o.v * groupTransform.opacity;
      };
      CVShapeElement.prototype.renderStroke = function(styleData, itemData, groupTransform) {
        var styleElem = itemData.style;
        var d30 = itemData.d;
        if (d30 && (d30._mdf || this._isFirstFrame)) {
          styleElem.da = d30.dashArray;
          styleElem["do"] = d30.dashoffset[0];
        }
        if (itemData.c._mdf || this._isFirstFrame) {
          styleElem.co = "rgb(" + bmFloor(itemData.c.v[0]) + "," + bmFloor(itemData.c.v[1]) + "," + bmFloor(itemData.c.v[2]) + ")";
        }
        if (itemData.o._mdf || groupTransform._opMdf || this._isFirstFrame) {
          styleElem.coOp = itemData.o.v * groupTransform.opacity;
        }
        if (itemData.w._mdf || this._isFirstFrame) {
          styleElem.wi = itemData.w.v;
        }
      };
      CVShapeElement.prototype.destroy = function() {
        this.shapesData = null;
        this.globalData = null;
        this.canvasContext = null;
        this.stylesList.length = 0;
        this.itemsData.length = 0;
      };
      function CVTextElement(data2, globalData2, comp2) {
        this.textSpans = [];
        this.yOffset = 0;
        this.fillColorAnim = false;
        this.strokeColorAnim = false;
        this.strokeWidthAnim = false;
        this.stroke = false;
        this.fill = false;
        this.justifyOffset = 0;
        this.currentRender = null;
        this.renderType = "canvas";
        this.values = {
          fill: "rgba(0,0,0,0)",
          stroke: "rgba(0,0,0,0)",
          sWidth: 0,
          fValue: ""
        };
        this.initElement(data2, globalData2, comp2);
      }
      extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement, ITextElement], CVTextElement);
      CVTextElement.prototype.tHelper = createTag("canvas").getContext("2d");
      CVTextElement.prototype.buildNewText = function() {
        var documentData = this.textProperty.currentData;
        this.renderedLetters = createSizedArray(documentData.l ? documentData.l.length : 0);
        var hasFill = false;
        if (documentData.fc) {
          hasFill = true;
          this.values.fill = this.buildColor(documentData.fc);
        } else {
          this.values.fill = "rgba(0,0,0,0)";
        }
        this.fill = hasFill;
        var hasStroke = false;
        if (documentData.sc) {
          hasStroke = true;
          this.values.stroke = this.buildColor(documentData.sc);
          this.values.sWidth = documentData.sw;
        }
        var fontData = this.globalData.fontManager.getFontByName(documentData.f);
        var i6;
        var len;
        var letters = documentData.l;
        var matrixHelper = this.mHelper;
        this.stroke = hasStroke;
        this.values.fValue = documentData.finalSize + "px " + this.globalData.fontManager.getFontByName(documentData.f).fFamily;
        len = documentData.finalText.length;
        var charData;
        var shapeData;
        var k2;
        var kLen;
        var shapes;
        var j;
        var jLen;
        var pathNodes;
        var commands;
        var pathArr;
        var singleShape = this.data.singleShape;
        var trackingOffset = documentData.tr * 1e-3 * documentData.finalSize;
        var xPos = 0;
        var yPos = 0;
        var firstLine = true;
        var cnt = 0;
        for (i6 = 0; i6 < len; i6 += 1) {
          charData = this.globalData.fontManager.getCharData(documentData.finalText[i6], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
          shapeData = charData && charData.data || {};
          matrixHelper.reset();
          if (singleShape && letters[i6].n) {
            xPos = -trackingOffset;
            yPos += documentData.yOffset;
            yPos += firstLine ? 1 : 0;
            firstLine = false;
          }
          shapes = shapeData.shapes ? shapeData.shapes[0].it : [];
          jLen = shapes.length;
          matrixHelper.scale(documentData.finalSize / 100, documentData.finalSize / 100);
          if (singleShape) {
            this.applyTextPropertiesToMatrix(documentData, matrixHelper, letters[i6].line, xPos, yPos);
          }
          commands = createSizedArray(jLen - 1);
          var commandsCounter = 0;
          for (j = 0; j < jLen; j += 1) {
            if (shapes[j].ty === "sh") {
              kLen = shapes[j].ks.k.i.length;
              pathNodes = shapes[j].ks.k;
              pathArr = [];
              for (k2 = 1; k2 < kLen; k2 += 1) {
                if (k2 === 1) {
                  pathArr.push(matrixHelper.applyToX(pathNodes.v[0][0], pathNodes.v[0][1], 0), matrixHelper.applyToY(pathNodes.v[0][0], pathNodes.v[0][1], 0));
                }
                pathArr.push(matrixHelper.applyToX(pathNodes.o[k2 - 1][0], pathNodes.o[k2 - 1][1], 0), matrixHelper.applyToY(pathNodes.o[k2 - 1][0], pathNodes.o[k2 - 1][1], 0), matrixHelper.applyToX(pathNodes.i[k2][0], pathNodes.i[k2][1], 0), matrixHelper.applyToY(pathNodes.i[k2][0], pathNodes.i[k2][1], 0), matrixHelper.applyToX(pathNodes.v[k2][0], pathNodes.v[k2][1], 0), matrixHelper.applyToY(pathNodes.v[k2][0], pathNodes.v[k2][1], 0));
              }
              pathArr.push(matrixHelper.applyToX(pathNodes.o[k2 - 1][0], pathNodes.o[k2 - 1][1], 0), matrixHelper.applyToY(pathNodes.o[k2 - 1][0], pathNodes.o[k2 - 1][1], 0), matrixHelper.applyToX(pathNodes.i[0][0], pathNodes.i[0][1], 0), matrixHelper.applyToY(pathNodes.i[0][0], pathNodes.i[0][1], 0), matrixHelper.applyToX(pathNodes.v[0][0], pathNodes.v[0][1], 0), matrixHelper.applyToY(pathNodes.v[0][0], pathNodes.v[0][1], 0));
              commands[commandsCounter] = pathArr;
              commandsCounter += 1;
            }
          }
          if (singleShape) {
            xPos += letters[i6].l;
            xPos += trackingOffset;
          }
          if (this.textSpans[cnt]) {
            this.textSpans[cnt].elem = commands;
          } else {
            this.textSpans[cnt] = {
              elem: commands
            };
          }
          cnt += 1;
        }
      };
      CVTextElement.prototype.renderInnerContent = function() {
        this.validateText();
        var ctx2 = this.canvasContext;
        ctx2.font = this.values.fValue;
        this.globalData.renderer.ctxLineCap("butt");
        this.globalData.renderer.ctxLineJoin("miter");
        this.globalData.renderer.ctxMiterLimit(4);
        if (!this.data.singleShape) {
          this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
        }
        var i6;
        var len;
        var j;
        var jLen;
        var k2;
        var kLen;
        var renderedLetters = this.textAnimator.renderedLetters;
        var letters = this.textProperty.currentData.l;
        len = letters.length;
        var renderedLetter;
        var lastFill = null;
        var lastStroke = null;
        var lastStrokeW = null;
        var commands;
        var pathArr;
        var renderer2 = this.globalData.renderer;
        for (i6 = 0; i6 < len; i6 += 1) {
          if (!letters[i6].n) {
            renderedLetter = renderedLetters[i6];
            if (renderedLetter) {
              renderer2.save();
              renderer2.ctxTransform(renderedLetter.p);
              renderer2.ctxOpacity(renderedLetter.o);
            }
            if (this.fill) {
              if (renderedLetter && renderedLetter.fc) {
                if (lastFill !== renderedLetter.fc) {
                  renderer2.ctxFillStyle(renderedLetter.fc);
                  lastFill = renderedLetter.fc;
                }
              } else if (lastFill !== this.values.fill) {
                lastFill = this.values.fill;
                renderer2.ctxFillStyle(this.values.fill);
              }
              commands = this.textSpans[i6].elem;
              jLen = commands.length;
              this.globalData.canvasContext.beginPath();
              for (j = 0; j < jLen; j += 1) {
                pathArr = commands[j];
                kLen = pathArr.length;
                this.globalData.canvasContext.moveTo(pathArr[0], pathArr[1]);
                for (k2 = 2; k2 < kLen; k2 += 6) {
                  this.globalData.canvasContext.bezierCurveTo(pathArr[k2], pathArr[k2 + 1], pathArr[k2 + 2], pathArr[k2 + 3], pathArr[k2 + 4], pathArr[k2 + 5]);
                }
              }
              this.globalData.canvasContext.closePath();
              renderer2.ctxFill();
            }
            if (this.stroke) {
              if (renderedLetter && renderedLetter.sw) {
                if (lastStrokeW !== renderedLetter.sw) {
                  lastStrokeW = renderedLetter.sw;
                  renderer2.ctxLineWidth(renderedLetter.sw);
                }
              } else if (lastStrokeW !== this.values.sWidth) {
                lastStrokeW = this.values.sWidth;
                renderer2.ctxLineWidth(this.values.sWidth);
              }
              if (renderedLetter && renderedLetter.sc) {
                if (lastStroke !== renderedLetter.sc) {
                  lastStroke = renderedLetter.sc;
                  renderer2.ctxStrokeStyle(renderedLetter.sc);
                }
              } else if (lastStroke !== this.values.stroke) {
                lastStroke = this.values.stroke;
                renderer2.ctxStrokeStyle(this.values.stroke);
              }
              commands = this.textSpans[i6].elem;
              jLen = commands.length;
              this.globalData.canvasContext.beginPath();
              for (j = 0; j < jLen; j += 1) {
                pathArr = commands[j];
                kLen = pathArr.length;
                this.globalData.canvasContext.moveTo(pathArr[0], pathArr[1]);
                for (k2 = 2; k2 < kLen; k2 += 6) {
                  this.globalData.canvasContext.bezierCurveTo(pathArr[k2], pathArr[k2 + 1], pathArr[k2 + 2], pathArr[k2 + 3], pathArr[k2 + 4], pathArr[k2 + 5]);
                }
              }
              this.globalData.canvasContext.closePath();
              renderer2.ctxStroke();
            }
            if (renderedLetter) {
              this.globalData.renderer.restore();
            }
          }
        }
      };
      function CVImageElement(data2, globalData2, comp2) {
        this.assetData = globalData2.getAssetData(data2.refId);
        this.img = globalData2.imageLoader.getAsset(this.assetData);
        this.initElement(data2, globalData2, comp2);
      }
      extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement], CVImageElement);
      CVImageElement.prototype.initElement = SVGShapeElement.prototype.initElement;
      CVImageElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame;
      CVImageElement.prototype.createContent = function() {
        if (this.img.width && (this.assetData.w !== this.img.width || this.assetData.h !== this.img.height)) {
          var canvas = createTag("canvas");
          canvas.width = this.assetData.w;
          canvas.height = this.assetData.h;
          var ctx2 = canvas.getContext("2d");
          var imgW = this.img.width;
          var imgH = this.img.height;
          var imgRel = imgW / imgH;
          var canvasRel = this.assetData.w / this.assetData.h;
          var widthCrop;
          var heightCrop;
          var par = this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio;
          if (imgRel > canvasRel && par === "xMidYMid slice" || imgRel < canvasRel && par !== "xMidYMid slice") {
            heightCrop = imgH;
            widthCrop = heightCrop * canvasRel;
          } else {
            widthCrop = imgW;
            heightCrop = widthCrop / canvasRel;
          }
          ctx2.drawImage(this.img, (imgW - widthCrop) / 2, (imgH - heightCrop) / 2, widthCrop, heightCrop, 0, 0, this.assetData.w, this.assetData.h);
          this.img = canvas;
        }
      };
      CVImageElement.prototype.renderInnerContent = function() {
        this.canvasContext.drawImage(this.img, 0, 0);
      };
      CVImageElement.prototype.destroy = function() {
        this.img = null;
      };
      function CVSolidElement(data2, globalData2, comp2) {
        this.initElement(data2, globalData2, comp2);
      }
      extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement], CVSolidElement);
      CVSolidElement.prototype.initElement = SVGShapeElement.prototype.initElement;
      CVSolidElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame;
      CVSolidElement.prototype.renderInnerContent = function() {
        this.globalData.renderer.ctxFillStyle(this.data.sc);
        this.globalData.renderer.ctxFillRect(0, 0, this.data.sw, this.data.sh);
      };
      function CanvasRendererBase() {
      }
      extendPrototype([BaseRenderer], CanvasRendererBase);
      CanvasRendererBase.prototype.createShape = function(data2) {
        return new CVShapeElement(data2, this.globalData, this);
      };
      CanvasRendererBase.prototype.createText = function(data2) {
        return new CVTextElement(data2, this.globalData, this);
      };
      CanvasRendererBase.prototype.createImage = function(data2) {
        return new CVImageElement(data2, this.globalData, this);
      };
      CanvasRendererBase.prototype.createSolid = function(data2) {
        return new CVSolidElement(data2, this.globalData, this);
      };
      CanvasRendererBase.prototype.createNull = SVGRenderer.prototype.createNull;
      CanvasRendererBase.prototype.ctxTransform = function(props) {
        if (props[0] === 1 && props[1] === 0 && props[4] === 0 && props[5] === 1 && props[12] === 0 && props[13] === 0) {
          return;
        }
        this.canvasContext.transform(props[0], props[1], props[4], props[5], props[12], props[13]);
      };
      CanvasRendererBase.prototype.ctxOpacity = function(op) {
        this.canvasContext.globalAlpha *= op < 0 ? 0 : op;
      };
      CanvasRendererBase.prototype.ctxFillStyle = function(value2) {
        this.canvasContext.fillStyle = value2;
      };
      CanvasRendererBase.prototype.ctxStrokeStyle = function(value2) {
        this.canvasContext.strokeStyle = value2;
      };
      CanvasRendererBase.prototype.ctxLineWidth = function(value2) {
        this.canvasContext.lineWidth = value2;
      };
      CanvasRendererBase.prototype.ctxLineCap = function(value2) {
        this.canvasContext.lineCap = value2;
      };
      CanvasRendererBase.prototype.ctxLineJoin = function(value2) {
        this.canvasContext.lineJoin = value2;
      };
      CanvasRendererBase.prototype.ctxMiterLimit = function(value2) {
        this.canvasContext.miterLimit = value2;
      };
      CanvasRendererBase.prototype.ctxFill = function(rule) {
        this.canvasContext.fill(rule);
      };
      CanvasRendererBase.prototype.ctxFillRect = function(x2, y, w, h3) {
        this.canvasContext.fillRect(x2, y, w, h3);
      };
      CanvasRendererBase.prototype.ctxStroke = function() {
        this.canvasContext.stroke();
      };
      CanvasRendererBase.prototype.reset = function() {
        if (!this.renderConfig.clearCanvas) {
          this.canvasContext.restore();
          return;
        }
        this.contextData.reset();
      };
      CanvasRendererBase.prototype.save = function() {
        this.canvasContext.save();
      };
      CanvasRendererBase.prototype.restore = function(actionFlag) {
        if (!this.renderConfig.clearCanvas) {
          this.canvasContext.restore();
          return;
        }
        if (actionFlag) {
          this.globalData.blendMode = "source-over";
        }
        this.contextData.restore(actionFlag);
      };
      CanvasRendererBase.prototype.configAnimation = function(animData) {
        if (this.animationItem.wrapper) {
          this.animationItem.container = createTag("canvas");
          var containerStyle = this.animationItem.container.style;
          containerStyle.width = "100%";
          containerStyle.height = "100%";
          var origin = "0px 0px 0px";
          containerStyle.transformOrigin = origin;
          containerStyle.mozTransformOrigin = origin;
          containerStyle.webkitTransformOrigin = origin;
          containerStyle["-webkit-transform"] = origin;
          containerStyle.contentVisibility = this.renderConfig.contentVisibility;
          this.animationItem.wrapper.appendChild(this.animationItem.container);
          this.canvasContext = this.animationItem.container.getContext("2d");
          if (this.renderConfig.className) {
            this.animationItem.container.setAttribute("class", this.renderConfig.className);
          }
          if (this.renderConfig.id) {
            this.animationItem.container.setAttribute("id", this.renderConfig.id);
          }
        } else {
          this.canvasContext = this.renderConfig.context;
        }
        this.contextData.setContext(this.canvasContext);
        this.data = animData;
        this.layers = animData.layers;
        this.transformCanvas = {
          w: animData.w,
          h: animData.h,
          sx: 0,
          sy: 0,
          tx: 0,
          ty: 0
        };
        this.setupGlobalData(animData, document.body);
        this.globalData.canvasContext = this.canvasContext;
        this.globalData.renderer = this;
        this.globalData.isDashed = false;
        this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;
        this.globalData.transformCanvas = this.transformCanvas;
        this.elements = createSizedArray(animData.layers.length);
        this.updateContainerSize();
      };
      CanvasRendererBase.prototype.updateContainerSize = function(width2, height2) {
        this.reset();
        var elementWidth;
        var elementHeight;
        if (width2) {
          elementWidth = width2;
          elementHeight = height2;
          this.canvasContext.canvas.width = elementWidth;
          this.canvasContext.canvas.height = elementHeight;
        } else {
          if (this.animationItem.wrapper && this.animationItem.container) {
            elementWidth = this.animationItem.wrapper.offsetWidth;
            elementHeight = this.animationItem.wrapper.offsetHeight;
          } else {
            elementWidth = this.canvasContext.canvas.width;
            elementHeight = this.canvasContext.canvas.height;
          }
          this.canvasContext.canvas.width = elementWidth * this.renderConfig.dpr;
          this.canvasContext.canvas.height = elementHeight * this.renderConfig.dpr;
        }
        var elementRel;
        var animationRel;
        if (this.renderConfig.preserveAspectRatio.indexOf("meet") !== -1 || this.renderConfig.preserveAspectRatio.indexOf("slice") !== -1) {
          var par = this.renderConfig.preserveAspectRatio.split(" ");
          var fillType = par[1] || "meet";
          var pos = par[0] || "xMidYMid";
          var xPos = pos.substr(0, 4);
          var yPos = pos.substr(4);
          elementRel = elementWidth / elementHeight;
          animationRel = this.transformCanvas.w / this.transformCanvas.h;
          if (animationRel > elementRel && fillType === "meet" || animationRel < elementRel && fillType === "slice") {
            this.transformCanvas.sx = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);
            this.transformCanvas.sy = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);
          } else {
            this.transformCanvas.sx = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);
            this.transformCanvas.sy = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);
          }
          if (xPos === "xMid" && (animationRel < elementRel && fillType === "meet" || animationRel > elementRel && fillType === "slice")) {
            this.transformCanvas.tx = (elementWidth - this.transformCanvas.w * (elementHeight / this.transformCanvas.h)) / 2 * this.renderConfig.dpr;
          } else if (xPos === "xMax" && (animationRel < elementRel && fillType === "meet" || animationRel > elementRel && fillType === "slice")) {
            this.transformCanvas.tx = (elementWidth - this.transformCanvas.w * (elementHeight / this.transformCanvas.h)) * this.renderConfig.dpr;
          } else {
            this.transformCanvas.tx = 0;
          }
          if (yPos === "YMid" && (animationRel > elementRel && fillType === "meet" || animationRel < elementRel && fillType === "slice")) {
            this.transformCanvas.ty = (elementHeight - this.transformCanvas.h * (elementWidth / this.transformCanvas.w)) / 2 * this.renderConfig.dpr;
          } else if (yPos === "YMax" && (animationRel > elementRel && fillType === "meet" || animationRel < elementRel && fillType === "slice")) {
            this.transformCanvas.ty = (elementHeight - this.transformCanvas.h * (elementWidth / this.transformCanvas.w)) * this.renderConfig.dpr;
          } else {
            this.transformCanvas.ty = 0;
          }
        } else if (this.renderConfig.preserveAspectRatio === "none") {
          this.transformCanvas.sx = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);
          this.transformCanvas.sy = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);
          this.transformCanvas.tx = 0;
          this.transformCanvas.ty = 0;
        } else {
          this.transformCanvas.sx = this.renderConfig.dpr;
          this.transformCanvas.sy = this.renderConfig.dpr;
          this.transformCanvas.tx = 0;
          this.transformCanvas.ty = 0;
        }
        this.transformCanvas.props = [this.transformCanvas.sx, 0, 0, 0, 0, this.transformCanvas.sy, 0, 0, 0, 0, 1, 0, this.transformCanvas.tx, this.transformCanvas.ty, 0, 1];
        this.ctxTransform(this.transformCanvas.props);
        this.canvasContext.beginPath();
        this.canvasContext.rect(0, 0, this.transformCanvas.w, this.transformCanvas.h);
        this.canvasContext.closePath();
        this.canvasContext.clip();
        this.renderFrame(this.renderedFrame, true);
      };
      CanvasRendererBase.prototype.destroy = function() {
        if (this.renderConfig.clearCanvas && this.animationItem.wrapper) {
          this.animationItem.wrapper.innerText = "";
        }
        var i6;
        var len = this.layers ? this.layers.length : 0;
        for (i6 = len - 1; i6 >= 0; i6 -= 1) {
          if (this.elements[i6] && this.elements[i6].destroy) {
            this.elements[i6].destroy();
          }
        }
        this.elements.length = 0;
        this.globalData.canvasContext = null;
        this.animationItem.container = null;
        this.destroyed = true;
      };
      CanvasRendererBase.prototype.renderFrame = function(num, forceRender) {
        if (this.renderedFrame === num && this.renderConfig.clearCanvas === true && !forceRender || this.destroyed || num === -1) {
          return;
        }
        this.renderedFrame = num;
        this.globalData.frameNum = num - this.animationItem._isFirstFrame;
        this.globalData.frameId += 1;
        this.globalData._mdf = !this.renderConfig.clearCanvas || forceRender;
        this.globalData.projectInterface.currentFrame = num;
        var i6;
        var len = this.layers.length;
        if (!this.completeLayers) {
          this.checkLayers(num);
        }
        for (i6 = len - 1; i6 >= 0; i6 -= 1) {
          if (this.completeLayers || this.elements[i6]) {
            this.elements[i6].prepareFrame(num - this.layers[i6].st);
          }
        }
        if (this.globalData._mdf) {
          if (this.renderConfig.clearCanvas === true) {
            this.canvasContext.clearRect(0, 0, this.transformCanvas.w, this.transformCanvas.h);
          } else {
            this.save();
          }
          for (i6 = len - 1; i6 >= 0; i6 -= 1) {
            if (this.completeLayers || this.elements[i6]) {
              this.elements[i6].renderFrame();
            }
          }
          if (this.renderConfig.clearCanvas !== true) {
            this.restore();
          }
        }
      };
      CanvasRendererBase.prototype.buildItem = function(pos) {
        var elements = this.elements;
        if (elements[pos] || this.layers[pos].ty === 99) {
          return;
        }
        var element = this.createItem(this.layers[pos], this, this.globalData);
        elements[pos] = element;
        element.initExpressions();
      };
      CanvasRendererBase.prototype.checkPendingElements = function() {
        while (this.pendingElements.length) {
          var element = this.pendingElements.pop();
          element.checkParenting();
        }
      };
      CanvasRendererBase.prototype.hide = function() {
        this.animationItem.container.style.display = "none";
      };
      CanvasRendererBase.prototype.show = function() {
        this.animationItem.container.style.display = "block";
      };
      function CanvasContext() {
        this.opacity = -1;
        this.transform = createTypedArray("float32", 16);
        this.fillStyle = "";
        this.strokeStyle = "";
        this.lineWidth = "";
        this.lineCap = "";
        this.lineJoin = "";
        this.miterLimit = "";
        this.id = Math.random();
      }
      function CVContextData() {
        this.stack = [];
        this.cArrPos = 0;
        this.cTr = new Matrix();
        var i6;
        var len = 15;
        for (i6 = 0; i6 < len; i6 += 1) {
          var canvasContext = new CanvasContext();
          this.stack[i6] = canvasContext;
        }
        this._length = len;
        this.nativeContext = null;
        this.transformMat = new Matrix();
        this.currentOpacity = 1;
        this.currentFillStyle = "";
        this.appliedFillStyle = "";
        this.currentStrokeStyle = "";
        this.appliedStrokeStyle = "";
        this.currentLineWidth = "";
        this.appliedLineWidth = "";
        this.currentLineCap = "";
        this.appliedLineCap = "";
        this.currentLineJoin = "";
        this.appliedLineJoin = "";
        this.appliedMiterLimit = "";
        this.currentMiterLimit = "";
      }
      CVContextData.prototype.duplicate = function() {
        var newLength = this._length * 2;
        var i6 = 0;
        for (i6 = this._length; i6 < newLength; i6 += 1) {
          this.stack[i6] = new CanvasContext();
        }
        this._length = newLength;
      };
      CVContextData.prototype.reset = function() {
        this.cArrPos = 0;
        this.cTr.reset();
        this.stack[this.cArrPos].opacity = 1;
      };
      CVContextData.prototype.restore = function(forceRestore) {
        this.cArrPos -= 1;
        var currentContext = this.stack[this.cArrPos];
        var transform2 = currentContext.transform;
        var i6;
        var arr = this.cTr.props;
        for (i6 = 0; i6 < 16; i6 += 1) {
          arr[i6] = transform2[i6];
        }
        if (forceRestore) {
          this.nativeContext.restore();
          var prevStack = this.stack[this.cArrPos + 1];
          this.appliedFillStyle = prevStack.fillStyle;
          this.appliedStrokeStyle = prevStack.strokeStyle;
          this.appliedLineWidth = prevStack.lineWidth;
          this.appliedLineCap = prevStack.lineCap;
          this.appliedLineJoin = prevStack.lineJoin;
          this.appliedMiterLimit = prevStack.miterLimit;
        }
        this.nativeContext.setTransform(transform2[0], transform2[1], transform2[4], transform2[5], transform2[12], transform2[13]);
        if (forceRestore || currentContext.opacity !== -1 && this.currentOpacity !== currentContext.opacity) {
          this.nativeContext.globalAlpha = currentContext.opacity;
          this.currentOpacity = currentContext.opacity;
        }
        this.currentFillStyle = currentContext.fillStyle;
        this.currentStrokeStyle = currentContext.strokeStyle;
        this.currentLineWidth = currentContext.lineWidth;
        this.currentLineCap = currentContext.lineCap;
        this.currentLineJoin = currentContext.lineJoin;
        this.currentMiterLimit = currentContext.miterLimit;
      };
      CVContextData.prototype.save = function(saveOnNativeFlag) {
        if (saveOnNativeFlag) {
          this.nativeContext.save();
        }
        var props = this.cTr.props;
        if (this._length <= this.cArrPos) {
          this.duplicate();
        }
        var currentStack = this.stack[this.cArrPos];
        var i6;
        for (i6 = 0; i6 < 16; i6 += 1) {
          currentStack.transform[i6] = props[i6];
        }
        this.cArrPos += 1;
        var newStack = this.stack[this.cArrPos];
        newStack.opacity = currentStack.opacity;
        newStack.fillStyle = currentStack.fillStyle;
        newStack.strokeStyle = currentStack.strokeStyle;
        newStack.lineWidth = currentStack.lineWidth;
        newStack.lineCap = currentStack.lineCap;
        newStack.lineJoin = currentStack.lineJoin;
        newStack.miterLimit = currentStack.miterLimit;
      };
      CVContextData.prototype.setOpacity = function(value2) {
        this.stack[this.cArrPos].opacity = value2;
      };
      CVContextData.prototype.setContext = function(value2) {
        this.nativeContext = value2;
      };
      CVContextData.prototype.fillStyle = function(value2) {
        if (this.stack[this.cArrPos].fillStyle !== value2) {
          this.currentFillStyle = value2;
          this.stack[this.cArrPos].fillStyle = value2;
        }
      };
      CVContextData.prototype.strokeStyle = function(value2) {
        if (this.stack[this.cArrPos].strokeStyle !== value2) {
          this.currentStrokeStyle = value2;
          this.stack[this.cArrPos].strokeStyle = value2;
        }
      };
      CVContextData.prototype.lineWidth = function(value2) {
        if (this.stack[this.cArrPos].lineWidth !== value2) {
          this.currentLineWidth = value2;
          this.stack[this.cArrPos].lineWidth = value2;
        }
      };
      CVContextData.prototype.lineCap = function(value2) {
        if (this.stack[this.cArrPos].lineCap !== value2) {
          this.currentLineCap = value2;
          this.stack[this.cArrPos].lineCap = value2;
        }
      };
      CVContextData.prototype.lineJoin = function(value2) {
        if (this.stack[this.cArrPos].lineJoin !== value2) {
          this.currentLineJoin = value2;
          this.stack[this.cArrPos].lineJoin = value2;
        }
      };
      CVContextData.prototype.miterLimit = function(value2) {
        if (this.stack[this.cArrPos].miterLimit !== value2) {
          this.currentMiterLimit = value2;
          this.stack[this.cArrPos].miterLimit = value2;
        }
      };
      CVContextData.prototype.transform = function(props) {
        this.transformMat.cloneFromProps(props);
        var currentTransform = this.cTr;
        this.transformMat.multiply(currentTransform);
        currentTransform.cloneFromProps(this.transformMat.props);
        var trProps = currentTransform.props;
        this.nativeContext.setTransform(trProps[0], trProps[1], trProps[4], trProps[5], trProps[12], trProps[13]);
      };
      CVContextData.prototype.opacity = function(op) {
        var currentOpacity = this.stack[this.cArrPos].opacity;
        currentOpacity *= op < 0 ? 0 : op;
        if (this.stack[this.cArrPos].opacity !== currentOpacity) {
          if (this.currentOpacity !== op) {
            this.nativeContext.globalAlpha = op;
            this.currentOpacity = op;
          }
          this.stack[this.cArrPos].opacity = currentOpacity;
        }
      };
      CVContextData.prototype.fill = function(rule) {
        if (this.appliedFillStyle !== this.currentFillStyle) {
          this.appliedFillStyle = this.currentFillStyle;
          this.nativeContext.fillStyle = this.appliedFillStyle;
        }
        this.nativeContext.fill(rule);
      };
      CVContextData.prototype.fillRect = function(x2, y, w, h3) {
        if (this.appliedFillStyle !== this.currentFillStyle) {
          this.appliedFillStyle = this.currentFillStyle;
          this.nativeContext.fillStyle = this.appliedFillStyle;
        }
        this.nativeContext.fillRect(x2, y, w, h3);
      };
      CVContextData.prototype.stroke = function() {
        if (this.appliedStrokeStyle !== this.currentStrokeStyle) {
          this.appliedStrokeStyle = this.currentStrokeStyle;
          this.nativeContext.strokeStyle = this.appliedStrokeStyle;
        }
        if (this.appliedLineWidth !== this.currentLineWidth) {
          this.appliedLineWidth = this.currentLineWidth;
          this.nativeContext.lineWidth = this.appliedLineWidth;
        }
        if (this.appliedLineCap !== this.currentLineCap) {
          this.appliedLineCap = this.currentLineCap;
          this.nativeContext.lineCap = this.appliedLineCap;
        }
        if (this.appliedLineJoin !== this.currentLineJoin) {
          this.appliedLineJoin = this.currentLineJoin;
          this.nativeContext.lineJoin = this.appliedLineJoin;
        }
        if (this.appliedMiterLimit !== this.currentMiterLimit) {
          this.appliedMiterLimit = this.currentMiterLimit;
          this.nativeContext.miterLimit = this.appliedMiterLimit;
        }
        this.nativeContext.stroke();
      };
      function CVCompElement(data2, globalData2, comp2) {
        this.completeLayers = false;
        this.layers = data2.layers;
        this.pendingElements = [];
        this.elements = createSizedArray(this.layers.length);
        this.initElement(data2, globalData2, comp2);
        this.tm = data2.tm ? PropertyFactory.getProp(this, data2.tm, 0, globalData2.frameRate, this) : {
          _placeholder: true
        };
      }
      extendPrototype([CanvasRendererBase, ICompElement, CVBaseElement], CVCompElement);
      CVCompElement.prototype.renderInnerContent = function() {
        var ctx2 = this.canvasContext;
        ctx2.beginPath();
        ctx2.moveTo(0, 0);
        ctx2.lineTo(this.data.w, 0);
        ctx2.lineTo(this.data.w, this.data.h);
        ctx2.lineTo(0, this.data.h);
        ctx2.lineTo(0, 0);
        ctx2.clip();
        var i6;
        var len = this.layers.length;
        for (i6 = len - 1; i6 >= 0; i6 -= 1) {
          if (this.completeLayers || this.elements[i6]) {
            this.elements[i6].renderFrame();
          }
        }
      };
      CVCompElement.prototype.destroy = function() {
        var i6;
        var len = this.layers.length;
        for (i6 = len - 1; i6 >= 0; i6 -= 1) {
          if (this.elements[i6]) {
            this.elements[i6].destroy();
          }
        }
        this.layers = null;
        this.elements = null;
      };
      CVCompElement.prototype.createComp = function(data2) {
        return new CVCompElement(data2, this.globalData, this);
      };
      function CanvasRenderer(animationItem, config3) {
        this.animationItem = animationItem;
        this.renderConfig = {
          clearCanvas: config3 && config3.clearCanvas !== void 0 ? config3.clearCanvas : true,
          context: config3 && config3.context || null,
          progressiveLoad: config3 && config3.progressiveLoad || false,
          preserveAspectRatio: config3 && config3.preserveAspectRatio || "xMidYMid meet",
          imagePreserveAspectRatio: config3 && config3.imagePreserveAspectRatio || "xMidYMid slice",
          contentVisibility: config3 && config3.contentVisibility || "visible",
          className: config3 && config3.className || "",
          id: config3 && config3.id || "",
          runExpressions: !config3 || config3.runExpressions === void 0 || config3.runExpressions
        };
        this.renderConfig.dpr = config3 && config3.dpr || 1;
        if (this.animationItem.wrapper) {
          this.renderConfig.dpr = config3 && config3.dpr || window.devicePixelRatio || 1;
        }
        this.renderedFrame = -1;
        this.globalData = {
          frameNum: -1,
          _mdf: false,
          renderConfig: this.renderConfig,
          currentGlobalAlpha: -1
        };
        this.contextData = new CVContextData();
        this.elements = [];
        this.pendingElements = [];
        this.transformMat = new Matrix();
        this.completeLayers = false;
        this.rendererType = "canvas";
        if (this.renderConfig.clearCanvas) {
          this.ctxTransform = this.contextData.transform.bind(this.contextData);
          this.ctxOpacity = this.contextData.opacity.bind(this.contextData);
          this.ctxFillStyle = this.contextData.fillStyle.bind(this.contextData);
          this.ctxStrokeStyle = this.contextData.strokeStyle.bind(this.contextData);
          this.ctxLineWidth = this.contextData.lineWidth.bind(this.contextData);
          this.ctxLineCap = this.contextData.lineCap.bind(this.contextData);
          this.ctxLineJoin = this.contextData.lineJoin.bind(this.contextData);
          this.ctxMiterLimit = this.contextData.miterLimit.bind(this.contextData);
          this.ctxFill = this.contextData.fill.bind(this.contextData);
          this.ctxFillRect = this.contextData.fillRect.bind(this.contextData);
          this.ctxStroke = this.contextData.stroke.bind(this.contextData);
          this.save = this.contextData.save.bind(this.contextData);
        }
      }
      extendPrototype([CanvasRendererBase], CanvasRenderer);
      CanvasRenderer.prototype.createComp = function(data2) {
        return new CVCompElement(data2, this.globalData, this);
      };
      function HBaseElement() {
      }
      HBaseElement.prototype = {
        checkBlendMode: function checkBlendMode() {
        },
        initRendererElement: function initRendererElement() {
          this.baseElement = createTag(this.data.tg || "div");
          if (this.data.hasMask) {
            this.svgElement = createNS("svg");
            this.layerElement = createNS("g");
            this.maskedElement = this.layerElement;
            this.svgElement.appendChild(this.layerElement);
            this.baseElement.appendChild(this.svgElement);
          } else {
            this.layerElement = this.baseElement;
          }
          styleDiv(this.baseElement);
        },
        createContainerElements: function createContainerElements() {
          this.renderableEffectsManager = new CVEffects(this);
          this.transformedElement = this.baseElement;
          this.maskedElement = this.layerElement;
          if (this.data.ln) {
            this.layerElement.setAttribute("id", this.data.ln);
          }
          if (this.data.cl) {
            this.layerElement.setAttribute("class", this.data.cl);
          }
          if (this.data.bm !== 0) {
            this.setBlendMode();
          }
        },
        renderElement: function renderElement() {
          var transformedElementStyle = this.transformedElement ? this.transformedElement.style : {};
          if (this.finalTransform._matMdf) {
            var matrixValue = this.finalTransform.mat.toCSS();
            transformedElementStyle.transform = matrixValue;
            transformedElementStyle.webkitTransform = matrixValue;
          }
          if (this.finalTransform._opMdf) {
            transformedElementStyle.opacity = this.finalTransform.mProp.o.v;
          }
        },
        renderFrame: function renderFrame() {
          if (this.data.hd || this.hidden) {
            return;
          }
          this.renderTransform();
          this.renderRenderable();
          this.renderElement();
          this.renderInnerContent();
          if (this._isFirstFrame) {
            this._isFirstFrame = false;
          }
        },
        destroy: function destroy() {
          this.layerElement = null;
          this.transformedElement = null;
          if (this.matteElement) {
            this.matteElement = null;
          }
          if (this.maskManager) {
            this.maskManager.destroy();
            this.maskManager = null;
          }
        },
        createRenderableComponents: function createRenderableComponents() {
          this.maskManager = new MaskElement(this.data, this, this.globalData);
        },
        addEffects: function addEffects() {
        },
        setMatte: function setMatte() {
        }
      };
      HBaseElement.prototype.getBaseElement = SVGBaseElement.prototype.getBaseElement;
      HBaseElement.prototype.destroyBaseElement = HBaseElement.prototype.destroy;
      HBaseElement.prototype.buildElementParenting = BaseRenderer.prototype.buildElementParenting;
      function HSolidElement(data2, globalData2, comp2) {
        this.initElement(data2, globalData2, comp2);
      }
      extendPrototype([BaseElement, TransformElement, HBaseElement, HierarchyElement, FrameElement, RenderableDOMElement], HSolidElement);
      HSolidElement.prototype.createContent = function() {
        var rect;
        if (this.data.hasMask) {
          rect = createNS("rect");
          rect.setAttribute("width", this.data.sw);
          rect.setAttribute("height", this.data.sh);
          rect.setAttribute("fill", this.data.sc);
          this.svgElement.setAttribute("width", this.data.sw);
          this.svgElement.setAttribute("height", this.data.sh);
        } else {
          rect = createTag("div");
          rect.style.width = this.data.sw + "px";
          rect.style.height = this.data.sh + "px";
          rect.style.backgroundColor = this.data.sc;
        }
        this.layerElement.appendChild(rect);
      };
      function HShapeElement(data2, globalData2, comp2) {
        this.shapes = [];
        this.shapesData = data2.shapes;
        this.stylesList = [];
        this.shapeModifiers = [];
        this.itemsData = [];
        this.processedElements = [];
        this.animatedContents = [];
        this.shapesContainer = createNS("g");
        this.initElement(data2, globalData2, comp2);
        this.prevViewData = [];
        this.currentBBox = {
          x: 999999,
          y: -999999,
          h: 0,
          w: 0
        };
      }
      extendPrototype([BaseElement, TransformElement, HSolidElement, SVGShapeElement, HBaseElement, HierarchyElement, FrameElement, RenderableElement], HShapeElement);
      HShapeElement.prototype._renderShapeFrame = HShapeElement.prototype.renderInnerContent;
      HShapeElement.prototype.createContent = function() {
        var cont;
        this.baseElement.style.fontSize = 0;
        if (this.data.hasMask) {
          this.layerElement.appendChild(this.shapesContainer);
          cont = this.svgElement;
        } else {
          cont = createNS("svg");
          var size = this.comp.data ? this.comp.data : this.globalData.compSize;
          cont.setAttribute("width", size.w);
          cont.setAttribute("height", size.h);
          cont.appendChild(this.shapesContainer);
          this.layerElement.appendChild(cont);
        }
        this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.shapesContainer, 0, [], true);
        this.filterUniqueShapes();
        this.shapeCont = cont;
      };
      HShapeElement.prototype.getTransformedPoint = function(transformers, point) {
        var i6;
        var len = transformers.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          point = transformers[i6].mProps.v.applyToPointArray(point[0], point[1], 0);
        }
        return point;
      };
      HShapeElement.prototype.calculateShapeBoundingBox = function(item, boundingBox) {
        var shape = item.sh.v;
        var transformers = item.transformers;
        var i6;
        var len = shape._length;
        var vPoint;
        var oPoint;
        var nextIPoint;
        var nextVPoint;
        if (len <= 1) {
          return;
        }
        for (i6 = 0; i6 < len - 1; i6 += 1) {
          vPoint = this.getTransformedPoint(transformers, shape.v[i6]);
          oPoint = this.getTransformedPoint(transformers, shape.o[i6]);
          nextIPoint = this.getTransformedPoint(transformers, shape.i[i6 + 1]);
          nextVPoint = this.getTransformedPoint(transformers, shape.v[i6 + 1]);
          this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);
        }
        if (shape.c) {
          vPoint = this.getTransformedPoint(transformers, shape.v[i6]);
          oPoint = this.getTransformedPoint(transformers, shape.o[i6]);
          nextIPoint = this.getTransformedPoint(transformers, shape.i[0]);
          nextVPoint = this.getTransformedPoint(transformers, shape.v[0]);
          this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);
        }
      };
      HShapeElement.prototype.checkBounds = function(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox) {
        this.getBoundsOfCurve(vPoint, oPoint, nextIPoint, nextVPoint);
        var bounds = this.shapeBoundingBox;
        boundingBox.x = bmMin(bounds.left, boundingBox.x);
        boundingBox.xMax = bmMax(bounds.right, boundingBox.xMax);
        boundingBox.y = bmMin(bounds.top, boundingBox.y);
        boundingBox.yMax = bmMax(bounds.bottom, boundingBox.yMax);
      };
      HShapeElement.prototype.shapeBoundingBox = {
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      };
      HShapeElement.prototype.tempBoundingBox = {
        x: 0,
        xMax: 0,
        y: 0,
        yMax: 0,
        width: 0,
        height: 0
      };
      HShapeElement.prototype.getBoundsOfCurve = function(p0, p1, p22, p32) {
        var bounds = [[p0[0], p32[0]], [p0[1], p32[1]]];
        for (var a, b, c10, t, b2ac, t1, t2, i6 = 0; i6 < 2; ++i6) {
          b = 6 * p0[i6] - 12 * p1[i6] + 6 * p22[i6];
          a = -3 * p0[i6] + 9 * p1[i6] - 9 * p22[i6] + 3 * p32[i6];
          c10 = 3 * p1[i6] - 3 * p0[i6];
          b |= 0;
          a |= 0;
          c10 |= 0;
          if (a === 0 && b === 0) {
          } else if (a === 0) {
            t = -c10 / b;
            if (t > 0 && t < 1) {
              bounds[i6].push(this.calculateF(t, p0, p1, p22, p32, i6));
            }
          } else {
            b2ac = b * b - 4 * c10 * a;
            if (b2ac >= 0) {
              t1 = (-b + bmSqrt(b2ac)) / (2 * a);
              if (t1 > 0 && t1 < 1)
                bounds[i6].push(this.calculateF(t1, p0, p1, p22, p32, i6));
              t2 = (-b - bmSqrt(b2ac)) / (2 * a);
              if (t2 > 0 && t2 < 1)
                bounds[i6].push(this.calculateF(t2, p0, p1, p22, p32, i6));
            }
          }
        }
        this.shapeBoundingBox.left = bmMin.apply(null, bounds[0]);
        this.shapeBoundingBox.top = bmMin.apply(null, bounds[1]);
        this.shapeBoundingBox.right = bmMax.apply(null, bounds[0]);
        this.shapeBoundingBox.bottom = bmMax.apply(null, bounds[1]);
      };
      HShapeElement.prototype.calculateF = function(t, p0, p1, p22, p32, i6) {
        return bmPow(1 - t, 3) * p0[i6] + 3 * bmPow(1 - t, 2) * t * p1[i6] + 3 * (1 - t) * bmPow(t, 2) * p22[i6] + bmPow(t, 3) * p32[i6];
      };
      HShapeElement.prototype.calculateBoundingBox = function(itemsData, boundingBox) {
        var i6;
        var len = itemsData.length;
        for (i6 = 0; i6 < len; i6 += 1) {
          if (itemsData[i6] && itemsData[i6].sh) {
            this.calculateShapeBoundingBox(itemsData[i6], boundingBox);
          } else if (itemsData[i6] && itemsData[i6].it) {
            this.calculateBoundingBox(itemsData[i6].it, boundingBox);
          } else if (itemsData[i6] && itemsData[i6].style && itemsData[i6].w) {
            this.expandStrokeBoundingBox(itemsData[i6].w, boundingBox);
          }
        }
      };
      HShapeElement.prototype.expandStrokeBoundingBox = function(widthProperty, boundingBox) {
        var width2 = 0;
        if (widthProperty.keyframes) {
          for (var i6 = 0; i6 < widthProperty.keyframes.length; i6 += 1) {
            var kfw = widthProperty.keyframes[i6].s;
            if (kfw > width2) {
              width2 = kfw;
            }
          }
          width2 *= widthProperty.mult;
        } else {
          width2 = widthProperty.v * widthProperty.mult;
        }
        boundingBox.x -= width2;
        boundingBox.xMax += width2;
        boundingBox.y -= width2;
        boundingBox.yMax += width2;
      };
      HShapeElement.prototype.currentBoxContains = function(box) {
        return this.currentBBox.x <= box.x && this.currentBBox.y <= box.y && this.currentBBox.width + this.currentBBox.x >= box.x + box.width && this.currentBBox.height + this.currentBBox.y >= box.y + box.height;
      };
      HShapeElement.prototype.renderInnerContent = function() {
        this._renderShapeFrame();
        if (!this.hidden && (this._isFirstFrame || this._mdf)) {
          var tempBoundingBox = this.tempBoundingBox;
          var max = 999999;
          tempBoundingBox.x = max;
          tempBoundingBox.xMax = -max;
          tempBoundingBox.y = max;
          tempBoundingBox.yMax = -max;
          this.calculateBoundingBox(this.itemsData, tempBoundingBox);
          tempBoundingBox.width = tempBoundingBox.xMax < tempBoundingBox.x ? 0 : tempBoundingBox.xMax - tempBoundingBox.x;
          tempBoundingBox.height = tempBoundingBox.yMax < tempBoundingBox.y ? 0 : tempBoundingBox.yMax - tempBoundingBox.y;
          if (this.currentBoxContains(tempBoundingBox)) {
            return;
          }
          var changed = false;
          if (this.currentBBox.w !== tempBoundingBox.width) {
            this.currentBBox.w = tempBoundingBox.width;
            this.shapeCont.setAttribute("width", tempBoundingBox.width);
            changed = true;
          }
          if (this.currentBBox.h !== tempBoundingBox.height) {
            this.currentBBox.h = tempBoundingBox.height;
            this.shapeCont.setAttribute("height", tempBoundingBox.height);
            changed = true;
          }
          if (changed || this.currentBBox.x !== tempBoundingBox.x || this.currentBBox.y !== tempBoundingBox.y) {
            this.currentBBox.w = tempBoundingBox.width;
            this.currentBBox.h = tempBoundingBox.height;
            this.currentBBox.x = tempBoundingBox.x;
            this.currentBBox.y = tempBoundingBox.y;
            this.shapeCont.setAttribute("viewBox", this.currentBBox.x + " " + this.currentBBox.y + " " + this.currentBBox.w + " " + this.currentBBox.h);
            var shapeStyle = this.shapeCont.style;
            var shapeTransform = "translate(" + this.currentBBox.x + "px," + this.currentBBox.y + "px)";
            shapeStyle.transform = shapeTransform;
            shapeStyle.webkitTransform = shapeTransform;
          }
        }
      };
      function HTextElement(data2, globalData2, comp2) {
        this.textSpans = [];
        this.textPaths = [];
        this.currentBBox = {
          x: 999999,
          y: -999999,
          h: 0,
          w: 0
        };
        this.renderType = "svg";
        this.isMasked = false;
        this.initElement(data2, globalData2, comp2);
      }
      extendPrototype([BaseElement, TransformElement, HBaseElement, HierarchyElement, FrameElement, RenderableDOMElement, ITextElement], HTextElement);
      HTextElement.prototype.createContent = function() {
        this.isMasked = this.checkMasks();
        if (this.isMasked) {
          this.renderType = "svg";
          this.compW = this.comp.data.w;
          this.compH = this.comp.data.h;
          this.svgElement.setAttribute("width", this.compW);
          this.svgElement.setAttribute("height", this.compH);
          var g = createNS("g");
          this.maskedElement.appendChild(g);
          this.innerElem = g;
        } else {
          this.renderType = "html";
          this.innerElem = this.layerElement;
        }
        this.checkParenting();
      };
      HTextElement.prototype.buildNewText = function() {
        var documentData = this.textProperty.currentData;
        this.renderedLetters = createSizedArray(documentData.l ? documentData.l.length : 0);
        var innerElemStyle = this.innerElem.style;
        var textColor = documentData.fc ? this.buildColor(documentData.fc) : "rgba(0,0,0,0)";
        innerElemStyle.fill = textColor;
        innerElemStyle.color = textColor;
        if (documentData.sc) {
          innerElemStyle.stroke = this.buildColor(documentData.sc);
          innerElemStyle.strokeWidth = documentData.sw + "px";
        }
        var fontData = this.globalData.fontManager.getFontByName(documentData.f);
        if (!this.globalData.fontManager.chars) {
          innerElemStyle.fontSize = documentData.finalSize + "px";
          innerElemStyle.lineHeight = documentData.finalSize + "px";
          if (fontData.fClass) {
            this.innerElem.className = fontData.fClass;
          } else {
            innerElemStyle.fontFamily = fontData.fFamily;
            var fWeight = documentData.fWeight;
            var fStyle = documentData.fStyle;
            innerElemStyle.fontStyle = fStyle;
            innerElemStyle.fontWeight = fWeight;
          }
        }
        var i6;
        var len;
        var letters = documentData.l;
        len = letters.length;
        var tSpan;
        var tParent;
        var tCont;
        var matrixHelper = this.mHelper;
        var shapes;
        var shapeStr = "";
        var cnt = 0;
        for (i6 = 0; i6 < len; i6 += 1) {
          if (this.globalData.fontManager.chars) {
            if (!this.textPaths[cnt]) {
              tSpan = createNS("path");
              tSpan.setAttribute("stroke-linecap", lineCapEnum[1]);
              tSpan.setAttribute("stroke-linejoin", lineJoinEnum[2]);
              tSpan.setAttribute("stroke-miterlimit", "4");
            } else {
              tSpan = this.textPaths[cnt];
            }
            if (!this.isMasked) {
              if (this.textSpans[cnt]) {
                tParent = this.textSpans[cnt];
                tCont = tParent.children[0];
              } else {
                tParent = createTag("div");
                tParent.style.lineHeight = 0;
                tCont = createNS("svg");
                tCont.appendChild(tSpan);
                styleDiv(tParent);
              }
            }
          } else if (!this.isMasked) {
            if (this.textSpans[cnt]) {
              tParent = this.textSpans[cnt];
              tSpan = this.textPaths[cnt];
            } else {
              tParent = createTag("span");
              styleDiv(tParent);
              tSpan = createTag("span");
              styleDiv(tSpan);
              tParent.appendChild(tSpan);
            }
          } else {
            tSpan = this.textPaths[cnt] ? this.textPaths[cnt] : createNS("text");
          }
          if (this.globalData.fontManager.chars) {
            var charData = this.globalData.fontManager.getCharData(documentData.finalText[i6], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
            var shapeData;
            if (charData) {
              shapeData = charData.data;
            } else {
              shapeData = null;
            }
            matrixHelper.reset();
            if (shapeData && shapeData.shapes && shapeData.shapes.length) {
              shapes = shapeData.shapes[0].it;
              matrixHelper.scale(documentData.finalSize / 100, documentData.finalSize / 100);
              shapeStr = this.createPathShape(matrixHelper, shapes);
              tSpan.setAttribute("d", shapeStr);
            }
            if (!this.isMasked) {
              this.innerElem.appendChild(tParent);
              if (shapeData && shapeData.shapes) {
                document.body.appendChild(tCont);
                var boundingBox = tCont.getBBox();
                tCont.setAttribute("width", boundingBox.width + 2);
                tCont.setAttribute("height", boundingBox.height + 2);
                tCont.setAttribute("viewBox", boundingBox.x - 1 + " " + (boundingBox.y - 1) + " " + (boundingBox.width + 2) + " " + (boundingBox.height + 2));
                var tContStyle = tCont.style;
                var tContTranslation = "translate(" + (boundingBox.x - 1) + "px," + (boundingBox.y - 1) + "px)";
                tContStyle.transform = tContTranslation;
                tContStyle.webkitTransform = tContTranslation;
                letters[i6].yOffset = boundingBox.y - 1;
              } else {
                tCont.setAttribute("width", 1);
                tCont.setAttribute("height", 1);
              }
              tParent.appendChild(tCont);
            } else {
              this.innerElem.appendChild(tSpan);
            }
          } else {
            tSpan.textContent = letters[i6].val;
            tSpan.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space", "preserve");
            if (!this.isMasked) {
              this.innerElem.appendChild(tParent);
              var tStyle = tSpan.style;
              var tSpanTranslation = "translate3d(0," + -documentData.finalSize / 1.2 + "px,0)";
              tStyle.transform = tSpanTranslation;
              tStyle.webkitTransform = tSpanTranslation;
            } else {
              this.innerElem.appendChild(tSpan);
            }
          }
          if (!this.isMasked) {
            this.textSpans[cnt] = tParent;
          } else {
            this.textSpans[cnt] = tSpan;
          }
          this.textSpans[cnt].style.display = "block";
          this.textPaths[cnt] = tSpan;
          cnt += 1;
        }
        while (cnt < this.textSpans.length) {
          this.textSpans[cnt].style.display = "none";
          cnt += 1;
        }
      };
      HTextElement.prototype.renderInnerContent = function() {
        this.validateText();
        var svgStyle;
        if (this.data.singleShape) {
          if (!this._isFirstFrame && !this.lettersChangedFlag) {
            return;
          }
          if (this.isMasked && this.finalTransform._matMdf) {
            this.svgElement.setAttribute("viewBox", -this.finalTransform.mProp.p.v[0] + " " + -this.finalTransform.mProp.p.v[1] + " " + this.compW + " " + this.compH);
            svgStyle = this.svgElement.style;
            var translation = "translate(" + -this.finalTransform.mProp.p.v[0] + "px," + -this.finalTransform.mProp.p.v[1] + "px)";
            svgStyle.transform = translation;
            svgStyle.webkitTransform = translation;
          }
        }
        this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
        if (!this.lettersChangedFlag && !this.textAnimator.lettersChangedFlag) {
          return;
        }
        var i6;
        var len;
        var count = 0;
        var renderedLetters = this.textAnimator.renderedLetters;
        var letters = this.textProperty.currentData.l;
        len = letters.length;
        var renderedLetter;
        var textSpan;
        var textPath;
        for (i6 = 0; i6 < len; i6 += 1) {
          if (letters[i6].n) {
            count += 1;
          } else {
            textSpan = this.textSpans[i6];
            textPath = this.textPaths[i6];
            renderedLetter = renderedLetters[count];
            count += 1;
            if (renderedLetter._mdf.m) {
              if (!this.isMasked) {
                textSpan.style.webkitTransform = renderedLetter.m;
                textSpan.style.transform = renderedLetter.m;
              } else {
                textSpan.setAttribute("transform", renderedLetter.m);
              }
            }
            textSpan.style.opacity = renderedLetter.o;
            if (renderedLetter.sw && renderedLetter._mdf.sw) {
              textPath.setAttribute("stroke-width", renderedLetter.sw);
            }
            if (renderedLetter.sc && renderedLetter._mdf.sc) {
              textPath.setAttribute("stroke", renderedLetter.sc);
            }
            if (renderedLetter.fc && renderedLetter._mdf.fc) {
              textPath.setAttribute("fill", renderedLetter.fc);
              textPath.style.color = renderedLetter.fc;
            }
          }
        }
        if (this.innerElem.getBBox && !this.hidden && (this._isFirstFrame || this._mdf)) {
          var boundingBox = this.innerElem.getBBox();
          if (this.currentBBox.w !== boundingBox.width) {
            this.currentBBox.w = boundingBox.width;
            this.svgElement.setAttribute("width", boundingBox.width);
          }
          if (this.currentBBox.h !== boundingBox.height) {
            this.currentBBox.h = boundingBox.height;
            this.svgElement.setAttribute("height", boundingBox.height);
          }
          var margin = 1;
          if (this.currentBBox.w !== boundingBox.width + margin * 2 || this.currentBBox.h !== boundingBox.height + margin * 2 || this.currentBBox.x !== boundingBox.x - margin || this.currentBBox.y !== boundingBox.y - margin) {
            this.currentBBox.w = boundingBox.width + margin * 2;
            this.currentBBox.h = boundingBox.height + margin * 2;
            this.currentBBox.x = boundingBox.x - margin;
            this.currentBBox.y = boundingBox.y - margin;
            this.svgElement.setAttribute("viewBox", this.currentBBox.x + " " + this.currentBBox.y + " " + this.currentBBox.w + " " + this.currentBBox.h);
            svgStyle = this.svgElement.style;
            var svgTransform = "translate(" + this.currentBBox.x + "px," + this.currentBBox.y + "px)";
            svgStyle.transform = svgTransform;
            svgStyle.webkitTransform = svgTransform;
          }
        }
      };
      function HCameraElement(data2, globalData2, comp2) {
        this.initFrame();
        this.initBaseData(data2, globalData2, comp2);
        this.initHierarchy();
        var getProp2 = PropertyFactory.getProp;
        this.pe = getProp2(this, data2.pe, 0, 0, this);
        if (data2.ks.p.s) {
          this.px = getProp2(this, data2.ks.p.x, 1, 0, this);
          this.py = getProp2(this, data2.ks.p.y, 1, 0, this);
          this.pz = getProp2(this, data2.ks.p.z, 1, 0, this);
        } else {
          this.p = getProp2(this, data2.ks.p, 1, 0, this);
        }
        if (data2.ks.a) {
          this.a = getProp2(this, data2.ks.a, 1, 0, this);
        }
        if (data2.ks.or.k.length && data2.ks.or.k[0].to) {
          var i6;
          var len = data2.ks.or.k.length;
          for (i6 = 0; i6 < len; i6 += 1) {
            data2.ks.or.k[i6].to = null;
            data2.ks.or.k[i6].ti = null;
          }
        }
        this.or = getProp2(this, data2.ks.or, 1, degToRads, this);
        this.or.sh = true;
        this.rx = getProp2(this, data2.ks.rx, 0, degToRads, this);
        this.ry = getProp2(this, data2.ks.ry, 0, degToRads, this);
        this.rz = getProp2(this, data2.ks.rz, 0, degToRads, this);
        this.mat = new Matrix();
        this._prevMat = new Matrix();
        this._isFirstFrame = true;
        this.finalTransform = {
          mProp: this
        };
      }
      extendPrototype([BaseElement, FrameElement, HierarchyElement], HCameraElement);
      HCameraElement.prototype.setup = function() {
        var i6;
        var len = this.comp.threeDElements.length;
        var comp2;
        var perspectiveStyle;
        var containerStyle;
        for (i6 = 0; i6 < len; i6 += 1) {
          comp2 = this.comp.threeDElements[i6];
          if (comp2.type === "3d") {
            perspectiveStyle = comp2.perspectiveElem.style;
            containerStyle = comp2.container.style;
            var perspective = this.pe.v + "px";
            var origin = "0px 0px 0px";
            var matrix = "matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";
            perspectiveStyle.perspective = perspective;
            perspectiveStyle.webkitPerspective = perspective;
            containerStyle.transformOrigin = origin;
            containerStyle.mozTransformOrigin = origin;
            containerStyle.webkitTransformOrigin = origin;
            perspectiveStyle.transform = matrix;
            perspectiveStyle.webkitTransform = matrix;
          }
        }
      };
      HCameraElement.prototype.createElements = function() {
      };
      HCameraElement.prototype.hide = function() {
      };
      HCameraElement.prototype.renderFrame = function() {
        var _mdf = this._isFirstFrame;
        var i6;
        var len;
        if (this.hierarchy) {
          len = this.hierarchy.length;
          for (i6 = 0; i6 < len; i6 += 1) {
            _mdf = this.hierarchy[i6].finalTransform.mProp._mdf || _mdf;
          }
        }
        if (_mdf || this.pe._mdf || this.p && this.p._mdf || this.px && (this.px._mdf || this.py._mdf || this.pz._mdf) || this.rx._mdf || this.ry._mdf || this.rz._mdf || this.or._mdf || this.a && this.a._mdf) {
          this.mat.reset();
          if (this.hierarchy) {
            len = this.hierarchy.length - 1;
            for (i6 = len; i6 >= 0; i6 -= 1) {
              var mTransf = this.hierarchy[i6].finalTransform.mProp;
              this.mat.translate(-mTransf.p.v[0], -mTransf.p.v[1], mTransf.p.v[2]);
              this.mat.rotateX(-mTransf.or.v[0]).rotateY(-mTransf.or.v[1]).rotateZ(mTransf.or.v[2]);
              this.mat.rotateX(-mTransf.rx.v).rotateY(-mTransf.ry.v).rotateZ(mTransf.rz.v);
              this.mat.scale(1 / mTransf.s.v[0], 1 / mTransf.s.v[1], 1 / mTransf.s.v[2]);
              this.mat.translate(mTransf.a.v[0], mTransf.a.v[1], mTransf.a.v[2]);
            }
          }
          if (this.p) {
            this.mat.translate(-this.p.v[0], -this.p.v[1], this.p.v[2]);
          } else {
            this.mat.translate(-this.px.v, -this.py.v, this.pz.v);
          }
          if (this.a) {
            var diffVector;
            if (this.p) {
              diffVector = [this.p.v[0] - this.a.v[0], this.p.v[1] - this.a.v[1], this.p.v[2] - this.a.v[2]];
            } else {
              diffVector = [this.px.v - this.a.v[0], this.py.v - this.a.v[1], this.pz.v - this.a.v[2]];
            }
            var mag = Math.sqrt(Math.pow(diffVector[0], 2) + Math.pow(diffVector[1], 2) + Math.pow(diffVector[2], 2));
            var lookDir = [diffVector[0] / mag, diffVector[1] / mag, diffVector[2] / mag];
            var lookLengthOnXZ = Math.sqrt(lookDir[2] * lookDir[2] + lookDir[0] * lookDir[0]);
            var mRotationX = Math.atan2(lookDir[1], lookLengthOnXZ);
            var mRotationY = Math.atan2(lookDir[0], -lookDir[2]);
            this.mat.rotateY(mRotationY).rotateX(-mRotationX);
          }
          this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v);
          this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]);
          this.mat.translate(this.globalData.compSize.w / 2, this.globalData.compSize.h / 2, 0);
          this.mat.translate(0, 0, this.pe.v);
          var hasMatrixChanged = !this._prevMat.equals(this.mat);
          if ((hasMatrixChanged || this.pe._mdf) && this.comp.threeDElements) {
            len = this.comp.threeDElements.length;
            var comp2;
            var perspectiveStyle;
            var containerStyle;
            for (i6 = 0; i6 < len; i6 += 1) {
              comp2 = this.comp.threeDElements[i6];
              if (comp2.type === "3d") {
                if (hasMatrixChanged) {
                  var matValue = this.mat.toCSS();
                  containerStyle = comp2.container.style;
                  containerStyle.transform = matValue;
                  containerStyle.webkitTransform = matValue;
                }
                if (this.pe._mdf) {
                  perspectiveStyle = comp2.perspectiveElem.style;
                  perspectiveStyle.perspective = this.pe.v + "px";
                  perspectiveStyle.webkitPerspective = this.pe.v + "px";
                }
              }
            }
            this.mat.clone(this._prevMat);
          }
        }
        this._isFirstFrame = false;
      };
      HCameraElement.prototype.prepareFrame = function(num) {
        this.prepareProperties(num, true);
      };
      HCameraElement.prototype.destroy = function() {
      };
      HCameraElement.prototype.getBaseElement = function() {
        return null;
      };
      function HImageElement(data2, globalData2, comp2) {
        this.assetData = globalData2.getAssetData(data2.refId);
        this.initElement(data2, globalData2, comp2);
      }
      extendPrototype([BaseElement, TransformElement, HBaseElement, HSolidElement, HierarchyElement, FrameElement, RenderableElement], HImageElement);
      HImageElement.prototype.createContent = function() {
        var assetPath = this.globalData.getAssetsPath(this.assetData);
        var img = new Image();
        if (this.data.hasMask) {
          this.imageElem = createNS("image");
          this.imageElem.setAttribute("width", this.assetData.w + "px");
          this.imageElem.setAttribute("height", this.assetData.h + "px");
          this.imageElem.setAttributeNS("http://www.w3.org/1999/xlink", "href", assetPath);
          this.layerElement.appendChild(this.imageElem);
          this.baseElement.setAttribute("width", this.assetData.w);
          this.baseElement.setAttribute("height", this.assetData.h);
        } else {
          this.layerElement.appendChild(img);
        }
        img.crossOrigin = "anonymous";
        img.src = assetPath;
        if (this.data.ln) {
          this.baseElement.setAttribute("id", this.data.ln);
        }
      };
      function HybridRendererBase(animationItem, config3) {
        this.animationItem = animationItem;
        this.layers = null;
        this.renderedFrame = -1;
        this.renderConfig = {
          className: config3 && config3.className || "",
          imagePreserveAspectRatio: config3 && config3.imagePreserveAspectRatio || "xMidYMid slice",
          hideOnTransparent: !(config3 && config3.hideOnTransparent === false),
          filterSize: {
            width: config3 && config3.filterSize && config3.filterSize.width || "400%",
            height: config3 && config3.filterSize && config3.filterSize.height || "400%",
            x: config3 && config3.filterSize && config3.filterSize.x || "-100%",
            y: config3 && config3.filterSize && config3.filterSize.y || "-100%"
          }
        };
        this.globalData = {
          _mdf: false,
          frameNum: -1,
          renderConfig: this.renderConfig
        };
        this.pendingElements = [];
        this.elements = [];
        this.threeDElements = [];
        this.destroyed = false;
        this.camera = null;
        this.supports3d = true;
        this.rendererType = "html";
      }
      extendPrototype([BaseRenderer], HybridRendererBase);
      HybridRendererBase.prototype.buildItem = SVGRenderer.prototype.buildItem;
      HybridRendererBase.prototype.checkPendingElements = function() {
        while (this.pendingElements.length) {
          var element = this.pendingElements.pop();
          element.checkParenting();
        }
      };
      HybridRendererBase.prototype.appendElementInPos = function(element, pos) {
        var newDOMElement = element.getBaseElement();
        if (!newDOMElement) {
          return;
        }
        var layer = this.layers[pos];
        if (!layer.ddd || !this.supports3d) {
          if (this.threeDElements) {
            this.addTo3dContainer(newDOMElement, pos);
          } else {
            var i6 = 0;
            var nextDOMElement;
            var nextLayer;
            var tmpDOMElement;
            while (i6 < pos) {
              if (this.elements[i6] && this.elements[i6] !== true && this.elements[i6].getBaseElement) {
                nextLayer = this.elements[i6];
                tmpDOMElement = this.layers[i6].ddd ? this.getThreeDContainerByPos(i6) : nextLayer.getBaseElement();
                nextDOMElement = tmpDOMElement || nextDOMElement;
              }
              i6 += 1;
            }
            if (nextDOMElement) {
              if (!layer.ddd || !this.supports3d) {
                this.layerElement.insertBefore(newDOMElement, nextDOMElement);
              }
            } else if (!layer.ddd || !this.supports3d) {
              this.layerElement.appendChild(newDOMElement);
            }
          }
        } else {
          this.addTo3dContainer(newDOMElement, pos);
        }
      };
      HybridRendererBase.prototype.createShape = function(data2) {
        if (!this.supports3d) {
          return new SVGShapeElement(data2, this.globalData, this);
        }
        return new HShapeElement(data2, this.globalData, this);
      };
      HybridRendererBase.prototype.createText = function(data2) {
        if (!this.supports3d) {
          return new SVGTextLottieElement(data2, this.globalData, this);
        }
        return new HTextElement(data2, this.globalData, this);
      };
      HybridRendererBase.prototype.createCamera = function(data2) {
        this.camera = new HCameraElement(data2, this.globalData, this);
        return this.camera;
      };
      HybridRendererBase.prototype.createImage = function(data2) {
        if (!this.supports3d) {
          return new IImageElement(data2, this.globalData, this);
        }
        return new HImageElement(data2, this.globalData, this);
      };
      HybridRendererBase.prototype.createSolid = function(data2) {
        if (!this.supports3d) {
          return new ISolidElement(data2, this.globalData, this);
        }
        return new HSolidElement(data2, this.globalData, this);
      };
      HybridRendererBase.prototype.createNull = SVGRenderer.prototype.createNull;
      HybridRendererBase.prototype.getThreeDContainerByPos = function(pos) {
        var i6 = 0;
        var len = this.threeDElements.length;
        while (i6 < len) {
          if (this.threeDElements[i6].startPos <= pos && this.threeDElements[i6].endPos >= pos) {
            return this.threeDElements[i6].perspectiveElem;
          }
          i6 += 1;
        }
        return null;
      };
      HybridRendererBase.prototype.createThreeDContainer = function(pos, type4) {
        var perspectiveElem = createTag("div");
        var style;
        var containerStyle;
        styleDiv(perspectiveElem);
        var container = createTag("div");
        styleDiv(container);
        if (type4 === "3d") {
          style = perspectiveElem.style;
          style.width = this.globalData.compSize.w + "px";
          style.height = this.globalData.compSize.h + "px";
          var center = "50% 50%";
          style.webkitTransformOrigin = center;
          style.mozTransformOrigin = center;
          style.transformOrigin = center;
          containerStyle = container.style;
          var matrix = "matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";
          containerStyle.transform = matrix;
          containerStyle.webkitTransform = matrix;
        }
        perspectiveElem.appendChild(container);
        var threeDContainerData = {
          container,
          perspectiveElem,
          startPos: pos,
          endPos: pos,
          type: type4
        };
        this.threeDElements.push(threeDContainerData);
        return threeDContainerData;
      };
      HybridRendererBase.prototype.build3dContainers = function() {
        var i6;
        var len = this.layers.length;
        var lastThreeDContainerData;
        var currentContainer = "";
        for (i6 = 0; i6 < len; i6 += 1) {
          if (this.layers[i6].ddd && this.layers[i6].ty !== 3) {
            if (currentContainer !== "3d") {
              currentContainer = "3d";
              lastThreeDContainerData = this.createThreeDContainer(i6, "3d");
            }
            lastThreeDContainerData.endPos = Math.max(lastThreeDContainerData.endPos, i6);
          } else {
            if (currentContainer !== "2d") {
              currentContainer = "2d";
              lastThreeDContainerData = this.createThreeDContainer(i6, "2d");
            }
            lastThreeDContainerData.endPos = Math.max(lastThreeDContainerData.endPos, i6);
          }
        }
        len = this.threeDElements.length;
        for (i6 = len - 1; i6 >= 0; i6 -= 1) {
          this.resizerElem.appendChild(this.threeDElements[i6].perspectiveElem);
        }
      };
      HybridRendererBase.prototype.addTo3dContainer = function(elem2, pos) {
        var i6 = 0;
        var len = this.threeDElements.length;
        while (i6 < len) {
          if (pos <= this.threeDElements[i6].endPos) {
            var j = this.threeDElements[i6].startPos;
            var nextElement;
            while (j < pos) {
              if (this.elements[j] && this.elements[j].getBaseElement) {
                nextElement = this.elements[j].getBaseElement();
              }
              j += 1;
            }
            if (nextElement) {
              this.threeDElements[i6].container.insertBefore(elem2, nextElement);
            } else {
              this.threeDElements[i6].container.appendChild(elem2);
            }
            break;
          }
          i6 += 1;
        }
      };
      HybridRendererBase.prototype.configAnimation = function(animData) {
        var resizerElem = createTag("div");
        var wrapper = this.animationItem.wrapper;
        var style = resizerElem.style;
        style.width = animData.w + "px";
        style.height = animData.h + "px";
        this.resizerElem = resizerElem;
        styleDiv(resizerElem);
        style.transformStyle = "flat";
        style.mozTransformStyle = "flat";
        style.webkitTransformStyle = "flat";
        if (this.renderConfig.className) {
          resizerElem.setAttribute("class", this.renderConfig.className);
        }
        wrapper.appendChild(resizerElem);
        style.overflow = "hidden";
        var svg = createNS("svg");
        svg.setAttribute("width", "1");
        svg.setAttribute("height", "1");
        styleDiv(svg);
        this.resizerElem.appendChild(svg);
        var defs = createNS("defs");
        svg.appendChild(defs);
        this.data = animData;
        this.setupGlobalData(animData, svg);
        this.globalData.defs = defs;
        this.layers = animData.layers;
        this.layerElement = this.resizerElem;
        this.build3dContainers();
        this.updateContainerSize();
      };
      HybridRendererBase.prototype.destroy = function() {
        if (this.animationItem.wrapper) {
          this.animationItem.wrapper.innerText = "";
        }
        this.animationItem.container = null;
        this.globalData.defs = null;
        var i6;
        var len = this.layers ? this.layers.length : 0;
        for (i6 = 0; i6 < len; i6 += 1) {
          if (this.elements[i6] && this.elements[i6].destroy) {
            this.elements[i6].destroy();
          }
        }
        this.elements.length = 0;
        this.destroyed = true;
        this.animationItem = null;
      };
      HybridRendererBase.prototype.updateContainerSize = function() {
        var elementWidth = this.animationItem.wrapper.offsetWidth;
        var elementHeight = this.animationItem.wrapper.offsetHeight;
        var elementRel = elementWidth / elementHeight;
        var animationRel = this.globalData.compSize.w / this.globalData.compSize.h;
        var sx;
        var sy;
        var tx;
        var ty;
        if (animationRel > elementRel) {
          sx = elementWidth / this.globalData.compSize.w;
          sy = elementWidth / this.globalData.compSize.w;
          tx = 0;
          ty = (elementHeight - this.globalData.compSize.h * (elementWidth / this.globalData.compSize.w)) / 2;
        } else {
          sx = elementHeight / this.globalData.compSize.h;
          sy = elementHeight / this.globalData.compSize.h;
          tx = (elementWidth - this.globalData.compSize.w * (elementHeight / this.globalData.compSize.h)) / 2;
          ty = 0;
        }
        var style = this.resizerElem.style;
        style.webkitTransform = "matrix3d(" + sx + ",0,0,0,0," + sy + ",0,0,0,0,1,0," + tx + "," + ty + ",0,1)";
        style.transform = style.webkitTransform;
      };
      HybridRendererBase.prototype.renderFrame = SVGRenderer.prototype.renderFrame;
      HybridRendererBase.prototype.hide = function() {
        this.resizerElem.style.display = "none";
      };
      HybridRendererBase.prototype.show = function() {
        this.resizerElem.style.display = "block";
      };
      HybridRendererBase.prototype.initItems = function() {
        this.buildAllItems();
        if (this.camera) {
          this.camera.setup();
        } else {
          var cWidth = this.globalData.compSize.w;
          var cHeight = this.globalData.compSize.h;
          var i6;
          var len = this.threeDElements.length;
          for (i6 = 0; i6 < len; i6 += 1) {
            var style = this.threeDElements[i6].perspectiveElem.style;
            style.webkitPerspective = Math.sqrt(Math.pow(cWidth, 2) + Math.pow(cHeight, 2)) + "px";
            style.perspective = style.webkitPerspective;
          }
        }
      };
      HybridRendererBase.prototype.searchExtraCompositions = function(assets) {
        var i6;
        var len = assets.length;
        var floatingContainer = createTag("div");
        for (i6 = 0; i6 < len; i6 += 1) {
          if (assets[i6].xt) {
            var comp2 = this.createComp(assets[i6], floatingContainer, this.globalData.comp, null);
            comp2.initExpressions();
            this.globalData.projectInterface.registerComposition(comp2);
          }
        }
      };
      function HCompElement(data2, globalData2, comp2) {
        this.layers = data2.layers;
        this.supports3d = !data2.hasMask;
        this.completeLayers = false;
        this.pendingElements = [];
        this.elements = this.layers ? createSizedArray(this.layers.length) : [];
        this.initElement(data2, globalData2, comp2);
        this.tm = data2.tm ? PropertyFactory.getProp(this, data2.tm, 0, globalData2.frameRate, this) : {
          _placeholder: true
        };
      }
      extendPrototype([HybridRendererBase, ICompElement, HBaseElement], HCompElement);
      HCompElement.prototype._createBaseContainerElements = HCompElement.prototype.createContainerElements;
      HCompElement.prototype.createContainerElements = function() {
        this._createBaseContainerElements();
        if (this.data.hasMask) {
          this.svgElement.setAttribute("width", this.data.w);
          this.svgElement.setAttribute("height", this.data.h);
          this.transformedElement = this.baseElement;
        } else {
          this.transformedElement = this.layerElement;
        }
      };
      HCompElement.prototype.addTo3dContainer = function(elem2, pos) {
        var j = 0;
        var nextElement;
        while (j < pos) {
          if (this.elements[j] && this.elements[j].getBaseElement) {
            nextElement = this.elements[j].getBaseElement();
          }
          j += 1;
        }
        if (nextElement) {
          this.layerElement.insertBefore(elem2, nextElement);
        } else {
          this.layerElement.appendChild(elem2);
        }
      };
      HCompElement.prototype.createComp = function(data2) {
        if (!this.supports3d) {
          return new SVGCompElement(data2, this.globalData, this);
        }
        return new HCompElement(data2, this.globalData, this);
      };
      function HybridRenderer(animationItem, config3) {
        this.animationItem = animationItem;
        this.layers = null;
        this.renderedFrame = -1;
        this.renderConfig = {
          className: config3 && config3.className || "",
          imagePreserveAspectRatio: config3 && config3.imagePreserveAspectRatio || "xMidYMid slice",
          hideOnTransparent: !(config3 && config3.hideOnTransparent === false),
          filterSize: {
            width: config3 && config3.filterSize && config3.filterSize.width || "400%",
            height: config3 && config3.filterSize && config3.filterSize.height || "400%",
            x: config3 && config3.filterSize && config3.filterSize.x || "-100%",
            y: config3 && config3.filterSize && config3.filterSize.y || "-100%"
          },
          runExpressions: !config3 || config3.runExpressions === void 0 || config3.runExpressions
        };
        this.globalData = {
          _mdf: false,
          frameNum: -1,
          renderConfig: this.renderConfig
        };
        this.pendingElements = [];
        this.elements = [];
        this.threeDElements = [];
        this.destroyed = false;
        this.camera = null;
        this.supports3d = true;
        this.rendererType = "html";
      }
      extendPrototype([HybridRendererBase], HybridRenderer);
      HybridRenderer.prototype.createComp = function(data2) {
        if (!this.supports3d) {
          return new SVGCompElement(data2, this.globalData, this);
        }
        return new HCompElement(data2, this.globalData, this);
      };
      var CompExpressionInterface = function() {
        return function(comp2) {
          function _thisLayerFunction(name2) {
            var i6 = 0;
            var len = comp2.layers.length;
            while (i6 < len) {
              if (comp2.layers[i6].nm === name2 || comp2.layers[i6].ind === name2) {
                return comp2.elements[i6].layerInterface;
              }
              i6 += 1;
            }
            return null;
          }
          Object.defineProperty(_thisLayerFunction, "_name", {
            value: comp2.data.nm
          });
          _thisLayerFunction.layer = _thisLayerFunction;
          _thisLayerFunction.pixelAspect = 1;
          _thisLayerFunction.height = comp2.data.h || comp2.globalData.compSize.h;
          _thisLayerFunction.width = comp2.data.w || comp2.globalData.compSize.w;
          _thisLayerFunction.pixelAspect = 1;
          _thisLayerFunction.frameDuration = 1 / comp2.globalData.frameRate;
          _thisLayerFunction.displayStartTime = 0;
          _thisLayerFunction.numLayers = comp2.layers.length;
          return _thisLayerFunction;
        };
      }();
      function _typeof$2(o) {
        "@babel/helpers - typeof";
        return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof$2(o);
      }
      function seedRandom(pool, math) {
        var global2 = this, width2 = 256, chunks = 6, digits = 52, rngname = "random", startdenom = math.pow(width2, chunks), significance = math.pow(2, digits), overflow = significance * 2, mask2 = width2 - 1, nodecrypto;
        function seedrandom(seed, options2, callback) {
          var key2 = [];
          options2 = options2 === true ? {
            entropy: true
          } : options2 || {};
          var shortseed = mixkey(flatten(options2.entropy ? [seed, tostring(pool)] : seed === null ? autoseed() : seed, 3), key2);
          var arc4 = new ARC4(key2);
          var prng = function prng2() {
            var n38 = arc4.g(chunks), d30 = startdenom, x2 = 0;
            while (n38 < significance) {
              n38 = (n38 + x2) * width2;
              d30 *= width2;
              x2 = arc4.g(1);
            }
            while (n38 >= overflow) {
              n38 /= 2;
              d30 /= 2;
              x2 >>>= 1;
            }
            return (n38 + x2) / d30;
          };
          prng.int32 = function() {
            return arc4.g(4) | 0;
          };
          prng.quick = function() {
            return arc4.g(4) / 4294967296;
          };
          prng["double"] = prng;
          mixkey(tostring(arc4.S), pool);
          return (options2.pass || callback || function(prng2, seed2, is_math_call, state) {
            if (state) {
              if (state.S) {
                copy(state, arc4);
              }
              prng2.state = function() {
                return copy(arc4, {});
              };
            }
            if (is_math_call) {
              math[rngname] = prng2;
              return seed2;
            } else
              return prng2;
          })(prng, shortseed, "global" in options2 ? options2.global : this == math, options2.state);
        }
        math["seed" + rngname] = seedrandom;
        function ARC4(key2) {
          var t, keylen = key2.length, me = this, i6 = 0, j = me.i = me.j = 0, s8 = me.S = [];
          if (!keylen) {
            key2 = [keylen++];
          }
          while (i6 < width2) {
            s8[i6] = i6++;
          }
          for (i6 = 0; i6 < width2; i6++) {
            s8[i6] = s8[j = mask2 & j + key2[i6 % keylen] + (t = s8[i6])];
            s8[j] = t;
          }
          me.g = function(count) {
            var t2, r = 0, i7 = me.i, j2 = me.j, s9 = me.S;
            while (count--) {
              t2 = s9[i7 = mask2 & i7 + 1];
              r = r * width2 + s9[mask2 & (s9[i7] = s9[j2 = mask2 & j2 + t2]) + (s9[j2] = t2)];
            }
            me.i = i7;
            me.j = j2;
            return r;
          };
        }
        function copy(f, t) {
          t.i = f.i;
          t.j = f.j;
          t.S = f.S.slice();
          return t;
        }
        function flatten(obj, depth) {
          var result = [], typ = _typeof$2(obj), prop;
          if (depth && typ == "object") {
            for (prop in obj) {
              try {
                result.push(flatten(obj[prop], depth - 1));
              } catch (e2) {
              }
            }
          }
          return result.length ? result : typ == "string" ? obj : obj + "\0";
        }
        function mixkey(seed, key2) {
          var stringseed = seed + "", smear, j = 0;
          while (j < stringseed.length) {
            key2[mask2 & j] = mask2 & (smear ^= key2[mask2 & j] * 19) + stringseed.charCodeAt(j++);
          }
          return tostring(key2);
        }
        function autoseed() {
          try {
            if (nodecrypto) {
              return tostring(nodecrypto.randomBytes(width2));
            }
            var out = new Uint8Array(width2);
            (global2.crypto || global2.msCrypto).getRandomValues(out);
            return tostring(out);
          } catch (e2) {
            var browser = global2.navigator, plugins = browser && browser.plugins;
            return [+/* @__PURE__ */ new Date(), global2, plugins, global2.screen, tostring(pool)];
          }
        }
        function tostring(a) {
          return String.fromCharCode.apply(0, a);
        }
        mixkey(math.random(), pool);
      }
      ;
      function initialize$2(BMMath2) {
        seedRandom([], BMMath2);
      }
      var propTypes = {
        SHAPE: "shape"
      };
      function _typeof$1(o) {
        "@babel/helpers - typeof";
        return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof$1(o);
      }
      var ExpressionManager = function() {
        "use strict";
        var ob = {};
        var Math = BMMath;
        var window = null;
        var document = null;
        var XMLHttpRequest = null;
        var fetch = null;
        var frames = null;
        var _lottieGlobal = {};
        initialize$2(BMMath);
        function resetFrame() {
          _lottieGlobal = {};
        }
        function $bm_isInstanceOfArray(arr) {
          return arr.constructor === Array || arr.constructor === Float32Array;
        }
        function isNumerable(tOfV, v3) {
          return tOfV === "number" || v3 instanceof Number || tOfV === "boolean" || tOfV === "string";
        }
        function $bm_neg(a) {
          var tOfA = _typeof$1(a);
          if (tOfA === "number" || a instanceof Number || tOfA === "boolean") {
            return -a;
          }
          if ($bm_isInstanceOfArray(a)) {
            var i6;
            var lenA = a.length;
            var retArr = [];
            for (i6 = 0; i6 < lenA; i6 += 1) {
              retArr[i6] = -a[i6];
            }
            return retArr;
          }
          if (a.propType) {
            return a.v;
          }
          return -a;
        }
        var easeInBez = BezierFactory.getBezierEasing(0.333, 0, 0.833, 0.833, "easeIn").get;
        var easeOutBez = BezierFactory.getBezierEasing(0.167, 0.167, 0.667, 1, "easeOut").get;
        var easeInOutBez = BezierFactory.getBezierEasing(0.33, 0, 0.667, 1, "easeInOut").get;
        function sum(a, b) {
          var tOfA = _typeof$1(a);
          var tOfB = _typeof$1(b);
          if (isNumerable(tOfA, a) && isNumerable(tOfB, b) || tOfA === "string" || tOfB === "string") {
            return a + b;
          }
          if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
            a = a.slice(0);
            a[0] += b;
            return a;
          }
          if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
            b = b.slice(0);
            b[0] = a + b[0];
            return b;
          }
          if ($bm_isInstanceOfArray(a) && $bm_isInstanceOfArray(b)) {
            var i6 = 0;
            var lenA = a.length;
            var lenB = b.length;
            var retArr = [];
            while (i6 < lenA || i6 < lenB) {
              if ((typeof a[i6] === "number" || a[i6] instanceof Number) && (typeof b[i6] === "number" || b[i6] instanceof Number)) {
                retArr[i6] = a[i6] + b[i6];
              } else {
                retArr[i6] = b[i6] === void 0 ? a[i6] : a[i6] || b[i6];
              }
              i6 += 1;
            }
            return retArr;
          }
          return 0;
        }
        var add = sum;
        function sub(a, b) {
          var tOfA = _typeof$1(a);
          var tOfB = _typeof$1(b);
          if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
            if (tOfA === "string") {
              a = parseInt(a, 10);
            }
            if (tOfB === "string") {
              b = parseInt(b, 10);
            }
            return a - b;
          }
          if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
            a = a.slice(0);
            a[0] -= b;
            return a;
          }
          if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
            b = b.slice(0);
            b[0] = a - b[0];
            return b;
          }
          if ($bm_isInstanceOfArray(a) && $bm_isInstanceOfArray(b)) {
            var i6 = 0;
            var lenA = a.length;
            var lenB = b.length;
            var retArr = [];
            while (i6 < lenA || i6 < lenB) {
              if ((typeof a[i6] === "number" || a[i6] instanceof Number) && (typeof b[i6] === "number" || b[i6] instanceof Number)) {
                retArr[i6] = a[i6] - b[i6];
              } else {
                retArr[i6] = b[i6] === void 0 ? a[i6] : a[i6] || b[i6];
              }
              i6 += 1;
            }
            return retArr;
          }
          return 0;
        }
        function mul(a, b) {
          var tOfA = _typeof$1(a);
          var tOfB = _typeof$1(b);
          var arr;
          if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
            return a * b;
          }
          var i6;
          var len;
          if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
            len = a.length;
            arr = createTypedArray("float32", len);
            for (i6 = 0; i6 < len; i6 += 1) {
              arr[i6] = a[i6] * b;
            }
            return arr;
          }
          if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
            len = b.length;
            arr = createTypedArray("float32", len);
            for (i6 = 0; i6 < len; i6 += 1) {
              arr[i6] = a * b[i6];
            }
            return arr;
          }
          return 0;
        }
        function div(a, b) {
          var tOfA = _typeof$1(a);
          var tOfB = _typeof$1(b);
          var arr;
          if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
            return a / b;
          }
          var i6;
          var len;
          if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
            len = a.length;
            arr = createTypedArray("float32", len);
            for (i6 = 0; i6 < len; i6 += 1) {
              arr[i6] = a[i6] / b;
            }
            return arr;
          }
          if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
            len = b.length;
            arr = createTypedArray("float32", len);
            for (i6 = 0; i6 < len; i6 += 1) {
              arr[i6] = a / b[i6];
            }
            return arr;
          }
          return 0;
        }
        function mod(a, b) {
          if (typeof a === "string") {
            a = parseInt(a, 10);
          }
          if (typeof b === "string") {
            b = parseInt(b, 10);
          }
          return a % b;
        }
        var $bm_sum = sum;
        var $bm_sub = sub;
        var $bm_mul = mul;
        var $bm_div = div;
        var $bm_mod = mod;
        function clamp(num, min, max) {
          if (min > max) {
            var mm = max;
            max = min;
            min = mm;
          }
          return Math.min(Math.max(num, min), max);
        }
        function radiansToDegrees(val2) {
          return val2 / degToRads;
        }
        var radians_to_degrees = radiansToDegrees;
        function degreesToRadians(val2) {
          return val2 * degToRads;
        }
        var degrees_to_radians = radiansToDegrees;
        var helperLengthArray = [0, 0, 0, 0, 0, 0];
        function length(arr1, arr2) {
          if (typeof arr1 === "number" || arr1 instanceof Number) {
            arr2 = arr2 || 0;
            return Math.abs(arr1 - arr2);
          }
          if (!arr2) {
            arr2 = helperLengthArray;
          }
          var i6;
          var len = Math.min(arr1.length, arr2.length);
          var addedLength = 0;
          for (i6 = 0; i6 < len; i6 += 1) {
            addedLength += Math.pow(arr2[i6] - arr1[i6], 2);
          }
          return Math.sqrt(addedLength);
        }
        function normalize(vec) {
          return div(vec, length(vec));
        }
        function rgbToHsl(val2) {
          var r = val2[0];
          var g = val2[1];
          var b = val2[2];
          var max = Math.max(r, g, b);
          var min = Math.min(r, g, b);
          var h3;
          var s8;
          var l7 = (max + min) / 2;
          if (max === min) {
            h3 = 0;
            s8 = 0;
          } else {
            var d30 = max - min;
            s8 = l7 > 0.5 ? d30 / (2 - max - min) : d30 / (max + min);
            switch (max) {
              case r:
                h3 = (g - b) / d30 + (g < b ? 6 : 0);
                break;
              case g:
                h3 = (b - r) / d30 + 2;
                break;
              case b:
                h3 = (r - g) / d30 + 4;
                break;
              default:
                break;
            }
            h3 /= 6;
          }
          return [h3, s8, l7, val2[3]];
        }
        function hue2rgb(p10, q, t) {
          if (t < 0)
            t += 1;
          if (t > 1)
            t -= 1;
          if (t < 1 / 6)
            return p10 + (q - p10) * 6 * t;
          if (t < 1 / 2)
            return q;
          if (t < 2 / 3)
            return p10 + (q - p10) * (2 / 3 - t) * 6;
          return p10;
        }
        function hslToRgb(val2) {
          var h3 = val2[0];
          var s8 = val2[1];
          var l7 = val2[2];
          var r;
          var g;
          var b;
          if (s8 === 0) {
            r = l7;
            b = l7;
            g = l7;
          } else {
            var q = l7 < 0.5 ? l7 * (1 + s8) : l7 + s8 - l7 * s8;
            var p10 = 2 * l7 - q;
            r = hue2rgb(p10, q, h3 + 1 / 3);
            g = hue2rgb(p10, q, h3);
            b = hue2rgb(p10, q, h3 - 1 / 3);
          }
          return [r, g, b, val2[3]];
        }
        function linear(t, tMin, tMax, value1, value2) {
          if (value1 === void 0 || value2 === void 0) {
            value1 = tMin;
            value2 = tMax;
            tMin = 0;
            tMax = 1;
          }
          if (tMax < tMin) {
            var _tMin = tMax;
            tMax = tMin;
            tMin = _tMin;
          }
          if (t <= tMin) {
            return value1;
          }
          if (t >= tMax) {
            return value2;
          }
          var perc = tMax === tMin ? 0 : (t - tMin) / (tMax - tMin);
          if (!value1.length) {
            return value1 + (value2 - value1) * perc;
          }
          var i6;
          var len = value1.length;
          var arr = createTypedArray("float32", len);
          for (i6 = 0; i6 < len; i6 += 1) {
            arr[i6] = value1[i6] + (value2[i6] - value1[i6]) * perc;
          }
          return arr;
        }
        function random(min, max) {
          if (max === void 0) {
            if (min === void 0) {
              min = 0;
              max = 1;
            } else {
              max = min;
              min = void 0;
            }
          }
          if (max.length) {
            var i6;
            var len = max.length;
            if (!min) {
              min = createTypedArray("float32", len);
            }
            var arr = createTypedArray("float32", len);
            var rnd = BMMath.random();
            for (i6 = 0; i6 < len; i6 += 1) {
              arr[i6] = min[i6] + rnd * (max[i6] - min[i6]);
            }
            return arr;
          }
          if (min === void 0) {
            min = 0;
          }
          var rndm = BMMath.random();
          return min + rndm * (max - min);
        }
        function createPath(points, inTangents, outTangents, closed) {
          var i6;
          var len = points.length;
          var path = shapePool.newElement();
          path.setPathData(!!closed, len);
          var arrPlaceholder = [0, 0];
          var inVertexPoint;
          var outVertexPoint;
          for (i6 = 0; i6 < len; i6 += 1) {
            inVertexPoint = inTangents && inTangents[i6] ? inTangents[i6] : arrPlaceholder;
            outVertexPoint = outTangents && outTangents[i6] ? outTangents[i6] : arrPlaceholder;
            path.setTripleAt(points[i6][0], points[i6][1], outVertexPoint[0] + points[i6][0], outVertexPoint[1] + points[i6][1], inVertexPoint[0] + points[i6][0], inVertexPoint[1] + points[i6][1], i6, true);
          }
          return path;
        }
        function initiateExpression(elem, data, property) {
          function noOp(_value) {
            return _value;
          }
          if (!elem.globalData.renderConfig.runExpressions) {
            return noOp;
          }
          var val = data.x;
          var needsVelocity = /velocity(?![\w\d])/.test(val);
          var _needsRandom = val.indexOf("random") !== -1;
          var elemType = elem.data.ty;
          var transform;
          var $bm_transform;
          var content;
          var effect;
          var thisProperty = property;
          thisProperty._name = elem.data.nm;
          thisProperty.valueAtTime = thisProperty.getValueAtTime;
          Object.defineProperty(thisProperty, "value", {
            get: function get() {
              return thisProperty.v;
            }
          });
          elem.comp.frameDuration = 1 / elem.comp.globalData.frameRate;
          elem.comp.displayStartTime = 0;
          var inPoint = elem.data.ip / elem.comp.globalData.frameRate;
          var outPoint = elem.data.op / elem.comp.globalData.frameRate;
          var width = elem.data.sw ? elem.data.sw : 0;
          var height = elem.data.sh ? elem.data.sh : 0;
          var name = elem.data.nm;
          var loopIn;
          var loop_in;
          var loopOut;
          var loop_out;
          var smooth;
          var toWorld;
          var fromWorld;
          var fromComp;
          var toComp;
          var fromCompToSurface;
          var position;
          var rotation;
          var anchorPoint;
          var scale;
          var thisLayer;
          var thisComp;
          var mask;
          var valueAtTime;
          var velocityAtTime;
          var scoped_bm_rt;
          var expression_function = eval("[function _expression_function(){" + val + ";scoped_bm_rt=$bm_rt}]")[0];
          var numKeys = property.kf ? data.k.length : 0;
          var active = !this.data || this.data.hd !== true;
          var wiggle = (function wiggle2(freq, amp) {
            var iWiggle;
            var j;
            var lenWiggle = this.pv.length ? this.pv.length : 1;
            var addedAmps = createTypedArray("float32", lenWiggle);
            freq = 5;
            var iterations = Math.floor(time * freq);
            iWiggle = 0;
            j = 0;
            while (iWiggle < iterations) {
              for (j = 0; j < lenWiggle; j += 1) {
                addedAmps[j] += -amp + amp * 2 * BMMath.random();
              }
              iWiggle += 1;
            }
            var periods = time * freq;
            var perc = periods - Math.floor(periods);
            var arr = createTypedArray("float32", lenWiggle);
            if (lenWiggle > 1) {
              for (j = 0; j < lenWiggle; j += 1) {
                arr[j] = this.pv[j] + addedAmps[j] + (-amp + amp * 2 * BMMath.random()) * perc;
              }
              return arr;
            }
            return this.pv + addedAmps[0] + (-amp + amp * 2 * BMMath.random()) * perc;
          }).bind(this);
          if (thisProperty.loopIn) {
            loopIn = thisProperty.loopIn.bind(thisProperty);
            loop_in = loopIn;
          }
          if (thisProperty.loopOut) {
            loopOut = thisProperty.loopOut.bind(thisProperty);
            loop_out = loopOut;
          }
          if (thisProperty.smooth) {
            smooth = thisProperty.smooth.bind(thisProperty);
          }
          function loopInDuration(type4, duration) {
            return loopIn(type4, duration, true);
          }
          function loopOutDuration(type4, duration) {
            return loopOut(type4, duration, true);
          }
          if (this.getValueAtTime) {
            valueAtTime = this.getValueAtTime.bind(this);
          }
          if (this.getVelocityAtTime) {
            velocityAtTime = this.getVelocityAtTime.bind(this);
          }
          var comp = elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface);
          function lookAt(elem1, elem2) {
            var fVec = [elem2[0] - elem1[0], elem2[1] - elem1[1], elem2[2] - elem1[2]];
            var pitch = Math.atan2(fVec[0], Math.sqrt(fVec[1] * fVec[1] + fVec[2] * fVec[2])) / degToRads;
            var yaw = -Math.atan2(fVec[1], fVec[2]) / degToRads;
            return [yaw, pitch, 0];
          }
          function easeOut(t, tMin, tMax, val1, val2) {
            return applyEase(easeOutBez, t, tMin, tMax, val1, val2);
          }
          function easeIn(t, tMin, tMax, val1, val2) {
            return applyEase(easeInBez, t, tMin, tMax, val1, val2);
          }
          function ease(t, tMin, tMax, val1, val2) {
            return applyEase(easeInOutBez, t, tMin, tMax, val1, val2);
          }
          function applyEase(fn, t, tMin, tMax, val1, val2) {
            if (val1 === void 0) {
              val1 = tMin;
              val2 = tMax;
            } else {
              t = (t - tMin) / (tMax - tMin);
            }
            if (t > 1) {
              t = 1;
            } else if (t < 0) {
              t = 0;
            }
            var mult = fn(t);
            if ($bm_isInstanceOfArray(val1)) {
              var iKey;
              var lenKey = val1.length;
              var arr = createTypedArray("float32", lenKey);
              for (iKey = 0; iKey < lenKey; iKey += 1) {
                arr[iKey] = (val2[iKey] - val1[iKey]) * mult + val1[iKey];
              }
              return arr;
            }
            return (val2 - val1) * mult + val1;
          }
          function nearestKey(time2) {
            var iKey;
            var lenKey = data.k.length;
            var index2;
            var keyTime;
            if (!data.k.length || typeof data.k[0] === "number") {
              index2 = 0;
              keyTime = 0;
            } else {
              index2 = -1;
              time2 *= elem.comp.globalData.frameRate;
              if (time2 < data.k[0].t) {
                index2 = 1;
                keyTime = data.k[0].t;
              } else {
                for (iKey = 0; iKey < lenKey - 1; iKey += 1) {
                  if (time2 === data.k[iKey].t) {
                    index2 = iKey + 1;
                    keyTime = data.k[iKey].t;
                    break;
                  } else if (time2 > data.k[iKey].t && time2 < data.k[iKey + 1].t) {
                    if (time2 - data.k[iKey].t > data.k[iKey + 1].t - time2) {
                      index2 = iKey + 2;
                      keyTime = data.k[iKey + 1].t;
                    } else {
                      index2 = iKey + 1;
                      keyTime = data.k[iKey].t;
                    }
                    break;
                  }
                }
                if (index2 === -1) {
                  index2 = iKey + 1;
                  keyTime = data.k[iKey].t;
                }
              }
            }
            var obKey = {};
            obKey.index = index2;
            obKey.time = keyTime / elem.comp.globalData.frameRate;
            return obKey;
          }
          function key(ind) {
            var obKey;
            var iKey;
            var lenKey;
            if (!data.k.length || typeof data.k[0] === "number") {
              throw new Error("The property has no keyframe at index " + ind);
            }
            ind -= 1;
            obKey = {
              time: data.k[ind].t / elem.comp.globalData.frameRate,
              value: []
            };
            var arr = Object.prototype.hasOwnProperty.call(data.k[ind], "s") ? data.k[ind].s : data.k[ind - 1].e;
            lenKey = arr.length;
            for (iKey = 0; iKey < lenKey; iKey += 1) {
              obKey[iKey] = arr[iKey];
              obKey.value[iKey] = arr[iKey];
            }
            return obKey;
          }
          function framesToTime(fr2, fps) {
            if (!fps) {
              fps = elem.comp.globalData.frameRate;
            }
            return fr2 / fps;
          }
          function timeToFrames(t, fps) {
            if (!t && t !== 0) {
              t = time;
            }
            if (!fps) {
              fps = elem.comp.globalData.frameRate;
            }
            return t * fps;
          }
          function seedRandom(seed) {
            BMMath.seedrandom(randSeed + seed);
          }
          function sourceRectAtTime() {
            return elem.sourceRectAtTime();
          }
          function substring(init, end) {
            if (typeof value === "string") {
              if (end === void 0) {
                return value.substring(init);
              }
              return value.substring(init, end);
            }
            return "";
          }
          function substr(init, end) {
            if (typeof value === "string") {
              if (end === void 0) {
                return value.substr(init);
              }
              return value.substr(init, end);
            }
            return "";
          }
          function posterizeTime(framesPerSecond) {
            time = framesPerSecond === 0 ? 0 : Math.floor(time * framesPerSecond) / framesPerSecond;
            value = valueAtTime(time);
          }
          var time;
          var velocity;
          var value;
          var text;
          var textIndex;
          var textTotal;
          var selectorValue;
          var index = elem.data.ind;
          var hasParent = !!(elem.hierarchy && elem.hierarchy.length);
          var parent;
          var randSeed = Math.floor(Math.random() * 1e6);
          var globalData = elem.globalData;
          function executeExpression(_value) {
            value = _value;
            if (this.frameExpressionId === elem.globalData.frameId && this.propType !== "textSelector") {
              return value;
            }
            if (this.propType === "textSelector") {
              textIndex = this.textIndex;
              textTotal = this.textTotal;
              selectorValue = this.selectorValue;
            }
            if (!thisLayer) {
              text = elem.layerInterface.text;
              thisLayer = elem.layerInterface;
              thisComp = elem.comp.compInterface;
              toWorld = thisLayer.toWorld.bind(thisLayer);
              fromWorld = thisLayer.fromWorld.bind(thisLayer);
              fromComp = thisLayer.fromComp.bind(thisLayer);
              toComp = thisLayer.toComp.bind(thisLayer);
              mask = thisLayer.mask ? thisLayer.mask.bind(thisLayer) : null;
              fromCompToSurface = fromComp;
            }
            if (!transform) {
              transform = elem.layerInterface("ADBE Transform Group");
              $bm_transform = transform;
              if (transform) {
                anchorPoint = transform.anchorPoint;
              }
            }
            if (elemType === 4 && !content) {
              content = thisLayer("ADBE Root Vectors Group");
            }
            if (!effect) {
              effect = thisLayer(4);
            }
            hasParent = !!(elem.hierarchy && elem.hierarchy.length);
            if (hasParent && !parent) {
              parent = elem.hierarchy[0].layerInterface;
            }
            time = this.comp.renderedFrame / this.comp.globalData.frameRate;
            if (_needsRandom) {
              seedRandom(randSeed + time);
            }
            if (needsVelocity) {
              velocity = velocityAtTime(time);
            }
            expression_function();
            this.frameExpressionId = elem.globalData.frameId;
            scoped_bm_rt = scoped_bm_rt.propType === propTypes.SHAPE ? scoped_bm_rt.v : scoped_bm_rt;
            return scoped_bm_rt;
          }
          executeExpression.__preventDeadCodeRemoval = [$bm_transform, anchorPoint, time, velocity, inPoint, outPoint, width, height, name, loop_in, loop_out, smooth, toComp, fromCompToSurface, toWorld, fromWorld, mask, position, rotation, scale, thisComp, numKeys, active, wiggle, loopInDuration, loopOutDuration, comp, lookAt, easeOut, easeIn, ease, nearestKey, key, text, textIndex, textTotal, selectorValue, framesToTime, timeToFrames, sourceRectAtTime, substring, substr, posterizeTime, index, globalData];
          return executeExpression;
        }
        ob.initiateExpression = initiateExpression;
        ob.__preventDeadCodeRemoval = [window, document, XMLHttpRequest, fetch, frames, $bm_neg, add, $bm_sum, $bm_sub, $bm_mul, $bm_div, $bm_mod, clamp, radians_to_degrees, degreesToRadians, degrees_to_radians, normalize, rgbToHsl, hslToRgb, linear, random, createPath, _lottieGlobal];
        ob.resetFrame = resetFrame;
        return ob;
      }();
      var Expressions = function() {
        var ob2 = {};
        ob2.initExpressions = initExpressions;
        ob2.resetFrame = ExpressionManager.resetFrame;
        function initExpressions(animation) {
          var stackCount = 0;
          var registers = [];
          function pushExpression() {
            stackCount += 1;
          }
          function popExpression() {
            stackCount -= 1;
            if (stackCount === 0) {
              releaseInstances();
            }
          }
          function registerExpressionProperty(expression) {
            if (registers.indexOf(expression) === -1) {
              registers.push(expression);
            }
          }
          function releaseInstances() {
            var i6;
            var len = registers.length;
            for (i6 = 0; i6 < len; i6 += 1) {
              registers[i6].release();
            }
            registers.length = 0;
          }
          animation.renderer.compInterface = CompExpressionInterface(animation.renderer);
          animation.renderer.globalData.projectInterface.registerComposition(animation.renderer);
          animation.renderer.globalData.pushExpression = pushExpression;
          animation.renderer.globalData.popExpression = popExpression;
          animation.renderer.globalData.registerExpressionProperty = registerExpressionProperty;
        }
        return ob2;
      }();
      var MaskManagerInterface = function() {
        function MaskInterface(mask2, data2) {
          this._mask = mask2;
          this._data = data2;
        }
        Object.defineProperty(MaskInterface.prototype, "maskPath", {
          get: function get() {
            if (this._mask.prop.k) {
              this._mask.prop.getValue();
            }
            return this._mask.prop;
          }
        });
        Object.defineProperty(MaskInterface.prototype, "maskOpacity", {
          get: function get() {
            if (this._mask.op.k) {
              this._mask.op.getValue();
            }
            return this._mask.op.v * 100;
          }
        });
        var MaskManager = function MaskManager2(maskManager) {
          var _masksInterfaces = createSizedArray(maskManager.viewData.length);
          var i6;
          var len = maskManager.viewData.length;
          for (i6 = 0; i6 < len; i6 += 1) {
            _masksInterfaces[i6] = new MaskInterface(maskManager.viewData[i6], maskManager.masksProperties[i6]);
          }
          var maskFunction = function maskFunction2(name2) {
            i6 = 0;
            while (i6 < len) {
              if (maskManager.masksProperties[i6].nm === name2) {
                return _masksInterfaces[i6];
              }
              i6 += 1;
            }
            return null;
          };
          return maskFunction;
        };
        return MaskManager;
      }();
      var ExpressionPropertyInterface = function() {
        var defaultUnidimensionalValue = {
          pv: 0,
          v: 0,
          mult: 1
        };
        var defaultMultidimensionalValue = {
          pv: [0, 0, 0],
          v: [0, 0, 0],
          mult: 1
        };
        function completeProperty(expressionValue, property2, type4) {
          Object.defineProperty(expressionValue, "velocity", {
            get: function get() {
              return property2.getVelocityAtTime(property2.comp.currentFrame);
            }
          });
          expressionValue.numKeys = property2.keyframes ? property2.keyframes.length : 0;
          expressionValue.key = function(pos) {
            if (!expressionValue.numKeys) {
              return 0;
            }
            var value2 = "";
            if ("s" in property2.keyframes[pos - 1]) {
              value2 = property2.keyframes[pos - 1].s;
            } else if ("e" in property2.keyframes[pos - 2]) {
              value2 = property2.keyframes[pos - 2].e;
            } else {
              value2 = property2.keyframes[pos - 2].s;
            }
            var valueProp = type4 === "unidimensional" ? new Number(value2) : Object.assign({}, value2);
            valueProp.time = property2.keyframes[pos - 1].t / property2.elem.comp.globalData.frameRate;
            valueProp.value = type4 === "unidimensional" ? value2[0] : value2;
            return valueProp;
          };
          expressionValue.valueAtTime = property2.getValueAtTime;
          expressionValue.speedAtTime = property2.getSpeedAtTime;
          expressionValue.velocityAtTime = property2.getVelocityAtTime;
          expressionValue.propertyGroup = property2.propertyGroup;
        }
        function UnidimensionalPropertyInterface(property2) {
          if (!property2 || !("pv" in property2)) {
            property2 = defaultUnidimensionalValue;
          }
          var mult = 1 / property2.mult;
          var val2 = property2.pv * mult;
          var expressionValue = new Number(val2);
          expressionValue.value = val2;
          completeProperty(expressionValue, property2, "unidimensional");
          return function() {
            if (property2.k) {
              property2.getValue();
            }
            val2 = property2.v * mult;
            if (expressionValue.value !== val2) {
              expressionValue = new Number(val2);
              expressionValue.value = val2;
              expressionValue[0] = val2;
              completeProperty(expressionValue, property2, "unidimensional");
            }
            return expressionValue;
          };
        }
        function MultidimensionalPropertyInterface(property2) {
          if (!property2 || !("pv" in property2)) {
            property2 = defaultMultidimensionalValue;
          }
          var mult = 1 / property2.mult;
          var len = property2.data && property2.data.l || property2.pv.length;
          var expressionValue = createTypedArray("float32", len);
          var arrValue = createTypedArray("float32", len);
          expressionValue.value = arrValue;
          completeProperty(expressionValue, property2, "multidimensional");
          return function() {
            if (property2.k) {
              property2.getValue();
            }
            for (var i6 = 0; i6 < len; i6 += 1) {
              arrValue[i6] = property2.v[i6] * mult;
              expressionValue[i6] = arrValue[i6];
            }
            return expressionValue;
          };
        }
        function defaultGetter() {
          return defaultUnidimensionalValue;
        }
        return function(property2) {
          if (!property2) {
            return defaultGetter;
          }
          if (property2.propType === "unidimensional") {
            return UnidimensionalPropertyInterface(property2);
          }
          return MultidimensionalPropertyInterface(property2);
        };
      }();
      var TransformExpressionInterface = function() {
        return function(transform2) {
          function _thisFunction(name2) {
            switch (name2) {
              case "scale":
              case "Scale":
              case "ADBE Scale":
              case 6:
                return _thisFunction.scale;
              case "rotation":
              case "Rotation":
              case "ADBE Rotation":
              case "ADBE Rotate Z":
              case 10:
                return _thisFunction.rotation;
              case "ADBE Rotate X":
                return _thisFunction.xRotation;
              case "ADBE Rotate Y":
                return _thisFunction.yRotation;
              case "position":
              case "Position":
              case "ADBE Position":
              case 2:
                return _thisFunction.position;
              case "ADBE Position_0":
                return _thisFunction.xPosition;
              case "ADBE Position_1":
                return _thisFunction.yPosition;
              case "ADBE Position_2":
                return _thisFunction.zPosition;
              case "anchorPoint":
              case "AnchorPoint":
              case "Anchor Point":
              case "ADBE AnchorPoint":
              case 1:
                return _thisFunction.anchorPoint;
              case "opacity":
              case "Opacity":
              case 11:
                return _thisFunction.opacity;
              default:
                return null;
            }
          }
          Object.defineProperty(_thisFunction, "rotation", {
            get: ExpressionPropertyInterface(transform2.r || transform2.rz)
          });
          Object.defineProperty(_thisFunction, "zRotation", {
            get: ExpressionPropertyInterface(transform2.rz || transform2.r)
          });
          Object.defineProperty(_thisFunction, "xRotation", {
            get: ExpressionPropertyInterface(transform2.rx)
          });
          Object.defineProperty(_thisFunction, "yRotation", {
            get: ExpressionPropertyInterface(transform2.ry)
          });
          Object.defineProperty(_thisFunction, "scale", {
            get: ExpressionPropertyInterface(transform2.s)
          });
          var _px;
          var _py;
          var _pz;
          var _transformFactory;
          if (transform2.p) {
            _transformFactory = ExpressionPropertyInterface(transform2.p);
          } else {
            _px = ExpressionPropertyInterface(transform2.px);
            _py = ExpressionPropertyInterface(transform2.py);
            if (transform2.pz) {
              _pz = ExpressionPropertyInterface(transform2.pz);
            }
          }
          Object.defineProperty(_thisFunction, "position", {
            get: function get() {
              if (transform2.p) {
                return _transformFactory();
              }
              return [_px(), _py(), _pz ? _pz() : 0];
            }
          });
          Object.defineProperty(_thisFunction, "xPosition", {
            get: ExpressionPropertyInterface(transform2.px)
          });
          Object.defineProperty(_thisFunction, "yPosition", {
            get: ExpressionPropertyInterface(transform2.py)
          });
          Object.defineProperty(_thisFunction, "zPosition", {
            get: ExpressionPropertyInterface(transform2.pz)
          });
          Object.defineProperty(_thisFunction, "anchorPoint", {
            get: ExpressionPropertyInterface(transform2.a)
          });
          Object.defineProperty(_thisFunction, "opacity", {
            get: ExpressionPropertyInterface(transform2.o)
          });
          Object.defineProperty(_thisFunction, "skew", {
            get: ExpressionPropertyInterface(transform2.sk)
          });
          Object.defineProperty(_thisFunction, "skewAxis", {
            get: ExpressionPropertyInterface(transform2.sa)
          });
          Object.defineProperty(_thisFunction, "orientation", {
            get: ExpressionPropertyInterface(transform2.or)
          });
          return _thisFunction;
        };
      }();
      var LayerExpressionInterface = function() {
        function getMatrix(time2) {
          var toWorldMat = new Matrix();
          if (time2 !== void 0) {
            var propMatrix = this._elem.finalTransform.mProp.getValueAtTime(time2);
            propMatrix.clone(toWorldMat);
          } else {
            var transformMat = this._elem.finalTransform.mProp;
            transformMat.applyToMatrix(toWorldMat);
          }
          return toWorldMat;
        }
        function toWorldVec(arr, time2) {
          var toWorldMat = this.getMatrix(time2);
          toWorldMat.props[12] = 0;
          toWorldMat.props[13] = 0;
          toWorldMat.props[14] = 0;
          return this.applyPoint(toWorldMat, arr);
        }
        function toWorld2(arr, time2) {
          var toWorldMat = this.getMatrix(time2);
          return this.applyPoint(toWorldMat, arr);
        }
        function fromWorldVec(arr, time2) {
          var toWorldMat = this.getMatrix(time2);
          toWorldMat.props[12] = 0;
          toWorldMat.props[13] = 0;
          toWorldMat.props[14] = 0;
          return this.invertPoint(toWorldMat, arr);
        }
        function fromWorld2(arr, time2) {
          var toWorldMat = this.getMatrix(time2);
          return this.invertPoint(toWorldMat, arr);
        }
        function applyPoint(matrix, arr) {
          if (this._elem.hierarchy && this._elem.hierarchy.length) {
            var i6;
            var len = this._elem.hierarchy.length;
            for (i6 = 0; i6 < len; i6 += 1) {
              this._elem.hierarchy[i6].finalTransform.mProp.applyToMatrix(matrix);
            }
          }
          return matrix.applyToPointArray(arr[0], arr[1], arr[2] || 0);
        }
        function invertPoint(matrix, arr) {
          if (this._elem.hierarchy && this._elem.hierarchy.length) {
            var i6;
            var len = this._elem.hierarchy.length;
            for (i6 = 0; i6 < len; i6 += 1) {
              this._elem.hierarchy[i6].finalTransform.mProp.applyToMatrix(matrix);
            }
          }
          return matrix.inversePoint(arr);
        }
        function fromComp2(arr) {
          var toWorldMat = new Matrix();
          toWorldMat.reset();
          this._elem.finalTransform.mProp.applyToMatrix(toWorldMat);
          if (this._elem.hierarchy && this._elem.hierarchy.length) {
            var i6;
            var len = this._elem.hierarchy.length;
            for (i6 = 0; i6 < len; i6 += 1) {
              this._elem.hierarchy[i6].finalTransform.mProp.applyToMatrix(toWorldMat);
            }
            return toWorldMat.inversePoint(arr);
          }
          return toWorldMat.inversePoint(arr);
        }
        function sampleImage() {
          return [1, 1, 1, 1];
        }
        return function(elem2) {
          var transformInterface;
          function _registerMaskInterface(maskManager) {
            _thisLayerFunction.mask = new MaskManagerInterface(maskManager, elem2);
          }
          function _registerEffectsInterface(effects) {
            _thisLayerFunction.effect = effects;
          }
          function _thisLayerFunction(name2) {
            switch (name2) {
              case "ADBE Root Vectors Group":
              case "Contents":
              case 2:
                return _thisLayerFunction.shapeInterface;
              case 1:
              case 6:
              case "Transform":
              case "transform":
              case "ADBE Transform Group":
                return transformInterface;
              case 4:
              case "ADBE Effect Parade":
              case "effects":
              case "Effects":
                return _thisLayerFunction.effect;
              case "ADBE Text Properties":
                return _thisLayerFunction.textInterface;
              default:
                return null;
            }
          }
          _thisLayerFunction.getMatrix = getMatrix;
          _thisLayerFunction.invertPoint = invertPoint;
          _thisLayerFunction.applyPoint = applyPoint;
          _thisLayerFunction.toWorld = toWorld2;
          _thisLayerFunction.toWorldVec = toWorldVec;
          _thisLayerFunction.fromWorld = fromWorld2;
          _thisLayerFunction.fromWorldVec = fromWorldVec;
          _thisLayerFunction.toComp = toWorld2;
          _thisLayerFunction.fromComp = fromComp2;
          _thisLayerFunction.sampleImage = sampleImage;
          _thisLayerFunction.sourceRectAtTime = elem2.sourceRectAtTime.bind(elem2);
          _thisLayerFunction._elem = elem2;
          transformInterface = TransformExpressionInterface(elem2.finalTransform.mProp);
          var anchorPointDescriptor = getDescriptor(transformInterface, "anchorPoint");
          Object.defineProperties(_thisLayerFunction, {
            hasParent: {
              get: function get() {
                return elem2.hierarchy.length;
              }
            },
            parent: {
              get: function get() {
                return elem2.hierarchy[0].layerInterface;
              }
            },
            rotation: getDescriptor(transformInterface, "rotation"),
            scale: getDescriptor(transformInterface, "scale"),
            position: getDescriptor(transformInterface, "position"),
            opacity: getDescriptor(transformInterface, "opacity"),
            anchorPoint: anchorPointDescriptor,
            anchor_point: anchorPointDescriptor,
            transform: {
              get: function get() {
                return transformInterface;
              }
            },
            active: {
              get: function get() {
                return elem2.isInRange;
              }
            }
          });
          _thisLayerFunction.startTime = elem2.data.st;
          _thisLayerFunction.index = elem2.data.ind;
          _thisLayerFunction.source = elem2.data.refId;
          _thisLayerFunction.height = elem2.data.ty === 0 ? elem2.data.h : 100;
          _thisLayerFunction.width = elem2.data.ty === 0 ? elem2.data.w : 100;
          _thisLayerFunction.inPoint = elem2.data.ip / elem2.comp.globalData.frameRate;
          _thisLayerFunction.outPoint = elem2.data.op / elem2.comp.globalData.frameRate;
          _thisLayerFunction._name = elem2.data.nm;
          _thisLayerFunction.registerMaskInterface = _registerMaskInterface;
          _thisLayerFunction.registerEffectsInterface = _registerEffectsInterface;
          return _thisLayerFunction;
        };
      }();
      var propertyGroupFactory = function() {
        return function(interfaceFunction, parentPropertyGroup) {
          return function(val2) {
            val2 = val2 === void 0 ? 1 : val2;
            if (val2 <= 0) {
              return interfaceFunction;
            }
            return parentPropertyGroup(val2 - 1);
          };
        };
      }();
      var PropertyInterface = function() {
        return function(propertyName, propertyGroup) {
          var interfaceFunction = {
            _name: propertyName
          };
          function _propertyGroup(val2) {
            val2 = val2 === void 0 ? 1 : val2;
            if (val2 <= 0) {
              return interfaceFunction;
            }
            return propertyGroup(val2 - 1);
          }
          return _propertyGroup;
        };
      }();
      var EffectsExpressionInterface = function() {
        var ob2 = {
          createEffectsInterface
        };
        function createEffectsInterface(elem2, propertyGroup) {
          if (elem2.effectsManager) {
            var effectElements = [];
            var effectsData = elem2.data.ef;
            var i6;
            var len = elem2.effectsManager.effectElements.length;
            for (i6 = 0; i6 < len; i6 += 1) {
              effectElements.push(createGroupInterface(effectsData[i6], elem2.effectsManager.effectElements[i6], propertyGroup, elem2));
            }
            var effects = elem2.data.ef || [];
            var groupInterface = function groupInterface2(name2) {
              i6 = 0;
              len = effects.length;
              while (i6 < len) {
                if (name2 === effects[i6].nm || name2 === effects[i6].mn || name2 === effects[i6].ix) {
                  return effectElements[i6];
                }
                i6 += 1;
              }
              return null;
            };
            Object.defineProperty(groupInterface, "numProperties", {
              get: function get() {
                return effects.length;
              }
            });
            return groupInterface;
          }
          return null;
        }
        function createGroupInterface(data2, elements, propertyGroup, elem2) {
          function groupInterface(name2) {
            var effects = data2.ef;
            var i7 = 0;
            var len2 = effects.length;
            while (i7 < len2) {
              if (name2 === effects[i7].nm || name2 === effects[i7].mn || name2 === effects[i7].ix) {
                if (effects[i7].ty === 5) {
                  return effectElements[i7];
                }
                return effectElements[i7]();
              }
              i7 += 1;
            }
            throw new Error();
          }
          var _propertyGroup = propertyGroupFactory(groupInterface, propertyGroup);
          var effectElements = [];
          var i6;
          var len = data2.ef.length;
          for (i6 = 0; i6 < len; i6 += 1) {
            if (data2.ef[i6].ty === 5) {
              effectElements.push(createGroupInterface(data2.ef[i6], elements.effectElements[i6], elements.effectElements[i6].propertyGroup, elem2));
            } else {
              effectElements.push(createValueInterface(elements.effectElements[i6], data2.ef[i6].ty, elem2, _propertyGroup));
            }
          }
          if (data2.mn === "ADBE Color Control") {
            Object.defineProperty(groupInterface, "color", {
              get: function get() {
                return effectElements[0]();
              }
            });
          }
          Object.defineProperties(groupInterface, {
            numProperties: {
              get: function get() {
                return data2.np;
              }
            },
            _name: {
              value: data2.nm
            },
            propertyGroup: {
              value: _propertyGroup
            }
          });
          groupInterface.enabled = data2.en !== 0;
          groupInterface.active = groupInterface.enabled;
          return groupInterface;
        }
        function createValueInterface(element, type4, elem2, propertyGroup) {
          var expressionProperty = ExpressionPropertyInterface(element.p);
          function interfaceFunction() {
            if (type4 === 10) {
              return elem2.comp.compInterface(element.p.v);
            }
            return expressionProperty();
          }
          if (element.p.setGroupProperty) {
            element.p.setGroupProperty(PropertyInterface("", propertyGroup));
          }
          return interfaceFunction;
        }
        return ob2;
      }();
      var ShapePathInterface = function() {
        return function pathInterfaceFactory(shape, view, propertyGroup) {
          var prop = view.sh;
          function interfaceFunction(val2) {
            if (val2 === "Shape" || val2 === "shape" || val2 === "Path" || val2 === "path" || val2 === "ADBE Vector Shape" || val2 === 2) {
              return interfaceFunction.path;
            }
            return null;
          }
          var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
          prop.setGroupProperty(PropertyInterface("Path", _propertyGroup));
          Object.defineProperties(interfaceFunction, {
            path: {
              get: function get() {
                if (prop.k) {
                  prop.getValue();
                }
                return prop;
              }
            },
            shape: {
              get: function get() {
                if (prop.k) {
                  prop.getValue();
                }
                return prop;
              }
            },
            _name: {
              value: shape.nm
            },
            ix: {
              value: shape.ix
            },
            propertyIndex: {
              value: shape.ix
            },
            mn: {
              value: shape.mn
            },
            propertyGroup: {
              value: propertyGroup
            }
          });
          return interfaceFunction;
        };
      }();
      var ShapeExpressionInterface = function() {
        function iterateElements(shapes, view, propertyGroup) {
          var arr = [];
          var i6;
          var len = shapes ? shapes.length : 0;
          for (i6 = 0; i6 < len; i6 += 1) {
            if (shapes[i6].ty === "gr") {
              arr.push(groupInterfaceFactory(shapes[i6], view[i6], propertyGroup));
            } else if (shapes[i6].ty === "fl") {
              arr.push(fillInterfaceFactory(shapes[i6], view[i6], propertyGroup));
            } else if (shapes[i6].ty === "st") {
              arr.push(strokeInterfaceFactory(shapes[i6], view[i6], propertyGroup));
            } else if (shapes[i6].ty === "tm") {
              arr.push(trimInterfaceFactory(shapes[i6], view[i6], propertyGroup));
            } else if (shapes[i6].ty === "tr") {
            } else if (shapes[i6].ty === "el") {
              arr.push(ellipseInterfaceFactory(shapes[i6], view[i6], propertyGroup));
            } else if (shapes[i6].ty === "sr") {
              arr.push(starInterfaceFactory(shapes[i6], view[i6], propertyGroup));
            } else if (shapes[i6].ty === "sh") {
              arr.push(ShapePathInterface(shapes[i6], view[i6], propertyGroup));
            } else if (shapes[i6].ty === "rc") {
              arr.push(rectInterfaceFactory(shapes[i6], view[i6], propertyGroup));
            } else if (shapes[i6].ty === "rd") {
              arr.push(roundedInterfaceFactory(shapes[i6], view[i6], propertyGroup));
            } else if (shapes[i6].ty === "rp") {
              arr.push(repeaterInterfaceFactory(shapes[i6], view[i6], propertyGroup));
            } else if (shapes[i6].ty === "gf") {
              arr.push(gradientFillInterfaceFactory(shapes[i6], view[i6], propertyGroup));
            } else {
              arr.push(defaultInterfaceFactory(shapes[i6], view[i6], propertyGroup));
            }
          }
          return arr;
        }
        function contentsInterfaceFactory(shape, view, propertyGroup) {
          var interfaces2;
          var interfaceFunction = function _interfaceFunction(value2) {
            var i6 = 0;
            var len = interfaces2.length;
            while (i6 < len) {
              if (interfaces2[i6]._name === value2 || interfaces2[i6].mn === value2 || interfaces2[i6].propertyIndex === value2 || interfaces2[i6].ix === value2 || interfaces2[i6].ind === value2) {
                return interfaces2[i6];
              }
              i6 += 1;
            }
            if (typeof value2 === "number") {
              return interfaces2[value2 - 1];
            }
            return null;
          };
          interfaceFunction.propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
          interfaces2 = iterateElements(shape.it, view.it, interfaceFunction.propertyGroup);
          interfaceFunction.numProperties = interfaces2.length;
          var transformInterface = transformInterfaceFactory(shape.it[shape.it.length - 1], view.it[view.it.length - 1], interfaceFunction.propertyGroup);
          interfaceFunction.transform = transformInterface;
          interfaceFunction.propertyIndex = shape.cix;
          interfaceFunction._name = shape.nm;
          return interfaceFunction;
        }
        function groupInterfaceFactory(shape, view, propertyGroup) {
          var interfaceFunction = function _interfaceFunction(value2) {
            switch (value2) {
              case "ADBE Vectors Group":
              case "Contents":
              case 2:
                return interfaceFunction.content;
              default:
                return interfaceFunction.transform;
            }
          };
          interfaceFunction.propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
          var content2 = contentsInterfaceFactory(shape, view, interfaceFunction.propertyGroup);
          var transformInterface = transformInterfaceFactory(shape.it[shape.it.length - 1], view.it[view.it.length - 1], interfaceFunction.propertyGroup);
          interfaceFunction.content = content2;
          interfaceFunction.transform = transformInterface;
          Object.defineProperty(interfaceFunction, "_name", {
            get: function get() {
              return shape.nm;
            }
          });
          interfaceFunction.numProperties = shape.np;
          interfaceFunction.propertyIndex = shape.ix;
          interfaceFunction.nm = shape.nm;
          interfaceFunction.mn = shape.mn;
          return interfaceFunction;
        }
        function fillInterfaceFactory(shape, view, propertyGroup) {
          function interfaceFunction(val2) {
            if (val2 === "Color" || val2 === "color") {
              return interfaceFunction.color;
            }
            if (val2 === "Opacity" || val2 === "opacity") {
              return interfaceFunction.opacity;
            }
            return null;
          }
          Object.defineProperties(interfaceFunction, {
            color: {
              get: ExpressionPropertyInterface(view.c)
            },
            opacity: {
              get: ExpressionPropertyInterface(view.o)
            },
            _name: {
              value: shape.nm
            },
            mn: {
              value: shape.mn
            }
          });
          view.c.setGroupProperty(PropertyInterface("Color", propertyGroup));
          view.o.setGroupProperty(PropertyInterface("Opacity", propertyGroup));
          return interfaceFunction;
        }
        function gradientFillInterfaceFactory(shape, view, propertyGroup) {
          function interfaceFunction(val2) {
            if (val2 === "Start Point" || val2 === "start point") {
              return interfaceFunction.startPoint;
            }
            if (val2 === "End Point" || val2 === "end point") {
              return interfaceFunction.endPoint;
            }
            if (val2 === "Opacity" || val2 === "opacity") {
              return interfaceFunction.opacity;
            }
            return null;
          }
          Object.defineProperties(interfaceFunction, {
            startPoint: {
              get: ExpressionPropertyInterface(view.s)
            },
            endPoint: {
              get: ExpressionPropertyInterface(view.e)
            },
            opacity: {
              get: ExpressionPropertyInterface(view.o)
            },
            type: {
              get: function get() {
                return "a";
              }
            },
            _name: {
              value: shape.nm
            },
            mn: {
              value: shape.mn
            }
          });
          view.s.setGroupProperty(PropertyInterface("Start Point", propertyGroup));
          view.e.setGroupProperty(PropertyInterface("End Point", propertyGroup));
          view.o.setGroupProperty(PropertyInterface("Opacity", propertyGroup));
          return interfaceFunction;
        }
        function defaultInterfaceFactory() {
          function interfaceFunction() {
            return null;
          }
          return interfaceFunction;
        }
        function strokeInterfaceFactory(shape, view, propertyGroup) {
          var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
          var _dashPropertyGroup = propertyGroupFactory(dashOb, _propertyGroup);
          function addPropertyToDashOb(i7) {
            Object.defineProperty(dashOb, shape.d[i7].nm, {
              get: ExpressionPropertyInterface(view.d.dataProps[i7].p)
            });
          }
          var i6;
          var len = shape.d ? shape.d.length : 0;
          var dashOb = {};
          for (i6 = 0; i6 < len; i6 += 1) {
            addPropertyToDashOb(i6);
            view.d.dataProps[i6].p.setGroupProperty(_dashPropertyGroup);
          }
          function interfaceFunction(val2) {
            if (val2 === "Color" || val2 === "color") {
              return interfaceFunction.color;
            }
            if (val2 === "Opacity" || val2 === "opacity") {
              return interfaceFunction.opacity;
            }
            if (val2 === "Stroke Width" || val2 === "stroke width") {
              return interfaceFunction.strokeWidth;
            }
            return null;
          }
          Object.defineProperties(interfaceFunction, {
            color: {
              get: ExpressionPropertyInterface(view.c)
            },
            opacity: {
              get: ExpressionPropertyInterface(view.o)
            },
            strokeWidth: {
              get: ExpressionPropertyInterface(view.w)
            },
            dash: {
              get: function get() {
                return dashOb;
              }
            },
            _name: {
              value: shape.nm
            },
            mn: {
              value: shape.mn
            }
          });
          view.c.setGroupProperty(PropertyInterface("Color", _propertyGroup));
          view.o.setGroupProperty(PropertyInterface("Opacity", _propertyGroup));
          view.w.setGroupProperty(PropertyInterface("Stroke Width", _propertyGroup));
          return interfaceFunction;
        }
        function trimInterfaceFactory(shape, view, propertyGroup) {
          function interfaceFunction(val2) {
            if (val2 === shape.e.ix || val2 === "End" || val2 === "end") {
              return interfaceFunction.end;
            }
            if (val2 === shape.s.ix) {
              return interfaceFunction.start;
            }
            if (val2 === shape.o.ix) {
              return interfaceFunction.offset;
            }
            return null;
          }
          var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
          interfaceFunction.propertyIndex = shape.ix;
          view.s.setGroupProperty(PropertyInterface("Start", _propertyGroup));
          view.e.setGroupProperty(PropertyInterface("End", _propertyGroup));
          view.o.setGroupProperty(PropertyInterface("Offset", _propertyGroup));
          interfaceFunction.propertyIndex = shape.ix;
          interfaceFunction.propertyGroup = propertyGroup;
          Object.defineProperties(interfaceFunction, {
            start: {
              get: ExpressionPropertyInterface(view.s)
            },
            end: {
              get: ExpressionPropertyInterface(view.e)
            },
            offset: {
              get: ExpressionPropertyInterface(view.o)
            },
            _name: {
              value: shape.nm
            }
          });
          interfaceFunction.mn = shape.mn;
          return interfaceFunction;
        }
        function transformInterfaceFactory(shape, view, propertyGroup) {
          function interfaceFunction(value2) {
            if (shape.a.ix === value2 || value2 === "Anchor Point") {
              return interfaceFunction.anchorPoint;
            }
            if (shape.o.ix === value2 || value2 === "Opacity") {
              return interfaceFunction.opacity;
            }
            if (shape.p.ix === value2 || value2 === "Position") {
              return interfaceFunction.position;
            }
            if (shape.r.ix === value2 || value2 === "Rotation" || value2 === "ADBE Vector Rotation") {
              return interfaceFunction.rotation;
            }
            if (shape.s.ix === value2 || value2 === "Scale") {
              return interfaceFunction.scale;
            }
            if (shape.sk && shape.sk.ix === value2 || value2 === "Skew") {
              return interfaceFunction.skew;
            }
            if (shape.sa && shape.sa.ix === value2 || value2 === "Skew Axis") {
              return interfaceFunction.skewAxis;
            }
            return null;
          }
          var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
          view.transform.mProps.o.setGroupProperty(PropertyInterface("Opacity", _propertyGroup));
          view.transform.mProps.p.setGroupProperty(PropertyInterface("Position", _propertyGroup));
          view.transform.mProps.a.setGroupProperty(PropertyInterface("Anchor Point", _propertyGroup));
          view.transform.mProps.s.setGroupProperty(PropertyInterface("Scale", _propertyGroup));
          view.transform.mProps.r.setGroupProperty(PropertyInterface("Rotation", _propertyGroup));
          if (view.transform.mProps.sk) {
            view.transform.mProps.sk.setGroupProperty(PropertyInterface("Skew", _propertyGroup));
            view.transform.mProps.sa.setGroupProperty(PropertyInterface("Skew Angle", _propertyGroup));
          }
          view.transform.op.setGroupProperty(PropertyInterface("Opacity", _propertyGroup));
          Object.defineProperties(interfaceFunction, {
            opacity: {
              get: ExpressionPropertyInterface(view.transform.mProps.o)
            },
            position: {
              get: ExpressionPropertyInterface(view.transform.mProps.p)
            },
            anchorPoint: {
              get: ExpressionPropertyInterface(view.transform.mProps.a)
            },
            scale: {
              get: ExpressionPropertyInterface(view.transform.mProps.s)
            },
            rotation: {
              get: ExpressionPropertyInterface(view.transform.mProps.r)
            },
            skew: {
              get: ExpressionPropertyInterface(view.transform.mProps.sk)
            },
            skewAxis: {
              get: ExpressionPropertyInterface(view.transform.mProps.sa)
            },
            _name: {
              value: shape.nm
            }
          });
          interfaceFunction.ty = "tr";
          interfaceFunction.mn = shape.mn;
          interfaceFunction.propertyGroup = propertyGroup;
          return interfaceFunction;
        }
        function ellipseInterfaceFactory(shape, view, propertyGroup) {
          function interfaceFunction(value2) {
            if (shape.p.ix === value2) {
              return interfaceFunction.position;
            }
            if (shape.s.ix === value2) {
              return interfaceFunction.size;
            }
            return null;
          }
          var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
          interfaceFunction.propertyIndex = shape.ix;
          var prop = view.sh.ty === "tm" ? view.sh.prop : view.sh;
          prop.s.setGroupProperty(PropertyInterface("Size", _propertyGroup));
          prop.p.setGroupProperty(PropertyInterface("Position", _propertyGroup));
          Object.defineProperties(interfaceFunction, {
            size: {
              get: ExpressionPropertyInterface(prop.s)
            },
            position: {
              get: ExpressionPropertyInterface(prop.p)
            },
            _name: {
              value: shape.nm
            }
          });
          interfaceFunction.mn = shape.mn;
          return interfaceFunction;
        }
        function starInterfaceFactory(shape, view, propertyGroup) {
          function interfaceFunction(value2) {
            if (shape.p.ix === value2) {
              return interfaceFunction.position;
            }
            if (shape.r.ix === value2) {
              return interfaceFunction.rotation;
            }
            if (shape.pt.ix === value2) {
              return interfaceFunction.points;
            }
            if (shape.or.ix === value2 || value2 === "ADBE Vector Star Outer Radius") {
              return interfaceFunction.outerRadius;
            }
            if (shape.os.ix === value2) {
              return interfaceFunction.outerRoundness;
            }
            if (shape.ir && (shape.ir.ix === value2 || value2 === "ADBE Vector Star Inner Radius")) {
              return interfaceFunction.innerRadius;
            }
            if (shape.is && shape.is.ix === value2) {
              return interfaceFunction.innerRoundness;
            }
            return null;
          }
          var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
          var prop = view.sh.ty === "tm" ? view.sh.prop : view.sh;
          interfaceFunction.propertyIndex = shape.ix;
          prop.or.setGroupProperty(PropertyInterface("Outer Radius", _propertyGroup));
          prop.os.setGroupProperty(PropertyInterface("Outer Roundness", _propertyGroup));
          prop.pt.setGroupProperty(PropertyInterface("Points", _propertyGroup));
          prop.p.setGroupProperty(PropertyInterface("Position", _propertyGroup));
          prop.r.setGroupProperty(PropertyInterface("Rotation", _propertyGroup));
          if (shape.ir) {
            prop.ir.setGroupProperty(PropertyInterface("Inner Radius", _propertyGroup));
            prop.is.setGroupProperty(PropertyInterface("Inner Roundness", _propertyGroup));
          }
          Object.defineProperties(interfaceFunction, {
            position: {
              get: ExpressionPropertyInterface(prop.p)
            },
            rotation: {
              get: ExpressionPropertyInterface(prop.r)
            },
            points: {
              get: ExpressionPropertyInterface(prop.pt)
            },
            outerRadius: {
              get: ExpressionPropertyInterface(prop.or)
            },
            outerRoundness: {
              get: ExpressionPropertyInterface(prop.os)
            },
            innerRadius: {
              get: ExpressionPropertyInterface(prop.ir)
            },
            innerRoundness: {
              get: ExpressionPropertyInterface(prop.is)
            },
            _name: {
              value: shape.nm
            }
          });
          interfaceFunction.mn = shape.mn;
          return interfaceFunction;
        }
        function rectInterfaceFactory(shape, view, propertyGroup) {
          function interfaceFunction(value2) {
            if (shape.p.ix === value2) {
              return interfaceFunction.position;
            }
            if (shape.r.ix === value2) {
              return interfaceFunction.roundness;
            }
            if (shape.s.ix === value2 || value2 === "Size" || value2 === "ADBE Vector Rect Size") {
              return interfaceFunction.size;
            }
            return null;
          }
          var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
          var prop = view.sh.ty === "tm" ? view.sh.prop : view.sh;
          interfaceFunction.propertyIndex = shape.ix;
          prop.p.setGroupProperty(PropertyInterface("Position", _propertyGroup));
          prop.s.setGroupProperty(PropertyInterface("Size", _propertyGroup));
          prop.r.setGroupProperty(PropertyInterface("Rotation", _propertyGroup));
          Object.defineProperties(interfaceFunction, {
            position: {
              get: ExpressionPropertyInterface(prop.p)
            },
            roundness: {
              get: ExpressionPropertyInterface(prop.r)
            },
            size: {
              get: ExpressionPropertyInterface(prop.s)
            },
            _name: {
              value: shape.nm
            }
          });
          interfaceFunction.mn = shape.mn;
          return interfaceFunction;
        }
        function roundedInterfaceFactory(shape, view, propertyGroup) {
          function interfaceFunction(value2) {
            if (shape.r.ix === value2 || value2 === "Round Corners 1") {
              return interfaceFunction.radius;
            }
            return null;
          }
          var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
          var prop = view;
          interfaceFunction.propertyIndex = shape.ix;
          prop.rd.setGroupProperty(PropertyInterface("Radius", _propertyGroup));
          Object.defineProperties(interfaceFunction, {
            radius: {
              get: ExpressionPropertyInterface(prop.rd)
            },
            _name: {
              value: shape.nm
            }
          });
          interfaceFunction.mn = shape.mn;
          return interfaceFunction;
        }
        function repeaterInterfaceFactory(shape, view, propertyGroup) {
          function interfaceFunction(value2) {
            if (shape.c.ix === value2 || value2 === "Copies") {
              return interfaceFunction.copies;
            }
            if (shape.o.ix === value2 || value2 === "Offset") {
              return interfaceFunction.offset;
            }
            return null;
          }
          var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
          var prop = view;
          interfaceFunction.propertyIndex = shape.ix;
          prop.c.setGroupProperty(PropertyInterface("Copies", _propertyGroup));
          prop.o.setGroupProperty(PropertyInterface("Offset", _propertyGroup));
          Object.defineProperties(interfaceFunction, {
            copies: {
              get: ExpressionPropertyInterface(prop.c)
            },
            offset: {
              get: ExpressionPropertyInterface(prop.o)
            },
            _name: {
              value: shape.nm
            }
          });
          interfaceFunction.mn = shape.mn;
          return interfaceFunction;
        }
        return function(shapes, view, propertyGroup) {
          var interfaces2;
          function _interfaceFunction(value2) {
            if (typeof value2 === "number") {
              value2 = value2 === void 0 ? 1 : value2;
              if (value2 === 0) {
                return propertyGroup;
              }
              return interfaces2[value2 - 1];
            }
            var i6 = 0;
            var len = interfaces2.length;
            while (i6 < len) {
              if (interfaces2[i6]._name === value2) {
                return interfaces2[i6];
              }
              i6 += 1;
            }
            return null;
          }
          function parentGroupWrapper() {
            return propertyGroup;
          }
          _interfaceFunction.propertyGroup = propertyGroupFactory(_interfaceFunction, parentGroupWrapper);
          interfaces2 = iterateElements(shapes, view, _interfaceFunction.propertyGroup);
          _interfaceFunction.numProperties = interfaces2.length;
          _interfaceFunction._name = "Contents";
          return _interfaceFunction;
        };
      }();
      var TextExpressionInterface = function() {
        return function(elem2) {
          var _sourceText;
          function _thisLayerFunction(name2) {
            switch (name2) {
              case "ADBE Text Document":
                return _thisLayerFunction.sourceText;
              default:
                return null;
            }
          }
          Object.defineProperty(_thisLayerFunction, "sourceText", {
            get: function get() {
              elem2.textProperty.getValue();
              var stringValue = elem2.textProperty.currentData.t;
              if (!_sourceText || stringValue !== _sourceText.value) {
                _sourceText = new String(stringValue);
                _sourceText.value = stringValue || new String(stringValue);
                Object.defineProperty(_sourceText, "style", {
                  get: function get2() {
                    return {
                      fillColor: elem2.textProperty.currentData.fc
                    };
                  }
                });
              }
              return _sourceText;
            }
          });
          return _thisLayerFunction;
        };
      }();
      function _typeof(o) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof(o);
      }
      var FootageInterface = function() {
        var outlineInterfaceFactory = function outlineInterfaceFactory2(elem2) {
          var currentPropertyName = "";
          var currentProperty = elem2.getFootageData();
          function init() {
            currentPropertyName = "";
            currentProperty = elem2.getFootageData();
            return searchProperty;
          }
          function searchProperty(value2) {
            if (currentProperty[value2]) {
              currentPropertyName = value2;
              currentProperty = currentProperty[value2];
              if (_typeof(currentProperty) === "object") {
                return searchProperty;
              }
              return currentProperty;
            }
            var propertyNameIndex = value2.indexOf(currentPropertyName);
            if (propertyNameIndex !== -1) {
              var index2 = parseInt(value2.substr(propertyNameIndex + currentPropertyName.length), 10);
              currentProperty = currentProperty[index2];
              if (_typeof(currentProperty) === "object") {
                return searchProperty;
              }
              return currentProperty;
            }
            return "";
          }
          return init;
        };
        var dataInterfaceFactory = function dataInterfaceFactory2(elem2) {
          function interfaceFunction(value2) {
            if (value2 === "Outline") {
              return interfaceFunction.outlineInterface();
            }
            return null;
          }
          interfaceFunction._name = "Outline";
          interfaceFunction.outlineInterface = outlineInterfaceFactory(elem2);
          return interfaceFunction;
        };
        return function(elem2) {
          function _interfaceFunction(value2) {
            if (value2 === "Data") {
              return _interfaceFunction.dataInterface;
            }
            return null;
          }
          _interfaceFunction._name = "Data";
          _interfaceFunction.dataInterface = dataInterfaceFactory(elem2);
          return _interfaceFunction;
        };
      }();
      var interfaces = {
        layer: LayerExpressionInterface,
        effects: EffectsExpressionInterface,
        comp: CompExpressionInterface,
        shape: ShapeExpressionInterface,
        text: TextExpressionInterface,
        footage: FootageInterface
      };
      function getInterface(type4) {
        return interfaces[type4] || null;
      }
      var expressionHelpers = function() {
        function searchExpressions(elem2, data2, prop) {
          if (data2.x) {
            prop.k = true;
            prop.x = true;
            prop.initiateExpression = ExpressionManager.initiateExpression;
            prop.effectsSequence.push(prop.initiateExpression(elem2, data2, prop).bind(prop));
          }
        }
        function getValueAtTime(frameNum) {
          frameNum *= this.elem.globalData.frameRate;
          frameNum -= this.offsetTime;
          if (frameNum !== this._cachingAtTime.lastFrame) {
            this._cachingAtTime.lastIndex = this._cachingAtTime.lastFrame < frameNum ? this._cachingAtTime.lastIndex : 0;
            this._cachingAtTime.value = this.interpolateValue(frameNum, this._cachingAtTime);
            this._cachingAtTime.lastFrame = frameNum;
          }
          return this._cachingAtTime.value;
        }
        function getSpeedAtTime(frameNum) {
          var delta = -0.01;
          var v1 = this.getValueAtTime(frameNum);
          var v22 = this.getValueAtTime(frameNum + delta);
          var speed = 0;
          if (v1.length) {
            var i6;
            for (i6 = 0; i6 < v1.length; i6 += 1) {
              speed += Math.pow(v22[i6] - v1[i6], 2);
            }
            speed = Math.sqrt(speed) * 100;
          } else {
            speed = 0;
          }
          return speed;
        }
        function getVelocityAtTime(frameNum) {
          if (this.vel !== void 0) {
            return this.vel;
          }
          var delta = -1e-3;
          var v1 = this.getValueAtTime(frameNum);
          var v22 = this.getValueAtTime(frameNum + delta);
          var velocity2;
          if (v1.length) {
            velocity2 = createTypedArray("float32", v1.length);
            var i6;
            for (i6 = 0; i6 < v1.length; i6 += 1) {
              velocity2[i6] = (v22[i6] - v1[i6]) / delta;
            }
          } else {
            velocity2 = (v22 - v1) / delta;
          }
          return velocity2;
        }
        function getStaticValueAtTime() {
          return this.pv;
        }
        function setGroupProperty(propertyGroup) {
          this.propertyGroup = propertyGroup;
        }
        return {
          searchExpressions,
          getSpeedAtTime,
          getVelocityAtTime,
          getValueAtTime,
          getStaticValueAtTime,
          setGroupProperty
        };
      }();
      function addPropertyDecorator() {
        function loopOut2(type4, duration, durationFlag) {
          if (!this.k || !this.keyframes) {
            return this.pv;
          }
          type4 = type4 ? type4.toLowerCase() : "";
          var currentFrame2 = this.comp.renderedFrame;
          var keyframes = this.keyframes;
          var lastKeyFrame = keyframes[keyframes.length - 1].t;
          if (currentFrame2 <= lastKeyFrame) {
            return this.pv;
          }
          var cycleDuration;
          var firstKeyFrame;
          if (!durationFlag) {
            if (!duration || duration > keyframes.length - 1) {
              duration = keyframes.length - 1;
            }
            firstKeyFrame = keyframes[keyframes.length - 1 - duration].t;
            cycleDuration = lastKeyFrame - firstKeyFrame;
          } else {
            if (!duration) {
              cycleDuration = Math.max(0, lastKeyFrame - this.elem.data.ip);
            } else {
              cycleDuration = Math.abs(lastKeyFrame - this.elem.comp.globalData.frameRate * duration);
            }
            firstKeyFrame = lastKeyFrame - cycleDuration;
          }
          var i6;
          var len;
          var ret;
          if (type4 === "pingpong") {
            var iterations = Math.floor((currentFrame2 - firstKeyFrame) / cycleDuration);
            if (iterations % 2 !== 0) {
              return this.getValueAtTime((cycleDuration - (currentFrame2 - firstKeyFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
            }
          } else if (type4 === "offset") {
            var initV = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
            var endV = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
            var current = this.getValueAtTime(((currentFrame2 - firstKeyFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
            var repeats = Math.floor((currentFrame2 - firstKeyFrame) / cycleDuration);
            if (this.pv.length) {
              ret = new Array(initV.length);
              len = ret.length;
              for (i6 = 0; i6 < len; i6 += 1) {
                ret[i6] = (endV[i6] - initV[i6]) * repeats + current[i6];
              }
              return ret;
            }
            return (endV - initV) * repeats + current;
          } else if (type4 === "continue") {
            var lastValue = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
            var nextLastValue = this.getValueAtTime((lastKeyFrame - 1e-3) / this.comp.globalData.frameRate, 0);
            if (this.pv.length) {
              ret = new Array(lastValue.length);
              len = ret.length;
              for (i6 = 0; i6 < len; i6 += 1) {
                ret[i6] = lastValue[i6] + (lastValue[i6] - nextLastValue[i6]) * ((currentFrame2 - lastKeyFrame) / this.comp.globalData.frameRate) / 5e-4;
              }
              return ret;
            }
            return lastValue + (lastValue - nextLastValue) * ((currentFrame2 - lastKeyFrame) / 1e-3);
          }
          return this.getValueAtTime(((currentFrame2 - firstKeyFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
        }
        function loopIn2(type4, duration, durationFlag) {
          if (!this.k) {
            return this.pv;
          }
          type4 = type4 ? type4.toLowerCase() : "";
          var currentFrame2 = this.comp.renderedFrame;
          var keyframes = this.keyframes;
          var firstKeyFrame = keyframes[0].t;
          if (currentFrame2 >= firstKeyFrame) {
            return this.pv;
          }
          var cycleDuration;
          var lastKeyFrame;
          if (!durationFlag) {
            if (!duration || duration > keyframes.length - 1) {
              duration = keyframes.length - 1;
            }
            lastKeyFrame = keyframes[duration].t;
            cycleDuration = lastKeyFrame - firstKeyFrame;
          } else {
            if (!duration) {
              cycleDuration = Math.max(0, this.elem.data.op - firstKeyFrame);
            } else {
              cycleDuration = Math.abs(this.elem.comp.globalData.frameRate * duration);
            }
            lastKeyFrame = firstKeyFrame + cycleDuration;
          }
          var i6;
          var len;
          var ret;
          if (type4 === "pingpong") {
            var iterations = Math.floor((firstKeyFrame - currentFrame2) / cycleDuration);
            if (iterations % 2 === 0) {
              return this.getValueAtTime(((firstKeyFrame - currentFrame2) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
            }
          } else if (type4 === "offset") {
            var initV = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
            var endV = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
            var current = this.getValueAtTime((cycleDuration - (firstKeyFrame - currentFrame2) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
            var repeats = Math.floor((firstKeyFrame - currentFrame2) / cycleDuration) + 1;
            if (this.pv.length) {
              ret = new Array(initV.length);
              len = ret.length;
              for (i6 = 0; i6 < len; i6 += 1) {
                ret[i6] = current[i6] - (endV[i6] - initV[i6]) * repeats;
              }
              return ret;
            }
            return current - (endV - initV) * repeats;
          } else if (type4 === "continue") {
            var firstValue = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
            var nextFirstValue = this.getValueAtTime((firstKeyFrame + 1e-3) / this.comp.globalData.frameRate, 0);
            if (this.pv.length) {
              ret = new Array(firstValue.length);
              len = ret.length;
              for (i6 = 0; i6 < len; i6 += 1) {
                ret[i6] = firstValue[i6] + (firstValue[i6] - nextFirstValue[i6]) * (firstKeyFrame - currentFrame2) / 1e-3;
              }
              return ret;
            }
            return firstValue + (firstValue - nextFirstValue) * (firstKeyFrame - currentFrame2) / 1e-3;
          }
          return this.getValueAtTime((cycleDuration - ((firstKeyFrame - currentFrame2) % cycleDuration + firstKeyFrame)) / this.comp.globalData.frameRate, 0);
        }
        function smooth2(width2, samples) {
          if (!this.k) {
            return this.pv;
          }
          width2 = (width2 || 0.4) * 0.5;
          samples = Math.floor(samples || 5);
          if (samples <= 1) {
            return this.pv;
          }
          var currentTime = this.comp.renderedFrame / this.comp.globalData.frameRate;
          var initFrame2 = currentTime - width2;
          var endFrame = currentTime + width2;
          var sampleFrequency = samples > 1 ? (endFrame - initFrame2) / (samples - 1) : 1;
          var i6 = 0;
          var j = 0;
          var value2;
          if (this.pv.length) {
            value2 = createTypedArray("float32", this.pv.length);
          } else {
            value2 = 0;
          }
          var sampleValue;
          while (i6 < samples) {
            sampleValue = this.getValueAtTime(initFrame2 + i6 * sampleFrequency);
            if (this.pv.length) {
              for (j = 0; j < this.pv.length; j += 1) {
                value2[j] += sampleValue[j];
              }
            } else {
              value2 += sampleValue;
            }
            i6 += 1;
          }
          if (this.pv.length) {
            for (j = 0; j < this.pv.length; j += 1) {
              value2[j] /= samples;
            }
          } else {
            value2 /= samples;
          }
          return value2;
        }
        function getTransformValueAtTime(time2) {
          if (!this._transformCachingAtTime) {
            this._transformCachingAtTime = {
              v: new Matrix()
            };
          }
          var matrix = this._transformCachingAtTime.v;
          matrix.cloneFromProps(this.pre.props);
          if (this.appliedTransformations < 1) {
            var anchor = this.a.getValueAtTime(time2);
            matrix.translate(-anchor[0] * this.a.mult, -anchor[1] * this.a.mult, anchor[2] * this.a.mult);
          }
          if (this.appliedTransformations < 2) {
            var scale2 = this.s.getValueAtTime(time2);
            matrix.scale(scale2[0] * this.s.mult, scale2[1] * this.s.mult, scale2[2] * this.s.mult);
          }
          if (this.sk && this.appliedTransformations < 3) {
            var skew = this.sk.getValueAtTime(time2);
            var skewAxis = this.sa.getValueAtTime(time2);
            matrix.skewFromAxis(-skew * this.sk.mult, skewAxis * this.sa.mult);
          }
          if (this.r && this.appliedTransformations < 4) {
            var rotation2 = this.r.getValueAtTime(time2);
            matrix.rotate(-rotation2 * this.r.mult);
          } else if (!this.r && this.appliedTransformations < 4) {
            var rotationZ = this.rz.getValueAtTime(time2);
            var rotationY = this.ry.getValueAtTime(time2);
            var rotationX = this.rx.getValueAtTime(time2);
            var orientation = this.or.getValueAtTime(time2);
            matrix.rotateZ(-rotationZ * this.rz.mult).rotateY(rotationY * this.ry.mult).rotateX(rotationX * this.rx.mult).rotateZ(-orientation[2] * this.or.mult).rotateY(orientation[1] * this.or.mult).rotateX(orientation[0] * this.or.mult);
          }
          if (this.data.p && this.data.p.s) {
            var positionX = this.px.getValueAtTime(time2);
            var positionY = this.py.getValueAtTime(time2);
            if (this.data.p.z) {
              var positionZ = this.pz.getValueAtTime(time2);
              matrix.translate(positionX * this.px.mult, positionY * this.py.mult, -positionZ * this.pz.mult);
            } else {
              matrix.translate(positionX * this.px.mult, positionY * this.py.mult, 0);
            }
          } else {
            var position2 = this.p.getValueAtTime(time2);
            matrix.translate(position2[0] * this.p.mult, position2[1] * this.p.mult, -position2[2] * this.p.mult);
          }
          return matrix;
        }
        function getTransformStaticValueAtTime() {
          return this.v.clone(new Matrix());
        }
        var getTransformProperty = TransformPropertyFactory.getTransformProperty;
        TransformPropertyFactory.getTransformProperty = function(elem2, data2, container) {
          var prop = getTransformProperty(elem2, data2, container);
          if (prop.dynamicProperties.length) {
            prop.getValueAtTime = getTransformValueAtTime.bind(prop);
          } else {
            prop.getValueAtTime = getTransformStaticValueAtTime.bind(prop);
          }
          prop.setGroupProperty = expressionHelpers.setGroupProperty;
          return prop;
        };
        var propertyGetProp = PropertyFactory.getProp;
        PropertyFactory.getProp = function(elem2, data2, type4, mult, container) {
          var prop = propertyGetProp(elem2, data2, type4, mult, container);
          if (prop.kf) {
            prop.getValueAtTime = expressionHelpers.getValueAtTime.bind(prop);
          } else {
            prop.getValueAtTime = expressionHelpers.getStaticValueAtTime.bind(prop);
          }
          prop.setGroupProperty = expressionHelpers.setGroupProperty;
          prop.loopOut = loopOut2;
          prop.loopIn = loopIn2;
          prop.smooth = smooth2;
          prop.getVelocityAtTime = expressionHelpers.getVelocityAtTime.bind(prop);
          prop.getSpeedAtTime = expressionHelpers.getSpeedAtTime.bind(prop);
          prop.numKeys = data2.a === 1 ? data2.k.length : 0;
          prop.propertyIndex = data2.ix;
          var value2 = 0;
          if (type4 !== 0) {
            value2 = createTypedArray("float32", data2.a === 1 ? data2.k[0].s.length : data2.k.length);
          }
          prop._cachingAtTime = {
            lastFrame: initialDefaultFrame,
            lastIndex: 0,
            value: value2
          };
          expressionHelpers.searchExpressions(elem2, data2, prop);
          if (prop.k) {
            container.addDynamicProperty(prop);
          }
          return prop;
        };
        function getShapeValueAtTime(frameNum) {
          if (!this._cachingAtTime) {
            this._cachingAtTime = {
              shapeValue: shapePool.clone(this.pv),
              lastIndex: 0,
              lastTime: initialDefaultFrame
            };
          }
          frameNum *= this.elem.globalData.frameRate;
          frameNum -= this.offsetTime;
          if (frameNum !== this._cachingAtTime.lastTime) {
            this._cachingAtTime.lastIndex = this._cachingAtTime.lastTime < frameNum ? this._caching.lastIndex : 0;
            this._cachingAtTime.lastTime = frameNum;
            this.interpolateShape(frameNum, this._cachingAtTime.shapeValue, this._cachingAtTime);
          }
          return this._cachingAtTime.shapeValue;
        }
        var ShapePropertyConstructorFunction = ShapePropertyFactory.getConstructorFunction();
        var KeyframedShapePropertyConstructorFunction = ShapePropertyFactory.getKeyframedConstructorFunction();
        function ShapeExpressions() {
        }
        ShapeExpressions.prototype = {
          vertices: function vertices(prop, time2) {
            if (this.k) {
              this.getValue();
            }
            var shapePath = this.v;
            if (time2 !== void 0) {
              shapePath = this.getValueAtTime(time2, 0);
            }
            var i6;
            var len = shapePath._length;
            var vertices2 = shapePath[prop];
            var points = shapePath.v;
            var arr = createSizedArray(len);
            for (i6 = 0; i6 < len; i6 += 1) {
              if (prop === "i" || prop === "o") {
                arr[i6] = [vertices2[i6][0] - points[i6][0], vertices2[i6][1] - points[i6][1]];
              } else {
                arr[i6] = [vertices2[i6][0], vertices2[i6][1]];
              }
            }
            return arr;
          },
          points: function points(time2) {
            return this.vertices("v", time2);
          },
          inTangents: function inTangents(time2) {
            return this.vertices("i", time2);
          },
          outTangents: function outTangents(time2) {
            return this.vertices("o", time2);
          },
          isClosed: function isClosed() {
            return this.v.c;
          },
          pointOnPath: function pointOnPath(perc, time2) {
            var shapePath = this.v;
            if (time2 !== void 0) {
              shapePath = this.getValueAtTime(time2, 0);
            }
            if (!this._segmentsLength) {
              this._segmentsLength = bez.getSegmentsLength(shapePath);
            }
            var segmentsLength = this._segmentsLength;
            var lengths = segmentsLength.lengths;
            var lengthPos = segmentsLength.totalLength * perc;
            var i6 = 0;
            var len = lengths.length;
            var accumulatedLength = 0;
            var pt;
            while (i6 < len) {
              if (accumulatedLength + lengths[i6].addedLength > lengthPos) {
                var initIndex = i6;
                var endIndex = shapePath.c && i6 === len - 1 ? 0 : i6 + 1;
                var segmentPerc = (lengthPos - accumulatedLength) / lengths[i6].addedLength;
                pt = bez.getPointInSegment(shapePath.v[initIndex], shapePath.v[endIndex], shapePath.o[initIndex], shapePath.i[endIndex], segmentPerc, lengths[i6]);
                break;
              } else {
                accumulatedLength += lengths[i6].addedLength;
              }
              i6 += 1;
            }
            if (!pt) {
              pt = shapePath.c ? [shapePath.v[0][0], shapePath.v[0][1]] : [shapePath.v[shapePath._length - 1][0], shapePath.v[shapePath._length - 1][1]];
            }
            return pt;
          },
          vectorOnPath: function vectorOnPath(perc, time2, vectorType) {
            if (perc == 1) {
              perc = this.v.c;
            } else if (perc == 0) {
              perc = 0.999;
            }
            var pt1 = this.pointOnPath(perc, time2);
            var pt2 = this.pointOnPath(perc + 1e-3, time2);
            var xLength = pt2[0] - pt1[0];
            var yLength = pt2[1] - pt1[1];
            var magnitude = Math.sqrt(Math.pow(xLength, 2) + Math.pow(yLength, 2));
            if (magnitude === 0) {
              return [0, 0];
            }
            var unitVector = vectorType === "tangent" ? [xLength / magnitude, yLength / magnitude] : [-yLength / magnitude, xLength / magnitude];
            return unitVector;
          },
          tangentOnPath: function tangentOnPath(perc, time2) {
            return this.vectorOnPath(perc, time2, "tangent");
          },
          normalOnPath: function normalOnPath(perc, time2) {
            return this.vectorOnPath(perc, time2, "normal");
          },
          setGroupProperty: expressionHelpers.setGroupProperty,
          getValueAtTime: expressionHelpers.getStaticValueAtTime
        };
        extendPrototype([ShapeExpressions], ShapePropertyConstructorFunction);
        extendPrototype([ShapeExpressions], KeyframedShapePropertyConstructorFunction);
        KeyframedShapePropertyConstructorFunction.prototype.getValueAtTime = getShapeValueAtTime;
        KeyframedShapePropertyConstructorFunction.prototype.initiateExpression = ExpressionManager.initiateExpression;
        var propertyGetShapeProp = ShapePropertyFactory.getShapeProp;
        ShapePropertyFactory.getShapeProp = function(elem2, data2, type4, arr, trims) {
          var prop = propertyGetShapeProp(elem2, data2, type4, arr, trims);
          prop.propertyIndex = data2.ix;
          prop.lock = false;
          if (type4 === 3) {
            expressionHelpers.searchExpressions(elem2, data2.pt, prop);
          } else if (type4 === 4) {
            expressionHelpers.searchExpressions(elem2, data2.ks, prop);
          }
          if (prop.k) {
            elem2.addDynamicProperty(prop);
          }
          return prop;
        };
      }
      function initialize$1() {
        addPropertyDecorator();
      }
      function addDecorator() {
        function searchExpressions() {
          if (this.data.d.x) {
            this.calculateExpression = ExpressionManager.initiateExpression.bind(this)(this.elem, this.data.d, this);
            this.addEffect(this.getExpressionValue.bind(this));
            return true;
          }
          return null;
        }
        TextProperty.prototype.getExpressionValue = function(currentValue, text3) {
          var newValue = this.calculateExpression(text3);
          if (currentValue.t !== newValue) {
            var newData = {};
            this.copyData(newData, currentValue);
            newData.t = newValue.toString();
            newData.__complete = false;
            return newData;
          }
          return currentValue;
        };
        TextProperty.prototype.searchProperty = function() {
          var isKeyframed = this.searchKeyframes();
          var hasExpressions = this.searchExpressions();
          this.kf = isKeyframed || hasExpressions;
          return this.kf;
        };
        TextProperty.prototype.searchExpressions = searchExpressions;
      }
      function initialize() {
        addDecorator();
      }
      function SVGComposableEffect() {
      }
      SVGComposableEffect.prototype = {
        createMergeNode: function createMergeNode(resultId, ins) {
          var feMerge = createNS("feMerge");
          feMerge.setAttribute("result", resultId);
          var feMergeNode;
          var i6;
          for (i6 = 0; i6 < ins.length; i6 += 1) {
            feMergeNode = createNS("feMergeNode");
            feMergeNode.setAttribute("in", ins[i6]);
            feMerge.appendChild(feMergeNode);
            feMerge.appendChild(feMergeNode);
          }
          return feMerge;
        }
      };
      var linearFilterValue = "0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0";
      function SVGTintFilter(filter, filterManager, elem2, id, source) {
        this.filterManager = filterManager;
        var feColorMatrix = createNS("feColorMatrix");
        feColorMatrix.setAttribute("type", "matrix");
        feColorMatrix.setAttribute("color-interpolation-filters", "linearRGB");
        feColorMatrix.setAttribute("values", linearFilterValue + " 1 0");
        this.linearFilter = feColorMatrix;
        feColorMatrix.setAttribute("result", id + "_tint_1");
        filter.appendChild(feColorMatrix);
        feColorMatrix = createNS("feColorMatrix");
        feColorMatrix.setAttribute("type", "matrix");
        feColorMatrix.setAttribute("color-interpolation-filters", "sRGB");
        feColorMatrix.setAttribute("values", "1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0");
        feColorMatrix.setAttribute("result", id + "_tint_2");
        filter.appendChild(feColorMatrix);
        this.matrixFilter = feColorMatrix;
        var feMerge = this.createMergeNode(id, [source, id + "_tint_1", id + "_tint_2"]);
        filter.appendChild(feMerge);
      }
      extendPrototype([SVGComposableEffect], SVGTintFilter);
      SVGTintFilter.prototype.renderFrame = function(forceRender) {
        if (forceRender || this.filterManager._mdf) {
          var colorBlack = this.filterManager.effectElements[0].p.v;
          var colorWhite = this.filterManager.effectElements[1].p.v;
          var opacity = this.filterManager.effectElements[2].p.v / 100;
          this.linearFilter.setAttribute("values", linearFilterValue + " " + opacity + " 0");
          this.matrixFilter.setAttribute("values", colorWhite[0] - colorBlack[0] + " 0 0 0 " + colorBlack[0] + " " + (colorWhite[1] - colorBlack[1]) + " 0 0 0 " + colorBlack[1] + " " + (colorWhite[2] - colorBlack[2]) + " 0 0 0 " + colorBlack[2] + " 0 0 0 1 0");
        }
      };
      function SVGFillFilter(filter, filterManager, elem2, id) {
        this.filterManager = filterManager;
        var feColorMatrix = createNS("feColorMatrix");
        feColorMatrix.setAttribute("type", "matrix");
        feColorMatrix.setAttribute("color-interpolation-filters", "sRGB");
        feColorMatrix.setAttribute("values", "1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0");
        feColorMatrix.setAttribute("result", id);
        filter.appendChild(feColorMatrix);
        this.matrixFilter = feColorMatrix;
      }
      SVGFillFilter.prototype.renderFrame = function(forceRender) {
        if (forceRender || this.filterManager._mdf) {
          var color = this.filterManager.effectElements[2].p.v;
          var opacity = this.filterManager.effectElements[6].p.v;
          this.matrixFilter.setAttribute("values", "0 0 0 0 " + color[0] + " 0 0 0 0 " + color[1] + " 0 0 0 0 " + color[2] + " 0 0 0 " + opacity + " 0");
        }
      };
      function SVGStrokeEffect(fil, filterManager, elem2) {
        this.initialized = false;
        this.filterManager = filterManager;
        this.elem = elem2;
        this.paths = [];
      }
      SVGStrokeEffect.prototype.initialize = function() {
        var elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;
        var path;
        var groupPath;
        var i6;
        var len;
        if (this.filterManager.effectElements[1].p.v === 1) {
          len = this.elem.maskManager.masksProperties.length;
          i6 = 0;
        } else {
          i6 = this.filterManager.effectElements[0].p.v - 1;
          len = i6 + 1;
        }
        groupPath = createNS("g");
        groupPath.setAttribute("fill", "none");
        groupPath.setAttribute("stroke-linecap", "round");
        groupPath.setAttribute("stroke-dashoffset", 1);
        for (i6; i6 < len; i6 += 1) {
          path = createNS("path");
          groupPath.appendChild(path);
          this.paths.push({
            p: path,
            m: i6
          });
        }
        if (this.filterManager.effectElements[10].p.v === 3) {
          var mask2 = createNS("mask");
          var id = createElementID();
          mask2.setAttribute("id", id);
          mask2.setAttribute("mask-type", "alpha");
          mask2.appendChild(groupPath);
          this.elem.globalData.defs.appendChild(mask2);
          var g = createNS("g");
          g.setAttribute("mask", "url(" + getLocationHref() + "#" + id + ")");
          while (elemChildren[0]) {
            g.appendChild(elemChildren[0]);
          }
          this.elem.layerElement.appendChild(g);
          this.masker = mask2;
          groupPath.setAttribute("stroke", "#fff");
        } else if (this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2) {
          if (this.filterManager.effectElements[10].p.v === 2) {
            elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;
            while (elemChildren.length) {
              this.elem.layerElement.removeChild(elemChildren[0]);
            }
          }
          this.elem.layerElement.appendChild(groupPath);
          this.elem.layerElement.removeAttribute("mask");
          groupPath.setAttribute("stroke", "#fff");
        }
        this.initialized = true;
        this.pathMasker = groupPath;
      };
      SVGStrokeEffect.prototype.renderFrame = function(forceRender) {
        if (!this.initialized) {
          this.initialize();
        }
        var i6;
        var len = this.paths.length;
        var mask2;
        var path;
        for (i6 = 0; i6 < len; i6 += 1) {
          if (this.paths[i6].m !== -1) {
            mask2 = this.elem.maskManager.viewData[this.paths[i6].m];
            path = this.paths[i6].p;
            if (forceRender || this.filterManager._mdf || mask2.prop._mdf) {
              path.setAttribute("d", mask2.lastPath);
            }
            if (forceRender || this.filterManager.effectElements[9].p._mdf || this.filterManager.effectElements[4].p._mdf || this.filterManager.effectElements[7].p._mdf || this.filterManager.effectElements[8].p._mdf || mask2.prop._mdf) {
              var dasharrayValue;
              if (this.filterManager.effectElements[7].p.v !== 0 || this.filterManager.effectElements[8].p.v !== 100) {
                var s8 = Math.min(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v) * 0.01;
                var e2 = Math.max(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v) * 0.01;
                var l7 = path.getTotalLength();
                dasharrayValue = "0 0 0 " + l7 * s8 + " ";
                var lineLength = l7 * (e2 - s8);
                var segment = 1 + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01;
                var units = Math.floor(lineLength / segment);
                var j;
                for (j = 0; j < units; j += 1) {
                  dasharrayValue += "1 " + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01 + " ";
                }
                dasharrayValue += "0 " + l7 * 10 + " 0 0";
              } else {
                dasharrayValue = "1 " + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01;
              }
              path.setAttribute("stroke-dasharray", dasharrayValue);
            }
          }
        }
        if (forceRender || this.filterManager.effectElements[4].p._mdf) {
          this.pathMasker.setAttribute("stroke-width", this.filterManager.effectElements[4].p.v * 2);
        }
        if (forceRender || this.filterManager.effectElements[6].p._mdf) {
          this.pathMasker.setAttribute("opacity", this.filterManager.effectElements[6].p.v);
        }
        if (this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2) {
          if (forceRender || this.filterManager.effectElements[3].p._mdf) {
            var color = this.filterManager.effectElements[3].p.v;
            this.pathMasker.setAttribute("stroke", "rgb(" + bmFloor(color[0] * 255) + "," + bmFloor(color[1] * 255) + "," + bmFloor(color[2] * 255) + ")");
          }
        }
      };
      function SVGTritoneFilter(filter, filterManager, elem2, id) {
        this.filterManager = filterManager;
        var feColorMatrix = createNS("feColorMatrix");
        feColorMatrix.setAttribute("type", "matrix");
        feColorMatrix.setAttribute("color-interpolation-filters", "linearRGB");
        feColorMatrix.setAttribute("values", "0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0");
        filter.appendChild(feColorMatrix);
        var feComponentTransfer = createNS("feComponentTransfer");
        feComponentTransfer.setAttribute("color-interpolation-filters", "sRGB");
        feComponentTransfer.setAttribute("result", id);
        this.matrixFilter = feComponentTransfer;
        var feFuncR = createNS("feFuncR");
        feFuncR.setAttribute("type", "table");
        feComponentTransfer.appendChild(feFuncR);
        this.feFuncR = feFuncR;
        var feFuncG = createNS("feFuncG");
        feFuncG.setAttribute("type", "table");
        feComponentTransfer.appendChild(feFuncG);
        this.feFuncG = feFuncG;
        var feFuncB = createNS("feFuncB");
        feFuncB.setAttribute("type", "table");
        feComponentTransfer.appendChild(feFuncB);
        this.feFuncB = feFuncB;
        filter.appendChild(feComponentTransfer);
      }
      SVGTritoneFilter.prototype.renderFrame = function(forceRender) {
        if (forceRender || this.filterManager._mdf) {
          var color1 = this.filterManager.effectElements[0].p.v;
          var color2 = this.filterManager.effectElements[1].p.v;
          var color3 = this.filterManager.effectElements[2].p.v;
          var tableR = color3[0] + " " + color2[0] + " " + color1[0];
          var tableG = color3[1] + " " + color2[1] + " " + color1[1];
          var tableB = color3[2] + " " + color2[2] + " " + color1[2];
          this.feFuncR.setAttribute("tableValues", tableR);
          this.feFuncG.setAttribute("tableValues", tableG);
          this.feFuncB.setAttribute("tableValues", tableB);
        }
      };
      function SVGProLevelsFilter(filter, filterManager, elem2, id) {
        this.filterManager = filterManager;
        var effectElements = this.filterManager.effectElements;
        var feComponentTransfer = createNS("feComponentTransfer");
        if (effectElements[10].p.k || effectElements[10].p.v !== 0 || effectElements[11].p.k || effectElements[11].p.v !== 1 || effectElements[12].p.k || effectElements[12].p.v !== 1 || effectElements[13].p.k || effectElements[13].p.v !== 0 || effectElements[14].p.k || effectElements[14].p.v !== 1) {
          this.feFuncR = this.createFeFunc("feFuncR", feComponentTransfer);
        }
        if (effectElements[17].p.k || effectElements[17].p.v !== 0 || effectElements[18].p.k || effectElements[18].p.v !== 1 || effectElements[19].p.k || effectElements[19].p.v !== 1 || effectElements[20].p.k || effectElements[20].p.v !== 0 || effectElements[21].p.k || effectElements[21].p.v !== 1) {
          this.feFuncG = this.createFeFunc("feFuncG", feComponentTransfer);
        }
        if (effectElements[24].p.k || effectElements[24].p.v !== 0 || effectElements[25].p.k || effectElements[25].p.v !== 1 || effectElements[26].p.k || effectElements[26].p.v !== 1 || effectElements[27].p.k || effectElements[27].p.v !== 0 || effectElements[28].p.k || effectElements[28].p.v !== 1) {
          this.feFuncB = this.createFeFunc("feFuncB", feComponentTransfer);
        }
        if (effectElements[31].p.k || effectElements[31].p.v !== 0 || effectElements[32].p.k || effectElements[32].p.v !== 1 || effectElements[33].p.k || effectElements[33].p.v !== 1 || effectElements[34].p.k || effectElements[34].p.v !== 0 || effectElements[35].p.k || effectElements[35].p.v !== 1) {
          this.feFuncA = this.createFeFunc("feFuncA", feComponentTransfer);
        }
        if (this.feFuncR || this.feFuncG || this.feFuncB || this.feFuncA) {
          feComponentTransfer.setAttribute("color-interpolation-filters", "sRGB");
          filter.appendChild(feComponentTransfer);
        }
        if (effectElements[3].p.k || effectElements[3].p.v !== 0 || effectElements[4].p.k || effectElements[4].p.v !== 1 || effectElements[5].p.k || effectElements[5].p.v !== 1 || effectElements[6].p.k || effectElements[6].p.v !== 0 || effectElements[7].p.k || effectElements[7].p.v !== 1) {
          feComponentTransfer = createNS("feComponentTransfer");
          feComponentTransfer.setAttribute("color-interpolation-filters", "sRGB");
          feComponentTransfer.setAttribute("result", id);
          filter.appendChild(feComponentTransfer);
          this.feFuncRComposed = this.createFeFunc("feFuncR", feComponentTransfer);
          this.feFuncGComposed = this.createFeFunc("feFuncG", feComponentTransfer);
          this.feFuncBComposed = this.createFeFunc("feFuncB", feComponentTransfer);
        }
      }
      SVGProLevelsFilter.prototype.createFeFunc = function(type4, feComponentTransfer) {
        var feFunc = createNS(type4);
        feFunc.setAttribute("type", "table");
        feComponentTransfer.appendChild(feFunc);
        return feFunc;
      };
      SVGProLevelsFilter.prototype.getTableValue = function(inputBlack, inputWhite, gamma, outputBlack, outputWhite) {
        var cnt = 0;
        var segments = 256;
        var perc;
        var min = Math.min(inputBlack, inputWhite);
        var max = Math.max(inputBlack, inputWhite);
        var table = Array.call(null, {
          length: segments
        });
        var colorValue;
        var pos = 0;
        var outputDelta = outputWhite - outputBlack;
        var inputDelta = inputWhite - inputBlack;
        while (cnt <= 256) {
          perc = cnt / 256;
          if (perc <= min) {
            colorValue = inputDelta < 0 ? outputWhite : outputBlack;
          } else if (perc >= max) {
            colorValue = inputDelta < 0 ? outputBlack : outputWhite;
          } else {
            colorValue = outputBlack + outputDelta * Math.pow((perc - inputBlack) / inputDelta, 1 / gamma);
          }
          table[pos] = colorValue;
          pos += 1;
          cnt += 256 / (segments - 1);
        }
        return table.join(" ");
      };
      SVGProLevelsFilter.prototype.renderFrame = function(forceRender) {
        if (forceRender || this.filterManager._mdf) {
          var val2;
          var effectElements = this.filterManager.effectElements;
          if (this.feFuncRComposed && (forceRender || effectElements[3].p._mdf || effectElements[4].p._mdf || effectElements[5].p._mdf || effectElements[6].p._mdf || effectElements[7].p._mdf)) {
            val2 = this.getTableValue(effectElements[3].p.v, effectElements[4].p.v, effectElements[5].p.v, effectElements[6].p.v, effectElements[7].p.v);
            this.feFuncRComposed.setAttribute("tableValues", val2);
            this.feFuncGComposed.setAttribute("tableValues", val2);
            this.feFuncBComposed.setAttribute("tableValues", val2);
          }
          if (this.feFuncR && (forceRender || effectElements[10].p._mdf || effectElements[11].p._mdf || effectElements[12].p._mdf || effectElements[13].p._mdf || effectElements[14].p._mdf)) {
            val2 = this.getTableValue(effectElements[10].p.v, effectElements[11].p.v, effectElements[12].p.v, effectElements[13].p.v, effectElements[14].p.v);
            this.feFuncR.setAttribute("tableValues", val2);
          }
          if (this.feFuncG && (forceRender || effectElements[17].p._mdf || effectElements[18].p._mdf || effectElements[19].p._mdf || effectElements[20].p._mdf || effectElements[21].p._mdf)) {
            val2 = this.getTableValue(effectElements[17].p.v, effectElements[18].p.v, effectElements[19].p.v, effectElements[20].p.v, effectElements[21].p.v);
            this.feFuncG.setAttribute("tableValues", val2);
          }
          if (this.feFuncB && (forceRender || effectElements[24].p._mdf || effectElements[25].p._mdf || effectElements[26].p._mdf || effectElements[27].p._mdf || effectElements[28].p._mdf)) {
            val2 = this.getTableValue(effectElements[24].p.v, effectElements[25].p.v, effectElements[26].p.v, effectElements[27].p.v, effectElements[28].p.v);
            this.feFuncB.setAttribute("tableValues", val2);
          }
          if (this.feFuncA && (forceRender || effectElements[31].p._mdf || effectElements[32].p._mdf || effectElements[33].p._mdf || effectElements[34].p._mdf || effectElements[35].p._mdf)) {
            val2 = this.getTableValue(effectElements[31].p.v, effectElements[32].p.v, effectElements[33].p.v, effectElements[34].p.v, effectElements[35].p.v);
            this.feFuncA.setAttribute("tableValues", val2);
          }
        }
      };
      function SVGDropShadowEffect(filter, filterManager, elem2, id, source) {
        var globalFilterSize = filterManager.container.globalData.renderConfig.filterSize;
        var filterSize = filterManager.data.fs || globalFilterSize;
        filter.setAttribute("x", filterSize.x || globalFilterSize.x);
        filter.setAttribute("y", filterSize.y || globalFilterSize.y);
        filter.setAttribute("width", filterSize.width || globalFilterSize.width);
        filter.setAttribute("height", filterSize.height || globalFilterSize.height);
        this.filterManager = filterManager;
        var feGaussianBlur = createNS("feGaussianBlur");
        feGaussianBlur.setAttribute("in", "SourceAlpha");
        feGaussianBlur.setAttribute("result", id + "_drop_shadow_1");
        feGaussianBlur.setAttribute("stdDeviation", "0");
        this.feGaussianBlur = feGaussianBlur;
        filter.appendChild(feGaussianBlur);
        var feOffset = createNS("feOffset");
        feOffset.setAttribute("dx", "25");
        feOffset.setAttribute("dy", "0");
        feOffset.setAttribute("in", id + "_drop_shadow_1");
        feOffset.setAttribute("result", id + "_drop_shadow_2");
        this.feOffset = feOffset;
        filter.appendChild(feOffset);
        var feFlood = createNS("feFlood");
        feFlood.setAttribute("flood-color", "#00ff00");
        feFlood.setAttribute("flood-opacity", "1");
        feFlood.setAttribute("result", id + "_drop_shadow_3");
        this.feFlood = feFlood;
        filter.appendChild(feFlood);
        var feComposite = createNS("feComposite");
        feComposite.setAttribute("in", id + "_drop_shadow_3");
        feComposite.setAttribute("in2", id + "_drop_shadow_2");
        feComposite.setAttribute("operator", "in");
        feComposite.setAttribute("result", id + "_drop_shadow_4");
        filter.appendChild(feComposite);
        var feMerge = this.createMergeNode(id, [id + "_drop_shadow_4", source]);
        filter.appendChild(feMerge);
      }
      extendPrototype([SVGComposableEffect], SVGDropShadowEffect);
      SVGDropShadowEffect.prototype.renderFrame = function(forceRender) {
        if (forceRender || this.filterManager._mdf) {
          if (forceRender || this.filterManager.effectElements[4].p._mdf) {
            this.feGaussianBlur.setAttribute("stdDeviation", this.filterManager.effectElements[4].p.v / 4);
          }
          if (forceRender || this.filterManager.effectElements[0].p._mdf) {
            var col = this.filterManager.effectElements[0].p.v;
            this.feFlood.setAttribute("flood-color", rgbToHex(Math.round(col[0] * 255), Math.round(col[1] * 255), Math.round(col[2] * 255)));
          }
          if (forceRender || this.filterManager.effectElements[1].p._mdf) {
            this.feFlood.setAttribute("flood-opacity", this.filterManager.effectElements[1].p.v / 255);
          }
          if (forceRender || this.filterManager.effectElements[2].p._mdf || this.filterManager.effectElements[3].p._mdf) {
            var distance = this.filterManager.effectElements[3].p.v;
            var angle = (this.filterManager.effectElements[2].p.v - 90) * degToRads;
            var x2 = distance * Math.cos(angle);
            var y = distance * Math.sin(angle);
            this.feOffset.setAttribute("dx", x2);
            this.feOffset.setAttribute("dy", y);
          }
        }
      };
      var _svgMatteSymbols = [];
      function SVGMatte3Effect(filterElem, filterManager, elem2) {
        this.initialized = false;
        this.filterManager = filterManager;
        this.filterElem = filterElem;
        this.elem = elem2;
        elem2.matteElement = createNS("g");
        elem2.matteElement.appendChild(elem2.layerElement);
        elem2.matteElement.appendChild(elem2.transformedElement);
        elem2.baseElement = elem2.matteElement;
      }
      SVGMatte3Effect.prototype.findSymbol = function(mask2) {
        var i6 = 0;
        var len = _svgMatteSymbols.length;
        while (i6 < len) {
          if (_svgMatteSymbols[i6] === mask2) {
            return _svgMatteSymbols[i6];
          }
          i6 += 1;
        }
        return null;
      };
      SVGMatte3Effect.prototype.replaceInParent = function(mask2, symbolId) {
        var parentNode = mask2.layerElement.parentNode;
        if (!parentNode) {
          return;
        }
        var children2 = parentNode.children;
        var i6 = 0;
        var len = children2.length;
        while (i6 < len) {
          if (children2[i6] === mask2.layerElement) {
            break;
          }
          i6 += 1;
        }
        var nextChild;
        if (i6 <= len - 2) {
          nextChild = children2[i6 + 1];
        }
        var useElem = createNS("use");
        useElem.setAttribute("href", "#" + symbolId);
        if (nextChild) {
          parentNode.insertBefore(useElem, nextChild);
        } else {
          parentNode.appendChild(useElem);
        }
      };
      SVGMatte3Effect.prototype.setElementAsMask = function(elem2, mask2) {
        if (!this.findSymbol(mask2)) {
          var symbolId = createElementID();
          var masker = createNS("mask");
          masker.setAttribute("id", mask2.layerId);
          masker.setAttribute("mask-type", "alpha");
          _svgMatteSymbols.push(mask2);
          var defs = elem2.globalData.defs;
          defs.appendChild(masker);
          var symbol = createNS("symbol");
          symbol.setAttribute("id", symbolId);
          this.replaceInParent(mask2, symbolId);
          symbol.appendChild(mask2.layerElement);
          defs.appendChild(symbol);
          var useElem = createNS("use");
          useElem.setAttribute("href", "#" + symbolId);
          masker.appendChild(useElem);
          mask2.data.hd = false;
          mask2.show();
        }
        elem2.setMatte(mask2.layerId);
      };
      SVGMatte3Effect.prototype.initialize = function() {
        var ind = this.filterManager.effectElements[0].p.v;
        var elements = this.elem.comp.elements;
        var i6 = 0;
        var len = elements.length;
        while (i6 < len) {
          if (elements[i6] && elements[i6].data.ind === ind) {
            this.setElementAsMask(this.elem, elements[i6]);
          }
          i6 += 1;
        }
        this.initialized = true;
      };
      SVGMatte3Effect.prototype.renderFrame = function() {
        if (!this.initialized) {
          this.initialize();
        }
      };
      function SVGGaussianBlurEffect(filter, filterManager, elem2, id) {
        filter.setAttribute("x", "-100%");
        filter.setAttribute("y", "-100%");
        filter.setAttribute("width", "300%");
        filter.setAttribute("height", "300%");
        this.filterManager = filterManager;
        var feGaussianBlur = createNS("feGaussianBlur");
        feGaussianBlur.setAttribute("result", id);
        filter.appendChild(feGaussianBlur);
        this.feGaussianBlur = feGaussianBlur;
      }
      SVGGaussianBlurEffect.prototype.renderFrame = function(forceRender) {
        if (forceRender || this.filterManager._mdf) {
          var kBlurrinessToSigma = 0.3;
          var sigma = this.filterManager.effectElements[0].p.v * kBlurrinessToSigma;
          var dimensions = this.filterManager.effectElements[1].p.v;
          var sigmaX = dimensions == 3 ? 0 : sigma;
          var sigmaY = dimensions == 2 ? 0 : sigma;
          this.feGaussianBlur.setAttribute("stdDeviation", sigmaX + " " + sigmaY);
          var edgeMode = this.filterManager.effectElements[2].p.v == 1 ? "wrap" : "duplicate";
          this.feGaussianBlur.setAttribute("edgeMode", edgeMode);
        }
      };
      function TransformEffect() {
      }
      TransformEffect.prototype.init = function(effectsManager) {
        this.effectsManager = effectsManager;
        this.type = effectTypes.TRANSFORM_EFFECT;
        this.matrix = new Matrix();
        this.opacity = -1;
        this._mdf = false;
        this._opMdf = false;
      };
      TransformEffect.prototype.renderFrame = function(forceFrame) {
        this._opMdf = false;
        this._mdf = false;
        if (forceFrame || this.effectsManager._mdf) {
          var effectElements = this.effectsManager.effectElements;
          var anchor = effectElements[0].p.v;
          var position2 = effectElements[1].p.v;
          var isUniformScale = effectElements[2].p.v === 1;
          var scaleHeight = effectElements[3].p.v;
          var scaleWidth = isUniformScale ? scaleHeight : effectElements[4].p.v;
          var skew = effectElements[5].p.v;
          var skewAxis = effectElements[6].p.v;
          var rotation2 = effectElements[7].p.v;
          this.matrix.reset();
          this.matrix.translate(-anchor[0], -anchor[1], anchor[2]);
          this.matrix.scale(scaleWidth * 0.01, scaleHeight * 0.01, 1);
          this.matrix.rotate(-rotation2 * degToRads);
          this.matrix.skewFromAxis(-skew * degToRads, (skewAxis + 90) * degToRads);
          this.matrix.translate(position2[0], position2[1], 0);
          this._mdf = true;
          if (this.opacity !== effectElements[8].p.v) {
            this.opacity = effectElements[8].p.v;
            this._opMdf = true;
          }
        }
      };
      function SVGTransformEffect(_, filterManager) {
        this.init(filterManager);
      }
      extendPrototype([TransformEffect], SVGTransformEffect);
      function CVTransformEffect(effectsManager) {
        this.init(effectsManager);
      }
      extendPrototype([TransformEffect], CVTransformEffect);
      registerRenderer("canvas", CanvasRenderer);
      registerRenderer("html", HybridRenderer);
      registerRenderer("svg", SVGRenderer);
      ShapeModifiers.registerModifier("tm", TrimModifier);
      ShapeModifiers.registerModifier("pb", PuckerAndBloatModifier);
      ShapeModifiers.registerModifier("rp", RepeaterModifier);
      ShapeModifiers.registerModifier("rd", RoundCornersModifier);
      ShapeModifiers.registerModifier("zz", ZigZagModifier);
      ShapeModifiers.registerModifier("op", OffsetPathModifier);
      setExpressionsPlugin(Expressions);
      setExpressionInterfaces(getInterface);
      initialize$1();
      initialize();
      registerEffect$1(20, SVGTintFilter, true);
      registerEffect$1(21, SVGFillFilter, true);
      registerEffect$1(22, SVGStrokeEffect, false);
      registerEffect$1(23, SVGTritoneFilter, true);
      registerEffect$1(24, SVGProLevelsFilter, true);
      registerEffect$1(25, SVGDropShadowEffect, true);
      registerEffect$1(28, SVGMatte3Effect, false);
      registerEffect$1(29, SVGGaussianBlurEffect, true);
      registerEffect$1(35, SVGTransformEffect, false);
      registerEffect(35, CVTransformEffect);
      return lottie;
    });
  }
});

// node_modules/@swc/helpers/esm/_define_property.js
function _define_property(obj, key2, value2) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value2, enumerable: true, configurable: true, writable: true });
  } else
    obj[key2] = value2;
  return obj;
}

// node_modules/@swc/helpers/esm/_object_spread.js
function _object_spread(target) {
  for (var i6 = 1; i6 < arguments.length; i6++) {
    var source = arguments[i6] != null ? arguments[i6] : {};
    var ownKeys4 = Object.keys(source);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys4 = ownKeys4.concat(
        Object.getOwnPropertySymbols(source).filter(function(sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        })
      );
    }
    ownKeys4.forEach(function(key2) {
      _define_property(target, key2, source[key2]);
    });
  }
  return target;
}

// node_modules/@swc/helpers/esm/_object_spread_props.js
function ownKeys(object4, enumerableOnly) {
  var keys = Object.keys(object4);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object4);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object4, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  source = source != null ? source : {};
  if (Object.getOwnPropertyDescriptors)
    Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
  else {
    ownKeys(Object(source)).forEach(function(key2) {
      Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
    });
  }
  return target;
}

// node_modules/@swc/helpers/esm/_object_without_properties_loose.js
function _object_without_properties_loose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key2, i6;
  for (i6 = 0; i6 < sourceKeys.length; i6++) {
    key2 = sourceKeys[i6];
    if (excluded.indexOf(key2) >= 0)
      continue;
    target[key2] = source[key2];
  }
  return target;
}

// node_modules/@swc/helpers/esm/_object_without_properties.js
function _object_without_properties(source, excluded) {
  if (source == null)
    return {};
  var target = _object_without_properties_loose(source, excluded);
  var key2, i6;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i6 = 0; i6 < sourceSymbolKeys.length; i6++) {
      key2 = sourceSymbolKeys[i6];
      if (excluded.indexOf(key2) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key2))
        continue;
      target[key2] = source[key2];
    }
  }
  return target;
}

// node_modules/@nutui/nutui-react/dist/es/packages/button/button.js
var import_react117 = __toESM(require_react());
var import_classnames = __toESM(require_classnames());

// node_modules/@nutui/icons-react/dist/es/icons/IconFont.js
var import_react = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/internal.js
var n = {
  classPrefix: "nut-icon",
  tag: "i",
  fontClassName: "nutui-iconfont"
};

// node_modules/@nutui/icons-react/dist/es/icons/IconFont.js
var x = {
  name: "",
  size: "",
  color: "",
  onClick: (e2) => {
  },
  className: ""
};
function i(e2) {
  return Number.isNaN(Number(e2)) ? String(e2) : `${e2}px`;
}
function k(e2) {
  const {
    name: s8,
    size: t,
    classPrefix: n38 = n.classPrefix,
    color: l7,
    tag: m13 = n.tag,
    children: f,
    className: a,
    fontClassName: N = n.fontClassName,
    style: u,
    onClick: c10,
    ...$
  } = {
    ...x,
    ...e2
  }, o = s8 ? s8.indexOf("/") !== -1 : false, g = o ? "img" : m13, p10 = (d30) => {
    c10 && c10(d30);
  }, C = () => o ? { src: s8 } : {};
  return import_react.default.createElement(
    g,
    {
      className: o ? `${n38}__img ${a || ""} ` : `${N} ${n38} ${n38}-${s8} ${a || ""}`,
      style: {
        color: l7,
        fontSize: i(t),
        width: i(t),
        height: i(t),
        ...u
      },
      ...$,
      onClick: p10,
      ...C()
    },
    f
  );
}
k.displayName = "NutIcon";

// node_modules/@nutui/icons-react/dist/es/icons/IconTemplate-a0ece148.mjs
var import_react2 = __toESM(require_react(), 1);
var Q = { exports: {} };
var W = {};
var Oe;
function cr() {
  return Oe || (Oe = 1, function() {
    var F = import_react2.default, E = Symbol.for("react.element"), D = Symbol.for("react.portal"), _ = Symbol.for("react.fragment"), x2 = Symbol.for("react.strict_mode"), C = Symbol.for("react.profiler"), R = Symbol.for("react.provider"), m13 = Symbol.for("react.context"), f = Symbol.for("react.forward_ref"), T = Symbol.for("react.suspense"), d30 = Symbol.for("react.suspense_list"), h3 = Symbol.for("react.memo"), g = Symbol.for("react.lazy"), P = Symbol.for("react.offscreen"), S = Symbol.iterator, N = "@@iterator";
    function Y(e2) {
      if (e2 === null || typeof e2 != "object")
        return null;
      var r = S && e2[S] || e2[N];
      return typeof r == "function" ? r : null;
    }
    var w = F.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function s8(e2) {
      {
        for (var r = arguments.length, t = new Array(r > 1 ? r - 1 : 0), n38 = 1; n38 < r; n38++)
          t[n38 - 1] = arguments[n38];
        Se("error", e2, t);
      }
    }
    function Se(e2, r, t) {
      {
        var n38 = w.ReactDebugCurrentFrame, i6 = n38.getStackAddendum();
        i6 !== "" && (r += "%s", t = t.concat([i6]));
        var u = t.map(function(o) {
          return String(o);
        });
        u.unshift("Warning: " + r), Function.prototype.apply.call(console[e2], console, u);
      }
    }
    var je = false, ke = false, Fe = false, De = false, Ae = false, re;
    re = Symbol.for("react.module.reference");
    function Ie(e2) {
      return !!(typeof e2 == "string" || typeof e2 == "function" || e2 === _ || e2 === C || Ae || e2 === x2 || e2 === T || e2 === d30 || De || e2 === P || je || ke || Fe || typeof e2 == "object" && e2 !== null && (e2.$$typeof === g || e2.$$typeof === h3 || e2.$$typeof === R || e2.$$typeof === m13 || e2.$$typeof === f || // This needs to include all possible module reference object
      // types supported by any Flight configuration anywhere since
      // we don't know which Flight build this will end up being used
      // with.
      e2.$$typeof === re || e2.getModuleId !== void 0));
    }
    function $e(e2, r, t) {
      var n38 = e2.displayName;
      if (n38)
        return n38;
      var i6 = r.displayName || r.name || "";
      return i6 !== "" ? t + "(" + i6 + ")" : t;
    }
    function te(e2) {
      return e2.displayName || "Context";
    }
    function b(e2) {
      if (e2 == null)
        return null;
      if (typeof e2.tag == "number" && s8("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof e2 == "function")
        return e2.displayName || e2.name || null;
      if (typeof e2 == "string")
        return e2;
      switch (e2) {
        case _:
          return "Fragment";
        case D:
          return "Portal";
        case C:
          return "Profiler";
        case x2:
          return "StrictMode";
        case T:
          return "Suspense";
        case d30:
          return "SuspenseList";
      }
      if (typeof e2 == "object")
        switch (e2.$$typeof) {
          case m13:
            var r = e2;
            return te(r) + ".Consumer";
          case R:
            var t = e2;
            return te(t._context) + ".Provider";
          case f:
            return $e(e2, e2.render, "ForwardRef");
          case h3:
            var n38 = e2.displayName || null;
            return n38 !== null ? n38 : b(e2.type) || "Memo";
          case g: {
            var i6 = e2, u = i6._payload, o = i6._init;
            try {
              return b(o(u));
            } catch {
              return null;
            }
          }
        }
      return null;
    }
    var O = Object.assign, A = 0, ne, ae, oe, ie, ue, se, le;
    function ce() {
    }
    ce.__reactDisabledLog = true;
    function We() {
      {
        if (A === 0) {
          ne = console.log, ae = console.info, oe = console.warn, ie = console.error, ue = console.group, se = console.groupCollapsed, le = console.groupEnd;
          var e2 = {
            configurable: true,
            enumerable: true,
            value: ce,
            writable: true
          };
          Object.defineProperties(console, {
            info: e2,
            log: e2,
            warn: e2,
            error: e2,
            group: e2,
            groupCollapsed: e2,
            groupEnd: e2
          });
        }
        A++;
      }
    }
    function Ne() {
      {
        if (A--, A === 0) {
          var e2 = {
            configurable: true,
            enumerable: true,
            writable: true
          };
          Object.defineProperties(console, {
            log: O({}, e2, {
              value: ne
            }),
            info: O({}, e2, {
              value: ae
            }),
            warn: O({}, e2, {
              value: oe
            }),
            error: O({}, e2, {
              value: ie
            }),
            group: O({}, e2, {
              value: ue
            }),
            groupCollapsed: O({}, e2, {
              value: se
            }),
            groupEnd: O({}, e2, {
              value: le
            })
          });
        }
        A < 0 && s8("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
      }
    }
    var q = w.ReactCurrentDispatcher, J;
    function L(e2, r, t) {
      {
        if (J === void 0)
          try {
            throw Error();
          } catch (i6) {
            var n38 = i6.stack.trim().match(/\n( *(at )?)/);
            J = n38 && n38[1] || "";
          }
        return `
` + J + e2;
      }
    }
    var G = false, V2;
    {
      var Ye = typeof WeakMap == "function" ? WeakMap : Map;
      V2 = new Ye();
    }
    function fe(e2, r) {
      if (!e2 || G)
        return "";
      {
        var t = V2.get(e2);
        if (t !== void 0)
          return t;
      }
      var n38;
      G = true;
      var i6 = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var u;
      u = q.current, q.current = null, We();
      try {
        if (r) {
          var o = function() {
            throw Error();
          };
          if (Object.defineProperty(o.prototype, "props", {
            set: function() {
              throw Error();
            }
          }), typeof Reflect == "object" && Reflect.construct) {
            try {
              Reflect.construct(o, []);
            } catch (y) {
              n38 = y;
            }
            Reflect.construct(e2, [], o);
          } else {
            try {
              o.call();
            } catch (y) {
              n38 = y;
            }
            e2.call(o.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (y) {
            n38 = y;
          }
          e2();
        }
      } catch (y) {
        if (y && n38 && typeof y.stack == "string") {
          for (var a = y.stack.split(`
`), v3 = n38.stack.split(`
`), l7 = a.length - 1, c10 = v3.length - 1; l7 >= 1 && c10 >= 0 && a[l7] !== v3[c10]; )
            c10--;
          for (; l7 >= 1 && c10 >= 0; l7--, c10--)
            if (a[l7] !== v3[c10]) {
              if (l7 !== 1 || c10 !== 1)
                do
                  if (l7--, c10--, c10 < 0 || a[l7] !== v3[c10]) {
                    var p10 = `
` + a[l7].replace(" at new ", " at ");
                    return e2.displayName && p10.includes("<anonymous>") && (p10 = p10.replace("<anonymous>", e2.displayName)), typeof e2 == "function" && V2.set(e2, p10), p10;
                  }
                while (l7 >= 1 && c10 >= 0);
              break;
            }
        }
      } finally {
        G = false, q.current = u, Ne(), Error.prepareStackTrace = i6;
      }
      var k2 = e2 ? e2.displayName || e2.name : "", we = k2 ? L(k2) : "";
      return typeof e2 == "function" && V2.set(e2, we), we;
    }
    function Le(e2, r, t) {
      return fe(e2, false);
    }
    function Ve(e2) {
      var r = e2.prototype;
      return !!(r && r.isReactComponent);
    }
    function M(e2, r, t) {
      if (e2 == null)
        return "";
      if (typeof e2 == "function")
        return fe(e2, Ve(e2));
      if (typeof e2 == "string")
        return L(e2);
      switch (e2) {
        case T:
          return L("Suspense");
        case d30:
          return L("SuspenseList");
      }
      if (typeof e2 == "object")
        switch (e2.$$typeof) {
          case f:
            return Le(e2.render);
          case h3:
            return M(e2.type, r, t);
          case g: {
            var n38 = e2, i6 = n38._payload, u = n38._init;
            try {
              return M(u(i6), r, t);
            } catch {
            }
          }
        }
      return "";
    }
    var U = Object.prototype.hasOwnProperty, de = {}, ve = w.ReactDebugCurrentFrame;
    function B(e2) {
      if (e2) {
        var r = e2._owner, t = M(e2.type, e2._source, r ? r.type : null);
        ve.setExtraStackFrame(t);
      } else
        ve.setExtraStackFrame(null);
    }
    function Me(e2, r, t, n38, i6) {
      {
        var u = Function.call.bind(U);
        for (var o in e2)
          if (u(e2, o)) {
            var a = void 0;
            try {
              if (typeof e2[o] != "function") {
                var v3 = Error((n38 || "React class") + ": " + t + " type `" + o + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof e2[o] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                throw v3.name = "Invariant Violation", v3;
              }
              a = e2[o](r, o, n38, t, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (l7) {
              a = l7;
            }
            a && !(a instanceof Error) && (B(i6), s8("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", n38 || "React class", t, o, typeof a), B(null)), a instanceof Error && !(a.message in de) && (de[a.message] = true, B(i6), s8("Failed %s type: %s", t, a.message), B(null));
          }
      }
    }
    var Ue = Array.isArray;
    function z(e2) {
      return Ue(e2);
    }
    function Be(e2) {
      {
        var r = typeof Symbol == "function" && Symbol.toStringTag, t = r && e2[Symbol.toStringTag] || e2.constructor.name || "Object";
        return t;
      }
    }
    function qe(e2) {
      try {
        return pe(e2), false;
      } catch {
        return true;
      }
    }
    function pe(e2) {
      return "" + e2;
    }
    function he(e2) {
      if (qe(e2))
        return s8("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", Be(e2)), pe(e2);
    }
    var I = w.ReactCurrentOwner, Je = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    }, ge, me, H;
    H = {};
    function Ge(e2) {
      if (U.call(e2, "ref")) {
        var r = Object.getOwnPropertyDescriptor(e2, "ref").get;
        if (r && r.isReactWarning)
          return false;
      }
      return e2.ref !== void 0;
    }
    function ze(e2) {
      if (U.call(e2, "key")) {
        var r = Object.getOwnPropertyDescriptor(e2, "key").get;
        if (r && r.isReactWarning)
          return false;
      }
      return e2.key !== void 0;
    }
    function He(e2, r) {
      if (typeof e2.ref == "string" && I.current && r && I.current.stateNode !== r) {
        var t = b(I.current.type);
        H[t] || (s8('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', b(I.current.type), e2.ref), H[t] = true);
      }
    }
    function Ke(e2, r) {
      {
        var t = function() {
          ge || (ge = true, s8("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", r));
        };
        t.isReactWarning = true, Object.defineProperty(e2, "key", {
          get: t,
          configurable: true
        });
      }
    }
    function Xe(e2, r) {
      {
        var t = function() {
          me || (me = true, s8("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", r));
        };
        t.isReactWarning = true, Object.defineProperty(e2, "ref", {
          get: t,
          configurable: true
        });
      }
    }
    var Ze = function(e2, r, t, n38, i6, u, o) {
      var a = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: E,
        // Built-in properties that belong on the element
        type: e2,
        key: r,
        ref: t,
        props: o,
        // Record the component responsible for creating this element.
        _owner: u
      };
      return a._store = {}, Object.defineProperty(a._store, "validated", {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      }), Object.defineProperty(a, "_self", {
        configurable: false,
        enumerable: false,
        writable: false,
        value: n38
      }), Object.defineProperty(a, "_source", {
        configurable: false,
        enumerable: false,
        writable: false,
        value: i6
      }), Object.freeze && (Object.freeze(a.props), Object.freeze(a)), a;
    };
    function Qe(e2, r, t, n38, i6) {
      {
        var u, o = {}, a = null, v3 = null;
        t !== void 0 && (he(t), a = "" + t), ze(r) && (he(r.key), a = "" + r.key), Ge(r) && (v3 = r.ref, He(r, i6));
        for (u in r)
          U.call(r, u) && !Je.hasOwnProperty(u) && (o[u] = r[u]);
        if (e2 && e2.defaultProps) {
          var l7 = e2.defaultProps;
          for (u in l7)
            o[u] === void 0 && (o[u] = l7[u]);
        }
        if (a || v3) {
          var c10 = typeof e2 == "function" ? e2.displayName || e2.name || "Unknown" : e2;
          a && Ke(o, c10), v3 && Xe(o, c10);
        }
        return Ze(e2, a, v3, i6, n38, I.current, o);
      }
    }
    var K = w.ReactCurrentOwner, be = w.ReactDebugCurrentFrame;
    function j(e2) {
      if (e2) {
        var r = e2._owner, t = M(e2.type, e2._source, r ? r.type : null);
        be.setExtraStackFrame(t);
      } else
        be.setExtraStackFrame(null);
    }
    var X;
    X = false;
    function Z(e2) {
      return typeof e2 == "object" && e2 !== null && e2.$$typeof === E;
    }
    function ye() {
      {
        if (K.current) {
          var e2 = b(K.current.type);
          if (e2)
            return `

Check the render method of \`` + e2 + "`.";
        }
        return "";
      }
    }
    function er(e2) {
      {
        if (e2 !== void 0) {
          var r = e2.fileName.replace(/^.*[\\\/]/, ""), t = e2.lineNumber;
          return `

Check your code at ` + r + ":" + t + ".";
        }
        return "";
      }
    }
    var Ee = {};
    function rr(e2) {
      {
        var r = ye();
        if (!r) {
          var t = typeof e2 == "string" ? e2 : e2.displayName || e2.name;
          t && (r = `

Check the top-level render call using <` + t + ">.");
        }
        return r;
      }
    }
    function _e(e2, r) {
      {
        if (!e2._store || e2._store.validated || e2.key != null)
          return;
        e2._store.validated = true;
        var t = rr(r);
        if (Ee[t])
          return;
        Ee[t] = true;
        var n38 = "";
        e2 && e2._owner && e2._owner !== K.current && (n38 = " It was passed a child from " + b(e2._owner.type) + "."), j(e2), s8('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', t, n38), j(null);
      }
    }
    function Re(e2, r) {
      {
        if (typeof e2 != "object")
          return;
        if (z(e2))
          for (var t = 0; t < e2.length; t++) {
            var n38 = e2[t];
            Z(n38) && _e(n38, r);
          }
        else if (Z(e2))
          e2._store && (e2._store.validated = true);
        else if (e2) {
          var i6 = Y(e2);
          if (typeof i6 == "function" && i6 !== e2.entries)
            for (var u = i6.call(e2), o; !(o = u.next()).done; )
              Z(o.value) && _e(o.value, r);
        }
      }
    }
    function tr(e2) {
      {
        var r = e2.type;
        if (r == null || typeof r == "string")
          return;
        var t;
        if (typeof r == "function")
          t = r.propTypes;
        else if (typeof r == "object" && (r.$$typeof === f || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        r.$$typeof === h3))
          t = r.propTypes;
        else
          return;
        if (t) {
          var n38 = b(r);
          Me(t, e2.props, "prop", n38, e2);
        } else if (r.PropTypes !== void 0 && !X) {
          X = true;
          var i6 = b(r);
          s8("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", i6 || "Unknown");
        }
        typeof r.getDefaultProps == "function" && !r.getDefaultProps.isReactClassApproved && s8("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
      }
    }
    function nr(e2) {
      {
        for (var r = Object.keys(e2.props), t = 0; t < r.length; t++) {
          var n38 = r[t];
          if (n38 !== "children" && n38 !== "key") {
            j(e2), s8("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", n38), j(null);
            break;
          }
        }
        e2.ref !== null && (j(e2), s8("Invalid attribute `ref` supplied to `React.Fragment`."), j(null));
      }
    }
    function Te(e2, r, t, n38, i6, u) {
      {
        var o = Ie(e2);
        if (!o) {
          var a = "";
          (e2 === void 0 || typeof e2 == "object" && e2 !== null && Object.keys(e2).length === 0) && (a += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
          var v3 = er(i6);
          v3 ? a += v3 : a += ye();
          var l7;
          e2 === null ? l7 = "null" : z(e2) ? l7 = "array" : e2 !== void 0 && e2.$$typeof === E ? (l7 = "<" + (b(e2.type) || "Unknown") + " />", a = " Did you accidentally export a JSX literal instead of a component?") : l7 = typeof e2, s8("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", l7, a);
        }
        var c10 = Qe(e2, r, t, i6, u);
        if (c10 == null)
          return c10;
        if (o) {
          var p10 = r.children;
          if (p10 !== void 0)
            if (n38)
              if (z(p10)) {
                for (var k2 = 0; k2 < p10.length; k2++)
                  Re(p10[k2], e2);
                Object.freeze && Object.freeze(p10);
              } else
                s8("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
            else
              Re(p10, e2);
        }
        return e2 === _ ? nr(c10) : tr(c10), c10;
      }
    }
    function ar(e2, r, t) {
      return Te(e2, r, t, true);
    }
    function or(e2, r, t) {
      return Te(e2, r, t, false);
    }
    var ir = or, ur = ar;
    W.Fragment = _, W.jsx = ir, W.jsxs = ur;
  }()), W;
}
false ? Q.exports = lr() : Q.exports = cr();
var ee = Q.exports;
var fr = ee.Fragment;
var xe = ee.jsx;
var gr = ee.jsxs;
var dr = {
  className: "",
  style: void 0,
  viewBox: " 0 0 1024 1024",
  name: "",
  width: "",
  height: "",
  onClick: () => {
  }
};
var vr = (F) => {
  const E = n.classPrefix, { viewBox: D, className: _, style: x2, name: C, color: R, width: m13, height: f, children: T, onClick: d30 } = { ...dr, ...F }, h3 = (s8) => {
    d30 && d30(s8);
  }, g = (s8) => s8 === "" ? "" : isNaN(Number(s8)) ? String(s8) : s8 + "px", P = () => `${E} ${E}-${C} ${_}`, S = {}, N = g(m13 || ""), Y = g(f || "");
  N && (S.width = N), Y && (S.height = Y);
  const w = () => ({
    color: R,
    ...x2,
    ...S
  });
  return xe(fr, { children: xe(
    "svg",
    {
      className: P(),
      style: w(),
      onClick: h3,
      xmlns: "http://www.w3.org/2000/svg",
      color: R,
      viewBox: D,
      "aria-labelledby": C,
      role: "presentation",
      children: T
    }
  ) });
};
var mr = vr;

// node_modules/@nutui/icons-react/dist/es/icons/AddToCart.js
var import_react3 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/AddToHome.js
var import_react4 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Add.js
var import_react5 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/ArrowDotLeft.js
var import_react6 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/ArrowDownSize6.js
var import_react7 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/ArrowDownSmall.js
var import_react8 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/ArrowDown.js
var import_react9 = __toESM(require_react());
var l = (a) => {
  const r = { ...dr, ...a };
  return xe(mr, { ...r, name: r.name || "ArrowDown", viewBox: "0 0 1024 1024", children: xe(
    "path",
    {
      d: "M153.81 362.67a10.67 10.67 0 0 0-7.68 18.13L512 746.67 877.87 380.8a10.67 10.67 0 0 0-7.68-18.13h-60.38a10.03 10.03 0 0 0-7.46 3.2L512 656.21 221.65 365.87a10.88 10.88 0 0 0-7.46-3.2z",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/ArrowLeftSmall.js
var import_react10 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/ArrowLeft.js
var import_react11 = __toESM(require_react());
var d = (o) => {
  const r = { ...dr, ...o };
  return xe(mr, { ...r, name: r.name || "ArrowLeft", viewBox: "0 0 1024 1024", children: xe(
    "path",
    {
      d: "M661.33 153.81a10.67 10.67 0 0 0-18.13-7.68L277.33 512 643.2 877.87a10.67 10.67 0 0 0 18.13-7.68v-60.38a10.03 10.03 0 0 0-3.2-7.46L367.79 512l290.34-290.35a10.88 10.88 0 0 0 3.2-7.46z",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/ArrowRadius.js
var import_react12 = __toESM(require_react());
var i2 = (a) => {
  const r = { ...dr, ...a };
  return xe(mr, { ...r, name: r.name || "ArrowRadius", viewBox: "0 0 8 4", children: xe(
    "path",
    {
      d: "M3.253.336a1 1 0 0 1 1.494 0L8 4H0z",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/ArrowRightSize6.js
var import_react13 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/ArrowRightSmall.js
var import_react14 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/ArrowRight.js
var import_react15 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/ArrowTransfer.js
var import_react16 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/ArrowUpSize6.js
var import_react17 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/ArrowUpSmall.js
var import_react18 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/ArrowUp.js
var import_react19 = __toESM(require_react());
var p = (a) => {
  const r = { ...dr, ...a };
  return xe(mr, { ...r, name: r.name || "ArrowUp", viewBox: "0 0 1024 1024", children: xe(
    "path",
    {
      d: "M870.19 661.33a10.67 10.67 0 0 0 7.68-18.13L512 277.33 146.13 643.2a10.67 10.67 0 0 0 7.68 18.13h60.38c2.77 0 5.55-1.07 7.46-3.2L512 367.79l290.35 290.34c1.92 1.92 4.69 3.2 7.46 3.2z",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/Ask.js
var import_react20 = __toESM(require_react());
var n2 = (o) => {
  const a = { ...dr, ...o };
  return xe(mr, { ...a, name: a.name || "Ask", viewBox: "0 0 48 48", children: xe(
    "path",
    {
      d: "M48 24c0 13.255-10.745 24-24 24S0 37.255 0 24 10.745 0 24 0s24 10.745 24 24m-3 0c0-11.598-9.402-21-21-21C12.403 3 3 12.402 3 24s9.403 21 21 21c11.598 0 21-9.402 21-21m-21-9a4.5 4.5 0 0 0-4.472 4c-.03.275-.251.5-.527.5h-2a.476.476 0 0 1-.484-.5 7.5 7.5 0 1 1 8.983 7.85v.65a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5V24H24a4.5 4.5 0 1 0 0-9m-1.5 17a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5z",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/Backtop.js
var import_react21 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Cart.js
var import_react22 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Category.js
var import_react23 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/CheckChecked.js
var import_react24 = __toESM(require_react());
var c = (o) => {
  const r = { ...dr, ...o };
  return xe(mr, { ...r, name: r.name || "CheckChecked", viewBox: "0 0 16 16", children: xe(
    "path",
    {
      d: "M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m0-4a4 4 0 1 1 0-8 4 4 0 0 1 0 8",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/CheckClose.js
var import_react25 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/CheckDisabled.js
var import_react26 = __toESM(require_react());
var n3 = (o) => {
  const a = { ...dr, ...o };
  return xe(mr, { ...a, name: a.name || "CheckDisabled", viewBox: "0 0 16 16", children: xe(
    "path",
    {
      d: "M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m3.75-7.25h-7.5A.25.25 0 0 1 4 8.5v-1a.25.25 0 0 1 .25-.25h7.5a.25.25 0 0 1 .25.25v1a.25.25 0 0 1-.25.25",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/CheckNormal.js
var import_react27 = __toESM(require_react());
var n4 = (a) => {
  const r = { ...dr, ...a };
  return xe(mr, { ...r, name: r.name || "CheckNormal", viewBox: "0 0 16 16", children: xe(
    "path",
    {
      d: "M8 15.5a7.5 7.5 0 1 1 0-15 7.5 7.5 0 0 1 0 15m0 .5A8 8 0 1 0 8 0a8 8 0 0 0 0 16",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/Check.js
var import_react28 = __toESM(require_react());
var d2 = (e2) => {
  const r = { ...dr, ...e2 };
  return xe(mr, { ...r, name: r.name || "Check", viewBox: "0 0 49 48", children: xe(
    "path",
    {
      d: "M45.121 16.121 47.243 14 43 9.757l-2.121 2.122L19 33.757 7.121 21.88 5 19.757.757 24l2.122 2.121L14.757 38l2.122 2.121L19 42.243l2.121-2.122L23.243 38z",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/Checked.js
var import_react29 = __toESM(require_react());
var n5 = (o) => {
  const a = { ...dr, ...o };
  return xe(mr, { ...a, name: a.name || "Checked", viewBox: "0 0 16 16", children: xe(
    "path",
    {
      d: "M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m4.325-10.117-5.318 5.362-3.332-3.36a.25.25 0 0 1 0-.351l.701-.707a.25.25 0 0 1 .355 0L7.007 9.12l4.262-4.297a.25.25 0 0 1 .355 0l.701.707a.25.25 0 0 1 0 .352",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/Clock.js
var import_react30 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Close.js
var import_react31 = __toESM(require_react());
var n6 = (c10) => {
  const o = { ...dr, ...c10 };
  return xe(mr, { ...o, name: o.name || "Close", viewBox: "0 0 1024 1024", children: xe(
    "path",
    {
      d: "m512 557.23 279.25 279.25c4.27 4.27 10.88 4.27 14.94 0l30.29-30.29c4.27-4.27 4.27-10.88 0-14.94L557.23 512l279.25-279.25c4.27-4.27 4.27-10.88 0-14.94l-30.29-30.29c-4.27-4.27-10.88-4.27-14.94 0L512 466.77 232.75 187.52c-4.27-4.27-10.88-4.27-14.94 0l-30.29 30.29c-4.27 4.27-4.27 10.88 0 14.94L466.77 512 187.52 791.25c-4.27 4.27-4.27 10.88 0 14.94l30.29 30.29c4.27 4.27 10.88 4.27 14.94 0z",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/Comment.js
var import_react32 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Coupon.js
var import_react33 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Del.js
var import_react34 = __toESM(require_react());
var n7 = (o) => {
  const a = { ...dr, ...o };
  return xe(mr, { ...a, name: a.name || "Del", viewBox: "0 0 48 48", children: xe(
    "path",
    {
      d: "M15.5 0a.5.5 0 0 0-.5.5v2a.5.5 0 0 0 .5.5h17a.5.5 0 0 0 .5-.5v-2a.5.5 0 0 0-.5-.5zM48 7.5a.5.5 0 0 0-.5-.5H.5a.5.5 0 0 0-.5.5v2a.5.5 0 0 0 .5.5h3.824l2.904 26.86A8 8 0 0 0 15.182 44h17.636a7.999 7.999 0 0 0 7.953-7.14L43.676 10H47.5a.5.5 0 0 0 .5-.5zM10.21 36.537 7.343 10h33.316l-2.87 26.537A4.999 4.999 0 0 1 32.819 41H15.182a5 5 0 0 1-4.971-4.463M18.5 19a.5.5 0 0 0-.5.5v11a.5.5 0 0 0 .5.5h2a.5.5 0 0 0 .5-.5v-11a.5.5 0 0 0-.5-.5zm11.5.5v11a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 .5.5",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/Dongdong.js
var import_react35 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Edit.js
var import_react36 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Eye.js
var import_react37 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Fabulous.js
var import_react38 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Failure.js
var import_react39 = __toESM(require_react());
var n8 = (r) => {
  const a = { ...dr, ...r };
  return xe(mr, { ...a, name: a.name || "Failure", viewBox: "0 0 48 48", children: xe(
    "path",
    {
      d: "M48 24C48 10.745 37.255 0 24 0S0 10.745 0 24s10.745 24 24 24 24-10.745 24-24m-3 0c0 11.598-9.402 21-21 21S3 35.598 3 24 12.402 3 24 3s21 9.402 21 21m-28.146-9.268a.5.5 0 0 0-.708 0l-1.413 1.414a.5.5 0 0 0 0 .708L21.879 24l-7.146 7.146a.5.5 0 0 0 0 .708l1.413 1.414a.5.5 0 0 0 .708 0L24 26.12l7.146 7.147a.5.5 0 0 0 .708 0l1.413-1.414a.5.5 0 0 0 0-.708L26.121 24l7.146-7.146a.5.5 0 0 0 0-.708l-1.413-1.414a.5.5 0 0 0-.708 0L24 21.88z",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/Feedback.js
var import_react40 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Filter.js
var import_react41 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/FollowAdd.js
var import_react42 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/FollowAdded.js
var import_react43 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Footprint.js
var import_react44 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Health.js
var import_react45 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/HeartFill.js
var import_react46 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Heart.js
var import_react47 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Hi.js
var import_react48 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Home.js
var import_react49 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/ImageError.js
var import_react50 = __toESM(require_react());
var d3 = (a) => {
  const r = { ...dr, ...a };
  return gr(mr, { ...r, name: r.name || "ImageError", viewBox: "0 0 1024 1024", children: [
    xe(
      "path",
      {
        d: "M696.43 465.25c40.61 0 73.53-32.72 73.53-73.09s-32.96-73.08-73.53-73.08-73.54 32.72-73.54 73.08 32.92 73.09 73.54 73.09M535.74 650.62l-273.61-259.4a56.19 56.19 0 0 0-15.36 11.58l-114 119.63-6-222.77c-.73-26.82 20.84-49.41 47.67-50.14l201.77-5.44 47.34-50-250.43 6.75C119 202.33 76.33 247.17 77.78 301l7.32 271.4 4.5 166.78C91.06 793 136.05 835.47 190.2 834l176-4.75 12-.32 47.34-50 116.18-122.64z",
        fill: "currentColor"
      }
    ),
    ",",
    xe(
      "path",
      {
        d: "m861.71 214.8-242.83-33.86-55.09 41.46L855 263a49.05 49.05 0 0 1 41.79 55.13l-54.33 389.59-120.87-159.05A59.86 59.86 0 0 0 638.06 537l-44 33.08 65.07 86.15L603.84 698l-79.57 60.1-54.92 41.48 34.17 4.76 270.73 37.76a97.55 97.55 0 0 0 109.88-79.6 22.37 22.37 0 0 0 .65-3.44l60.53-434.16c7.44-53.32-29.95-102.62-83.6-110.1",
        fill: "currentColor"
      }
    )
  ] });
};

// node_modules/@nutui/icons-react/dist/es/icons/Image.js
var import_react51 = __toESM(require_react());
var n9 = (o) => {
  const a = { ...dr, ...o };
  return xe(mr, { ...a, name: a.name || "Image", viewBox: "0 0 49 48", children: xe(
    "path",
    {
      d: "M48 18.85V36a8 8 0 0 1-8 8H8a8 8 0 0 1-8-8V8a8 8 0 0 1 8-8h32a8 8 0 0 1 8 8v10.153c.054.226.056.465 0 .696M8 3a5 5 0 0 0-5 5V24.49A16.536 16.536 0 0 1 7 24c3.45 0 6.655 1.06 9.303 2.87C19.627 19.295 27.193 14 36 14c3.212 0 6.26.705 9 1.97V8a5 5 0 0 0-5-5zm2 9a2 2 0 1 1 4 0 2 2 0 0 1-4 0M3 27.602V36a5 5 0 0 0 5 5h32a5 5 0 0 0 5-5V19.333A18.412 18.412 0 0 0 36 17c-8.124 0-15.028 5.237-17.513 12.524a1.499 1.499 0 0 1-2.486.914A13.444 13.444 0 0 0 7 27c-1.395 0-2.738.211-4 .602",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/Internation.js
var import_react52 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Jd.js
var import_react53 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Jingdou.js
var import_react54 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/JoySmile.js
var import_react55 = __toESM(require_react());
var c2 = (a) => {
  const o = { ...dr, ...a };
  return xe(mr, { ...o, name: o.name || "JoySmile", viewBox: "0 0 1024 1024", children: xe(
    "path",
    {
      d: "M728.58 159.81a39.33 39.33 0 1 0-54.28-56.95c-94.92 90.4-244.1 90.4-339.03 0A39.35 39.35 0 0 0 281 159.81c125.33 119.35 322.24 119.35 447.58 0",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/Joy.js
var import_react56 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Link.js
var import_react57 = __toESM(require_react());
var d4 = (r) => {
  const a = { ...dr, ...r };
  return xe(mr, { ...a, name: a.name || "Link", viewBox: "0 0 1024 1024", children: xe(
    "path",
    {
      d: "M777.87 246.13a166.03 166.03 0 0 0-234.78 0l-74.39 74.24a43.89 43.89 0 0 1-62.03-62.1l74.24-74.24A253.81 253.81 0 0 1 839.9 543.01l-74.17 74.32a43.89 43.89 0 1 1-62.1-62.03l74.24-74.24a166.03 166.03 0 0 0 0-234.86zM637.44 386.56a43.89 43.89 0 0 1 0 62.03L448.66 637.51a43.89 43.89 0 1 1-62.1-62.1l188.93-188.92a43.89 43.89 0 0 1 62.1 0zm-317.07 20.11a43.89 43.89 0 0 1 0 62.03l-74.24 74.31a166.03 166.03 0 0 0 234.78 234.86l74.39-74.24a43.89 43.89 0 0 1 62.03 62.1l-74.24 74.17A253.81 253.81 0 1 1 184.1 480.99l74.17-74.32a43.89 43.89 0 0 1 62.1 0",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/List.js
var import_react58 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Loading.js
var import_react59 = __toESM(require_react());
var s = (o) => {
  const a = { ...dr, ...o };
  return xe(mr, { ...a, name: a.name || "Loading", viewBox: "0 0 1024 1024", children: xe(
    "path",
    {
      d: "M512 73.14a43.89 43.89 0 0 1 43.89 43.89v118.49a43.89 43.89 0 0 1-87.78 0V117.03A43.89 43.89 0 0 1 512 73.14M201.65 201.65a43.89 43.89 0 0 1 62.1 0l83.68 83.83a43.89 43.89 0 1 1-62.03 62.02l-83.75-83.75a43.89 43.89 0 0 1 0-62.1m620.7 0a43.89 43.89 0 0 1 0 62.1l-83.83 83.68a43.89 43.89 0 1 1-62.02-62.03l83.75-83.82a43.89 43.89 0 0 1 62.1 0zM73.14 512a43.89 43.89 0 0 1 43.89-43.89h118.49a43.89 43.89 0 0 1 0 87.78H117.03A43.89 43.89 0 0 1 73.14 512m671.45 0a43.89 43.89 0 0 1 43.89-43.89h118.49a43.89 43.89 0 1 1 0 87.78H788.48A43.89 43.89 0 0 1 744.59 512M347.5 676.5a43.89 43.89 0 0 1 0 62.02l-83.75 83.83a43.89 43.89 0 1 1-62.1-62.1l83.83-83.68a43.89 43.89 0 0 1 62.02 0zm329 0a43.89 43.89 0 0 1 62.02 0l83.83 83.75a43.89 43.89 0 1 1-62.1 62.1l-83.68-83.83a43.89 43.89 0 0 1 0-62.02zM512 744.59a43.89 43.89 0 0 1 43.89 43.89v118.49a43.89 43.89 0 1 1-87.78 0V788.48A43.89 43.89 0 0 1 512 744.59",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/Loading1.js
var import_react60 = __toESM(require_react());
var d5 = (a) => {
  const o = { ...dr, ...a };
  return xe(mr, { ...o, name: o.name || "Loading1", viewBox: "0 0 1024 1024", children: xe(
    "path",
    {
      d: "M520.66 64.56a29.24 29.24 0 0 0-7.07-.89c-16.21 0-29.35 13.14-29.35 29.35 0 15.83 12.54 28.7 28.23 29.29v.08c.38 0 .75-.01 1.12-.02 216.49 0 389.63 173.94 389.63 390.44S730.08 901.64 513.59 901.63 123.96 729.3 123.96 512.8c0-.27.01-.54.01-.8h-.01c0-16.21-13.14-29.35-29.35-29.35S65.26 495.79 65.26 512c0 .06.01.11.01.16 0 .21-.01.42-.01.64 0 247.61 200.72 448.33 448.33 448.33 247.61 0 448.33-200.72 448.33-448.33 0-245.24-196.92-444.46-441.25-448.24z",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/Location.js
var import_react61 = __toESM(require_react());
var m = (a) => {
  const o = { ...dr, ...a };
  return xe(mr, { ...o, name: o.name || "Location", viewBox: "0 0 1024 1024", children: xe(
    "path",
    {
      d: "M533.33 1024s448-232.53 448-576c0-247.47-200.53-448-448-448s-448 200.53-448 448c0 343.47 448 576 448 576m181.12-206.72c-52.91 47.57-105.81 85.33-145.92 111.36a893.32 893.32 0 0 1-35.2 21.76 1148.76 1148.76 0 0 1-181.12-133.12C244.05 719.79 149.33 591.79 149.33 448c0-212.05 171.95-384 384-384s384 171.95 384 384c0 143.79-94.72 271.79-202.88 369.28M533.33 640a192 192 0 1 0-.02-384.02 192 192 0 0 0 .02 384.02m0-64c-70.61 0-128-57.39-128-128s57.39-128 128-128 128 57.39 128 128-57.39 128-128 128",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/LogisticsError.js
var import_react62 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Mail.js
var import_react63 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Marshalling.js
var import_react64 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/MaskClose.js
var import_react65 = __toESM(require_react());
var n10 = (r) => {
  const s8 = { ...dr, ...r };
  return xe(mr, { ...s8, name: s8.name || "MaskClose", viewBox: "0 0 1024 1024", children: xe(
    "path",
    {
      d: "M512 14.9C238.59 14.9 14.9 238.6 14.9 512s223.7 497.1 497.1 497.1 497.1-223.7 497.1-497.1S785.4 14.9 512 14.9m207.13 646.23c16.57 16.57 16.57 41.42 0 58s-41.42 16.57-58 0L512 570 362.87 719.13c-16.57 16.57-41.43 16.57-58 0s-16.57-41.42 0-58L454 512 304.87 362.87c-16.57-16.57-16.57-41.43 0-58s41.42-16.57 58 0L512 454l149.13-149.13c16.57-16.57 41.43-16.57 58 0s16.57 41.42 0 58L570 512z",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/Message.js
var import_react66 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Microphone.js
var import_react67 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Minus.js
var import_react68 = __toESM(require_react());
var i3 = (o) => {
  const r = { ...dr, ...o };
  return xe(mr, { ...r, name: r.name || "Minus", viewBox: "0 0 20 20", children: xe(
    "path",
    {
      d: "M0 10a1 1 0 0 1 1-1h18a1 1 0 1 1 0 2H1a1 1 0 0 1-1-1",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/More.js
var import_react69 = __toESM(require_react());
var l2 = (a) => {
  const r = { ...dr, ...a };
  return xe(mr, { ...r, name: r.name || "More", viewBox: "0 0 40 6", children: xe(
    "path",
    {
      d: "M3 6a3 3 0 1 0 0-6 3 3 0 0 0 0 6M23 3a3 3 0 1 1-6 0 3 3 0 0 1 6 0M40 3a3 3 0 1 1-6 0 3 3 0 0 1 6 0",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/NetworkError.js
var import_react70 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/NoReceive.js
var import_react71 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Notice.js
var import_react72 = __toESM(require_react());
var n11 = (r) => {
  const c10 = { ...dr, ...r };
  return xe(mr, { ...c10, name: c10.name || "Notice", viewBox: "0 0 1024 1024", children: xe(
    "path",
    {
      d: "M533.33 0C539.3 0 544 4.69 544 10.67v76.16c179.41 16.21 320 167.04 320 350.5v226.35c0 26.45 6.19 52.69 17.92 76.37l36.48 72.96c14.08 28.37-6.4 61.65-38.19 61.66H143.79c-31.79 0-52.27-33.28-38.19-61.66l36.48-72.96c11.95-23.68 17.92-49.92 17.92-76.37V437.33c0-183.68 140.59-334.29 320-350.5V10.67C480 4.7 484.69 0 490.67 0zM224 437.33v226.35c0 36.48-8.53 72.32-24.75 104.96l-21.12 42.03h667.74l-21.12-42.03C808.54 736 800 700.16 800 663.68V437.33c0-159.15-128.85-288-288-288s-288 128.85-288 288M394.67 960c-5.97 0-10.67 4.69-10.67 10.67v42.66c0 5.97 4.69 10.67 10.67 10.67h234.66c5.97 0 10.67-4.69 10.67-10.67v-42.66c0-5.97-4.69-10.67-10.67-10.67z",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/Order.js
var import_react73 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Phone.js
var import_react74 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Photograph.js
var import_react75 = __toESM(require_react());
var e = (r) => {
  const c10 = { ...dr, ...r };
  return xe(mr, { ...c10, name: c10.name || "Photograph", viewBox: "0 0 1024 1024", children: xe(
    "path",
    {
      d: "M402.35 42.67c-55.47 0-104.75 35.84-121.6 88.53l-5.98 18.13h-104.1C76.38 149.33 0 225.7 0 320v490.67c0 94.29 76.37 170.67 170.67 170.66h682.66c94.29 0 170.67-76.37 170.67-170.66V320c0-94.29-76.37-170.67-170.67-170.67h-104.1l-5.98-18.13a127.89 127.89 0 0 0-121.81-88.53zM170.67 213.33h150.61l20.27-62.29c8.53-26.45 33.07-44.37 60.8-44.37h219.09c27.73 0 52.27 17.92 61.01 44.37l20.27 62.29h150.61C912.21 213.33 960 261.12 960 320v490.67c0 58.88-47.79 106.67-106.67 106.66H170.67C111.79 917.33 64 869.54 64 810.67V320c0-58.88 47.79-106.67 106.67-106.67M725.33 288c0-5.97 4.69-10.67 10.67-10.67h106.67c5.97 0 10.67 4.69 10.66 10.67v42.67c0 5.97-4.69 10.67-10.66 10.66H736c-5.97 0-10.67-4.69-10.67-10.66zM736 554.67c0 123.73-100.27 224-224 224s-224-100.27-224-224 100.27-224 224-224 224 100.27 224 224m-64 0c0-88.32-71.68-160-160-160s-160 71.68-160 160 71.68 160 160 160 160-71.68 160-160",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/PickedUp.js
var import_react76 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/PlayCircleFill.js
var import_react77 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/PlayDoubleBack.js
var import_react78 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/PlayDoubleForward.js
var import_react79 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/PlayStart.js
var import_react80 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/PlayStop.js
var import_react81 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Plus.js
var import_react82 = __toESM(require_react());
var d6 = (o) => {
  const a = { ...dr, ...o };
  return xe(mr, { ...a, name: a.name || "Plus", viewBox: "0 0 20 20", children: xe(
    "path",
    {
      d: "M9 19a1 1 0 1 0 2 0v-8h8a1 1 0 1 0 0-2h-8V1a1 1 0 1 0-2 0v8H1a1 1 0 1 0 0 2h8z",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/Processing.js
var import_react83 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/QrCode.js
var import_react84 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Received.js
var import_react85 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Refresh.js
var import_react86 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Refund.js
var import_react87 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Reload.js
var import_react88 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Retweet.js
var import_react89 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Save.js
var import_react90 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Scan.js
var import_react91 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Search.js
var import_react92 = __toESM(require_react());
var n12 = (o) => {
  const a = { ...dr, ...o };
  return xe(mr, { ...a, name: a.name || "Search", viewBox: "0 0 48 48", children: xe(
    "path",
    {
      d: "M20 40c11.045 0 20-8.954 20-20S31.045 0 20 0C8.954 0 0 8.954 0 20s8.954 20 20 20m0-3C10.61 37 3 29.39 3 20S10.61 3 20 3s17 7.611 17 17-7.611 17-17 17m24.207 5.086a.5.5 0 0 1 0 .707l-1.414 1.414a.5.5 0 0 1-.707 0l-6.293-6.293a.5.5 0 0 1 0-.707l1.414-1.414a.5.5 0 0 1 .707 0z",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/Service.js
var import_react93 = __toESM(require_react());
var m2 = (o) => {
  const a = { ...dr, ...o };
  return xe(mr, { ...a, name: a.name || "Service", viewBox: "0 0 48 48", children: xe(
    "path",
    {
      d: "M2 20h1.006C3.278 8.875 12.609 0 24 0c11.39 0 20.722 8.875 20.994 20H46a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-.508c-.269 7.663-6.658 13.743-14.49 13.992a.488.488 0 0 1-.502-.492v-2c0-.276.224-.499.5-.51 6.27-.245 11.223-5.075 11.49-10.99H41a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h.993C41.721 10.6 33.805 3 24 3 14.195 3 6.279 10.6 6.007 20H7a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2m1 3v6h3v-6zm39 6h3v-6h-3zm-13.063-.858a.528.528 0 0 1 .72.011l1.413 1.415a.483.483 0 0 1-.007.698c-3.998 3.64-10.127 3.64-14.126 0a.483.483 0 0 1-.009-.698l1.415-1.415a.527.527 0 0 1 .718-.011 7.501 7.501 0 0 0 9.876 0",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/Setting.js
var import_react94 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Share.js
var import_react95 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/ShieldCheck.js
var import_react96 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/StarFill.js
var import_react97 = __toESM(require_react());
var d7 = (l7) => {
  const a = { ...dr, ...l7 };
  return xe(mr, { ...a, name: a.name || "StarFill", viewBox: "0 0 48 48", children: xe(
    "path",
    {
      d: "M24 .1a1.5 1.5 0 0 1 1.296.745l7.316 12.56 14.206 3.077a1.5 1.5 0 0 1 .8 2.466l-9.684 10.839 1.464 14.462a1.5 1.5 0 0 1-2.097 1.524L24 39.91l-13.3 5.862a1.5 1.5 0 0 1-2.098-1.524l1.464-14.462-9.685-10.84a1.5 1.5 0 0 1 .802-2.465l14.205-3.076L22.704.846A1.5 1.5 0 0 1 24 .1",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/Star.js
var import_react98 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Store.js
var import_react99 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Success.js
var import_react100 = __toESM(require_react());
var m3 = (o) => {
  const a = { ...dr, ...o };
  return xe(mr, { ...a, name: a.name || "Success", viewBox: "0 0 48 48", children: xe(
    "path",
    {
      d: "M24 48c13.255 0 24-10.745 24-24S37.255 0 24 0 0 10.745 0 24s10.745 24 24 24m0-3C12.402 45 3 35.598 3 24S12.402 3 24 3s21 9.402 21 21-9.402 21-21 21m10.767-25.646a.5.5 0 0 0 0-.708l-1.413-1.414a.5.5 0 0 0-.708 0L21 28.88l-6.647-6.647a.5.5 0 0 0-.707 0l-1.414 1.414a.501.501 0 0 0 0 .708L21 33.12z",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/Tips.js
var import_react101 = __toESM(require_react());
var p2 = (o) => {
  const a = { ...dr, ...o };
  return xe(mr, { ...a, name: a.name || "Tips", viewBox: "0 0 48 48", children: xe(
    "path",
    {
      d: "M24 48c13.255 0 24-10.745 24-24S37.255 0 24 0 0 10.745 0 24s10.745 24 24 24m0-3C12.402 45 3 35.598 3 24S12.402 3 24 3s21 9.402 21 21-9.402 21-21 21m2-29.5a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-3a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5zM24.748 33H26.5a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5H23a1.5 1.5 0 0 1-1.482-1.728L23.252 23H21.5a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5H25a1.5 1.5 0 0 1 1.482 1.728z",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/ToPay.js
var import_react102 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/ToReceive.js
var import_react103 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Top.js
var import_react104 = __toESM(require_react());
var p3 = (r) => {
  const a = { ...dr, ...r };
  return xe(mr, { ...a, name: a.name || "Top", viewBox: "0 0 44 44", children: xe(
    "path",
    {
      d: "M43.042 18.666a.6.6 0 0 1 .062.846l-1.506 1.743a.6.6 0 0 1-.846.062L23.753 6.64V42.9a.6.6 0 0 1-.6.599H20.85a.6.6 0 0 1-.6-.6V6.64L3.25 21.318a.6.6 0 0 1-.846-.062L.898 19.512a.6.6 0 0 1 .062-.846L22.001.5z",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/Transit.js
var import_react105 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/TriangleDown.js
var import_react106 = __toESM(require_react());
var d8 = (a) => {
  const r = { ...dr, ...a };
  return xe(mr, { ...r, name: r.name || "TriangleDown", viewBox: "0 0 1024 1024", children: xe(
    "path",
    {
      d: "m573.06 752 308.8-404.61A76.8 76.8 0 0 0 820.74 224H203.23a76.8 76.8 0 0 0-61.05 123.39L450.98 752a76.8 76.8 0 0 0 122.08 0",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/TriangleUp.js
var import_react107 = __toESM(require_react());
var p4 = (o) => {
  const r = { ...dr, ...o };
  return xe(mr, { ...r, name: r.name || "TriangleUp", viewBox: "0 0 1024 1024", children: xe(
    "path",
    {
      d: "m573.06 272 308.8 404.61A76.8 76.8 0 0 1 820.74 800H203.23a76.8 76.8 0 0 1-61.05-123.39L450.98 272a76.8 76.8 0 0 1 122.08 0",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/UserAdd.js
var import_react108 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/User.js
var import_react109 = __toESM(require_react());
var m4 = (a) => {
  const c10 = { ...dr, ...a };
  return xe(mr, { ...c10, name: c10.name || "User", viewBox: "0 0 1024 1024", children: xe(
    "path",
    {
      d: "M874.67 362.67c0 142.29-81.92 265.39-200.96 324.69a513.58 513.58 0 0 1 306.98 279.47c2.99 6.83-2.13 14.51-9.81 14.5h-47.36a10.67 10.67 0 0 1-9.6-5.97C840.75 827.31 688.21 725.33 512 725.33S183.25 827.09 110.08 975.36c-1.92 3.63-5.55 5.97-9.81 5.97H52.91c-7.47 0-12.8-7.68-9.6-14.5a514.22 514.22 0 0 1 306.98-279.47c-119.04-59.52-200.96-182.61-200.96-324.69C149.33 162.35 311.68 0 512 0s362.67 162.35 362.67 362.67m-64 0C810.67 197.76 676.91 64 512 64S213.33 197.76 213.33 362.67 347.09 661.34 512 661.33s298.67-133.76 298.67-298.66m-376.11 78.29c-3.41-4.69-10.03-6.61-14.93-3.63l-36.91 21.34c-5.12 2.99-6.83 9.6-3.63 14.5A160 160 0 0 0 512 544c55.47 0 104.32-28.16 132.91-70.83 3.2-4.91 1.49-11.52-3.63-14.5l-36.91-21.34c-5.12-2.99-11.52-1.07-14.93 3.63A96.04 96.04 0 0 1 512 480c-31.57 0-59.73-15.36-77.44-39.04",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/Video.js
var import_react110 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/VolumeMax.js
var import_react111 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/VolumeMute.js
var import_react112 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/WaitReceive.js
var import_react113 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Wallet.js
var import_react114 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/icons/Warning.js
var import_react115 = __toESM(require_react());
var c3 = (o) => {
  const a = { ...dr, ...o };
  return xe(mr, { ...a, name: a.name || "Warning", viewBox: "0 0 48 48", children: xe(
    "path",
    {
      d: "M24 48c13.255 0 24-10.745 24-24S37.255 0 24 0 0 10.745 0 24s10.745 24 24 24m0-3C12.403 45 3 35.598 3 24S12.403 3 24 3c11.598 0 21 9.402 21 21s-9.402 21-21 21m-1.5-32.5a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5zm3 19.5a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-3a.5.5 0 0 1 .5-.5z",
      fill: "currentColor"
    }
  ) });
};

// node_modules/@nutui/icons-react/dist/es/icons/Zoom.js
var import_react116 = __toESM(require_react());

// node_modules/@nutui/icons-react/dist/es/index.es.js
import "C:/Users/baba0/Desktop/pose-websitecheat/node_modules/@nutui/icons-react/dist/style_icon.css";

// node_modules/@nutui/nutui-react/dist/es/utils/typings.js
var ComponentDefaults = {
  className: "",
  style: {}
};

// node_modules/@nutui/nutui-react/dist/es/packages/button/button.js
var prefixCls = "nut-button";
var defaultProps = _object_spread_props(_object_spread({}, ComponentDefaults), {
  color: "",
  type: "default",
  size: "normal",
  shape: "round",
  fill: "outline",
  loading: false,
  disabled: false,
  block: false,
  icon: null,
  rightIcon: null,
  nativeType: "button",
  onClick: function() {
  }
});
var Button = import_react117.default.forwardRef(function(props, ref) {
  var _ref = _object_spread({}, defaultProps, props), color = _ref.color, shape = _ref.shape, fill = _ref.fill, loading = _ref.loading, disabled = _ref.disabled, type4 = _ref.type, size = _ref.size, block = _ref.block, icon = _ref.icon, rightIcon = _ref.rightIcon, children2 = _ref.children, className = _ref.className, style = _ref.style, nativeType = _ref.nativeType, onClick = _ref.onClick, rest = _object_without_properties(_ref, [
    "color",
    "shape",
    "fill",
    "loading",
    "disabled",
    "type",
    "size",
    "block",
    "icon",
    "rightIcon",
    "children",
    "className",
    "style",
    "nativeType",
    "onClick"
  ]);
  var getStyle = (0, import_react117.useMemo)(function() {
    var style2 = {};
    if (color) {
      if (props.fill === "outline" || props.fill === "dashed") {
        style2.color = color;
        if (!(color === null || color === void 0 ? void 0 : color.includes("gradient"))) {
          style2.borderColor = color;
        }
      } else {
        style2.color = "#fff";
        style2.background = color;
        style2.borderColor = "transparent";
      }
    }
    return style2;
  }, [
    color,
    props.fill
  ]);
  var handleClick = (0, import_react117.useCallback)(function(e2) {
    if (!loading && !disabled && onClick) {
      onClick(e2);
    }
  }, [
    loading,
    disabled,
    onClick
  ]);
  var _obj;
  var buttonClassNames = (0, import_classnames.default)(prefixCls, "".concat(prefixCls, "-").concat(type4), (_obj = {}, _define_property(_obj, "".concat(prefixCls, "-").concat(type4, "-solid"), type4 === "primary" && !props.fill), _define_property(_obj, "".concat(prefixCls, "-").concat(fill), props.fill), _define_property(_obj, "".concat(prefixCls, "-").concat(type4, "-").concat(fill), props.fill), _define_property(_obj, "".concat(prefixCls, "-").concat(size), size), _define_property(_obj, "".concat(prefixCls, "-").concat(shape), shape), _define_property(_obj, "".concat(prefixCls, "-block"), block), _define_property(_obj, "".concat(prefixCls, "-disabled"), disabled || loading), _define_property(_obj, "".concat(prefixCls, "-").concat(type4).concat(props.fill ? "-".concat(fill) : "", "-disabled"), disabled || loading), _define_property(_obj, "".concat(prefixCls, "-loading"), loading), _define_property(_obj, "".concat(prefixCls, "-icononly"), !children2), _obj), className);
  return import_react117.default.createElement("button", _object_spread_props(_object_spread({}, rest), {
    ref,
    type: nativeType,
    className: buttonClassNames,
    style: _object_spread({}, getStyle, style),
    onClick: handleClick
  }), import_react117.default.createElement("div", {
    className: "nut-button-wrap"
  }, loading && import_react117.default.createElement(s, {
    className: "nut-icon-loading"
  }), !loading && icon, children2 && import_react117.default.createElement("div", {
    className: "".concat(props.fill || disabled || loading ? "nut-button-".concat(type4).concat(props.fill ? "-".concat(fill) : "").concat(disabled || loading ? "-disabled" : "") : "").concat(icon || loading ? " nut-button-text" : "").concat(rightIcon ? " nut-button-text-right" : "")
  }, children2), rightIcon));
});
Button.displayName = "NutButton";

// node_modules/@nutui/nutui-react/dist/es/packages/button/index.js
var button_default = Button;

// node_modules/@nutui/nutui-react/dist/es/packages/cell/cell.js
var import_react122 = __toESM(require_react());
var import_classnames4 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/cellgroup/cellgroup.js
var import_react119 = __toESM(require_react());
var import_classnames2 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/cellgroup/context.js
var import_react118 = __toESM(require_react());
var CellGroupContext = (0, import_react118.createContext)(null);
var context_default = CellGroupContext;

// node_modules/@nutui/nutui-react/dist/es/packages/cellgroup/cellgroup.js
var defaultProps2 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  title: "",
  description: "",
  divider: true
});
var classPrefix = "nut-cell-group";
var CellGroup = function(props) {
  var _ref = _object_spread({}, defaultProps2, props), children2 = _ref.children, className = _ref.className, title = _ref.title, description = _ref.description, divider = _ref.divider, rest = _object_without_properties(_ref, [
    "children",
    "className",
    "title",
    "description",
    "divider"
  ]);
  return import_react119.default.createElement("div", _object_spread({
    className: (0, import_classnames2.default)(classPrefix, className)
  }, rest), title ? import_react119.default.createElement("div", {
    className: "".concat(classPrefix, "-title")
  }, title) : null, description ? import_react119.default.createElement("div", {
    className: "".concat(classPrefix, "-description")
  }, description) : null, import_react119.default.createElement("div", {
    className: "".concat(classPrefix, "-wrap ").concat(divider ? "".concat(classPrefix, "-wrap-divider") : "")
  }, import_react119.default.createElement(context_default.Provider, {
    value: {
      divider,
      group: true
    }
  }, import_react119.default.Children.map(children2, function(child, index2) {
    var _child_type;
    return (child === null || child === void 0 ? void 0 : (_child_type = child.type) === null || _child_type === void 0 ? void 0 : _child_type.displayName) === "NutCell" ? import_react119.default.cloneElement(child, {
      isLast: index2 === import_react119.default.Children.count(children2) - 1
    }) : child;
  }))));
};
CellGroup.displayName = "NutCellGroup";

// node_modules/@nutui/nutui-react/dist/es/packages/cellgroup/index.js
var cellgroup_default = CellGroup;

// node_modules/@nutui/nutui-react/dist/es/packages/configprovider/configprovider.js
var import_react121 = __toESM(require_react());
var import_classnames3 = __toESM(require_classnames());
var import_lodash = __toESM(require_lodash());
var import_react_fast_compare = __toESM(require_react_fast_compare());

// node_modules/@nutui/nutui-react/dist/es/hooks/use-memo.js
var React3 = __toESM(require_react());
function useMemo2(getValue2, condition, shouldUpdate) {
  var cacheRef = React3.useRef({});
  if (!("value" in cacheRef.current) || shouldUpdate(cacheRef.current.condition, condition)) {
    cacheRef.current.value = getValue2();
    cacheRef.current.condition = condition;
  }
  return cacheRef.current.value;
}

// node_modules/@nutui/nutui-react/dist/es/locales/zh-CN.js
var zhCN = {
  save: "保存",
  confirm: "确认",
  cancel: "取消",
  done: "完成",
  noData: "暂无数据",
  placeholder: "请输入内容",
  select: "请选择",
  edit: "编辑",
  reset: "重置",
  video: {
    errorTip: "视频加载失败",
    clickRetry: "点击重试"
  },
  fixednav: {
    activeText: "收起导航",
    inactiveText: "快速导航"
  },
  infiniteloading: {
    pullRefreshText: "松开刷新",
    loadText: "加载中",
    loadMoreText: "没有更多了"
  },
  pagination: {
    prev: "上一页",
    next: "下一页"
  },
  range: {
    rangeText: "不在该区间内"
  },
  calendaritem: {
    weekdays: [
      "日",
      "一",
      "二",
      "三",
      "四",
      "五",
      "六"
    ],
    end: "结束",
    start: "开始",
    confirm: "确认",
    title: "日历选择",
    monthTitle: function(year, month) {
      return "".concat(year, "年").concat(Number(month) < 10 ? "0".concat(Number(month)) : month, "月");
    },
    today: "今天",
    loadPreviousMonth: "加载上一个月",
    noEarlierMonth: "没有更早月份"
  },
  shortpassword: {
    title: "请输入密码",
    description: "您使用了虚拟资产，请进行验证",
    tips: "忘记密码"
  },
  uploader: {
    list: "上传文件",
    ready: "准备完成",
    readyUpload: "准备上传",
    waitingUpload: "等待上传",
    uploading: "上传中...",
    success: "上传成功",
    error: "上传失败",
    deleteWord: "用户阻止了删除！"
  },
  countdown: {
    day: "天",
    hour: "时",
    minute: "分",
    second: "秒"
  },
  address: {
    selectRegion: "请选择地址",
    deliveryTo: "配送至",
    chooseAnotherAddress: "选择其他地址",
    hotCity: "热门城市",
    selectProvince: "选择省份/地区"
  },
  signature: {
    reSign: "重签",
    unsupported: "对不起，当前浏览器不支持Canvas，无法使用本控件！"
  },
  ecard: {
    chooseText: "请选择电子卡面值",
    otherValueText: "其他面值",
    placeholder: "请输入1-5000整数"
  },
  timeselect: {
    pickupTime: "取件时间"
  },
  sku: {
    buyNow: "立即购买",
    buyNumber: "购买数量",
    addToCard: "加入购物车"
  },
  skuheader: {
    skuId: "商品编号"
  },
  addresslist: {
    addAddress: "新建地址"
  },
  comment: {
    complaintsText: "我要投诉",
    additionalReview: function(day) {
      return "购买".concat(day, "天后追评");
    },
    additionalImages: function(length2) {
      return "".concat(length2, "张追评图片");
    }
  },
  searchbar: {
    basePlaceholder: "上京东，购好物",
    text: "文本",
    test: "测试",
    title1: "基础用法",
    title2: "搜索框形状及最大长度",
    title3: "搜索框内外背景设置",
    title4: "搜索框文本设置",
    title5: "自定义图标设置",
    title6: "数据改变监听"
  },
  audio: {
    back: "快退",
    forward: "快进",
    pause: "暂停",
    start: "开始",
    mute: "静音",
    tips: "onPlayEnd事件在loop=false时才会触发"
  },
  avatarCropper: {
    rotate: "旋转",
    selectImage: "选择图片"
  },
  datepicker: {
    year: "年",
    month: "月",
    day: "日",
    hour: "时",
    min: "分",
    seconds: "秒"
  },
  pullToRefresh: {
    pullingText: "下拉刷新",
    canReleaseText: "松手刷新",
    refreshingText: "刷新中",
    completeText: "刷新成功"
  },
  tour: {
    prevStepText: "上一步",
    completeText: "完成",
    nextStepText: "下一步"
  },
  watermark: {
    errorCanvasTips: "当前环境不支持Canvas"
  }
};
var zh_CN_default = zhCN;

// node_modules/@nutui/nutui-react/dist/es/utils/bound.js
function bound(position2, min, max) {
  var ret = position2;
  if (min !== void 0) {
    ret = Math.max(position2, min);
  }
  if (max !== void 0) {
    ret = Math.min(ret, max);
  }
  return ret;
}

// node_modules/@nutui/nutui-react/dist/es/utils/camel-case.js
var UPPERCASE = RegExp("[\\p{Lu}]", "u");
var LOWERCASE = RegExp("[\\p{Ll}]", "u");
var LEADING_CAPITAL = RegExp("^[\\p{Lu}](?![\\p{Lu}])", "gu");
var IDENTIFIER = RegExp("([\\p{Alpha}\\p{N}_]|$)", "u");
var SEPARATORS = /[_.\- ]+/;
var LEADING_SEPARATORS = new RegExp("^".concat(SEPARATORS.source));
var SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, "gu");
var NUMBERS_AND_IDENTIFIER = new RegExp("\\d+".concat(IDENTIFIER.source), "gu");
var preserveCamelCase = function(string3, toLowerCase, toUpperCase) {
  var isLastCharLower = false;
  var isLastCharUpper = false;
  var isLastLastCharUpper = false;
  for (var index2 = 0; index2 < string3.length; index2++) {
    var character = string3[index2];
    if (isLastCharLower && UPPERCASE.test(character)) {
      string3 = "".concat(string3.slice(0, index2), "-").concat(string3.slice(index2));
      isLastCharLower = false;
      isLastLastCharUpper = isLastCharUpper;
      isLastCharUpper = true;
      index2++;
    } else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {
      string3 = "".concat(string3.slice(0, index2 - 1), "-").concat(string3.slice(index2 - 1));
      isLastLastCharUpper = isLastCharUpper;
      isLastCharUpper = false;
      isLastCharLower = true;
    } else {
      isLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;
      isLastLastCharUpper = isLastCharUpper;
      isLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;
    }
  }
  return string3;
};
var preserveConsecutiveUppercase = function(input, toLowerCase) {
  LEADING_CAPITAL.lastIndex = 0;
  return input.replace(LEADING_CAPITAL, function(m1) {
    return toLowerCase(m1);
  });
};
var postProcess = function(input, toUpperCase) {
  SEPARATORS_AND_IDENTIFIER.lastIndex = 0;
  NUMBERS_AND_IDENTIFIER.lastIndex = 0;
  return input.replace(SEPARATORS_AND_IDENTIFIER, function(_, identifier) {
    return toUpperCase(identifier);
  }).replace(NUMBERS_AND_IDENTIFIER, function(m13) {
    return toUpperCase(m13);
  });
};
var camelCase = function(input, options2) {
  if (!(typeof input === "string" || Array.isArray(input))) {
    throw new TypeError("Expected the input to be `string | string[]`");
  }
  options2 = _object_spread({
    pascalCase: false,
    preserveConsecutiveUppercase: false
  }, options2);
  if (Array.isArray(input)) {
    input = input.map(function(x2) {
      return x2.trim();
    }).filter(function(x2) {
      return x2.length;
    }).join("-");
  } else {
    input = input.trim();
  }
  if (input.length === 0) {
    return "";
  }
  var toLowerCase = options2.locale === false ? function(string3) {
    return string3.toLowerCase();
  } : function(string3) {
    return string3.toLocaleLowerCase(options2.locale);
  };
  var toUpperCase = options2.locale === false ? function(string3) {
    return string3.toUpperCase();
  } : function(string3) {
    return string3.toLocaleUpperCase(options2.locale);
  };
  if (input.length === 1) {
    if (SEPARATORS.test(input)) {
      return "";
    }
    return options2.pascalCase ? toUpperCase(input) : toLowerCase(input);
  }
  var hasUpperCase = input !== toLowerCase(input);
  if (hasUpperCase) {
    input = preserveCamelCase(input, toLowerCase, toUpperCase);
  }
  input = input.replace(LEADING_SEPARATORS, "");
  input = options2.preserveConsecutiveUppercase ? preserveConsecutiveUppercase(input, toLowerCase) : toLowerCase(input);
  if (options2.pascalCase) {
    input = toUpperCase(input.charAt(0)) + input.slice(1);
  }
  return postProcess(input, toUpperCase);
};

// node_modules/@nutui/nutui-react/dist/es/utils/can-use-dom.js
var canUseDom = !!(typeof window !== "undefined" && typeof document !== "undefined" && window.document && window.document.createElement);

// node_modules/@nutui/nutui-react/dist/es/utils/clamp.js
var clamp2 = function(num, min, max) {
  return Math.min(Math.max(num, min), max);
};

// node_modules/@swc/helpers/esm/_array_like_to_array.js
function _array_like_to_array(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i6 = 0, arr2 = new Array(len); i6 < len; i6++)
    arr2[i6] = arr[i6];
  return arr2;
}

// node_modules/@swc/helpers/esm/_array_without_holes.js
function _array_without_holes(arr) {
  if (Array.isArray(arr))
    return _array_like_to_array(arr);
}

// node_modules/@swc/helpers/esm/_iterable_to_array.js
function _iterable_to_array(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) {
    return Array.from(iter);
  }
}

// node_modules/@swc/helpers/esm/_non_iterable_spread.js
function _non_iterable_spread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

// node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js
function _unsupported_iterable_to_array(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _array_like_to_array(o, minLen);
  var n38 = Object.prototype.toString.call(o).slice(8, -1);
  if (n38 === "Object" && o.constructor)
    n38 = o.constructor.name;
  if (n38 === "Map" || n38 === "Set")
    return Array.from(n38);
  if (n38 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n38))
    return _array_like_to_array(o, minLen);
}

// node_modules/@swc/helpers/esm/_to_consumable_array.js
function _to_consumable_array(arr) {
  return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}

// node_modules/@nutui/nutui-react/dist/es/utils/date.js
var Utils = {
  /**
  * 是否为闫年
  * @return {Boolse} true|false
  */
  isLeapYear: function isLeapYear(y) {
    return y % 4 === 0 && y % 100 !== 0 || y % 400 === 0;
  },
  /**
  * 返回星期数
  * @return {String}
  */
  getWhatDay: function getWhatDay(year, month, day) {
    var date4 = new Date("".concat(year, "/").concat(month, "/").concat(day));
    var index2 = date4.getDay();
    var dayNames = [
      "星期日",
      "星期一",
      "星期二",
      "星期三",
      "星期四",
      "星期五",
      "星期六"
    ];
    return dayNames[index2];
  },
  /**
  * 返回上一个月在当前面板中的天数
  * @return {Number}
  */
  getMonthPreDay: function getMonthPreDay(year, month) {
    var date4 = new Date("".concat(year, "/").concat(month, "/01"));
    var day = date4.getDay();
    if (day === 0) {
      day = 7;
    }
    return day;
  },
  /**
  * 返回月份天数
  * @return {Number}
  */
  getMonthDays: function getMonthDays(year, month) {
    if (/^0/.test(month)) {
      month = month.split("")[1];
    }
    return [
      0,
      31,
      this.isLeapYear(Number(year)) ? 29 : 28,
      31,
      30,
      31,
      30,
      31,
      31,
      30,
      31,
      30,
      31
    ][month];
  },
  /**
  * 补齐数字位数
  * @return {string}
  */
  getNumTwoBit: function getNumTwoBit(n38) {
    n38 = Number(n38);
    return (n38 > 9 ? "" : "0") + n38;
  },
  /**
  * 日期对象转成字符串
  * @return {string}
  */
  date2Str: function date2Str(date4, split) {
    split = split || "-";
    var y = date4.getFullYear();
    var m13 = this.getNumTwoBit(date4.getMonth() + 1);
    var d30 = this.getNumTwoBit(date4.getDate());
    return [
      y,
      m13,
      d30
    ].join(split);
  },
  /**
  * 返回日期格式字符串
  * @param {Number} 0返回今天的日期、1返回明天的日期，2返回后天得日期，依次类推
  * @return {string} '2014-12-31'
  */
  getDay: function getDay(i6) {
    i6 = i6 || 0;
    var date4 = /* @__PURE__ */ new Date();
    var diff = i6 * (1e3 * 60 * 60 * 24);
    date4 = new Date(date4.getTime() + diff);
    return this.date2Str(date4);
  },
  /**
  * 时间比较
  * @return {Boolean}
  */
  compareDate: function compareDate(date1, date22) {
    var startTime = new Date(date1.replace("-", "/").replace("-", "/"));
    var endTime = new Date(date22.replace("-", "/").replace("-", "/"));
    if (startTime >= endTime) {
      return false;
    }
    return true;
  },
  /**
  * 时间是否相等
  * @return {Boolean}
  */
  isEqual: function isEqual(date1, date22) {
    var startTime = new Date((date1 || "").replace(/-/g, "/")).getTime();
    var endTime = new Date(date22.replace(/-/g, "/")).getTime();
    if (startTime === endTime) {
      return true;
    }
    return false;
  },
  getMonthWeek: function getMonthWeek(year, month, date4) {
    var firstDayOfWeek = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
    var dateNow = new Date(Number(year), parseInt(month) - 1, Number(date4));
    var w = dateNow.getDay();
    var d30 = dateNow.getDate();
    var remainder = 6 - w;
    if (firstDayOfWeek !== 0) {
      w = w === 0 ? 7 : w;
      remainder = 7 - w;
    }
    return Math.ceil((d30 + remainder) / 7);
  },
  getYearWeek: function getYearWeek(year, month, date4) {
    var firstDayOfWeek = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
    var dateNow = new Date(Number(year), parseInt(month) - 1, Number(date4));
    var dateFirst = new Date(Number(year), 0, 1);
    var dataNumber = Math.round((dateNow.valueOf() - dateFirst.valueOf()) / 864e5);
    return Math.ceil((dataNumber + (dateFirst.getDay() + 1 - 1)) / 7);
  },
  getWeekDate: function getWeekDate(year, month, date4) {
    var firstDayOfWeek = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
    var dateNow = new Date(Number(year), parseInt(month) - 1, Number(date4));
    var nowTime = dateNow.getTime();
    var day = dateNow.getDay();
    if (firstDayOfWeek === 0) {
      var oneDayTime = 24 * 60 * 60 * 1e3;
      var SundayTime = nowTime - day * oneDayTime;
      var SaturdayTime = nowTime + (6 - day) * oneDayTime;
      var sunday = this.date2Str(new Date(SundayTime));
      var saturday = this.date2Str(new Date(SaturdayTime));
      return [
        sunday,
        saturday
      ];
    }
    day = day === 0 ? 7 : day;
    var oneDayTime1 = 24 * 60 * 60 * 1e3;
    var MondayTime = nowTime - (day - 1) * oneDayTime1;
    var SundayTime1 = nowTime + (7 - day) * oneDayTime1;
    var monday = this.date2Str(new Date(MondayTime));
    var sunday1 = this.date2Str(new Date(SundayTime1));
    return [
      monday,
      sunday1
    ];
  },
  formatResultDate: function formatResultDate(date4) {
    var days = _to_consumable_array(date4.split("-"));
    days[2] = Utils.getNumTwoBit(Number(days[2]));
    days[3] = "".concat(days[0], "-").concat(days[1], "-").concat(days[2]);
    days[4] = Utils.getWhatDay(+days[0], +days[1], +days[2]);
    return days;
  }
};
var getCurrMonthData = function(type4, year, month) {
  switch (type4) {
    case "prev":
      month === 1 && (year -= 1);
      month = month === 1 ? 12 : --month;
      break;
    case "next":
      month === 12 && (year += 1);
      month = month === 12 ? 1 : ++month;
      break;
    default:
      break;
  }
  return [
    year,
    Utils.getNumTwoBit(month),
    Utils.getMonthDays(String(year), String(month))
  ];
};
var getDaysStatus = function(type4, year, month) {
  var days = Utils.getMonthDays("".concat(year), "".concat(month));
  if (type4 === "prev" && days >= 7) {
    days -= 7;
  }
  return Array.from(Array(days), function(v3, k2) {
    return {
      day: k2 + 1,
      type: type4,
      year,
      month
    };
  });
};
var getPreMonthDates = function(type4, year, month, firstDayOfWeek) {
  var preMonth = +month - 1;
  var preYear = year;
  if (preMonth <= 0) {
    preMonth = 12;
    preYear += 1;
  }
  var days = Utils.getMonthPreDay(+year, +month);
  days -= firstDayOfWeek;
  if (type4 === "prev" && days >= 7) {
    days -= 7;
  }
  var preDates = Utils.getMonthDays("".concat(preYear), "".concat(preMonth));
  var months = Array.from(Array(preDates), function(v3, k2) {
    return {
      day: k2 + 1,
      type: type4,
      preYear,
      preMonth
    };
  });
  return months.slice(preDates - days);
};

// node_modules/@nutui/nutui-react/dist/es/utils/get-rect.js
var inBrowser2 = typeof document !== "undefined" && !!document.scripts;
function isWindow(val2) {
  return val2 === window;
}
var getRect = function(elementRef) {
  var element = elementRef;
  if (isWindow(element)) {
    var width2 = element.innerWidth;
    var height2 = element.innerHeight;
    return {
      top: 0,
      left: 0,
      right: width2,
      bottom: height2,
      width: width2,
      height: height2
    };
  }
  if (element && element.getBoundingClientRect) {
    return element.getBoundingClientRect();
  }
  return {
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    width: 0,
    height: 0
  };
};

// node_modules/@nutui/nutui-react/dist/es/utils/get-scroll-parent.js
var defaultRoot = canUseDom ? window : void 0;
var overflowStylePatterns = [
  "scroll",
  "auto",
  "overlay"
];
function isElement(node) {
  var ELEMENT_NODE_TYPE = 1;
  return node.nodeType === ELEMENT_NODE_TYPE;
}
function getScrollParent(el) {
  var root = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultRoot;
  var node = el;
  while (node && node !== root && isElement(node)) {
    if (node === document.body) {
      return root;
    }
    var overflowY = window.getComputedStyle(node).overflowY;
    if (overflowStylePatterns.includes(overflowY) && node.scrollHeight > node.clientHeight) {
      return node;
    }
    node = node.parentNode;
  }
  return root;
}
function getAllScrollableParents(element) {
  var scrollableParents = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  if (!element) {
    return scrollableParents;
  }
  var isScrollable = element.scrollHeight > element.clientHeight || element.scrollWidth > element.clientWidth;
  if (isScrollable) {
    if (element.nodeName === "HTML") {
      scrollableParents.push(document);
    } else {
      scrollableParents.push(element);
    }
  }
  return getAllScrollableParents(element.parentElement, scrollableParents);
}

// node_modules/@swc/helpers/esm/_type_of.js
function _type_of(obj) {
  "@swc/helpers - typeof";
  return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}

// node_modules/@nutui/nutui-react/dist/es/utils/is-object.js
var isObject = function(val2) {
  return val2 !== null && (typeof val2 === "undefined" ? "undefined" : _type_of(val2)) === "object";
};

// node_modules/@nutui/nutui-react/dist/es/utils/is-function.js
var isFunction = function(val2) {
  return typeof val2 === "function";
};

// node_modules/@nutui/nutui-react/dist/es/utils/is-promise.js
var isPromise = function(val2) {
  return isObject(val2) && isFunction(val2.then) && isFunction(val2.catch);
};

// node_modules/@nutui/nutui-react/dist/es/utils/interceptor.js
var funcInterceptor = function(interceptor, param) {
  var _param_args = param.args, args = _param_args === void 0 ? [] : _param_args, done = param.done, canceled = param.canceled;
  if (interceptor) {
    var returnVal = interceptor.apply(null, args);
    if (isPromise(returnVal)) {
      returnVal.then(function(value2) {
        if (value2) {
          done(value2);
        } else if (canceled) {
          canceled();
        }
      }).catch(function() {
      });
    } else if (returnVal) {
      done();
    } else if (canceled) {
      canceled();
    }
  } else {
    done();
  }
};

// node_modules/@nutui/nutui-react/dist/es/utils/is-date.js
var isDate = function(val2) {
  return Object.prototype.toString.call(val2) === "[object Date]" && !Number.isNaN(val2.getTime());
};

// node_modules/@nutui/nutui-react/dist/es/utils/is-empty.js
var isEmpty = function(p10) {
  if (p10 === null || p10 === void 0)
    return true;
  if ((typeof p10 === "undefined" ? "undefined" : _type_of(p10)) === "object" && Object.keys(p10).length === 0)
    return true;
  if (Array.isArray(p10) && p10.length === 0)
    return true;
  return false;
};

// node_modules/@nutui/nutui-react/dist/es/utils/is-forward-ref-component.js
var import_react120 = __toESM(require_react());
function isForwardRefComponent(component) {
  return component.type && component.type.$$typeof && // eslint-disable-next-line react/display-name
  import_react120.default.forwardRef(
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    function() {
    }
  ).$$typeof === component.type.$$typeof;
}

// node_modules/@swc/helpers/esm/_class_call_check.js
function _class_call_check(instance, Constructor) {
  if (!(instance instanceof Constructor))
    throw new TypeError("Cannot call a class as a function");
}

// node_modules/@swc/helpers/esm/_create_class.js
function _defineProperties(target, props) {
  for (var i6 = 0; i6 < props.length; i6++) {
    var descriptor = props[i6];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _create_class(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  return Constructor;
}

// node_modules/@nutui/nutui-react/dist/es/utils/lru.js
var MiniLru = function() {
  "use strict";
  function MiniLru2(capacity) {
    _class_call_check(this, MiniLru2);
    _define_property(this, "cache", void 0);
    _define_property(this, "capacity", void 0);
    if (capacity <= 0) {
      throw new Error("Cache capacity must be a positive number");
    }
    this.cache = /* @__PURE__ */ new Map();
    this.capacity = capacity;
  }
  _create_class(MiniLru2, [
    {
      key: "get",
      value: function get(key2) {
        if (this.cache.has(key2)) {
          var value2 = this.cache.get(key2);
          this.cache.delete(key2);
          this.cache.set(key2, value2);
          return value2;
        }
        return null;
      }
    },
    {
      key: "set",
      value: function set(key2, value2) {
        if (this.cache.has(key2)) {
          this.cache.delete(key2);
        } else if (this.cache.size >= this.capacity) {
          this.cache.delete(this.cache.keys().next().value);
        }
        this.cache.set(key2, value2);
      }
    },
    {
      key: "has",
      value: function has(key2) {
        return this.cache.has(key2);
      }
    }
  ]);
  return MiniLru2;
}();

// node_modules/@nutui/nutui-react/dist/es/utils/merge.js
function main() {
  for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {
    items[_key] = arguments[_key];
  }
  return merge.apply(void 0, _to_consumable_array(items));
}
main.clone = clone;
main.isPlainObject = isPlainObject;
main.recursive = recursive;
function merge() {
  for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {
    items[_key] = arguments[_key];
  }
  return _merge(items[0] === true, false, items);
}
function recursive() {
  for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {
    items[_key] = arguments[_key];
  }
  return _merge(items[0] === true, true, items);
}
function clone(input) {
  if (Array.isArray(input)) {
    var output = [];
    for (var index2 = 0; index2 < input.length; ++index2)
      output.push(clone(input[index2]));
    return output;
  }
  if (isPlainObject(input)) {
    var output1 = {};
    for (var index1 in input)
      output1[index1] = clone(input[index1]);
    return output1;
  }
  return input;
}
function isPlainObject(input) {
  if (input === null || (typeof input === "undefined" ? "undefined" : _type_of(input)) !== "object")
    return false;
  if (Object.getPrototypeOf(input) === null)
    return true;
  var ref = input;
  while (Object.getPrototypeOf(ref) !== null)
    ref = Object.getPrototypeOf(ref);
  return Object.getPrototypeOf(input) === ref;
}
function _recursiveMerge(base, extend) {
  if (!isPlainObject(base) || !isPlainObject(extend))
    return extend;
  for (var key2 in extend) {
    if (key2 === "__proto__" || key2 === "constructor" || key2 === "prototype")
      continue;
    base[key2] = isPlainObject(base[key2]) && isPlainObject(extend[key2]) ? _recursiveMerge(base[key2], extend[key2]) : extend[key2];
  }
  return base;
}
function _merge(isClone, isRecursive, items) {
  var result;
  if (isClone || !isPlainObject(result = items.shift()))
    result = {};
  for (var index2 = 0; index2 < items.length; ++index2) {
    var item = items[index2];
    if (!isPlainObject(item))
      continue;
    for (var key2 in item) {
      if (key2 === "__proto__" || key2 === "constructor" || key2 === "prototype")
        continue;
      var value2 = isClone ? clone(item[key2]) : item[key2];
      result[key2] = isRecursive ? _recursiveMerge(result[key2], value2) : value2;
    }
  }
  return result;
}

// node_modules/@nutui/nutui-react/dist/es/utils/merge-props.js
function mergeProps() {
  for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {
    items[_key] = arguments[_key];
  }
  var ret = {};
  items.forEach(function(item) {
    if (item) {
      Object.keys(item).forEach(function(key2) {
        if (item[key2] !== void 0) {
          ret[key2] = item[key2];
        }
      });
    }
  });
  return ret;
}
function mergeProp(defaultProp) {
  for (var _len = arguments.length, propList = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    propList[_key - 1] = arguments[_key];
  }
  for (var i6 = propList.length - 1; i6 >= 0; i6 -= 1) {
    if (propList[i6] !== void 0) {
      return propList[i6];
    }
  }
  return defaultProp;
}

// node_modules/@nutui/nutui-react/dist/es/utils/pad-zero.js
var padZero = function(num) {
  var targetLength = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2;
  var str = "".concat(num);
  while (str.length < targetLength) {
    str = "0".concat(str);
  }
  return str;
};

// node_modules/@nutui/nutui-react/dist/es/utils/prevent-default.js
function preventDefault(event, isStopPropagation) {
  if (typeof event.cancelable !== "boolean" || event.cancelable) {
    event.preventDefault();
  }
  if (isStopPropagation) {
    event.stopPropagation();
  }
}

// node_modules/@nutui/nutui-react/dist/es/utils/px-check.js
var pxCheck = function(value2) {
  return parseFloat(value2.toString());
};

// node_modules/@nutui/nutui-react/dist/es/utils/raf.js
function requestAniFrame() {
  if (inBrowser2) {
    var _window = window;
    return _window.requestAnimationFrame || _window.webkitRequestAnimationFrame || function(callback) {
      _window.setTimeout(callback, 1e3 / 60);
    };
  }
  return function(callback) {
    setTimeout(callback, 1e3 / 60);
  };
}
function cancelRaf(id) {
  if (inBrowser2) {
    var _window = window;
    (_window.cancelAnimationFrame || _window.webkitCancelAnimationFrame)(id);
  } else {
    clearTimeout(id);
  }
}
var raf_default = requestAniFrame();

// node_modules/@swc/helpers/esm/_async_to_generator.js
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key2, arg) {
  try {
    var info = gen[key2](arg);
    var value2 = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done)
    resolve(value2);
  else
    Promise.resolve(value2).then(_next, _throw);
}
function _async_to_generator(fn) {
  return function() {
    var self2 = this, args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self2, args);
      function _next(value2) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value2);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}

// node_modules/@nutui/nutui-react/dist/es/utils/render.js
var ReactDOM = __toESM(require_react_dom());
var fullClone = _object_spread({}, ReactDOM);
var version = fullClone.version;
var reactRender = fullClone.render;
var unmountComponentAtNode = fullClone.unmountComponentAtNode;
var createRoot;
try {
  mainVersion = Number((version || "").split(".")[0]);
  if (mainVersion >= 18 && fullClone.createRoot) {
    createRoot = fullClone.createRoot;
  }
} catch (e2) {
}
var mainVersion;
function toggleWarning(skip) {
  var __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = fullClone.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  if (__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED && (typeof __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED === "undefined" ? "undefined" : _type_of(__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED)) === "object") {
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.usingClientEntryPoint = skip;
  }
}
var MARK = "__nutui_react_root__";
function legacyRender(node, container) {
  reactRender(node, container);
}
function concurrentRender(node, container) {
  toggleWarning(true);
  var root = container[MARK] || createRoot(container);
  toggleWarning(false);
  root.render(node);
  container[MARK] = root;
}
function render(node, container) {
  if (createRoot) {
    concurrentRender(node, container);
    return;
  }
  legacyRender(node, container);
}
function legacyUnmount(container) {
  return unmountComponentAtNode(container);
}
function concurrentUnmount(container) {
  return _concurrentUnmount.apply(this, arguments);
}
function _concurrentUnmount() {
  _concurrentUnmount = _async_to_generator(function(container) {
    return __generator(this, function(_state) {
      return [
        2,
        Promise.resolve().then(function() {
          var _container_MARK;
          (_container_MARK = container[MARK]) === null || _container_MARK === void 0 ? void 0 : _container_MARK.unmount();
          delete container[MARK];
        })
      ];
    });
  });
  return _concurrentUnmount.apply(this, arguments);
}
function unmount(container) {
  if (createRoot) {
    return concurrentUnmount(container);
  }
  return legacyUnmount(container);
}

// node_modules/@nutui/nutui-react/dist/es/utils/rubberband.js
function rubberband(distance, dimension, constant) {
  return distance * dimension * constant / (dimension + constant * distance);
}
function rubberbandIfOutOfBounds(position2, min, max, dimension) {
  var constant = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0.15;
  if (constant === 0)
    return bound(position2, min, max);
  if (position2 < min)
    return -rubberband(min - position2, dimension, constant) + min;
  if (position2 > max)
    return +rubberband(position2 - max, dimension, constant) + max;
  return position2;
}

// node_modules/@nutui/nutui-react/dist/es/utils/sleep.js
var sleep = function(time2) {
  return new Promise(function(resolve) {
    return setTimeout(resolve, time2);
  });
};

// node_modules/@nutui/nutui-react/dist/es/utils/supports-passive.js
var passiveSupported = false;
if (canUseDom) {
  try {
    opts = Object.defineProperty({}, "passive", {
      get: function get() {
        passiveSupported = true;
      }
    });
    window.addEventListener("test-passive-supported", null, opts);
  } catch (e2) {
    console.log("supported passive error", e2);
  }
}
var opts;

// node_modules/@nutui/nutui-react/dist/es/utils/to-array.js
function toArray(value2) {
  if (value2 === void 0 || value2 === null) {
    return [];
  }
  return Array.isArray(value2) ? value2 : [
    value2
  ];
}

// node_modules/@nutui/nutui-react/dist/es/utils/upper-case-first.js
var upperCaseFirst = function(str) {
  str = str.toLowerCase();
  str = str.replace(/\b\w+\b/g, function(word) {
    return word.substring(0, 1).toUpperCase() + word.substring(1);
  });
  return str;
};

// node_modules/@nutui/nutui-react/dist/es/packages/configprovider/configprovider.js
var classPrefix2 = "nut-configprovider";
var defaultConfigRef = {
  current: {
    locale: zh_CN_default
  }
};
var setDefaultConfig = function(config3) {
  defaultConfigRef.current = config3;
};
var getDefaultConfig = function() {
  return defaultConfigRef.current;
};
var ConfigContext = (0, import_react121.createContext)(null);
var useConfig = function() {
  var _useContext;
  return (_useContext = (0, import_react121.useContext)(ConfigContext)) !== null && _useContext !== void 0 ? _useContext : getDefaultConfig();
};
function convertThemeVarsToCSSVars(themeVars) {
  var cssVars = {};
  Object.keys(themeVars).forEach(function(key2) {
    cssVars["--".concat((0, import_lodash.default)(key2))] = themeVars[key2];
  });
  return cssVars;
}
var useRtl = function() {
  var direction = useConfig().direction;
  if (direction) {
    return direction === "rtl";
  }
  return inBrowser2 && document.dir === "rtl";
};
var ConfigProvider = function(props) {
  var style = props.style, className = props.className, children2 = props.children, direction = props.direction, config3 = _object_without_properties(props, [
    "style",
    "className",
    "children",
    "direction"
  ]);
  var mergedConfig = useMemo2(function() {
    return _object_spread_props(_object_spread({}, getDefaultConfig(), config3), {
      direction
    });
  }, [
    config3,
    direction
  ], function(prev, next) {
    return prev.some(function(prevTheme, index2) {
      var nextTheme = next[index2];
      return !(0, import_react_fast_compare.default)(prevTheme, nextTheme);
    });
  });
  var cssVarStyle = import_react121.default.useMemo(function() {
    return convertThemeVarsToCSSVars(mergedConfig.theme || {});
  }, [
    mergedConfig.theme
  ]);
  return import_react121.default.createElement(ConfigContext.Provider, {
    value: mergedConfig
  }, import_react121.default.createElement("div", {
    className: (0, import_classnames3.default)(classPrefix2, className),
    style: _object_spread_props(_object_spread({}, cssVarStyle, style), {
      direction
    }),
    dir: direction
  }, children2));
};
ConfigProvider.displayName = "NutConfigProvider";

// node_modules/@nutui/nutui-react/dist/es/packages/configprovider/index.js
var configprovider_default = ConfigProvider;

// node_modules/@nutui/nutui-react/dist/es/packages/cell/cell.js
var defaultProps3 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  title: null,
  description: null,
  extra: null,
  radius: "6px",
  align: "flex-start",
  clickable: false,
  isLast: false,
  onClick: function(event) {
  }
});
var classPrefix3 = "nut-cell";
var Cell = function(props) {
  var ctx2 = (0, import_react122.useContext)(context_default);
  var _ref = _object_spread({}, defaultProps3, props), children2 = _ref.children, clickable = _ref.clickable, onClick = _ref.onClick, title = _ref.title, description = _ref.description, extra = _ref.extra, radius = _ref.radius, align = _ref.align, isLast = _ref.isLast, className = _ref.className, style = _ref.style, rest = _object_without_properties(_ref, [
    "children",
    "clickable",
    "onClick",
    "title",
    "description",
    "extra",
    "radius",
    "align",
    "isLast",
    "className",
    "style"
  ]);
  var rtl = useRtl();
  var handleClick = function(event) {
    onClick(event);
  };
  var baseStyle = _object_spread_props(_object_spread({}, style), {
    borderRadius: Number.isNaN(Number(radius)) ? String(radius) : "".concat(radius, "px"),
    alignItems: align
  });
  var _obj;
  return import_react122.default.createElement(import_react122.default.Fragment, null, import_react122.default.createElement("div", _object_spread({
    className: "".concat((0, import_classnames4.default)([
      classPrefix3,
      className,
      _define_property({}, "".concat(classPrefix3, "-group-item"), ctx2 === null || ctx2 === void 0 ? void 0 : ctx2.group)
    ], clickable ? "".concat(classPrefix3, "-clickable") : "")),
    onClick: function(event) {
      return handleClick(event);
    },
    style: baseStyle
  }, rest), children2 || import_react122.default.createElement(import_react122.default.Fragment, null, title || description ? import_react122.default.createElement("div", {
    className: "".concat(classPrefix3, "-left")
  }, title ? import_react122.default.createElement("div", {
    className: "".concat(classPrefix3, "-title")
  }, title) : null, description ? import_react122.default.createElement("div", {
    className: "".concat(classPrefix3, "-description")
  }, description) : null) : null, extra ? import_react122.default.createElement("div", {
    className: "".concat(classPrefix3, "-extra")
  }, extra) : null)), (ctx2 === null || ctx2 === void 0 ? void 0 : ctx2.divider) && !isLast ? import_react122.default.createElement("div", {
    className: (0, import_classnames4.default)([
      (_obj = {}, _define_property(_obj, "".concat(classPrefix3, "-divider"), true), _define_property(_obj, "".concat(classPrefix3, "-divider-rtl"), rtl), _obj)
    ])
  }, import_react122.default.createElement("div", {
    className: "".concat(classPrefix3, "-divider-inner")
  })) : null);
};
Cell.displayName = "NutCell";
Cell.Group = cellgroup_default;

// node_modules/@nutui/nutui-react/dist/es/packages/cell/index.js
var cell_default = Cell;

// node_modules/@swc/helpers/esm/_array_with_holes.js
function _array_with_holes(arr) {
  if (Array.isArray(arr))
    return arr;
}

// node_modules/@swc/helpers/esm/_iterable_to_array_limit.js
function _iterable_to_array_limit(arr, i6) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i6 && _arr.length === i6)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}

// node_modules/@swc/helpers/esm/_non_iterable_rest.js
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

// node_modules/@swc/helpers/esm/_sliced_to_array.js
function _sliced_to_array(arr, i6) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i6) || _unsupported_iterable_to_array(arr, i6) || _non_iterable_rest();
}

// node_modules/@nutui/nutui-react/dist/es/packages/image/image.js
var import_react123 = __toESM(require_react());
var import_classnames5 = __toESM(require_classnames());
var defaultProps4 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  fit: "fill",
  position: "center",
  alt: "",
  width: "",
  height: "",
  error: true,
  loading: true,
  lazy: false
});
var classPrefix4 = "nut-image";
var Image2 = function(props) {
  var _$_object_spread = _object_spread({}, defaultProps4, props), className = _$_object_spread.className, style = _$_object_spread.style, src = _$_object_spread.src, fit = _$_object_spread.fit, position2 = _$_object_spread.position, alt = _$_object_spread.alt, width2 = _$_object_spread.width, height2 = _$_object_spread.height, radius = _$_object_spread.radius, error = _$_object_spread.error, loading = _$_object_spread.loading, lazy = _$_object_spread.lazy, draggable = _$_object_spread.draggable, onClick = _$_object_spread.onClick, onLoad = _$_object_spread.onLoad, onError = _$_object_spread.onError;
  var _useState = _sliced_to_array((0, import_react123.useState)(false), 2), innerLoading = _useState[0], setInnerLoading = _useState[1];
  var _useState1 = _sliced_to_array((0, import_react123.useState)(false), 2), isError = _useState1[0], setIsError = _useState1[1];
  var _useState2 = _sliced_to_array((0, import_react123.useState)(false), 2), complete = _useState2[0], setComplete = _useState2[1];
  var imgRef = (0, import_react123.useRef)(null);
  var pxCheck2 = function(value2) {
    return Number.isNaN(Number(value2)) ? String(value2) : "".concat(value2, "px");
  };
  (0, import_react123.useEffect)(function() {
    if (imgRef.current && imgRef.current.complete && !lazy) {
      if (imgRef.current.naturalHeight === 0) {
        handleError();
      } else {
        handleLoad();
      }
    } else {
      setInnerLoading(true);
    }
  }, [
    imgRef
  ]);
  (0, import_react123.useEffect)(function() {
    setComplete(false);
  }, [
    src
  ]);
  var handleLoad = function() {
    if (!complete) {
      setIsError(false);
      setInnerLoading(false);
      onLoad && onLoad();
      setComplete(true);
    }
  };
  var handleError = function() {
    if (!complete) {
      setIsError(true);
      setInnerLoading(false);
      onError && onError();
      setComplete(true);
    }
  };
  var containerStyle = _object_spread({
    height: height2 ? pxCheck2(height2) : "",
    width: width2 ? pxCheck2(width2) : "",
    overflow: radius !== void 0 && radius !== null ? "hidden" : "",
    borderRadius: radius !== void 0 && radius !== null ? pxCheck2(radius) : ""
  }, style);
  var imgStyle = _object_spread({
    objectFit: fit,
    objectPosition: position2
  }, style);
  var observer = (0, import_react123.useRef)(null);
  var initObserver = function() {
    var options2 = {
      threshold: [
        0
      ],
      rootMargin: "0px"
    };
    observer.current = new IntersectionObserver(function(entires, self2) {
      entires.forEach(function(item) {
        if (item.isIntersecting) {
          setTimeout(function() {
            var img = item.target;
            if (img.dataset.src) {
              img.src = img.dataset.src;
              img.removeAttribute("data-src");
            }
            resetObserver();
          }, 300);
        }
      });
    }, options2);
    observer.current.observe(imgRef.current);
  };
  var resetObserver = function() {
    observer.current.disconnect && observer.current.disconnect();
  };
  (0, import_react123.useEffect)(function() {
    lazy && initObserver();
    return function() {
      lazy && resetObserver();
    };
  }, [
    lazy
  ]);
  var imageClick = function(event) {
    onClick && onClick(event);
  };
  var renderErrorImg = (0, import_react123.useCallback)(function() {
    if (!isError)
      return null;
    if (typeof error === "boolean" && error === true && !innerLoading) {
      return import_react123.default.createElement("div", {
        className: "".concat(classPrefix4, "-error")
      }, import_react123.default.createElement(d3, null));
    }
    if (import_react123.default.isValidElement(error) && !innerLoading) {
      return import_react123.default.createElement("div", {
        className: "".concat(classPrefix4, "-error")
      }, error);
    }
    return null;
  }, [
    error,
    isError
  ]);
  var renderLoading = (0, import_react123.useCallback)(function() {
    if (!loading)
      return null;
    if (typeof loading === "boolean" && loading === true && innerLoading) {
      return import_react123.default.createElement("div", {
        className: "".concat(classPrefix4, "-loading")
      }, import_react123.default.createElement(n9, null));
    }
    if (import_react123.default.isValidElement(loading) && innerLoading) {
      return import_react123.default.createElement("div", {
        className: "".concat(classPrefix4, "-loading")
      }, loading);
    }
    return null;
  }, [
    loading,
    innerLoading
  ]);
  return import_react123.default.createElement("div", {
    className: (0, import_classnames5.default)(classPrefix4, className),
    style: containerStyle,
    onClick: function(e2) {
      imageClick(e2);
    }
  }, lazy ? import_react123.default.createElement("img", {
    ref: imgRef,
    className: "".concat(classPrefix4, "-default lazyload"),
    style: imgStyle,
    "data-src": src,
    alt,
    loading: "lazy",
    onLoad: handleLoad,
    onError: handleError,
    draggable
  }) : import_react123.default.createElement("img", {
    ref: imgRef,
    className: "".concat(classPrefix4, "-default"),
    style: imgStyle,
    src,
    alt,
    onLoad: handleLoad,
    onError: handleError,
    draggable
  }), renderLoading(), renderErrorImg());
};
Image2.displayName = "NutImage";

// node_modules/@nutui/nutui-react/dist/es/packages/image/index.js
var image_default = Image2;

// node_modules/@nutui/nutui-react/dist/es/packages/overlay/overlay.js
var import_react133 = __toESM(require_react());

// node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n38) {
    for (var e2 = 1; e2 < arguments.length; e2++) {
      var t = arguments[e2];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n38[r] = t[r]);
    }
    return n38;
  }, _extends.apply(null, arguments);
}

// node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose(r, e2) {
  if (null == r)
    return {};
  var t = {};
  for (var n38 in r)
    if ({}.hasOwnProperty.call(r, n38)) {
      if (-1 !== e2.indexOf(n38))
        continue;
      t[n38] = r[n38];
    }
  return t;
}

// node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf(t, e2) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e3) {
    return t2.__proto__ = e3, t2;
  }, _setPrototypeOf(t, e2);
}

// node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
function _inheritsLoose(t, o) {
  t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o);
}

// node_modules/react-transition-group/esm/CSSTransition.js
var import_prop_types3 = __toESM(require_prop_types());

// node_modules/dom-helpers/esm/hasClass.js
function hasClass(element, className) {
  if (element.classList)
    return !!className && element.classList.contains(className);
  return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
}

// node_modules/dom-helpers/esm/addClass.js
function addClass(element, className) {
  if (element.classList)
    element.classList.add(className);
  else if (!hasClass(element, className))
    if (typeof element.className === "string")
      element.className = element.className + " " + className;
    else
      element.setAttribute("class", (element.className && element.className.baseVal || "") + " " + className);
}

// node_modules/dom-helpers/esm/removeClass.js
function replaceClassName(origClass, classToRemove) {
  return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
}
function removeClass(element, className) {
  if (element.classList) {
    element.classList.remove(className);
  } else if (typeof element.className === "string") {
    element.className = replaceClassName(element.className, className);
  } else {
    element.setAttribute("class", replaceClassName(element.className && element.className.baseVal || "", className));
  }
}

// node_modules/react-transition-group/esm/CSSTransition.js
var import_react126 = __toESM(require_react());

// node_modules/react-transition-group/esm/Transition.js
var import_prop_types2 = __toESM(require_prop_types());
var import_react125 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());

// node_modules/react-transition-group/esm/config.js
var config_default = {
  disabled: false
};

// node_modules/react-transition-group/esm/utils/PropTypes.js
var import_prop_types = __toESM(require_prop_types());
var timeoutsShape = true ? import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.shape({
  enter: import_prop_types.default.number,
  exit: import_prop_types.default.number,
  appear: import_prop_types.default.number
}).isRequired]) : null;
var classNamesShape = true ? import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.shape({
  enter: import_prop_types.default.string,
  exit: import_prop_types.default.string,
  active: import_prop_types.default.string
}), import_prop_types.default.shape({
  enter: import_prop_types.default.string,
  enterDone: import_prop_types.default.string,
  enterActive: import_prop_types.default.string,
  exit: import_prop_types.default.string,
  exitDone: import_prop_types.default.string,
  exitActive: import_prop_types.default.string
})]) : null;

// node_modules/react-transition-group/esm/TransitionGroupContext.js
var import_react124 = __toESM(require_react());
var TransitionGroupContext_default = import_react124.default.createContext(null);

// node_modules/react-transition-group/esm/utils/reflow.js
var forceReflow = function forceReflow2(node) {
  return node.scrollTop;
};

// node_modules/react-transition-group/esm/Transition.js
var UNMOUNTED = "unmounted";
var EXITED = "exited";
var ENTERING = "entering";
var ENTERED = "entered";
var EXITING = "exiting";
var Transition = function(_React$Component) {
  _inheritsLoose(Transition2, _React$Component);
  function Transition2(props, context2) {
    var _this;
    _this = _React$Component.call(this, props, context2) || this;
    var parentGroup = context2;
    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
    var initialStatus;
    _this.appearStatus = null;
    if (props.in) {
      if (appear) {
        initialStatus = EXITED;
        _this.appearStatus = ENTERING;
      } else {
        initialStatus = ENTERED;
      }
    } else {
      if (props.unmountOnExit || props.mountOnEnter) {
        initialStatus = UNMOUNTED;
      } else {
        initialStatus = EXITED;
      }
    }
    _this.state = {
      status: initialStatus
    };
    _this.nextCallback = null;
    return _this;
  }
  Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
    var nextIn = _ref.in;
    if (nextIn && prevState.status === UNMOUNTED) {
      return {
        status: EXITED
      };
    }
    return null;
  };
  var _proto = Transition2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.updateStatus(true, this.appearStatus);
  };
  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var nextStatus = null;
    if (prevProps !== this.props) {
      var status = this.state.status;
      if (this.props.in) {
        if (status !== ENTERING && status !== ENTERED) {
          nextStatus = ENTERING;
        }
      } else {
        if (status === ENTERING || status === ENTERED) {
          nextStatus = EXITING;
        }
      }
    }
    this.updateStatus(false, nextStatus);
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.cancelNextCallback();
  };
  _proto.getTimeouts = function getTimeouts() {
    var timeout2 = this.props.timeout;
    var exit, enter, appear;
    exit = enter = appear = timeout2;
    if (timeout2 != null && typeof timeout2 !== "number") {
      exit = timeout2.exit;
      enter = timeout2.enter;
      appear = timeout2.appear !== void 0 ? timeout2.appear : enter;
    }
    return {
      exit,
      enter,
      appear
    };
  };
  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
    if (mounting === void 0) {
      mounting = false;
    }
    if (nextStatus !== null) {
      this.cancelNextCallback();
      if (nextStatus === ENTERING) {
        if (this.props.unmountOnExit || this.props.mountOnEnter) {
          var node = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
          if (node)
            forceReflow(node);
        }
        this.performEnter(mounting);
      } else {
        this.performExit();
      }
    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
      this.setState({
        status: UNMOUNTED
      });
    }
  };
  _proto.performEnter = function performEnter(mounting) {
    var _this2 = this;
    var enter = this.props.enter;
    var appearing = this.context ? this.context.isMounting : mounting;
    var _ref2 = this.props.nodeRef ? [appearing] : [import_react_dom.default.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
    var timeouts2 = this.getTimeouts();
    var enterTimeout = appearing ? timeouts2.appear : timeouts2.enter;
    if (!mounting && !enter || config_default.disabled) {
      this.safeSetState({
        status: ENTERED
      }, function() {
        _this2.props.onEntered(maybeNode);
      });
      return;
    }
    this.props.onEnter(maybeNode, maybeAppearing);
    this.safeSetState({
      status: ENTERING
    }, function() {
      _this2.props.onEntering(maybeNode, maybeAppearing);
      _this2.onTransitionEnd(enterTimeout, function() {
        _this2.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode, maybeAppearing);
        });
      });
    });
  };
  _proto.performExit = function performExit() {
    var _this3 = this;
    var exit = this.props.exit;
    var timeouts2 = this.getTimeouts();
    var maybeNode = this.props.nodeRef ? void 0 : import_react_dom.default.findDOMNode(this);
    if (!exit || config_default.disabled) {
      this.safeSetState({
        status: EXITED
      }, function() {
        _this3.props.onExited(maybeNode);
      });
      return;
    }
    this.props.onExit(maybeNode);
    this.safeSetState({
      status: EXITING
    }, function() {
      _this3.props.onExiting(maybeNode);
      _this3.onTransitionEnd(timeouts2.exit, function() {
        _this3.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
      });
    });
  };
  _proto.cancelNextCallback = function cancelNextCallback() {
    if (this.nextCallback !== null) {
      this.nextCallback.cancel();
      this.nextCallback = null;
    }
  };
  _proto.safeSetState = function safeSetState(nextState, callback) {
    callback = this.setNextCallback(callback);
    this.setState(nextState, callback);
  };
  _proto.setNextCallback = function setNextCallback(callback) {
    var _this4 = this;
    var active2 = true;
    this.nextCallback = function(event) {
      if (active2) {
        active2 = false;
        _this4.nextCallback = null;
        callback(event);
      }
    };
    this.nextCallback.cancel = function() {
      active2 = false;
    };
    return this.nextCallback;
  };
  _proto.onTransitionEnd = function onTransitionEnd(timeout2, handler) {
    this.setNextCallback(handler);
    var node = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
    var doesNotHaveTimeoutOrListener = timeout2 == null && !this.props.addEndListener;
    if (!node || doesNotHaveTimeoutOrListener) {
      setTimeout(this.nextCallback, 0);
      return;
    }
    if (this.props.addEndListener) {
      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
      this.props.addEndListener(maybeNode, maybeNextCallback);
    }
    if (timeout2 != null) {
      setTimeout(this.nextCallback, timeout2);
    }
  };
  _proto.render = function render2() {
    var status = this.state.status;
    if (status === UNMOUNTED) {
      return null;
    }
    var _this$props = this.props, children2 = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
    return (
      // allows for nested Transitions
      import_react125.default.createElement(TransitionGroupContext_default.Provider, {
        value: null
      }, typeof children2 === "function" ? children2(status, childProps) : import_react125.default.cloneElement(import_react125.default.Children.only(children2), childProps))
    );
  };
  return Transition2;
}(import_react125.default.Component);
Transition.contextType = TransitionGroupContext_default;
Transition.propTypes = true ? {
  /**
   * A React reference to DOM element that need to transition:
   * https://stackoverflow.com/a/51127130/4671932
   *
   *   - When `nodeRef` prop is used, `node` is not passed to callback functions
   *      (e.g. `onEnter`) because user already has direct access to the node.
   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
   *     `nodeRef` need to be provided to `Transition` with changed `key` prop
   *     (see
   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
   */
  nodeRef: import_prop_types2.default.shape({
    current: typeof Element === "undefined" ? import_prop_types2.default.any : function(propValue, key2, componentName, location, propFullName, secret) {
      var value2 = propValue[key2];
      return import_prop_types2.default.instanceOf(value2 && "ownerDocument" in value2 ? value2.ownerDocument.defaultView.Element : Element)(propValue, key2, componentName, location, propFullName, secret);
    }
  }),
  /**
   * A `function` child can be used instead of a React element. This function is
   * called with the current transition status (`'entering'`, `'entered'`,
   * `'exiting'`, `'exited'`), which can be used to apply context
   * specific props to a component.
   *
   * ```jsx
   * <Transition in={this.state.in} timeout={150}>
   *   {state => (
   *     <MyComponent className={`fade fade-${state}`} />
   *   )}
   * </Transition>
   * ```
   */
  children: import_prop_types2.default.oneOfType([import_prop_types2.default.func.isRequired, import_prop_types2.default.element.isRequired]).isRequired,
  /**
   * Show the component; triggers the enter or exit states
   */
  in: import_prop_types2.default.bool,
  /**
   * By default the child component is mounted immediately along with
   * the parent `Transition` component. If you want to "lazy mount" the component on the
   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
   * mounted, even on "exited", unless you also specify `unmountOnExit`.
   */
  mountOnEnter: import_prop_types2.default.bool,
  /**
   * By default the child component stays mounted after it reaches the `'exited'` state.
   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
   */
  unmountOnExit: import_prop_types2.default.bool,
  /**
   * By default the child component does not perform the enter transition when
   * it first mounts, regardless of the value of `in`. If you want this
   * behavior, set both `appear` and `in` to `true`.
   *
   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
   * > only adds an additional enter transition. However, in the
   * > `<CSSTransition>` component that first enter transition does result in
   * > additional `.appear-*` classes, that way you can choose to style it
   * > differently.
   */
  appear: import_prop_types2.default.bool,
  /**
   * Enable or disable enter transitions.
   */
  enter: import_prop_types2.default.bool,
  /**
   * Enable or disable exit transitions.
   */
  exit: import_prop_types2.default.bool,
  /**
   * The duration of the transition, in milliseconds.
   * Required unless `addEndListener` is provided.
   *
   * You may specify a single timeout for all transitions:
   *
   * ```jsx
   * timeout={500}
   * ```
   *
   * or individually:
   *
   * ```jsx
   * timeout={{
   *  appear: 500,
   *  enter: 300,
   *  exit: 500,
   * }}
   * ```
   *
   * - `appear` defaults to the value of `enter`
   * - `enter` defaults to `0`
   * - `exit` defaults to `0`
   *
   * @type {number | { enter?: number, exit?: number, appear?: number }}
   */
  timeout: function timeout(props) {
    var pt = timeoutsShape;
    if (!props.addEndListener)
      pt = pt.isRequired;
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return pt.apply(void 0, [props].concat(args));
  },
  /**
   * Add a custom transition end trigger. Called with the transitioning
   * DOM node and a `done` callback. Allows for more fine grained transition end
   * logic. Timeouts are still used as a fallback if provided.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * ```jsx
   * addEndListener={(node, done) => {
   *   // use the css transitionend event to mark the finish of a transition
   *   node.addEventListener('transitionend', done, false);
   * }}
   * ```
   */
  addEndListener: import_prop_types2.default.func,
  /**
   * Callback fired before the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEnter: import_prop_types2.default.func,
  /**
   * Callback fired after the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: import_prop_types2.default.func,
  /**
   * Callback fired after the "entered" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEntered: import_prop_types2.default.func,
  /**
   * Callback fired before the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExit: import_prop_types2.default.func,
  /**
   * Callback fired after the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExiting: import_prop_types2.default.func,
  /**
   * Callback fired after the "exited" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExited: import_prop_types2.default.func
} : {};
function noop() {
}
Transition.defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  enter: true,
  exit: true,
  onEnter: noop,
  onEntering: noop,
  onEntered: noop,
  onExit: noop,
  onExiting: noop,
  onExited: noop
};
Transition.UNMOUNTED = UNMOUNTED;
Transition.EXITED = EXITED;
Transition.ENTERING = ENTERING;
Transition.ENTERED = ENTERED;
Transition.EXITING = EXITING;
var Transition_default = Transition;

// node_modules/react-transition-group/esm/CSSTransition.js
var _addClass = function addClass2(node, classes) {
  return node && classes && classes.split(" ").forEach(function(c10) {
    return addClass(node, c10);
  });
};
var removeClass2 = function removeClass3(node, classes) {
  return node && classes && classes.split(" ").forEach(function(c10) {
    return removeClass(node, c10);
  });
};
var CSSTransition = function(_React$Component) {
  _inheritsLoose(CSSTransition2, _React$Component);
  function CSSTransition2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.appliedClasses = {
      appear: {},
      enter: {},
      exit: {}
    };
    _this.onEnter = function(maybeNode, maybeAppearing) {
      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument[0], appearing = _this$resolveArgument[1];
      _this.removeClasses(node, "exit");
      _this.addClass(node, appearing ? "appear" : "enter", "base");
      if (_this.props.onEnter) {
        _this.props.onEnter(maybeNode, maybeAppearing);
      }
    };
    _this.onEntering = function(maybeNode, maybeAppearing) {
      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument2[0], appearing = _this$resolveArgument2[1];
      var type4 = appearing ? "appear" : "enter";
      _this.addClass(node, type4, "active");
      if (_this.props.onEntering) {
        _this.props.onEntering(maybeNode, maybeAppearing);
      }
    };
    _this.onEntered = function(maybeNode, maybeAppearing) {
      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument3[0], appearing = _this$resolveArgument3[1];
      var type4 = appearing ? "appear" : "enter";
      _this.removeClasses(node, type4);
      _this.addClass(node, type4, "done");
      if (_this.props.onEntered) {
        _this.props.onEntered(maybeNode, maybeAppearing);
      }
    };
    _this.onExit = function(maybeNode) {
      var _this$resolveArgument4 = _this.resolveArguments(maybeNode), node = _this$resolveArgument4[0];
      _this.removeClasses(node, "appear");
      _this.removeClasses(node, "enter");
      _this.addClass(node, "exit", "base");
      if (_this.props.onExit) {
        _this.props.onExit(maybeNode);
      }
    };
    _this.onExiting = function(maybeNode) {
      var _this$resolveArgument5 = _this.resolveArguments(maybeNode), node = _this$resolveArgument5[0];
      _this.addClass(node, "exit", "active");
      if (_this.props.onExiting) {
        _this.props.onExiting(maybeNode);
      }
    };
    _this.onExited = function(maybeNode) {
      var _this$resolveArgument6 = _this.resolveArguments(maybeNode), node = _this$resolveArgument6[0];
      _this.removeClasses(node, "exit");
      _this.addClass(node, "exit", "done");
      if (_this.props.onExited) {
        _this.props.onExited(maybeNode);
      }
    };
    _this.resolveArguments = function(maybeNode, maybeAppearing) {
      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] : [maybeNode, maybeAppearing];
    };
    _this.getClassNames = function(type4) {
      var classNames95 = _this.props.classNames;
      var isStringClassNames = typeof classNames95 === "string";
      var prefix2 = isStringClassNames && classNames95 ? classNames95 + "-" : "";
      var baseClassName = isStringClassNames ? "" + prefix2 + type4 : classNames95[type4];
      var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames95[type4 + "Active"];
      var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames95[type4 + "Done"];
      return {
        baseClassName,
        activeClassName,
        doneClassName
      };
    };
    return _this;
  }
  var _proto = CSSTransition2.prototype;
  _proto.addClass = function addClass3(node, type4, phase) {
    var className = this.getClassNames(type4)[phase + "ClassName"];
    var _this$getClassNames = this.getClassNames("enter"), doneClassName = _this$getClassNames.doneClassName;
    if (type4 === "appear" && phase === "done" && doneClassName) {
      className += " " + doneClassName;
    }
    if (phase === "active") {
      if (node)
        forceReflow(node);
    }
    if (className) {
      this.appliedClasses[type4][phase] = className;
      _addClass(node, className);
    }
  };
  _proto.removeClasses = function removeClasses(node, type4) {
    var _this$appliedClasses$ = this.appliedClasses[type4], baseClassName = _this$appliedClasses$.base, activeClassName = _this$appliedClasses$.active, doneClassName = _this$appliedClasses$.done;
    this.appliedClasses[type4] = {};
    if (baseClassName) {
      removeClass2(node, baseClassName);
    }
    if (activeClassName) {
      removeClass2(node, activeClassName);
    }
    if (doneClassName) {
      removeClass2(node, doneClassName);
    }
  };
  _proto.render = function render2() {
    var _this$props = this.props, _ = _this$props.classNames, props = _objectWithoutPropertiesLoose(_this$props, ["classNames"]);
    return import_react126.default.createElement(Transition_default, _extends({}, props, {
      onEnter: this.onEnter,
      onEntered: this.onEntered,
      onEntering: this.onEntering,
      onExit: this.onExit,
      onExiting: this.onExiting,
      onExited: this.onExited
    }));
  };
  return CSSTransition2;
}(import_react126.default.Component);
CSSTransition.defaultProps = {
  classNames: ""
};
CSSTransition.propTypes = true ? _extends({}, Transition_default.propTypes, {
  /**
   * The animation classNames applied to the component as it appears, enters,
   * exits or has finished the transition. A single name can be provided, which
   * will be suffixed for each stage, e.g. `classNames="fade"` applies:
   *
   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`
   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`
   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`
   *
   * A few details to note about how these classes are applied:
   *
   * 1. They are _joined_ with the ones that are already defined on the child
   *    component, so if you want to add some base styles, you can use
   *    `className` without worrying that it will be overridden.
   *
   * 2. If the transition component mounts with `in={false}`, no classes are
   *    applied yet. You might be expecting `*-exit-done`, but if you think
   *    about it, a component cannot finish exiting if it hasn't entered yet.
   *
   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This
   *    allows you to define different behavior for when appearing is done and
   *    when regular entering is done, using selectors like
   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply
   *    an epic entrance animation when element first appears in the DOM using
   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
   *    simply use `fade-enter-done` for defining both cases.
   *
   * Each individual classNames can also be specified independently like:
   *
   * ```js
   * classNames={{
   *  appear: 'my-appear',
   *  appearActive: 'my-active-appear',
   *  appearDone: 'my-done-appear',
   *  enter: 'my-enter',
   *  enterActive: 'my-active-enter',
   *  enterDone: 'my-done-enter',
   *  exit: 'my-exit',
   *  exitActive: 'my-active-exit',
   *  exitDone: 'my-done-exit',
   * }}
   * ```
   *
   * If you want to set these classes using CSS Modules:
   *
   * ```js
   * import styles from './styles.css';
   * ```
   *
   * you might want to use camelCase in your CSS file, that way could simply
   * spread them instead of listing them one by one:
   *
   * ```js
   * classNames={{ ...styles }}
   * ```
   *
   * @type {string | {
   *  appear?: string,
   *  appearActive?: string,
   *  appearDone?: string,
   *  enter?: string,
   *  enterActive?: string,
   *  enterDone?: string,
   *  exit?: string,
   *  exitActive?: string,
   *  exitDone?: string,
   * }}
   */
  classNames: classNamesShape,
  /**
   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
   * applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEnter: import_prop_types3.default.func,
  /**
   * A `<Transition>` callback fired immediately after the 'enter-active' or
   * 'appear-active' class is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: import_prop_types3.default.func,
  /**
   * A `<Transition>` callback fired immediately after the 'enter' or
   * 'appear' classes are **removed** and the `done` class is added to the DOM node.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntered: import_prop_types3.default.func,
  /**
   * A `<Transition>` callback fired immediately after the 'exit' class is
   * applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement)
   */
  onExit: import_prop_types3.default.func,
  /**
   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement)
   */
  onExiting: import_prop_types3.default.func,
  /**
   * A `<Transition>` callback fired immediately after the 'exit' classes
   * are **removed** and the `exit-done` class is added to the DOM node.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement)
   */
  onExited: import_prop_types3.default.func
}) : {};
var CSSTransition_default = CSSTransition;

// node_modules/react-transition-group/esm/ReplaceTransition.js
var import_prop_types5 = __toESM(require_prop_types());
var import_react129 = __toESM(require_react());
var import_react_dom2 = __toESM(require_react_dom());

// node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
function _assertThisInitialized(e2) {
  if (void 0 === e2)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e2;
}

// node_modules/react-transition-group/esm/TransitionGroup.js
var import_prop_types4 = __toESM(require_prop_types());
var import_react128 = __toESM(require_react());

// node_modules/react-transition-group/esm/utils/ChildMapping.js
var import_react127 = __toESM(require_react());
function getChildMapping(children2, mapFn) {
  var mapper = function mapper2(child) {
    return mapFn && (0, import_react127.isValidElement)(child) ? mapFn(child) : child;
  };
  var result = /* @__PURE__ */ Object.create(null);
  if (children2)
    import_react127.Children.map(children2, function(c10) {
      return c10;
    }).forEach(function(child) {
      result[child.key] = mapper(child);
    });
  return result;
}
function mergeChildMappings(prev, next) {
  prev = prev || {};
  next = next || {};
  function getValueForKey(key2) {
    return key2 in next ? next[key2] : prev[key2];
  }
  var nextKeysPending = /* @__PURE__ */ Object.create(null);
  var pendingKeys = [];
  for (var prevKey in prev) {
    if (prevKey in next) {
      if (pendingKeys.length) {
        nextKeysPending[prevKey] = pendingKeys;
        pendingKeys = [];
      }
    } else {
      pendingKeys.push(prevKey);
    }
  }
  var i6;
  var childMapping = {};
  for (var nextKey in next) {
    if (nextKeysPending[nextKey]) {
      for (i6 = 0; i6 < nextKeysPending[nextKey].length; i6++) {
        var pendingNextKey = nextKeysPending[nextKey][i6];
        childMapping[nextKeysPending[nextKey][i6]] = getValueForKey(pendingNextKey);
      }
    }
    childMapping[nextKey] = getValueForKey(nextKey);
  }
  for (i6 = 0; i6 < pendingKeys.length; i6++) {
    childMapping[pendingKeys[i6]] = getValueForKey(pendingKeys[i6]);
  }
  return childMapping;
}
function getProp(child, prop, props) {
  return props[prop] != null ? props[prop] : child.props[prop];
}
function getInitialChildMapping(props, onExited) {
  return getChildMapping(props.children, function(child) {
    return (0, import_react127.cloneElement)(child, {
      onExited: onExited.bind(null, child),
      in: true,
      appear: getProp(child, "appear", props),
      enter: getProp(child, "enter", props),
      exit: getProp(child, "exit", props)
    });
  });
}
function getNextChildMapping(nextProps, prevChildMapping, onExited) {
  var nextChildMapping = getChildMapping(nextProps.children);
  var children2 = mergeChildMappings(prevChildMapping, nextChildMapping);
  Object.keys(children2).forEach(function(key2) {
    var child = children2[key2];
    if (!(0, import_react127.isValidElement)(child))
      return;
    var hasPrev = key2 in prevChildMapping;
    var hasNext = key2 in nextChildMapping;
    var prevChild = prevChildMapping[key2];
    var isLeaving = (0, import_react127.isValidElement)(prevChild) && !prevChild.props.in;
    if (hasNext && (!hasPrev || isLeaving)) {
      children2[key2] = (0, import_react127.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        exit: getProp(child, "exit", nextProps),
        enter: getProp(child, "enter", nextProps)
      });
    } else if (!hasNext && hasPrev && !isLeaving) {
      children2[key2] = (0, import_react127.cloneElement)(child, {
        in: false
      });
    } else if (hasNext && hasPrev && (0, import_react127.isValidElement)(prevChild)) {
      children2[key2] = (0, import_react127.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: prevChild.props.in,
        exit: getProp(child, "exit", nextProps),
        enter: getProp(child, "enter", nextProps)
      });
    }
  });
  return children2;
}

// node_modules/react-transition-group/esm/TransitionGroup.js
var values = Object.values || function(obj) {
  return Object.keys(obj).map(function(k2) {
    return obj[k2];
  });
};
var defaultProps5 = {
  component: "div",
  childFactory: function childFactory(child) {
    return child;
  }
};
var TransitionGroup = function(_React$Component) {
  _inheritsLoose(TransitionGroup2, _React$Component);
  function TransitionGroup2(props, context2) {
    var _this;
    _this = _React$Component.call(this, props, context2) || this;
    var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));
    _this.state = {
      contextValue: {
        isMounting: true
      },
      handleExited,
      firstRender: true
    };
    return _this;
  }
  var _proto = TransitionGroup2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.mounted = true;
    this.setState({
      contextValue: {
        isMounting: false
      }
    });
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.mounted = false;
  };
  TransitionGroup2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
    var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
    return {
      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
      firstRender: false
    };
  };
  _proto.handleExited = function handleExited(child, node) {
    var currentChildMapping = getChildMapping(this.props.children);
    if (child.key in currentChildMapping)
      return;
    if (child.props.onExited) {
      child.props.onExited(node);
    }
    if (this.mounted) {
      this.setState(function(state) {
        var children2 = _extends({}, state.children);
        delete children2[child.key];
        return {
          children: children2
        };
      });
    }
  };
  _proto.render = function render2() {
    var _this$props = this.props, Component2 = _this$props.component, childFactory2 = _this$props.childFactory, props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);
    var contextValue = this.state.contextValue;
    var children2 = values(this.state.children).map(childFactory2);
    delete props.appear;
    delete props.enter;
    delete props.exit;
    if (Component2 === null) {
      return import_react128.default.createElement(TransitionGroupContext_default.Provider, {
        value: contextValue
      }, children2);
    }
    return import_react128.default.createElement(TransitionGroupContext_default.Provider, {
      value: contextValue
    }, import_react128.default.createElement(Component2, props, children2));
  };
  return TransitionGroup2;
}(import_react128.default.Component);
TransitionGroup.propTypes = true ? {
  /**
   * `<TransitionGroup>` renders a `<div>` by default. You can change this
   * behavior by providing a `component` prop.
   * If you use React v16+ and would like to avoid a wrapping `<div>` element
   * you can pass in `component={null}`. This is useful if the wrapping div
   * borks your css styles.
   */
  component: import_prop_types4.default.any,
  /**
   * A set of `<Transition>` components, that are toggled `in` and out as they
   * leave. the `<TransitionGroup>` will inject specific transition props, so
   * remember to spread them through if you are wrapping the `<Transition>` as
   * with our `<Fade>` example.
   *
   * While this component is meant for multiple `Transition` or `CSSTransition`
   * children, sometimes you may want to have a single transition child with
   * content that you want to be transitioned out and in when you change it
   * (e.g. routes, images etc.) In that case you can change the `key` prop of
   * the transition child as you change its content, this will cause
   * `TransitionGroup` to transition the child out and back in.
   */
  children: import_prop_types4.default.node,
  /**
   * A convenience prop that enables or disables appear animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  appear: import_prop_types4.default.bool,
  /**
   * A convenience prop that enables or disables enter animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  enter: import_prop_types4.default.bool,
  /**
   * A convenience prop that enables or disables exit animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  exit: import_prop_types4.default.bool,
  /**
   * You may need to apply reactive updates to a child as it is exiting.
   * This is generally done by using `cloneElement` however in the case of an exiting
   * child the element has already been removed and not accessible to the consumer.
   *
   * If you do need to update a child as it leaves you can provide a `childFactory`
   * to wrap every child, even the ones that are leaving.
   *
   * @type Function(child: ReactElement) -> ReactElement
   */
  childFactory: import_prop_types4.default.func
} : {};
TransitionGroup.defaultProps = defaultProps5;
var TransitionGroup_default = TransitionGroup;

// node_modules/react-transition-group/esm/ReplaceTransition.js
var ReplaceTransition = function(_React$Component) {
  _inheritsLoose(ReplaceTransition2, _React$Component);
  function ReplaceTransition2() {
    var _this;
    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;
    _this.handleEnter = function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return _this.handleLifecycle("onEnter", 0, args);
    };
    _this.handleEntering = function() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      return _this.handleLifecycle("onEntering", 0, args);
    };
    _this.handleEntered = function() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      return _this.handleLifecycle("onEntered", 0, args);
    };
    _this.handleExit = function() {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }
      return _this.handleLifecycle("onExit", 1, args);
    };
    _this.handleExiting = function() {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }
      return _this.handleLifecycle("onExiting", 1, args);
    };
    _this.handleExited = function() {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }
      return _this.handleLifecycle("onExited", 1, args);
    };
    return _this;
  }
  var _proto = ReplaceTransition2.prototype;
  _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
    var _child$props;
    var children2 = this.props.children;
    var child = import_react129.default.Children.toArray(children2)[idx];
    if (child.props[handler])
      (_child$props = child.props)[handler].apply(_child$props, originalArgs);
    if (this.props[handler]) {
      var maybeNode = child.props.nodeRef ? void 0 : import_react_dom2.default.findDOMNode(this);
      this.props[handler](maybeNode);
    }
  };
  _proto.render = function render2() {
    var _this$props = this.props, children2 = _this$props.children, inProp = _this$props.in, props = _objectWithoutPropertiesLoose(_this$props, ["children", "in"]);
    var _React$Children$toArr = import_react129.default.Children.toArray(children2), first = _React$Children$toArr[0], second = _React$Children$toArr[1];
    delete props.onEnter;
    delete props.onEntering;
    delete props.onEntered;
    delete props.onExit;
    delete props.onExiting;
    delete props.onExited;
    return import_react129.default.createElement(TransitionGroup_default, props, inProp ? import_react129.default.cloneElement(first, {
      key: "first",
      onEnter: this.handleEnter,
      onEntering: this.handleEntering,
      onEntered: this.handleEntered
    }) : import_react129.default.cloneElement(second, {
      key: "second",
      onEnter: this.handleExit,
      onEntering: this.handleExiting,
      onEntered: this.handleExited
    }));
  };
  return ReplaceTransition2;
}(import_react129.default.Component);
ReplaceTransition.propTypes = true ? {
  in: import_prop_types5.default.bool.isRequired,
  children: function children(props, propName) {
    if (import_react129.default.Children.count(props[propName]) !== 2)
      return new Error('"' + propName + '" must be exactly two transition components.');
    return null;
  }
} : {};

// node_modules/react-transition-group/esm/SwitchTransition.js
var import_react130 = __toESM(require_react());
var import_prop_types6 = __toESM(require_prop_types());
var _leaveRenders;
var _enterRenders;
function areChildrenDifferent(oldChildren, newChildren) {
  if (oldChildren === newChildren)
    return false;
  if (import_react130.default.isValidElement(oldChildren) && import_react130.default.isValidElement(newChildren) && oldChildren.key != null && oldChildren.key === newChildren.key) {
    return false;
  }
  return true;
}
var modes = {
  out: "out-in",
  in: "in-out"
};
var callHook = function callHook2(element, name2, cb) {
  return function() {
    var _element$props;
    element.props[name2] && (_element$props = element.props)[name2].apply(_element$props, arguments);
    cb();
  };
};
var leaveRenders = (_leaveRenders = {}, _leaveRenders[modes.out] = function(_ref) {
  var current = _ref.current, changeState = _ref.changeState;
  return import_react130.default.cloneElement(current, {
    in: false,
    onExited: callHook(current, "onExited", function() {
      changeState(ENTERING, null);
    })
  });
}, _leaveRenders[modes.in] = function(_ref2) {
  var current = _ref2.current, changeState = _ref2.changeState, children2 = _ref2.children;
  return [current, import_react130.default.cloneElement(children2, {
    in: true,
    onEntered: callHook(children2, "onEntered", function() {
      changeState(ENTERING);
    })
  })];
}, _leaveRenders);
var enterRenders = (_enterRenders = {}, _enterRenders[modes.out] = function(_ref3) {
  var children2 = _ref3.children, changeState = _ref3.changeState;
  return import_react130.default.cloneElement(children2, {
    in: true,
    onEntered: callHook(children2, "onEntered", function() {
      changeState(ENTERED, import_react130.default.cloneElement(children2, {
        in: true
      }));
    })
  });
}, _enterRenders[modes.in] = function(_ref4) {
  var current = _ref4.current, children2 = _ref4.children, changeState = _ref4.changeState;
  return [import_react130.default.cloneElement(current, {
    in: false,
    onExited: callHook(current, "onExited", function() {
      changeState(ENTERED, import_react130.default.cloneElement(children2, {
        in: true
      }));
    })
  }), import_react130.default.cloneElement(children2, {
    in: true
  })];
}, _enterRenders);
var SwitchTransition = function(_React$Component) {
  _inheritsLoose(SwitchTransition2, _React$Component);
  function SwitchTransition2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      status: ENTERED,
      current: null
    };
    _this.appeared = false;
    _this.changeState = function(status, current) {
      if (current === void 0) {
        current = _this.state.current;
      }
      _this.setState({
        status,
        current
      });
    };
    return _this;
  }
  var _proto = SwitchTransition2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.appeared = true;
  };
  SwitchTransition2.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
    if (props.children == null) {
      return {
        current: null
      };
    }
    if (state.status === ENTERING && props.mode === modes.in) {
      return {
        status: ENTERING
      };
    }
    if (state.current && areChildrenDifferent(state.current, props.children)) {
      return {
        status: EXITING
      };
    }
    return {
      current: import_react130.default.cloneElement(props.children, {
        in: true
      })
    };
  };
  _proto.render = function render2() {
    var _this$props = this.props, children2 = _this$props.children, mode = _this$props.mode, _this$state = this.state, status = _this$state.status, current = _this$state.current;
    var data2 = {
      children: children2,
      current,
      changeState: this.changeState,
      status
    };
    var component;
    switch (status) {
      case ENTERING:
        component = enterRenders[mode](data2);
        break;
      case EXITING:
        component = leaveRenders[mode](data2);
        break;
      case ENTERED:
        component = current;
    }
    return import_react130.default.createElement(TransitionGroupContext_default.Provider, {
      value: {
        isMounting: !this.appeared
      }
    }, component);
  };
  return SwitchTransition2;
}(import_react130.default.Component);
SwitchTransition.propTypes = true ? {
  /**
   * Transition modes.
   * `out-in`: Current element transitions out first, then when complete, the new element transitions in.
   * `in-out`: New element transitions in first, then when complete, the current element transitions out.
   *
   * @type {'out-in'|'in-out'}
   */
  mode: import_prop_types6.default.oneOf([modes.in, modes.out]),
  /**
   * Any `Transition` or `CSSTransition` component.
   */
  children: import_prop_types6.default.oneOfType([import_prop_types6.default.element.isRequired])
} : {};
SwitchTransition.defaultProps = {
  mode: modes.out
};

// node_modules/@nutui/nutui-react/dist/es/packages/overlay/overlay.js
var import_classnames6 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/hooks/use-lock-scroll.js
var import_react132 = __toESM(require_react());

// node_modules/@nutui/nutui-react/dist/es/hooks/use-touch.js
var import_react131 = __toESM(require_react());
var MIN_DISTANCE = 10;
function getDirection(x2, y) {
  if (x2 > y && x2 > MIN_DISTANCE) {
    return "horizontal";
  }
  if (y > x2 && y > MIN_DISTANCE) {
    return "vertical";
  }
  return "";
}
function useTouch() {
  var startX = (0, import_react131.useRef)(0);
  var startY = (0, import_react131.useRef)(0);
  var deltaX = (0, import_react131.useRef)(0);
  var deltaY = (0, import_react131.useRef)(0);
  var delta = (0, import_react131.useRef)(0);
  var offsetX = (0, import_react131.useRef)(0);
  var offsetY = (0, import_react131.useRef)(0);
  var direction = (0, import_react131.useRef)("");
  var last = (0, import_react131.useRef)(false);
  var velocity2 = (0, import_react131.useRef)(0);
  var touchTime = (0, import_react131.useRef)(Date.now());
  var isVertical = function() {
    return direction.current === "vertical";
  };
  var isHorizontal = function() {
    return direction.current === "horizontal";
  };
  var reset = function() {
    touchTime.current = Date.now();
    deltaX.current = 0;
    deltaY.current = 0;
    offsetX.current = 0;
    offsetY.current = 0;
    delta.current = 0;
    direction.current = "";
    last.current = false;
  };
  var getTouch = function(event) {
    var touch = event.touches ? event.touches[0] : event.nativeEvent;
    return touch;
  };
  var getX = function(touch) {
    if (typeof touch.clientX !== "undefined" && typeof touch.pageX !== "undefined")
      return touch.pageX;
    var _touch_screenX, _ref, _ref1;
    return (_ref1 = (_ref = (_touch_screenX = touch.screenX) !== null && _touch_screenX !== void 0 ? _touch_screenX : touch.pageX) !== null && _ref !== void 0 ? _ref : touch.clientX) !== null && _ref1 !== void 0 ? _ref1 : 0;
  };
  var getY = function(touch) {
    if (typeof touch.clientY !== "undefined" && typeof touch.pageY !== "undefined")
      return touch.pageY;
    var _touch_screenY, _ref, _ref1;
    return (_ref1 = (_ref = (_touch_screenY = touch.screenY) !== null && _touch_screenY !== void 0 ? _touch_screenY : touch.pageY) !== null && _ref !== void 0 ? _ref : touch.clientY) !== null && _ref1 !== void 0 ? _ref1 : 0;
  };
  var start2 = function(event) {
    reset();
    touchTime.current = Date.now();
    startX.current = getX(getTouch(event));
    startY.current = getY(getTouch(event));
  };
  var move = function(event) {
    var touch = getTouch(event);
    var clientX = getX(touch);
    var clientY = getY(touch);
    deltaX.current = clientX < 0 ? 0 : clientX - startX.current;
    deltaY.current = clientY - startY.current;
    offsetX.current = Math.abs(deltaX.current);
    offsetY.current = Math.abs(deltaY.current);
    delta.current = isVertical() ? deltaY.current : deltaX.current;
    if (!direction.current) {
      direction.current = getDirection(offsetX.current, offsetY.current);
    }
  };
  var end = function(event) {
    last.current = true;
    velocity2.current = Math.sqrt(Math.pow(deltaX.current, 2) + Math.pow(deltaY.current, 2)) / (Date.now() - touchTime.current);
  };
  return {
    end,
    move,
    start: start2,
    reset,
    touchTime,
    startX,
    startY,
    deltaX,
    deltaY,
    delta,
    offsetX,
    offsetY,
    direction,
    isVertical,
    isHorizontal,
    last
  };
}

// node_modules/@nutui/nutui-react/dist/es/hooks/use-lock-scroll.js
var totalLockCount = 0;
var BODY_LOCK_CLASS = "nut-overflow-hidden";
function getScrollableElement(el) {
  var current = el === null || el === void 0 ? void 0 : el.parentElement;
  while (current) {
    if (current.clientHeight < current.scrollHeight) {
      return current;
    }
    current = current.parentElement;
  }
  return null;
}
function useLockScroll(rootRef, shouldLock) {
  var touch = useTouch();
  var onTouchMove = function(event) {
    touch.move(event);
    var direction = touch.deltaY.current > 0 ? "10" : "01";
    var el = getScrollParent(event.target, rootRef.current);
    if (!el)
      return;
    if (shouldLock === "strict") {
      var scrollableParent = getScrollableElement(event.target);
      if (scrollableParent === document.body || scrollableParent === document.documentElement) {
        event.preventDefault();
        return;
      }
    }
    var scrollHeight = el.scrollHeight, offsetHeight = el.offsetHeight, scrollTop = el.scrollTop;
    var status = "11";
    if (scrollTop === 0) {
      status = offsetHeight >= scrollHeight ? "00" : "01";
    } else if (scrollTop + offsetHeight >= scrollHeight) {
      status = "10";
    }
    if (status !== "11" && touch.isVertical() && !(parseInt(status, 2) & parseInt(direction, 2))) {
      if (event.cancelable) {
        event.preventDefault();
      }
    }
  };
  var lock = function() {
    document.addEventListener("touchstart", touch.start);
    document.addEventListener("touchmove", onTouchMove, passiveSupported ? {
      passive: false
    } : false);
    if (!totalLockCount) {
      document.body.classList.add(BODY_LOCK_CLASS);
    }
    totalLockCount++;
  };
  var unlock = function() {
    if (totalLockCount) {
      document.removeEventListener("touchstart", touch.start);
      document.removeEventListener("touchmove", onTouchMove);
      totalLockCount--;
      if (!totalLockCount) {
        document.body.classList.remove(BODY_LOCK_CLASS);
      }
    }
  };
  (0, import_react132.useEffect)(function() {
    if (shouldLock) {
      lock();
      return function() {
        unlock();
      };
    }
  }, [
    shouldLock
  ]);
}

// node_modules/@nutui/nutui-react/dist/es/packages/overlay/overlay.js
var defaultOverlayProps = _object_spread_props(_object_spread({}, ComponentDefaults), {
  zIndex: 1e3,
  duration: 300,
  closeOnOverlayClick: true,
  visible: false,
  lockScroll: true,
  onClick: function() {
  },
  afterShow: function() {
  },
  afterClose: function() {
  }
});
var Overlay = function(props) {
  var _ref = _object_spread({}, defaultOverlayProps, props), children2 = _ref.children, zIndex = _ref.zIndex, duration = _ref.duration, className = _ref.className, closeOnOverlayClick = _ref.closeOnOverlayClick, visible = _ref.visible, lockScroll = _ref.lockScroll, style = _ref.style, afterShow = _ref.afterShow, afterClose = _ref.afterClose, onClick = _ref.onClick, rest = _object_without_properties(_ref, [
    "children",
    "zIndex",
    "duration",
    "className",
    "closeOnOverlayClick",
    "visible",
    "lockScroll",
    "style",
    "afterShow",
    "afterClose",
    "onClick"
  ]);
  var classPrefix33 = "nut-overlay";
  var _useState = _sliced_to_array((0, import_react133.useState)(visible), 2), innerVisible = _useState[0], setInnerVisible = _useState[1];
  var nodeRef = (0, import_react133.useRef)(null);
  (0, import_react133.useEffect)(function() {
    setInnerVisible(visible);
  }, [
    visible
  ]);
  var shouldLockScroll = !innerVisible ? false : lockScroll;
  useLockScroll(nodeRef, shouldLockScroll);
  var classes = (0, import_classnames6.default)(classPrefix33, className);
  var styles = _object_spread_props(_object_spread({}, style), {
    zIndex
  });
  var handleClick = function(e2) {
    if (closeOnOverlayClick) {
      onClick && onClick(e2);
    }
  };
  return import_react133.default.createElement(CSSTransition_default, {
    nodeRef,
    classNames: "".concat(classPrefix33, "-slide"),
    unmountOnExit: true,
    timeout: duration,
    in: innerVisible,
    onEntered: afterShow,
    onExited: afterClose
  }, import_react133.default.createElement("div", _object_spread_props(_object_spread({
    ref: nodeRef,
    className: classes,
    style: styles
  }, rest), {
    onClick: handleClick
  }), children2));
};
Overlay.displayName = "NutOverlay";

// node_modules/@nutui/nutui-react/dist/es/packages/overlay/index.js
var overlay_default = Overlay;

// node_modules/@nutui/nutui-react/dist/es/packages/divider/divider.js
var import_react134 = __toESM(require_react());
var import_classnames7 = __toESM(require_classnames());
var defaultProps6 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  contentPosition: "center",
  direction: "horizontal"
});
var classPrefix5 = "nut-divider";
var Divider = function(props) {
  var _ref = _object_spread({}, defaultProps6, props), children2 = _ref.children, contentPosition = _ref.contentPosition, style = _ref.style, className = _ref.className, direction = _ref.direction, rest = _object_without_properties(_ref, [
    "children",
    "contentPosition",
    "style",
    "className",
    "direction"
  ]);
  var rtl = useRtl();
  var _obj, _obj1;
  var classes = direction === "horizontal" ? (0, import_classnames7.default)((_obj = {}, _define_property(_obj, "".concat(classPrefix5), true), _define_property(_obj, "".concat(classPrefix5, "-center"), children2), _define_property(_obj, "".concat(classPrefix5, "-left"), contentPosition === "left"), _define_property(_obj, "".concat(classPrefix5, "-right"), contentPosition === "right"), _define_property(_obj, "".concat(classPrefix5, "-rtl"), ([
    "left",
    "right"
  ].includes(contentPosition) || children2) && rtl), _obj)) : (0, import_classnames7.default)((_obj1 = {}, _define_property(_obj1, "".concat(classPrefix5), true), _define_property(_obj1, "".concat(classPrefix5, "-vertical"), direction === "vertical"), _obj1));
  var getClassNames = function(direction2) {
    return "".concat(classes.split(" ").map(function(item) {
      return "".concat(item, "-").concat(direction2);
    }).join(" "));
  };
  return import_react134.default.createElement("div", _object_spread({
    className: "".concat(classes, " ").concat(className || ""),
    style
  }, rest), direction === "horizontal" && import_react134.default.createElement("div", {
    className: getClassNames("before"),
    style
  }), children2, direction === "horizontal" && import_react134.default.createElement("div", {
    className: getClassNames("after"),
    style
  }));
};
Divider.displayName = "NutDivider";

// node_modules/@nutui/nutui-react/dist/es/packages/divider/index.js
var divider_default = Divider;

// node_modules/@nutui/nutui-react/dist/es/packages/grid/grid.js
var import_react137 = __toESM(require_react());
var import_classnames9 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/griditem/griditem.js
var import_react136 = __toESM(require_react());
var import_classnames8 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/grid/context.js
var import_react135 = __toESM(require_react());
var context = {
  onClick: function(item, index2) {
  }
};
var context_default2 = import_react135.default.createContext(context);

// node_modules/@nutui/nutui-react/dist/es/packages/griditem/griditem.js
var defaultProps7 = {
  text: "",
  columns: 4,
  gap: 9,
  center: true,
  square: true,
  reverse: false,
  direction: "vertical"
};
var GridItem = function(props) {
  var _ref = _object_spread({}, defaultProps7, props), children2 = _ref.children, style = _ref.style, columns = _ref.columns, index2 = _ref.index, gap = _ref.gap, square = _ref.square, text3 = _ref.text, center = _ref.center, reverse = _ref.reverse, direction = _ref.direction, className = _ref.className, onClick = _ref.onClick, rest = _object_without_properties(_ref, [
    "children",
    "style",
    "columns",
    "index",
    "gap",
    "square",
    "text",
    "center",
    "reverse",
    "direction",
    "className",
    "onClick"
  ]);
  var classPrefix33 = "nut-grid-item";
  var classes = (0, import_classnames8.default)(classPrefix33, className);
  var context2 = (0, import_react136.useContext)(context_default2);
  var rootStyle = function() {
    var width2 = "calc((100% - ".concat(Number(gap) * (Number(columns) - 1), "px) / ").concat(Number(columns), ")");
    var styles = _object_spread({
      flexBasis: width2
    }, style);
    if (square) {
      styles.paddingTop = width2;
    }
    if (gap) {
      if ((index2 + 1) % Number(columns)) {
        styles.marginRight = pxCheck(gap);
      }
      if (index2 >= Number(columns)) {
        styles.marginTop = pxCheck(gap);
      }
    } else {
      styles.borderRadius = 0;
    }
    return styles;
  };
  var contentClass = function() {
    var _obj;
    return (0, import_classnames8.default)("".concat(classPrefix33, "-content"), (_obj = {}, _define_property(_obj, "".concat(classPrefix33, "-content-border"), true), _define_property(_obj, "".concat(classPrefix33, "-content-surround"), gap), _define_property(_obj, "".concat(classPrefix33, "-content-center"), center), _define_property(_obj, "".concat(classPrefix33, "-content-square"), square), _define_property(_obj, "".concat(classPrefix33, "-content-reverse"), reverse && direction !== "horizontal"), _define_property(_obj, "".concat(classPrefix33, "-content-").concat(direction), !!direction), _define_property(_obj, "".concat(classPrefix33, "-content-horizontal-reverse"), reverse && direction === "horizontal"), _obj));
  };
  var textClass = function() {
    var _obj;
    return (0, import_classnames8.default)("".concat(classPrefix33, "-text"), (_obj = {}, _define_property(_obj, "".concat(classPrefix33, "-text-reverse"), reverse && direction !== "horizontal"), _define_property(_obj, "".concat(classPrefix33, "-text-horizontal"), direction === "horizontal"), _define_property(_obj, "".concat(classPrefix33, "-text-horizontal-reverse"), reverse && direction === "horizontal"), _obj));
  };
  var handleClick = function(e2) {
    onClick && onClick(e2);
    context2.onClick && context2.onClick({
      text: text3,
      index: index2,
      columns,
      gap,
      center,
      square,
      reverse,
      direction
    }, index2);
  };
  return import_react136.default.createElement("div", _object_spread_props(_object_spread({
    className: classes,
    style: rootStyle()
  }, rest), {
    onClick: handleClick
  }), import_react136.default.createElement("div", {
    className: contentClass()
  }, children2 && import_react136.default.createElement(import_react136.default.Fragment, null, children2), text3 && import_react136.default.createElement("div", {
    className: textClass()
  }, text3)));
};
GridItem.displayName = "NutGridItem";

// node_modules/@nutui/nutui-react/dist/es/packages/grid/grid.js
var defaultProps8 = {
  columns: 4,
  gap: 9,
  center: true,
  square: true,
  reverse: false,
  direction: "vertical"
};
var Grid = function(props) {
  var _ref = _object_spread({}, defaultProps8, props), children2 = _ref.children, columns = _ref.columns, gap = _ref.gap, center = _ref.center, square = _ref.square, reverse = _ref.reverse, direction = _ref.direction, style = _ref.style, className = _ref.className, onClick = _ref.onClick, rest = _object_without_properties(_ref, [
    "children",
    "columns",
    "gap",
    "center",
    "square",
    "reverse",
    "direction",
    "style",
    "className",
    "onClick"
  ]);
  var childrenDom = import_react137.default.Children.toArray(children2);
  var classPrefix33 = "nut-grid";
  var rootClass = function() {
    return (0, import_classnames9.default)(classPrefix33, _define_property({}, "".concat(classPrefix33, "-border"), !gap), className);
  };
  var rootStyle = function() {
    var styleSelf = {};
    if (style) {
      styleSelf = style;
    }
    return styleSelf;
  };
  return import_react137.default.createElement("div", _object_spread({
    className: rootClass(),
    style: rootStyle()
  }, rest), import_react137.default.createElement(context_default2.Provider, {
    value: {
      onClick
    }
  }, childrenDom.map(function(item, idex) {
    return import_react137.default.cloneElement(item, {
      index: idex,
      columns,
      center,
      gap,
      square,
      reverse,
      direction
    });
  })));
};
Grid.displayName = "NutGrid";
Grid.Item = GridItem;

// node_modules/@nutui/nutui-react/dist/es/packages/grid/index.js
var grid_default = Grid;

// node_modules/@nutui/nutui-react/dist/es/packages/griditem/index.js
var griditem_default = GridItem;

// node_modules/@nutui/nutui-react/dist/es/packages/layout/layout.js
var import_react138 = __toESM(require_react());
var Layout = function() {
  return import_react138.default.createElement("div", {
    className: "nut-layout"
  }, "Layout");
};
Layout.displayName = "NutLayout";

// node_modules/@nutui/nutui-react/dist/es/packages/layout/index.js
var layout_default = Layout;

// node_modules/@nutui/nutui-react/dist/es/packages/col/col.js
var import_react140 = __toESM(require_react());
var import_classnames10 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/row/context.js
var import_react139 = __toESM(require_react());
var DataContext = (0, import_react139.createContext)({});

// node_modules/@nutui/nutui-react/dist/es/packages/col/col.js
var defaultProps9 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  span: "24",
  offset: "0",
  gutter: "0",
  isFirst: false,
  isLast: false
});
var Col = function(props) {
  var _$_object_spread = _object_spread({}, defaultProps9, props), className = _$_object_spread.className, style = _$_object_spread.style, span = _$_object_spread.span, offset = _$_object_spread.offset, children2 = _$_object_spread.children, isFirst = _$_object_spread.isFirst, isLast = _$_object_spread.isLast, onClick = _$_object_spread.onClick;
  var _useState = _sliced_to_array((0, import_react140.useState)(""), 2), colName = _useState[0], setColName = _useState[1];
  var _useState1 = _sliced_to_array((0, import_react140.useState)({}), 2), colStyle = _useState1[0], setColStyle = _useState1[1];
  var gutter = (0, import_react140.useContext)(DataContext).gutter;
  var classs = function() {
    var prefixCls4 = "nut-col";
    return "".concat(prefixCls4, " ").concat(prefixCls4, "-").concat(span, " ").concat(gutter ? "".concat(prefixCls4, "-gutter") : "", " ").concat(prefixCls4, "-offset-").concat(offset);
  };
  var getStyle = function() {
    var style2 = {};
    if (!isFirst) {
      style2.paddingLeft = "".concat(gutter / 2, "px");
    }
    if (!isLast) {
      style2.paddingRight = "".concat(gutter / 2, "px");
    }
    return style2;
  };
  (0, import_react140.useEffect)(function() {
    setColName(classs);
    setColStyle(getStyle);
  }, [
    span,
    offset,
    gutter
  ]);
  return import_react140.default.createElement("div", {
    className: (0, import_classnames10.default)(colName, className),
    style: _object_spread({}, style, colStyle),
    onClick: function(e2) {
      onClick && onClick(e2, "col");
    }
  }, children2);
};
Col.displayName = "NutCol";

// node_modules/@nutui/nutui-react/dist/es/packages/col/index.js
var col_default = Col;

// node_modules/@nutui/nutui-react/dist/es/packages/row/row.js
var import_react141 = __toESM(require_react());
var import_classnames11 = __toESM(require_classnames());
var classPrefix6 = "nut-row";
var defaultProps10 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  type: "",
  justify: "start",
  align: "flex-start",
  wrap: "nowrap",
  gutter: "0"
});
var Row = function(props) {
  var _$_object_spread = _object_spread({}, defaultProps10, props), className = _$_object_spread.className, style = _$_object_spread.style, children2 = _$_object_spread.children, type4 = _$_object_spread.type, justify = _$_object_spread.justify, align = _$_object_spread.align, wrap = _$_object_spread.wrap, gutter = _$_object_spread.gutter, onClick = _$_object_spread.onClick;
  var getClass = function(prefix2, type5) {
    var classType = type5 ? "nut-row-".concat(prefix2, "-").concat(type5) : "";
    if (prefix2)
      return classType;
    if (type5)
      return "nut-row-".concat(type5);
    return "";
  };
  var getClasses = function() {
    return (0, import_classnames11.default)(classPrefix6, getClass("", type4), getClass("justify", justify), getClass("align", align), getClass("flex", wrap));
  };
  var parentRow = {
    gutter
  };
  return import_react141.default.createElement(DataContext.Provider, {
    value: parentRow
  }, import_react141.default.createElement("div", {
    className: (0, import_classnames11.default)(getClasses(), className),
    style,
    onClick: function(e2) {
      onClick === null || onClick === void 0 ? void 0 : onClick(e2, "row");
    }
  }, import_react141.default.Children.map(children2, function(child, index2) {
    var _child_type;
    return (child === null || child === void 0 ? void 0 : (_child_type = child.type) === null || _child_type === void 0 ? void 0 : _child_type.displayName) === "NutCol" ? import_react141.default.cloneElement(child, {
      isFirst: index2 === 0,
      isLast: index2 === import_react141.default.Children.count(children2) - 1
    }) : child;
  })));
};
Row.displayName = "NutRow";

// node_modules/@nutui/nutui-react/dist/es/packages/row/index.js
var row_default = Row;

// node_modules/@nutui/nutui-react/dist/es/packages/safearea/safearea.js
var import_react142 = __toESM(require_react());
var import_classnames12 = __toESM(require_classnames());
var classPrefix7 = "nut-safe-area";
var SafeArea = function(props) {
  return import_react142.default.createElement("div", {
    className: (0, import_classnames12.default)(classPrefix7, "".concat(classPrefix7, "-position-").concat(props.position))
  });
};
SafeArea.displayName = "NutSafeArea";

// node_modules/@nutui/nutui-react/dist/es/packages/safearea/index.js
var safearea_default = SafeArea;

// node_modules/@nutui/nutui-react/dist/es/packages/space/space.js
var import_react143 = __toESM(require_react());
var import_classnames13 = __toESM(require_classnames());
var prefixCls2 = "nut-space";
var defaultProps11 = {
  direction: "horizontal"
};
var Space = function(props) {
  var _$_object_spread = _object_spread({}, defaultProps11, props), className = _$_object_spread.className, style = _$_object_spread.style, children2 = _$_object_spread.children, wrap = _$_object_spread.wrap, align = _$_object_spread.align, direction = _$_object_spread.direction, justify = _$_object_spread.justify;
  var _obj;
  var cls = (0, import_classnames13.default)(prefixCls2, (_obj = {}, _define_property(_obj, "".concat(prefixCls2, "-").concat(direction), direction), _define_property(_obj, "".concat(prefixCls2, "-").concat(direction, "-wrap"), wrap), _define_property(_obj, "".concat(prefixCls2, "-align-").concat(align), align), _define_property(_obj, "".concat(prefixCls2, "-justify-").concat(justify), justify), _define_property(_obj, "".concat(className), className), _obj));
  var _obj1;
  var itemCls = (0, import_classnames13.default)("".concat(prefixCls2, "-item"), (_obj1 = {}, _define_property(_obj1, "".concat(prefixCls2, "-").concat(direction, "-item"), direction), _define_property(_obj1, "".concat(prefixCls2, "-").concat(direction, "-wrap-item"), wrap), _obj1));
  var childrenCount = import_react143.default.Children.count(children2);
  return import_react143.default.createElement("div", {
    className: cls,
    style
  }, import_react143.default.Children.map(children2, function(child, idx) {
    var isLast = idx === childrenCount - 1;
    return child !== null && child !== void 0 && import_react143.default.createElement("div", {
      className: (0, import_classnames13.default)(itemCls, isLast && "".concat(prefixCls2, "-").concat(direction, "-item-last"))
    }, child);
  }));
};
Space.displayName = "NutSpace";

// node_modules/@nutui/nutui-react/dist/es/packages/space/index.js
var space_default = Space;

// node_modules/@nutui/nutui-react/dist/es/packages/sticky/sticky.js
var import_react145 = __toESM(require_react());
var import_classnames14 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/hooks/use-watch.js
var import_react144 = __toESM(require_react());
function useWatch(dep, callback) {
  var config3 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
    immediate: false
  };
  var immediate = config3.immediate;
  var prev = (0, import_react144.useRef)();
  var inited = (0, import_react144.useRef)(false);
  var stop2 = (0, import_react144.useRef)(false);
  (0, import_react144.useEffect)(function() {
    var execute = function() {
      return callback(prev.current);
    };
    if (!stop2.current) {
      if (!inited.current) {
        inited.current = true;
        if (immediate) {
          execute();
        }
      } else {
        execute();
      }
      prev.current = dep;
    }
  }, [
    dep
  ]);
  return function() {
    stop2.current = true;
  };
}

// node_modules/@nutui/nutui-react/dist/es/packages/sticky/sticky.js
var defaultProps12 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  position: "top",
  threshold: 0,
  zIndex: 900
});
var classPrefix8 = "nut-sticky";
var Sticky = function(props) {
  var _ref = _object_spread({}, defaultProps12, props), position2 = _ref.position, zIndex = _ref.zIndex, children2 = _ref.children, container = _ref.container, style = _ref.style, className = _ref.className, threshold = _ref.threshold, onChange = _ref.onChange, rest = _object_without_properties(_ref, [
    "position",
    "zIndex",
    "children",
    "container",
    "style",
    "className",
    "threshold",
    "onChange"
  ]);
  var stickyRef = (0, import_react145.useRef)(null);
  var rootRef = (0, import_react145.useRef)(null);
  var _useState = _sliced_to_array((0, import_react145.useState)(false), 2), isFixed = _useState[0], setIsFixed = _useState[1];
  var _obj;
  var _useState1 = _sliced_to_array((0, import_react145.useState)((_obj = {}, _define_property(_obj, position2, "".concat(threshold, "px")), _define_property(_obj, "zIndex", zIndex), _obj)), 2), stickyStyle = _useState1[0], setStickyStyle = _useState1[1];
  (0, import_react145.useEffect)(function() {
    var _obj2;
    setStickyStyle(_object_spread_props(_object_spread({}, stickyStyle), (_obj2 = {}, _define_property(_obj2, position2, "".concat(threshold, "px")), _define_property(_obj2, "zIndex", zIndex), _obj2)));
  }, [
    threshold,
    position2,
    zIndex
  ]);
  var _useState2 = _sliced_to_array((0, import_react145.useState)({}), 2), rootStyle = _useState2[0], setRootStyle = _useState2[1];
  var getElement = (0, import_react145.useCallback)(function() {
    return getScrollParent(rootRef.current);
  }, []);
  (0, import_react145.useEffect)(function() {
    if (position2 === "top")
      return;
    var containerEle = container && container.current;
    var rootEle = rootRef.current;
    var stickyEle = stickyRef.current;
    if (!rootEle && !containerEle)
      return;
    var rootRect = getRect(rootEle);
    var containerRect = getRect(containerEle);
    var clientHeight = document.documentElement.clientHeight;
    var stickyRect = getRect(stickyEle);
    var fixed = clientHeight - threshold < rootRect.bottom;
    if (containerEle) {
      fixed = containerRect.bottom > clientHeight - threshold - stickyRect.height && clientHeight - threshold - stickyRect.height > containerRect.top;
    }
    var defaultPostVal = fixed ? "fixed" : "inherit";
    setStickyStyle(function(prev) {
      return _object_spread_props(_object_spread({}, prev), {
        position: defaultPostVal
      });
    });
    setIsFixed(fixed);
  }, [
    position2,
    container,
    threshold
  ]);
  var handleScroll = (0, import_react145.useCallback)(function() {
    var containerEle = container && container.current;
    var rootEle = rootRef.current;
    var stickyEle = stickyRef.current;
    if (!rootEle && !containerEle)
      return;
    var rootRect = getRect(rootEle);
    var stickyRect = getRect(stickyEle);
    var containerRect = getRect(containerEle);
    if (rootRect.height) {
      setRootStyle(function(prev) {
        return _object_spread_props(_object_spread({}, prev), {
          height: rootRect.height
        });
      });
    }
    var getFixed = function() {
      var fixed2 = false;
      if (position2 === "top") {
        fixed2 = containerEle ? threshold > rootRect.top && containerRect.bottom > 0 : threshold > rootRect.top;
      } else {
        var clientHeight = document.documentElement.clientHeight;
        fixed2 = containerEle ? containerRect.bottom > 0 && clientHeight - threshold - stickyRect.height > containerRect.top : clientHeight - threshold < rootRect.bottom;
      }
      return {
        position: fixed2 ? "fixed" : "inherit",
        fixed: fixed2
      };
    };
    var getTransform = function() {
      if (position2 === "top" && containerEle) {
        var diff = containerRect.bottom - threshold - stickyRect.height;
        var transform2 = diff < 0 ? diff : 0;
        return {
          transform: "translate3d(0, ".concat(transform2, "px, 0)")
        };
      }
      if (position2 === "bottom" && containerEle) {
        var clientHeight = document.documentElement.clientHeight;
        var diff1 = containerRect.bottom - (clientHeight - threshold);
        var transform1 = diff1 < 0 ? diff1 : 0;
        return {
          transform: "translate3d(0, ".concat(transform1, "px, 0)")
        };
      }
      return {};
    };
    var fixed = getFixed();
    setStickyStyle(function(prev) {
      return _object_spread_props(_object_spread({}, prev, getTransform()), {
        position: fixed.position
      });
    });
    setIsFixed(fixed.fixed);
  }, [
    position2,
    threshold,
    container
  ]);
  useWatch(isFixed, function() {
    onChange && onChange(isFixed);
  });
  (0, import_react145.useEffect)(function() {
    var el = getElement();
    el === null || el === void 0 ? void 0 : el.addEventListener("scroll", handleScroll, false);
    return function() {
      el === null || el === void 0 ? void 0 : el.removeEventListener("scroll", handleScroll);
    };
  }, [
    getElement,
    handleScroll
  ]);
  return import_react145.default.createElement("div", _object_spread({
    ref: rootRef,
    style: _object_spread({}, style, rootStyle),
    className: (0, import_classnames14.default)(classPrefix8, className)
  }, rest), import_react145.default.createElement("div", {
    className: "nut-sticky-box",
    ref: stickyRef,
    style: stickyStyle
  }, children2));
};
Sticky.displayName = "NutSticky";

// node_modules/@nutui/nutui-react/dist/es/packages/sticky/index.js
var sticky_default = Sticky;

// node_modules/@swc/helpers/esm/_instanceof.js
function _instanceof(left, right) {
  if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
    return !!right[Symbol.hasInstance](left);
  } else
    return left instanceof right;
}

// node_modules/@nutui/nutui-react/dist/es/packages/backtop/backtop.js
var import_react149 = __toESM(require_react());
var import_classnames17 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/hoverbutton/hoverbutton.js
var import_react148 = __toESM(require_react());
var import_classnames16 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/hoverbuttonitem/hoverbuttonitem.js
var import_react147 = __toESM(require_react());
var import_classnames15 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/hoverbuttonitem/utils.js
var import_react146 = __toESM(require_react());
var getIcon = function(icon) {
  return import_react146.default.isValidElement(icon) ? import_react146.default.cloneElement(icon, {
    // @ts-ignore
    className: "nut-icon"
  }) : icon;
};

// node_modules/@nutui/nutui-react/dist/es/packages/hoverbuttonitem/hoverbuttonitem.js
var defaultProps13 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  icon: null,
  onClick: function(event) {
  }
});
var classPrefix9 = "nut-hoverbutton-item";
var HoverButtonItem = function(props) {
  var _$_object_spread = _object_spread({}, defaultProps13, props), className = _$_object_spread.className, children2 = _$_object_spread.children, style = _$_object_spread.style, icon = _$_object_spread.icon, onClick = _$_object_spread.onClick;
  var handleClick = function(event) {
    if (onClick) {
      onClick(event);
    }
  };
  var renderBody = function() {
    if (icon && !children2)
      return import_react147.default.createElement("div", {
        className: "".concat(classPrefix9, "-icon")
      }, getIcon(icon));
    if (icon && children2) {
      return import_react147.default.createElement(import_react147.default.Fragment, null, import_react147.default.createElement("div", {
        className: (0, import_classnames15.default)(_define_property({}, "".concat(classPrefix9, "-text-icon"), true))
      }), getIcon(icon), import_react147.default.createElement("div", {
        className: (0, import_classnames15.default)(_define_property({}, "".concat(classPrefix9, "-text"), true))
      }, children2));
    }
  };
  return import_react147.default.createElement("div", {
    className: (0, import_classnames15.default)([
      "".concat(classPrefix9, "-container"),
      className
    ], _define_property({}, "".concat(classPrefix9, "-container-icontext"), icon && children2)),
    style,
    onClick: handleClick
  }, renderBody());
};
HoverButtonItem.displayName = "NutHoverButtonItem";

// node_modules/@nutui/nutui-react/dist/es/packages/hoverbuttonitem/index.js
var hoverbuttonitem_default = HoverButtonItem;

// node_modules/@nutui/nutui-react/dist/es/packages/hoverbutton/utils.js
var UI_BOTTOM_DISTANCE = 60;

// node_modules/@nutui/nutui-react/dist/es/packages/hoverbutton/hoverbutton.js
var defaultProps14 = _object_spread({}, ComponentDefaults);
var classPrefix10 = "nut-hoverbutton";
var HoverButton = function(props) {
  var _$_object_spread = _object_spread({}, defaultProps14, props), children2 = _$_object_spread.children, zIndex = _$_object_spread.zIndex, tabbarHeight = _$_object_spread.tabbarHeight, className = _$_object_spread.className, style = _$_object_spread.style, icon = _$_object_spread.icon, onClick = _$_object_spread.onClick;
  var rtl = useRtl();
  var baseStyle = _object_spread({}, style);
  if (tabbarHeight) {
    var bottom = tabbarHeight + UI_BOTTOM_DISTANCE;
    baseStyle.bottom = "".concat(bottom, "px");
  }
  if (typeof zIndex !== "undefined") {
    baseStyle.zIndex = zIndex;
  }
  return import_react148.default.createElement("div", {
    className: (0, import_classnames16.default)([
      "".concat(classPrefix10, "-container"),
      className
    ], _define_property({}, "".concat(classPrefix10, "-container-rtl"), rtl)),
    style: baseStyle
  }, import_react148.default.createElement("div", {
    className: classPrefix10
  }, children2 || icon && import_react148.default.createElement(hoverbuttonitem_default, {
    icon,
    onClick
  })), import_react148.default.createElement(safearea_default, {
    position: "bottom"
  }));
};
HoverButton.displayName = "NutHoverButton";
HoverButton.Item = hoverbuttonitem_default;

// node_modules/@nutui/nutui-react/dist/es/packages/hoverbutton/index.js
var hoverbutton_default = HoverButton;

// node_modules/@nutui/nutui-react/dist/es/packages/backtop/backtop.js
var defaultProps15 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  target: "",
  threshold: 200,
  zIndex: 900,
  duration: 1e3
});
var BackTop = function(props) {
  var _$_object_spread = _object_spread({}, defaultProps15, props), children2 = _$_object_spread.children, target = _$_object_spread.target, threshold = _$_object_spread.threshold, zIndex = _$_object_spread.zIndex, className = _$_object_spread.className, duration = _$_object_spread.duration, icon = _$_object_spread.icon, style = _$_object_spread.style, onClick = _$_object_spread.onClick;
  var classPrefix33 = "nut-backtop";
  var _useState = _sliced_to_array((0, import_react149.useState)(false), 2), backTop = _useState[0], setBackTop = _useState[1];
  var _useState1 = _sliced_to_array((0, import_react149.useState)(0), 2), scrollTop = _useState1[0], setScrollTop = _useState1[1];
  var startTime = (0, import_react149.useRef)(0);
  var cls = (0, import_classnames17.default)(classPrefix33, _define_property({}, "".concat(classPrefix33, "-show"), backTop), className);
  var scrollEl = (0, import_react149.useRef)(null);
  var scrollListener = (0, import_react149.useCallback)(function() {
    var top = null;
    if (_instanceof(scrollEl.current, Window)) {
      top = scrollEl.current.scrollY;
    } else {
      top = scrollEl.current.scrollTop;
    }
    setScrollTop(top);
    setBackTop(top >= threshold);
  }, [
    threshold
  ]);
  var init = (0, import_react149.useCallback)(function() {
    var _scrollEl_current, _scrollEl_current1;
    if (target && document.getElementById(target)) {
      scrollEl.current = document.getElementById(target);
    } else {
      scrollEl.current = window;
    }
    (_scrollEl_current = scrollEl.current) === null || _scrollEl_current === void 0 ? void 0 : _scrollEl_current.addEventListener("scroll", scrollListener, false);
    (_scrollEl_current1 = scrollEl.current) === null || _scrollEl_current1 === void 0 ? void 0 : _scrollEl_current1.addEventListener("resize", scrollListener, false);
  }, [
    scrollListener,
    target
  ]);
  (0, import_react149.useEffect)(function() {
    init();
    return function() {
      var _scrollEl_current, _scrollEl_current1;
      (_scrollEl_current = scrollEl.current) === null || _scrollEl_current === void 0 ? void 0 : _scrollEl_current.removeEventListener("scroll", scrollListener, false);
      (_scrollEl_current1 = scrollEl.current) === null || _scrollEl_current1 === void 0 ? void 0 : _scrollEl_current1.removeEventListener("resize", scrollListener, false);
    };
  }, [
    init,
    scrollListener
  ]);
  var scroll = (0, import_react149.useCallback)(function() {
    var y = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
    if (_instanceof(scrollEl.current, Window)) {
      window.scrollTo(0, y);
    } else {
      scrollEl.current.scrollTop = y;
      window.scrollTo(0, y);
    }
  }, []);
  var scrollAnimation = (0, import_react149.useCallback)(function() {
    var cid = raf_default(function fn() {
      var t = duration - Math.max(0, startTime.current - +/* @__PURE__ */ new Date() + duration / 2);
      var y = t * -scrollTop / duration + scrollTop;
      scroll(y);
      cid = raf_default(fn);
      if (t === duration || y === 0) {
        cancelRaf(cid);
      }
    });
  }, [
    duration,
    scroll,
    scrollTop,
    startTime
  ]);
  var goTop = (0, import_react149.useCallback)(function(e2) {
    onClick === null || onClick === void 0 ? void 0 : onClick(e2);
    var otime = +/* @__PURE__ */ new Date();
    startTime.current = otime;
    duration > 0 ? scrollAnimation() : scroll();
  }, [
    duration,
    onClick,
    scroll,
    scrollAnimation
  ]);
  return import_react149.default.createElement(hoverbutton_default, {
    className: cls,
    style: _object_spread({
      zIndex
    }, style),
    icon: !children2 && (icon || import_react149.default.createElement(p3, null)),
    onClick: function(e2) {
      goTop(e2);
    }
  }, children2 && import_react149.default.createElement("div", {
    className: "nut-hoverbutton-item-container",
    onClick: function(e2) {
      goTop(e2);
    }
  }, children2));
};
BackTop.displayName = "NutBackTop";

// node_modules/@nutui/nutui-react/dist/es/packages/backtop/index.js
var backtop_default = BackTop;

// node_modules/@nutui/nutui-react/dist/es/packages/elevator/elevator.js
var import_react154 = __toESM(require_react());

// node_modules/@use-gesture/core/dist/maths-b2a210f4.esm.js
function clamp3(v3, min, max) {
  return Math.max(min, Math.min(v3, max));
}
var V = {
  toVector(v3, fallback) {
    if (v3 === void 0)
      v3 = fallback;
    return Array.isArray(v3) ? v3 : [v3, v3];
  },
  add(v1, v22) {
    return [v1[0] + v22[0], v1[1] + v22[1]];
  },
  sub(v1, v22) {
    return [v1[0] - v22[0], v1[1] - v22[1]];
  },
  addTo(v1, v22) {
    v1[0] += v22[0];
    v1[1] += v22[1];
  },
  subTo(v1, v22) {
    v1[0] -= v22[0];
    v1[1] -= v22[1];
  }
};
function rubberband2(distance, dimension, constant) {
  if (dimension === 0 || Math.abs(dimension) === Infinity)
    return Math.pow(distance, constant * 5);
  return distance * dimension * constant / (dimension + constant * distance);
}
function rubberbandIfOutOfBounds2(position2, min, max, constant = 0.15) {
  if (constant === 0)
    return clamp3(position2, min, max);
  if (position2 < min)
    return -rubberband2(min - position2, max - min, constant) + min;
  if (position2 > max)
    return +rubberband2(position2 - max, max - min, constant) + max;
  return position2;
}
function computeRubberband(bounds, [Vx, Vy], [Rx, Ry]) {
  const [[X0, X1], [Y0, Y1]] = bounds;
  return [rubberbandIfOutOfBounds2(Vx, X0, X1, Rx), rubberbandIfOutOfBounds2(Vy, Y0, Y1, Ry)];
}

// node_modules/@use-gesture/core/dist/actions-aeda4790.esm.js
function _defineProperty(obj, key2, value2) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, {
      value: value2,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key2] = value2;
  }
  return obj;
}
function ownKeys2(object4, enumerableOnly) {
  var keys = Object.keys(object4);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object4);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object4, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i6 = 1; i6 < arguments.length; i6++) {
    var source = null != arguments[i6] ? arguments[i6] : {};
    i6 % 2 ? ownKeys2(Object(source), true).forEach(function(key2) {
      _defineProperty(target, key2, source[key2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key2) {
      Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
    });
  }
  return target;
}
var EVENT_TYPE_MAP = {
  pointer: {
    start: "down",
    change: "move",
    end: "up"
  },
  mouse: {
    start: "down",
    change: "move",
    end: "up"
  },
  touch: {
    start: "start",
    change: "move",
    end: "end"
  },
  gesture: {
    start: "start",
    change: "change",
    end: "end"
  }
};
function capitalize(string3) {
  if (!string3)
    return "";
  return string3[0].toUpperCase() + string3.slice(1);
}
var actionsWithoutCaptureSupported = ["enter", "leave"];
function hasCapture(capture = false, actionKey) {
  return capture && !actionsWithoutCaptureSupported.includes(actionKey);
}
function toHandlerProp(device, action = "", capture = false) {
  const deviceProps = EVENT_TYPE_MAP[device];
  const actionKey = deviceProps ? deviceProps[action] || action : action;
  return "on" + capitalize(device) + capitalize(actionKey) + (hasCapture(capture, actionKey) ? "Capture" : "");
}
var pointerCaptureEvents = ["gotpointercapture", "lostpointercapture"];
function parseProp(prop) {
  let eventKey = prop.substring(2).toLowerCase();
  const passive = !!~eventKey.indexOf("passive");
  if (passive)
    eventKey = eventKey.replace("passive", "");
  const captureKey = pointerCaptureEvents.includes(eventKey) ? "capturecapture" : "capture";
  const capture = !!~eventKey.indexOf(captureKey);
  if (capture)
    eventKey = eventKey.replace("capture", "");
  return {
    device: eventKey,
    capture,
    passive
  };
}
function toDomEventType(device, action = "") {
  const deviceProps = EVENT_TYPE_MAP[device];
  const actionKey = deviceProps ? deviceProps[action] || action : action;
  return device + actionKey;
}
function isTouch(event) {
  return "touches" in event;
}
function getPointerType(event) {
  if (isTouch(event))
    return "touch";
  if ("pointerType" in event)
    return event.pointerType;
  return "mouse";
}
function getCurrentTargetTouchList(event) {
  return Array.from(event.touches).filter((e2) => {
    var _event$currentTarget, _event$currentTarget$;
    return e2.target === event.currentTarget || ((_event$currentTarget = event.currentTarget) === null || _event$currentTarget === void 0 ? void 0 : (_event$currentTarget$ = _event$currentTarget.contains) === null || _event$currentTarget$ === void 0 ? void 0 : _event$currentTarget$.call(_event$currentTarget, e2.target));
  });
}
function getTouchList(event) {
  return event.type === "touchend" || event.type === "touchcancel" ? event.changedTouches : event.targetTouches;
}
function getValueEvent(event) {
  return isTouch(event) ? getTouchList(event)[0] : event;
}
function distanceAngle(P1, P2) {
  const dx = P2.clientX - P1.clientX;
  const dy = P2.clientY - P1.clientY;
  const cx = (P2.clientX + P1.clientX) / 2;
  const cy = (P2.clientY + P1.clientY) / 2;
  const distance = Math.hypot(dx, dy);
  const angle = -(Math.atan2(dx, dy) * 180) / Math.PI;
  const origin = [cx, cy];
  return {
    angle,
    distance,
    origin
  };
}
function touchIds(event) {
  return getCurrentTargetTouchList(event).map((touch) => touch.identifier);
}
function touchDistanceAngle(event, ids) {
  const [P1, P2] = Array.from(event.touches).filter((touch) => ids.includes(touch.identifier));
  return distanceAngle(P1, P2);
}
function pointerId(event) {
  const valueEvent = getValueEvent(event);
  return isTouch(event) ? valueEvent.identifier : valueEvent.pointerId;
}
function pointerValues(event) {
  const valueEvent = getValueEvent(event);
  return [valueEvent.clientX, valueEvent.clientY];
}
var LINE_HEIGHT = 40;
var PAGE_HEIGHT = 800;
function wheelValues(event) {
  let {
    deltaX,
    deltaY,
    deltaMode
  } = event;
  if (deltaMode === 1) {
    deltaX *= LINE_HEIGHT;
    deltaY *= LINE_HEIGHT;
  } else if (deltaMode === 2) {
    deltaX *= PAGE_HEIGHT;
    deltaY *= PAGE_HEIGHT;
  }
  return [deltaX, deltaY];
}
function scrollValues(event) {
  var _ref, _ref2;
  const {
    scrollX,
    scrollY,
    scrollLeft,
    scrollTop
  } = event.currentTarget;
  return [(_ref = scrollX !== null && scrollX !== void 0 ? scrollX : scrollLeft) !== null && _ref !== void 0 ? _ref : 0, (_ref2 = scrollY !== null && scrollY !== void 0 ? scrollY : scrollTop) !== null && _ref2 !== void 0 ? _ref2 : 0];
}
function getEventDetails(event) {
  const payload = {};
  if ("buttons" in event)
    payload.buttons = event.buttons;
  if ("shiftKey" in event) {
    const {
      shiftKey,
      altKey,
      metaKey,
      ctrlKey
    } = event;
    Object.assign(payload, {
      shiftKey,
      altKey,
      metaKey,
      ctrlKey
    });
  }
  return payload;
}
function call(v3, ...args) {
  if (typeof v3 === "function") {
    return v3(...args);
  } else {
    return v3;
  }
}
function noop2() {
}
function chain(...fns) {
  if (fns.length === 0)
    return noop2;
  if (fns.length === 1)
    return fns[0];
  return function() {
    let result;
    for (const fn of fns) {
      result = fn.apply(this, arguments) || result;
    }
    return result;
  };
}
function assignDefault(value2, fallback) {
  return Object.assign({}, fallback, value2 || {});
}
var BEFORE_LAST_KINEMATICS_DELAY = 32;
var Engine = class {
  constructor(ctrl, args, key2) {
    this.ctrl = ctrl;
    this.args = args;
    this.key = key2;
    if (!this.state) {
      this.state = {};
      this.computeValues([0, 0]);
      this.computeInitial();
      if (this.init)
        this.init();
      this.reset();
    }
  }
  get state() {
    return this.ctrl.state[this.key];
  }
  set state(state) {
    this.ctrl.state[this.key] = state;
  }
  get shared() {
    return this.ctrl.state.shared;
  }
  get eventStore() {
    return this.ctrl.gestureEventStores[this.key];
  }
  get timeoutStore() {
    return this.ctrl.gestureTimeoutStores[this.key];
  }
  get config() {
    return this.ctrl.config[this.key];
  }
  get sharedConfig() {
    return this.ctrl.config.shared;
  }
  get handler() {
    return this.ctrl.handlers[this.key];
  }
  reset() {
    const {
      state,
      shared,
      ingKey,
      args
    } = this;
    shared[ingKey] = state._active = state.active = state._blocked = state._force = false;
    state._step = [false, false];
    state.intentional = false;
    state._movement = [0, 0];
    state._distance = [0, 0];
    state._direction = [0, 0];
    state._delta = [0, 0];
    state._bounds = [[-Infinity, Infinity], [-Infinity, Infinity]];
    state.args = args;
    state.axis = void 0;
    state.memo = void 0;
    state.elapsedTime = 0;
    state.direction = [0, 0];
    state.distance = [0, 0];
    state.overflow = [0, 0];
    state._movementBound = [false, false];
    state.velocity = [0, 0];
    state.movement = [0, 0];
    state.delta = [0, 0];
    state.timeStamp = 0;
  }
  start(event) {
    const state = this.state;
    const config3 = this.config;
    if (!state._active) {
      this.reset();
      this.computeInitial();
      state._active = true;
      state.target = event.target;
      state.currentTarget = event.currentTarget;
      state.lastOffset = config3.from ? call(config3.from, state) : state.offset;
      state.offset = state.lastOffset;
    }
    state.startTime = state.timeStamp = event.timeStamp;
  }
  computeValues(values2) {
    const state = this.state;
    state._values = values2;
    state.values = this.config.transform(values2);
  }
  computeInitial() {
    const state = this.state;
    state._initial = state._values;
    state.initial = state.values;
  }
  compute(event) {
    const {
      state,
      config: config3,
      shared
    } = this;
    state.args = this.args;
    let dt = 0;
    if (event) {
      state.event = event;
      if (config3.preventDefault && event.cancelable)
        state.event.preventDefault();
      state.type = event.type;
      shared.touches = this.ctrl.pointerIds.size || this.ctrl.touchIds.size;
      shared.locked = !!document.pointerLockElement;
      Object.assign(shared, getEventDetails(event));
      shared.down = shared.pressed = shared.buttons % 2 === 1 || shared.touches > 0;
      dt = event.timeStamp - state.timeStamp;
      state.timeStamp = event.timeStamp;
      state.elapsedTime = state.timeStamp - state.startTime;
    }
    if (state._active) {
      const _absoluteDelta = state._delta.map(Math.abs);
      V.addTo(state._distance, _absoluteDelta);
    }
    if (this.axisIntent)
      this.axisIntent(event);
    const [_m0, _m1] = state._movement;
    const [t0, t1] = config3.threshold;
    const {
      _step,
      values: values2
    } = state;
    if (config3.hasCustomTransform) {
      if (_step[0] === false)
        _step[0] = Math.abs(_m0) >= t0 && values2[0];
      if (_step[1] === false)
        _step[1] = Math.abs(_m1) >= t1 && values2[1];
    } else {
      if (_step[0] === false)
        _step[0] = Math.abs(_m0) >= t0 && Math.sign(_m0) * t0;
      if (_step[1] === false)
        _step[1] = Math.abs(_m1) >= t1 && Math.sign(_m1) * t1;
    }
    state.intentional = _step[0] !== false || _step[1] !== false;
    if (!state.intentional)
      return;
    const movement = [0, 0];
    if (config3.hasCustomTransform) {
      const [v0, v1] = values2;
      movement[0] = _step[0] !== false ? v0 - _step[0] : 0;
      movement[1] = _step[1] !== false ? v1 - _step[1] : 0;
    } else {
      movement[0] = _step[0] !== false ? _m0 - _step[0] : 0;
      movement[1] = _step[1] !== false ? _m1 - _step[1] : 0;
    }
    if (this.restrictToAxis && !state._blocked)
      this.restrictToAxis(movement);
    const previousOffset = state.offset;
    const gestureIsActive = state._active && !state._blocked || state.active;
    if (gestureIsActive) {
      state.first = state._active && !state.active;
      state.last = !state._active && state.active;
      state.active = shared[this.ingKey] = state._active;
      if (event) {
        if (state.first) {
          if ("bounds" in config3)
            state._bounds = call(config3.bounds, state);
          if (this.setup)
            this.setup();
        }
        state.movement = movement;
        this.computeOffset();
      }
    }
    const [ox, oy] = state.offset;
    const [[x0, x1], [y0, y1]] = state._bounds;
    state.overflow = [ox < x0 ? -1 : ox > x1 ? 1 : 0, oy < y0 ? -1 : oy > y1 ? 1 : 0];
    state._movementBound[0] = state.overflow[0] ? state._movementBound[0] === false ? state._movement[0] : state._movementBound[0] : false;
    state._movementBound[1] = state.overflow[1] ? state._movementBound[1] === false ? state._movement[1] : state._movementBound[1] : false;
    const rubberband3 = state._active ? config3.rubberband || [0, 0] : [0, 0];
    state.offset = computeRubberband(state._bounds, state.offset, rubberband3);
    state.delta = V.sub(state.offset, previousOffset);
    this.computeMovement();
    if (gestureIsActive && (!state.last || dt > BEFORE_LAST_KINEMATICS_DELAY)) {
      state.delta = V.sub(state.offset, previousOffset);
      const absoluteDelta = state.delta.map(Math.abs);
      V.addTo(state.distance, absoluteDelta);
      state.direction = state.delta.map(Math.sign);
      state._direction = state._delta.map(Math.sign);
      if (!state.first && dt > 0) {
        state.velocity = [absoluteDelta[0] / dt, absoluteDelta[1] / dt];
      }
    }
  }
  emit() {
    const state = this.state;
    const shared = this.shared;
    const config3 = this.config;
    if (!state._active)
      this.clean();
    if ((state._blocked || !state.intentional) && !state._force && !config3.triggerAllEvents)
      return;
    const memo = this.handler(_objectSpread2(_objectSpread2(_objectSpread2({}, shared), state), {}, {
      [this.aliasKey]: state.values
    }));
    if (memo !== void 0)
      state.memo = memo;
  }
  clean() {
    this.eventStore.clean();
    this.timeoutStore.clean();
  }
};
function selectAxis([dx, dy], threshold) {
  const absDx = Math.abs(dx);
  const absDy = Math.abs(dy);
  if (absDx > absDy && absDx > threshold) {
    return "x";
  }
  if (absDy > absDx && absDy > threshold) {
    return "y";
  }
  return void 0;
}
var CoordinatesEngine = class extends Engine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "aliasKey", "xy");
  }
  reset() {
    super.reset();
    this.state.axis = void 0;
  }
  init() {
    this.state.offset = [0, 0];
    this.state.lastOffset = [0, 0];
  }
  computeOffset() {
    this.state.offset = V.add(this.state.lastOffset, this.state.movement);
  }
  computeMovement() {
    this.state.movement = V.sub(this.state.offset, this.state.lastOffset);
  }
  axisIntent(event) {
    const state = this.state;
    const config3 = this.config;
    if (!state.axis && event) {
      const threshold = typeof config3.axisThreshold === "object" ? config3.axisThreshold[getPointerType(event)] : config3.axisThreshold;
      state.axis = selectAxis(state._movement, threshold);
    }
    state._blocked = (config3.lockDirection || !!config3.axis) && !state.axis || !!config3.axis && config3.axis !== state.axis;
  }
  restrictToAxis(v3) {
    if (this.config.axis || this.config.lockDirection) {
      switch (this.state.axis) {
        case "x":
          v3[1] = 0;
          break;
        case "y":
          v3[0] = 0;
          break;
      }
    }
  }
};
var identity = (v3) => v3;
var DEFAULT_RUBBERBAND = 0.15;
var commonConfigResolver = {
  enabled(value2 = true) {
    return value2;
  },
  eventOptions(value2, _k, config3) {
    return _objectSpread2(_objectSpread2({}, config3.shared.eventOptions), value2);
  },
  preventDefault(value2 = false) {
    return value2;
  },
  triggerAllEvents(value2 = false) {
    return value2;
  },
  rubberband(value2 = 0) {
    switch (value2) {
      case true:
        return [DEFAULT_RUBBERBAND, DEFAULT_RUBBERBAND];
      case false:
        return [0, 0];
      default:
        return V.toVector(value2);
    }
  },
  from(value2) {
    if (typeof value2 === "function")
      return value2;
    if (value2 != null)
      return V.toVector(value2);
  },
  transform(value2, _k, config3) {
    const transform2 = value2 || config3.shared.transform;
    this.hasCustomTransform = !!transform2;
    if (true) {
      const originalTransform = transform2 || identity;
      return (v3) => {
        const r = originalTransform(v3);
        if (!isFinite(r[0]) || !isFinite(r[1])) {
          console.warn(`[@use-gesture]: config.transform() must produce a valid result, but it was: [${r[0]},${[1]}]`);
        }
        return r;
      };
    }
    return transform2 || identity;
  },
  threshold(value2) {
    return V.toVector(value2, 0);
  }
};
if (true) {
  Object.assign(commonConfigResolver, {
    domTarget(value2) {
      if (value2 !== void 0) {
        throw Error(`[@use-gesture]: \`domTarget\` option has been renamed to \`target\`.`);
      }
      return NaN;
    },
    lockDirection(value2) {
      if (value2 !== void 0) {
        throw Error(`[@use-gesture]: \`lockDirection\` option has been merged with \`axis\`. Use it as in \`{ axis: 'lock' }\``);
      }
      return NaN;
    },
    initial(value2) {
      if (value2 !== void 0) {
        throw Error(`[@use-gesture]: \`initial\` option has been renamed to \`from\`.`);
      }
      return NaN;
    }
  });
}
var DEFAULT_AXIS_THRESHOLD = 0;
var coordinatesConfigResolver = _objectSpread2(_objectSpread2({}, commonConfigResolver), {}, {
  axis(_v, _k, {
    axis
  }) {
    this.lockDirection = axis === "lock";
    if (!this.lockDirection)
      return axis;
  },
  axisThreshold(value2 = DEFAULT_AXIS_THRESHOLD) {
    return value2;
  },
  bounds(value2 = {}) {
    if (typeof value2 === "function") {
      return (state) => coordinatesConfigResolver.bounds(value2(state));
    }
    if ("current" in value2) {
      return () => value2.current;
    }
    if (typeof HTMLElement === "function" && value2 instanceof HTMLElement) {
      return value2;
    }
    const {
      left = -Infinity,
      right = Infinity,
      top = -Infinity,
      bottom = Infinity
    } = value2;
    return [[left, right], [top, bottom]];
  }
});
var DISPLACEMENT = 10;
var KEYS_DELTA_MAP = {
  ArrowRight: (factor = 1) => [DISPLACEMENT * factor, 0],
  ArrowLeft: (factor = 1) => [-DISPLACEMENT * factor, 0],
  ArrowUp: (factor = 1) => [0, -DISPLACEMENT * factor],
  ArrowDown: (factor = 1) => [0, DISPLACEMENT * factor]
};
var DragEngine = class extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", "dragging");
  }
  reset() {
    super.reset();
    const state = this.state;
    state._pointerId = void 0;
    state._pointerActive = false;
    state._keyboardActive = false;
    state._preventScroll = false;
    state._delayed = false;
    state.swipe = [0, 0];
    state.tap = false;
    state.canceled = false;
    state.cancel = this.cancel.bind(this);
  }
  setup() {
    const state = this.state;
    if (state._bounds instanceof HTMLElement) {
      const boundRect = state._bounds.getBoundingClientRect();
      const targetRect = state.currentTarget.getBoundingClientRect();
      const _bounds = {
        left: boundRect.left - targetRect.left + state.offset[0],
        right: boundRect.right - targetRect.right + state.offset[0],
        top: boundRect.top - targetRect.top + state.offset[1],
        bottom: boundRect.bottom - targetRect.bottom + state.offset[1]
      };
      state._bounds = coordinatesConfigResolver.bounds(_bounds);
    }
  }
  cancel() {
    const state = this.state;
    if (state.canceled)
      return;
    state.canceled = true;
    state._active = false;
    setTimeout(() => {
      this.compute();
      this.emit();
    }, 0);
  }
  setActive() {
    this.state._active = this.state._pointerActive || this.state._keyboardActive;
  }
  clean() {
    this.pointerClean();
    this.state._pointerActive = false;
    this.state._keyboardActive = false;
    super.clean();
  }
  pointerDown(event) {
    const config3 = this.config;
    const state = this.state;
    if (event.buttons != null && (Array.isArray(config3.pointerButtons) ? !config3.pointerButtons.includes(event.buttons) : config3.pointerButtons !== -1 && config3.pointerButtons !== event.buttons))
      return;
    const ctrlIds = this.ctrl.setEventIds(event);
    if (config3.pointerCapture) {
      event.target.setPointerCapture(event.pointerId);
    }
    if (ctrlIds && ctrlIds.size > 1 && state._pointerActive)
      return;
    this.start(event);
    this.setupPointer(event);
    state._pointerId = pointerId(event);
    state._pointerActive = true;
    this.computeValues(pointerValues(event));
    this.computeInitial();
    if (config3.preventScrollAxis && getPointerType(event) !== "mouse") {
      state._active = false;
      this.setupScrollPrevention(event);
    } else if (config3.delay > 0) {
      this.setupDelayTrigger(event);
      if (config3.triggerAllEvents) {
        this.compute(event);
        this.emit();
      }
    } else {
      this.startPointerDrag(event);
    }
  }
  startPointerDrag(event) {
    const state = this.state;
    state._active = true;
    state._preventScroll = true;
    state._delayed = false;
    this.compute(event);
    this.emit();
  }
  pointerMove(event) {
    const state = this.state;
    const config3 = this.config;
    if (!state._pointerActive)
      return;
    if (state.type === event.type && event.timeStamp === state.timeStamp)
      return;
    const id = pointerId(event);
    if (state._pointerId !== void 0 && id !== state._pointerId)
      return;
    const _values = pointerValues(event);
    if (document.pointerLockElement === event.target) {
      state._delta = [event.movementX, event.movementY];
    } else {
      state._delta = V.sub(_values, state._values);
      this.computeValues(_values);
    }
    V.addTo(state._movement, state._delta);
    this.compute(event);
    if (state._delayed && state.intentional) {
      this.timeoutStore.remove("dragDelay");
      state.active = false;
      this.startPointerDrag(event);
      return;
    }
    if (config3.preventScrollAxis && !state._preventScroll) {
      if (state.axis) {
        if (state.axis === config3.preventScrollAxis || config3.preventScrollAxis === "xy") {
          state._active = false;
          this.clean();
          return;
        } else {
          this.timeoutStore.remove("startPointerDrag");
          this.startPointerDrag(event);
          return;
        }
      } else {
        return;
      }
    }
    this.emit();
  }
  pointerUp(event) {
    this.ctrl.setEventIds(event);
    try {
      if (this.config.pointerCapture && event.target.hasPointerCapture(event.pointerId)) {
        ;
        event.target.releasePointerCapture(event.pointerId);
      }
    } catch (_unused) {
      if (true) {
        console.warn(`[@use-gesture]: If you see this message, it's likely that you're using an outdated version of \`@react-three/fiber\`. 

Please upgrade to the latest version.`);
      }
    }
    const state = this.state;
    const config3 = this.config;
    if (!state._active || !state._pointerActive)
      return;
    const id = pointerId(event);
    if (state._pointerId !== void 0 && id !== state._pointerId)
      return;
    this.state._pointerActive = false;
    this.setActive();
    this.compute(event);
    const [dx, dy] = state._distance;
    state.tap = dx <= config3.tapsThreshold && dy <= config3.tapsThreshold;
    if (state.tap && config3.filterTaps) {
      state._force = true;
    } else {
      const [dirx, diry] = state.direction;
      const [vx, vy] = state.velocity;
      const [mx, my] = state.movement;
      const [svx, svy] = config3.swipe.velocity;
      const [sx, sy] = config3.swipe.distance;
      const sdt = config3.swipe.duration;
      if (state.elapsedTime < sdt) {
        if (Math.abs(vx) > svx && Math.abs(mx) > sx)
          state.swipe[0] = dirx;
        if (Math.abs(vy) > svy && Math.abs(my) > sy)
          state.swipe[1] = diry;
      }
    }
    this.emit();
  }
  pointerClick(event) {
    if (!this.state.tap && event.detail > 0) {
      event.preventDefault();
      event.stopPropagation();
    }
  }
  setupPointer(event) {
    const config3 = this.config;
    const device = config3.device;
    if (true) {
      try {
        if (device === "pointer" && config3.preventScrollDelay === void 0) {
          const currentTarget = "uv" in event ? event.sourceEvent.currentTarget : event.currentTarget;
          const style = window.getComputedStyle(currentTarget);
          if (style.touchAction === "auto") {
            console.warn(`[@use-gesture]: The drag target has its \`touch-action\` style property set to \`auto\`. It is recommended to add \`touch-action: 'none'\` so that the drag gesture behaves correctly on touch-enabled devices. For more information read this: https://use-gesture.netlify.app/docs/extras/#touch-action.

This message will only show in development mode. It won't appear in production. If this is intended, you can ignore it.`, currentTarget);
          }
        }
      } catch (_unused2) {
      }
    }
    if (config3.pointerLock) {
      event.currentTarget.requestPointerLock();
    }
    if (!config3.pointerCapture) {
      this.eventStore.add(this.sharedConfig.window, device, "change", this.pointerMove.bind(this));
      this.eventStore.add(this.sharedConfig.window, device, "end", this.pointerUp.bind(this));
      this.eventStore.add(this.sharedConfig.window, device, "cancel", this.pointerUp.bind(this));
    }
  }
  pointerClean() {
    if (this.config.pointerLock && document.pointerLockElement === this.state.currentTarget) {
      document.exitPointerLock();
    }
  }
  preventScroll(event) {
    if (this.state._preventScroll && event.cancelable) {
      event.preventDefault();
    }
  }
  setupScrollPrevention(event) {
    this.state._preventScroll = false;
    persistEvent(event);
    const remove = this.eventStore.add(this.sharedConfig.window, "touch", "change", this.preventScroll.bind(this), {
      passive: false
    });
    this.eventStore.add(this.sharedConfig.window, "touch", "end", remove);
    this.eventStore.add(this.sharedConfig.window, "touch", "cancel", remove);
    this.timeoutStore.add("startPointerDrag", this.startPointerDrag.bind(this), this.config.preventScrollDelay, event);
  }
  setupDelayTrigger(event) {
    this.state._delayed = true;
    this.timeoutStore.add("dragDelay", () => {
      this.state._step = [0, 0];
      this.startPointerDrag(event);
    }, this.config.delay);
  }
  keyDown(event) {
    const deltaFn = KEYS_DELTA_MAP[event.key];
    if (deltaFn) {
      const state = this.state;
      const factor = event.shiftKey ? 10 : event.altKey ? 0.1 : 1;
      this.start(event);
      state._delta = deltaFn(factor);
      state._keyboardActive = true;
      V.addTo(state._movement, state._delta);
      this.compute(event);
      this.emit();
    }
  }
  keyUp(event) {
    if (!(event.key in KEYS_DELTA_MAP))
      return;
    this.state._keyboardActive = false;
    this.setActive();
    this.compute(event);
    this.emit();
  }
  bind(bindFunction) {
    const device = this.config.device;
    bindFunction(device, "start", this.pointerDown.bind(this));
    if (this.config.pointerCapture) {
      bindFunction(device, "change", this.pointerMove.bind(this));
      bindFunction(device, "end", this.pointerUp.bind(this));
      bindFunction(device, "cancel", this.pointerUp.bind(this));
      bindFunction("lostPointerCapture", "", this.pointerUp.bind(this));
    }
    if (this.config.keys) {
      bindFunction("key", "down", this.keyDown.bind(this));
      bindFunction("key", "up", this.keyUp.bind(this));
    }
    if (this.config.filterTaps) {
      bindFunction("click", "", this.pointerClick.bind(this), {
        capture: true,
        passive: false
      });
    }
  }
};
function persistEvent(event) {
  "persist" in event && typeof event.persist === "function" && event.persist();
}
var isBrowser = typeof window !== "undefined" && window.document && window.document.createElement;
function supportsTouchEvents() {
  return isBrowser && "ontouchstart" in window;
}
function isTouchScreen() {
  return supportsTouchEvents() || isBrowser && window.navigator.maxTouchPoints > 1;
}
function supportsPointerEvents() {
  return isBrowser && "onpointerdown" in window;
}
function supportsPointerLock() {
  return isBrowser && "exitPointerLock" in window.document;
}
function supportsGestureEvents() {
  try {
    return "constructor" in GestureEvent;
  } catch (e2) {
    return false;
  }
}
var SUPPORT = {
  isBrowser,
  gesture: supportsGestureEvents(),
  touch: isTouchScreen(),
  touchscreen: isTouchScreen(),
  pointer: supportsPointerEvents(),
  pointerLock: supportsPointerLock()
};
var DEFAULT_PREVENT_SCROLL_DELAY = 250;
var DEFAULT_DRAG_DELAY = 180;
var DEFAULT_SWIPE_VELOCITY = 0.5;
var DEFAULT_SWIPE_DISTANCE = 50;
var DEFAULT_SWIPE_DURATION = 250;
var DEFAULT_DRAG_AXIS_THRESHOLD = {
  mouse: 0,
  touch: 0,
  pen: 8
};
var dragConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {
  device(_v, _k, {
    pointer: {
      touch = false,
      lock = false,
      mouse = false
    } = {}
  }) {
    this.pointerLock = lock && SUPPORT.pointerLock;
    if (SUPPORT.touch && touch)
      return "touch";
    if (this.pointerLock)
      return "mouse";
    if (SUPPORT.pointer && !mouse)
      return "pointer";
    if (SUPPORT.touch)
      return "touch";
    return "mouse";
  },
  preventScrollAxis(value2, _k, {
    preventScroll
  }) {
    this.preventScrollDelay = typeof preventScroll === "number" ? preventScroll : preventScroll || preventScroll === void 0 && value2 ? DEFAULT_PREVENT_SCROLL_DELAY : void 0;
    if (!SUPPORT.touchscreen || preventScroll === false)
      return void 0;
    return value2 ? value2 : preventScroll !== void 0 ? "y" : void 0;
  },
  pointerCapture(_v, _k, {
    pointer: {
      capture = true,
      buttons = 1
    } = {}
  }) {
    this.pointerButtons = buttons;
    return !this.pointerLock && this.device === "pointer" && capture;
  },
  keys(value2 = true) {
    return value2;
  },
  threshold(value2, _k, {
    filterTaps = false,
    tapsThreshold = 3,
    axis = void 0
  }) {
    const threshold = V.toVector(value2, filterTaps ? tapsThreshold : axis ? 1 : 0);
    this.filterTaps = filterTaps;
    this.tapsThreshold = tapsThreshold;
    return threshold;
  },
  swipe({
    velocity: velocity2 = DEFAULT_SWIPE_VELOCITY,
    distance = DEFAULT_SWIPE_DISTANCE,
    duration = DEFAULT_SWIPE_DURATION
  } = {}) {
    return {
      velocity: this.transform(V.toVector(velocity2)),
      distance: this.transform(V.toVector(distance)),
      duration
    };
  },
  delay(value2 = 0) {
    switch (value2) {
      case true:
        return DEFAULT_DRAG_DELAY;
      case false:
        return 0;
      default:
        return value2;
    }
  },
  axisThreshold(value2) {
    if (!value2)
      return DEFAULT_DRAG_AXIS_THRESHOLD;
    return _objectSpread2(_objectSpread2({}, DEFAULT_DRAG_AXIS_THRESHOLD), value2);
  }
});
if (true) {
  Object.assign(dragConfigResolver, {
    useTouch(value2) {
      if (value2 !== void 0) {
        throw Error(`[@use-gesture]: \`useTouch\` option has been renamed to \`pointer.touch\`. Use it as in \`{ pointer: { touch: true } }\`.`);
      }
      return NaN;
    },
    experimental_preventWindowScrollY(value2) {
      if (value2 !== void 0) {
        throw Error(`[@use-gesture]: \`experimental_preventWindowScrollY\` option has been renamed to \`preventScroll\`.`);
      }
      return NaN;
    },
    swipeVelocity(value2) {
      if (value2 !== void 0) {
        throw Error(`[@use-gesture]: \`swipeVelocity\` option has been renamed to \`swipe.velocity\`. Use it as in \`{ swipe: { velocity: 0.5 } }\`.`);
      }
      return NaN;
    },
    swipeDistance(value2) {
      if (value2 !== void 0) {
        throw Error(`[@use-gesture]: \`swipeDistance\` option has been renamed to \`swipe.distance\`. Use it as in \`{ swipe: { distance: 50 } }\`.`);
      }
      return NaN;
    },
    swipeDuration(value2) {
      if (value2 !== void 0) {
        throw Error(`[@use-gesture]: \`swipeDuration\` option has been renamed to \`swipe.duration\`. Use it as in \`{ swipe: { duration: 250 } }\`.`);
      }
      return NaN;
    }
  });
}
var SCALE_ANGLE_RATIO_INTENT_DEG = 30;
var PINCH_WHEEL_RATIO = 100;
var PinchEngine = class extends Engine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", "pinching");
    _defineProperty(this, "aliasKey", "da");
  }
  init() {
    this.state.offset = [1, 0];
    this.state.lastOffset = [1, 0];
    this.state._pointerEvents = /* @__PURE__ */ new Map();
  }
  reset() {
    super.reset();
    const state = this.state;
    state._touchIds = [];
    state.canceled = false;
    state.cancel = this.cancel.bind(this);
    state.turns = 0;
  }
  computeOffset() {
    const {
      type: type4,
      movement,
      lastOffset
    } = this.state;
    if (type4 === "wheel") {
      this.state.offset = V.add(movement, lastOffset);
    } else {
      this.state.offset = [(1 + movement[0]) * lastOffset[0], movement[1] + lastOffset[1]];
    }
  }
  computeMovement() {
    const {
      offset,
      lastOffset
    } = this.state;
    this.state.movement = [offset[0] / lastOffset[0], offset[1] - lastOffset[1]];
  }
  axisIntent() {
    const state = this.state;
    const [_m0, _m1] = state._movement;
    if (!state.axis) {
      const axisMovementDifference = Math.abs(_m0) * SCALE_ANGLE_RATIO_INTENT_DEG - Math.abs(_m1);
      if (axisMovementDifference < 0)
        state.axis = "angle";
      else if (axisMovementDifference > 0)
        state.axis = "scale";
    }
  }
  restrictToAxis(v3) {
    if (this.config.lockDirection) {
      if (this.state.axis === "scale")
        v3[1] = 0;
      else if (this.state.axis === "angle")
        v3[0] = 0;
    }
  }
  cancel() {
    const state = this.state;
    if (state.canceled)
      return;
    setTimeout(() => {
      state.canceled = true;
      state._active = false;
      this.compute();
      this.emit();
    }, 0);
  }
  touchStart(event) {
    this.ctrl.setEventIds(event);
    const state = this.state;
    const ctrlTouchIds = this.ctrl.touchIds;
    if (state._active) {
      if (state._touchIds.every((id) => ctrlTouchIds.has(id)))
        return;
    }
    if (ctrlTouchIds.size < 2)
      return;
    this.start(event);
    state._touchIds = Array.from(ctrlTouchIds).slice(0, 2);
    const payload = touchDistanceAngle(event, state._touchIds);
    this.pinchStart(event, payload);
  }
  pointerStart(event) {
    if (event.buttons != null && event.buttons % 2 !== 1)
      return;
    this.ctrl.setEventIds(event);
    event.target.setPointerCapture(event.pointerId);
    const state = this.state;
    const _pointerEvents = state._pointerEvents;
    const ctrlPointerIds = this.ctrl.pointerIds;
    if (state._active) {
      if (Array.from(_pointerEvents.keys()).every((id) => ctrlPointerIds.has(id)))
        return;
    }
    if (_pointerEvents.size < 2) {
      _pointerEvents.set(event.pointerId, event);
    }
    if (state._pointerEvents.size < 2)
      return;
    this.start(event);
    const payload = distanceAngle(...Array.from(_pointerEvents.values()));
    this.pinchStart(event, payload);
  }
  pinchStart(event, payload) {
    const state = this.state;
    state.origin = payload.origin;
    this.computeValues([payload.distance, payload.angle]);
    this.computeInitial();
    this.compute(event);
    this.emit();
  }
  touchMove(event) {
    if (!this.state._active)
      return;
    const payload = touchDistanceAngle(event, this.state._touchIds);
    this.pinchMove(event, payload);
  }
  pointerMove(event) {
    const _pointerEvents = this.state._pointerEvents;
    if (_pointerEvents.has(event.pointerId)) {
      _pointerEvents.set(event.pointerId, event);
    }
    if (!this.state._active)
      return;
    const payload = distanceAngle(...Array.from(_pointerEvents.values()));
    this.pinchMove(event, payload);
  }
  pinchMove(event, payload) {
    const state = this.state;
    const prev_a = state._values[1];
    const delta_a = payload.angle - prev_a;
    let delta_turns = 0;
    if (Math.abs(delta_a) > 270)
      delta_turns += Math.sign(delta_a);
    this.computeValues([payload.distance, payload.angle - 360 * delta_turns]);
    state.origin = payload.origin;
    state.turns = delta_turns;
    state._movement = [state._values[0] / state._initial[0] - 1, state._values[1] - state._initial[1]];
    this.compute(event);
    this.emit();
  }
  touchEnd(event) {
    this.ctrl.setEventIds(event);
    if (!this.state._active)
      return;
    if (this.state._touchIds.some((id) => !this.ctrl.touchIds.has(id))) {
      this.state._active = false;
      this.compute(event);
      this.emit();
    }
  }
  pointerEnd(event) {
    const state = this.state;
    this.ctrl.setEventIds(event);
    try {
      event.target.releasePointerCapture(event.pointerId);
    } catch (_unused) {
    }
    if (state._pointerEvents.has(event.pointerId)) {
      state._pointerEvents.delete(event.pointerId);
    }
    if (!state._active)
      return;
    if (state._pointerEvents.size < 2) {
      state._active = false;
      this.compute(event);
      this.emit();
    }
  }
  gestureStart(event) {
    if (event.cancelable)
      event.preventDefault();
    const state = this.state;
    if (state._active)
      return;
    this.start(event);
    this.computeValues([event.scale, event.rotation]);
    state.origin = [event.clientX, event.clientY];
    this.compute(event);
    this.emit();
  }
  gestureMove(event) {
    if (event.cancelable)
      event.preventDefault();
    if (!this.state._active)
      return;
    const state = this.state;
    this.computeValues([event.scale, event.rotation]);
    state.origin = [event.clientX, event.clientY];
    const _previousMovement = state._movement;
    state._movement = [event.scale - 1, event.rotation];
    state._delta = V.sub(state._movement, _previousMovement);
    this.compute(event);
    this.emit();
  }
  gestureEnd(event) {
    if (!this.state._active)
      return;
    this.state._active = false;
    this.compute(event);
    this.emit();
  }
  wheel(event) {
    const modifierKey = this.config.modifierKey;
    if (modifierKey && !event[modifierKey])
      return;
    if (!this.state._active)
      this.wheelStart(event);
    else
      this.wheelChange(event);
    this.timeoutStore.add("wheelEnd", this.wheelEnd.bind(this));
  }
  wheelStart(event) {
    this.start(event);
    this.wheelChange(event);
  }
  wheelChange(event) {
    const isR3f = "uv" in event;
    if (!isR3f) {
      if (event.cancelable) {
        event.preventDefault();
      }
      if (!event.defaultPrevented) {
        console.warn(`[@use-gesture]: To properly support zoom on trackpads, try using the \`target\` option.

This message will only appear in development mode.`);
      }
    }
    const state = this.state;
    state._delta = [-wheelValues(event)[1] / PINCH_WHEEL_RATIO * state.offset[0], 0];
    V.addTo(state._movement, state._delta);
    this.state.origin = [event.clientX, event.clientY];
    this.compute(event);
    this.emit();
  }
  wheelEnd() {
    if (!this.state._active)
      return;
    this.state._active = false;
    this.compute();
    this.emit();
  }
  bind(bindFunction) {
    const device = this.config.device;
    if (!!device) {
      bindFunction(device, "start", this[device + "Start"].bind(this));
      bindFunction(device, "change", this[device + "Move"].bind(this));
      bindFunction(device, "end", this[device + "End"].bind(this));
      bindFunction(device, "cancel", this[device + "End"].bind(this));
    }
    bindFunction("wheel", "", this.wheel.bind(this), {
      passive: false
    });
  }
};
var pinchConfigResolver = _objectSpread2(_objectSpread2({}, commonConfigResolver), {}, {
  device(_v, _k, {
    shared,
    pointer: {
      touch = false
    } = {}
  }) {
    const sharedConfig = shared;
    if (sharedConfig.target && !SUPPORT.touch && SUPPORT.gesture)
      return "gesture";
    if (SUPPORT.touch && touch)
      return "touch";
    if (SUPPORT.touchscreen) {
      if (SUPPORT.pointer)
        return "pointer";
      if (SUPPORT.touch)
        return "touch";
    }
  },
  bounds(_v, _k, {
    scaleBounds = {},
    angleBounds = {}
  }) {
    const _scaleBounds = (state) => {
      const D = assignDefault(call(scaleBounds, state), {
        min: -Infinity,
        max: Infinity
      });
      return [D.min, D.max];
    };
    const _angleBounds = (state) => {
      const A = assignDefault(call(angleBounds, state), {
        min: -Infinity,
        max: Infinity
      });
      return [A.min, A.max];
    };
    if (typeof scaleBounds !== "function" && typeof angleBounds !== "function")
      return [_scaleBounds(), _angleBounds()];
    return (state) => [_scaleBounds(state), _angleBounds(state)];
  },
  threshold(value2, _k, config3) {
    this.lockDirection = config3.axis === "lock";
    const threshold = V.toVector(value2, this.lockDirection ? [0.1, 3] : 0);
    return threshold;
  },
  modifierKey(value2) {
    if (value2 === void 0)
      return "ctrlKey";
    return value2;
  }
});
var MoveEngine = class extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", "moving");
  }
  move(event) {
    if (this.config.mouseOnly && event.pointerType !== "mouse")
      return;
    if (!this.state._active)
      this.moveStart(event);
    else
      this.moveChange(event);
    this.timeoutStore.add("moveEnd", this.moveEnd.bind(this));
  }
  moveStart(event) {
    this.start(event);
    this.computeValues(pointerValues(event));
    this.compute(event);
    this.computeInitial();
    this.emit();
  }
  moveChange(event) {
    if (!this.state._active)
      return;
    const values2 = pointerValues(event);
    const state = this.state;
    state._delta = V.sub(values2, state._values);
    V.addTo(state._movement, state._delta);
    this.computeValues(values2);
    this.compute(event);
    this.emit();
  }
  moveEnd(event) {
    if (!this.state._active)
      return;
    this.state._active = false;
    this.compute(event);
    this.emit();
  }
  bind(bindFunction) {
    bindFunction("pointer", "change", this.move.bind(this));
    bindFunction("pointer", "leave", this.moveEnd.bind(this));
  }
};
var moveConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {
  mouseOnly: (value2 = true) => value2
});
var ScrollEngine = class extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", "scrolling");
  }
  scroll(event) {
    if (!this.state._active)
      this.start(event);
    this.scrollChange(event);
    this.timeoutStore.add("scrollEnd", this.scrollEnd.bind(this));
  }
  scrollChange(event) {
    if (event.cancelable)
      event.preventDefault();
    const state = this.state;
    const values2 = scrollValues(event);
    state._delta = V.sub(values2, state._values);
    V.addTo(state._movement, state._delta);
    this.computeValues(values2);
    this.compute(event);
    this.emit();
  }
  scrollEnd() {
    if (!this.state._active)
      return;
    this.state._active = false;
    this.compute();
    this.emit();
  }
  bind(bindFunction) {
    bindFunction("scroll", "", this.scroll.bind(this));
  }
};
var scrollConfigResolver = coordinatesConfigResolver;
var WheelEngine = class extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", "wheeling");
  }
  wheel(event) {
    if (!this.state._active)
      this.start(event);
    this.wheelChange(event);
    this.timeoutStore.add("wheelEnd", this.wheelEnd.bind(this));
  }
  wheelChange(event) {
    const state = this.state;
    state._delta = wheelValues(event);
    V.addTo(state._movement, state._delta);
    const [ox, oy] = state.overflow;
    const [dx, dy] = state._delta;
    const [dirx, diry] = state._direction;
    if (ox < 0 && dx > 0 && dirx < 0 || ox > 0 && dx < 0 && dirx > 0) {
      state._movement[0] = state._movementBound[0];
    }
    if (oy < 0 && dy > 0 && diry < 0 || oy > 0 && dy < 0 && diry > 0) {
      state._movement[1] = state._movementBound[1];
    }
    this.compute(event);
    this.emit();
  }
  wheelEnd() {
    if (!this.state._active)
      return;
    this.state._active = false;
    this.compute();
    this.emit();
  }
  bind(bindFunction) {
    bindFunction("wheel", "", this.wheel.bind(this));
  }
};
var wheelConfigResolver = coordinatesConfigResolver;
var HoverEngine = class extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", "hovering");
  }
  enter(event) {
    if (this.config.mouseOnly && event.pointerType !== "mouse")
      return;
    this.start(event);
    this.computeValues(pointerValues(event));
    this.compute(event);
    this.emit();
  }
  leave(event) {
    if (this.config.mouseOnly && event.pointerType !== "mouse")
      return;
    const state = this.state;
    if (!state._active)
      return;
    state._active = false;
    const values2 = pointerValues(event);
    state._movement = state._delta = V.sub(values2, state._values);
    this.computeValues(values2);
    this.compute(event);
    state.delta = state.movement;
    this.emit();
  }
  bind(bindFunction) {
    bindFunction("pointer", "enter", this.enter.bind(this));
    bindFunction("pointer", "leave", this.leave.bind(this));
  }
};
var hoverConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {
  mouseOnly: (value2 = true) => value2
});
var EngineMap = /* @__PURE__ */ new Map();
var ConfigResolverMap = /* @__PURE__ */ new Map();
function registerAction(action) {
  EngineMap.set(action.key, action.engine);
  ConfigResolverMap.set(action.key, action.resolver);
}
var dragAction = {
  key: "drag",
  engine: DragEngine,
  resolver: dragConfigResolver
};
var hoverAction = {
  key: "hover",
  engine: HoverEngine,
  resolver: hoverConfigResolver
};
var moveAction = {
  key: "move",
  engine: MoveEngine,
  resolver: moveConfigResolver
};
var pinchAction = {
  key: "pinch",
  engine: PinchEngine,
  resolver: pinchConfigResolver
};
var scrollAction = {
  key: "scroll",
  engine: ScrollEngine,
  resolver: scrollConfigResolver
};
var wheelAction = {
  key: "wheel",
  engine: WheelEngine,
  resolver: wheelConfigResolver
};

// node_modules/@use-gesture/react/dist/use-gesture-react.esm.js
var import_react150 = __toESM(require_react());

// node_modules/@use-gesture/core/dist/use-gesture-core.esm.js
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key2, i6;
  for (i6 = 0; i6 < sourceKeys.length; i6++) {
    key2 = sourceKeys[i6];
    if (excluded.indexOf(key2) >= 0)
      continue;
    target[key2] = source[key2];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose2(source, excluded);
  var key2, i6;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i6 = 0; i6 < sourceSymbolKeys.length; i6++) {
      key2 = sourceSymbolKeys[i6];
      if (excluded.indexOf(key2) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key2))
        continue;
      target[key2] = source[key2];
    }
  }
  return target;
}
var sharedConfigResolver = {
  target(value2) {
    if (value2) {
      return () => "current" in value2 ? value2.current : value2;
    }
    return void 0;
  },
  enabled(value2 = true) {
    return value2;
  },
  window(value2 = SUPPORT.isBrowser ? window : void 0) {
    return value2;
  },
  eventOptions({
    passive = true,
    capture = false
  } = {}) {
    return {
      passive,
      capture
    };
  },
  transform(value2) {
    return value2;
  }
};
var _excluded = ["target", "eventOptions", "window", "enabled", "transform"];
function resolveWith(config3 = {}, resolvers) {
  const result = {};
  for (const [key2, resolver] of Object.entries(resolvers)) {
    switch (typeof resolver) {
      case "function":
        if (true) {
          const r = resolver.call(result, config3[key2], key2, config3);
          if (!Number.isNaN(r))
            result[key2] = r;
        } else {
          result[key2] = resolver.call(result, config3[key2], key2, config3);
        }
        break;
      case "object":
        result[key2] = resolveWith(config3[key2], resolver);
        break;
      case "boolean":
        if (resolver)
          result[key2] = config3[key2];
        break;
    }
  }
  return result;
}
function parse(newConfig, gestureKey, _config = {}) {
  const _ref = newConfig, {
    target,
    eventOptions,
    window: window2,
    enabled,
    transform: transform2
  } = _ref, rest = _objectWithoutProperties(_ref, _excluded);
  _config.shared = resolveWith({
    target,
    eventOptions,
    window: window2,
    enabled,
    transform: transform2
  }, sharedConfigResolver);
  if (gestureKey) {
    const resolver = ConfigResolverMap.get(gestureKey);
    _config[gestureKey] = resolveWith(_objectSpread2({
      shared: _config.shared
    }, rest), resolver);
  } else {
    for (const key2 in rest) {
      const resolver = ConfigResolverMap.get(key2);
      if (resolver) {
        _config[key2] = resolveWith(_objectSpread2({
          shared: _config.shared
        }, rest[key2]), resolver);
      } else if (true) {
        if (!["drag", "pinch", "scroll", "wheel", "move", "hover"].includes(key2)) {
          if (key2 === "domTarget") {
            throw Error(`[@use-gesture]: \`domTarget\` option has been renamed to \`target\`.`);
          }
          console.warn(`[@use-gesture]: Unknown config key \`${key2}\` was used. Please read the documentation for further information.`);
        }
      }
    }
  }
  return _config;
}
var EventStore = class {
  constructor(ctrl, gestureKey) {
    _defineProperty(this, "_listeners", /* @__PURE__ */ new Set());
    this._ctrl = ctrl;
    this._gestureKey = gestureKey;
  }
  add(element, device, action, handler, options2) {
    const listeners = this._listeners;
    const type4 = toDomEventType(device, action);
    const _options = this._gestureKey ? this._ctrl.config[this._gestureKey].eventOptions : {};
    const eventOptions = _objectSpread2(_objectSpread2({}, _options), options2);
    element.addEventListener(type4, handler, eventOptions);
    const remove = () => {
      element.removeEventListener(type4, handler, eventOptions);
      listeners.delete(remove);
    };
    listeners.add(remove);
    return remove;
  }
  clean() {
    this._listeners.forEach((remove) => remove());
    this._listeners.clear();
  }
};
var TimeoutStore = class {
  constructor() {
    _defineProperty(this, "_timeouts", /* @__PURE__ */ new Map());
  }
  add(key2, callback, ms = 140, ...args) {
    this.remove(key2);
    this._timeouts.set(key2, window.setTimeout(callback, ms, ...args));
  }
  remove(key2) {
    const timeout2 = this._timeouts.get(key2);
    if (timeout2)
      window.clearTimeout(timeout2);
  }
  clean() {
    this._timeouts.forEach((timeout2) => void window.clearTimeout(timeout2));
    this._timeouts.clear();
  }
};
var Controller = class {
  constructor(handlers) {
    _defineProperty(this, "gestures", /* @__PURE__ */ new Set());
    _defineProperty(this, "_targetEventStore", new EventStore(this));
    _defineProperty(this, "gestureEventStores", {});
    _defineProperty(this, "gestureTimeoutStores", {});
    _defineProperty(this, "handlers", {});
    _defineProperty(this, "config", {});
    _defineProperty(this, "pointerIds", /* @__PURE__ */ new Set());
    _defineProperty(this, "touchIds", /* @__PURE__ */ new Set());
    _defineProperty(this, "state", {
      shared: {
        shiftKey: false,
        metaKey: false,
        ctrlKey: false,
        altKey: false
      }
    });
    resolveGestures(this, handlers);
  }
  setEventIds(event) {
    if (isTouch(event)) {
      this.touchIds = new Set(touchIds(event));
      return this.touchIds;
    } else if ("pointerId" in event) {
      if (event.type === "pointerup" || event.type === "pointercancel")
        this.pointerIds.delete(event.pointerId);
      else if (event.type === "pointerdown")
        this.pointerIds.add(event.pointerId);
      return this.pointerIds;
    }
  }
  applyHandlers(handlers, nativeHandlers) {
    this.handlers = handlers;
    this.nativeHandlers = nativeHandlers;
  }
  applyConfig(config3, gestureKey) {
    this.config = parse(config3, gestureKey, this.config);
  }
  clean() {
    this._targetEventStore.clean();
    for (const key2 of this.gestures) {
      this.gestureEventStores[key2].clean();
      this.gestureTimeoutStores[key2].clean();
    }
  }
  effect() {
    if (this.config.shared.target)
      this.bind();
    return () => this._targetEventStore.clean();
  }
  bind(...args) {
    const sharedConfig = this.config.shared;
    const props = {};
    let target;
    if (sharedConfig.target) {
      target = sharedConfig.target();
      if (!target)
        return;
    }
    if (sharedConfig.enabled) {
      for (const gestureKey of this.gestures) {
        const gestureConfig = this.config[gestureKey];
        const bindFunction = bindToProps(props, gestureConfig.eventOptions, !!target);
        if (gestureConfig.enabled) {
          const Engine2 = EngineMap.get(gestureKey);
          new Engine2(this, args, gestureKey).bind(bindFunction);
        }
      }
      const nativeBindFunction = bindToProps(props, sharedConfig.eventOptions, !!target);
      for (const eventKey in this.nativeHandlers) {
        nativeBindFunction(eventKey, "", (event) => this.nativeHandlers[eventKey](_objectSpread2(_objectSpread2({}, this.state.shared), {}, {
          event,
          args
        })), void 0, true);
      }
    }
    for (const handlerProp in props) {
      props[handlerProp] = chain(...props[handlerProp]);
    }
    if (!target)
      return props;
    for (const handlerProp in props) {
      const {
        device,
        capture,
        passive
      } = parseProp(handlerProp);
      this._targetEventStore.add(target, device, "", props[handlerProp], {
        capture,
        passive
      });
    }
  }
};
function setupGesture(ctrl, gestureKey) {
  ctrl.gestures.add(gestureKey);
  ctrl.gestureEventStores[gestureKey] = new EventStore(ctrl, gestureKey);
  ctrl.gestureTimeoutStores[gestureKey] = new TimeoutStore();
}
function resolveGestures(ctrl, internalHandlers) {
  if (internalHandlers.drag)
    setupGesture(ctrl, "drag");
  if (internalHandlers.wheel)
    setupGesture(ctrl, "wheel");
  if (internalHandlers.scroll)
    setupGesture(ctrl, "scroll");
  if (internalHandlers.move)
    setupGesture(ctrl, "move");
  if (internalHandlers.pinch)
    setupGesture(ctrl, "pinch");
  if (internalHandlers.hover)
    setupGesture(ctrl, "hover");
}
var bindToProps = (props, eventOptions, withPassiveOption) => (device, action, handler, options2 = {}, isNative = false) => {
  var _options$capture, _options$passive;
  const capture = (_options$capture = options2.capture) !== null && _options$capture !== void 0 ? _options$capture : eventOptions.capture;
  const passive = (_options$passive = options2.passive) !== null && _options$passive !== void 0 ? _options$passive : eventOptions.passive;
  let handlerProp = isNative ? device : toHandlerProp(device, action, capture);
  if (withPassiveOption && passive)
    handlerProp += "Passive";
  props[handlerProp] = props[handlerProp] || [];
  props[handlerProp].push(handler);
};
var RE_NOT_NATIVE = /^on(Drag|Wheel|Scroll|Move|Pinch|Hover)/;
function sortHandlers(_handlers) {
  const native = {};
  const handlers = {};
  const actions = /* @__PURE__ */ new Set();
  for (let key2 in _handlers) {
    if (RE_NOT_NATIVE.test(key2)) {
      actions.add(RegExp.lastMatch);
      handlers[key2] = _handlers[key2];
    } else {
      native[key2] = _handlers[key2];
    }
  }
  return [handlers, native, actions];
}
function registerGesture(actions, handlers, handlerKey, key2, internalHandlers, config3) {
  if (!actions.has(handlerKey))
    return;
  if (!EngineMap.has(key2)) {
    if (true) {
      console.warn(`[@use-gesture]: You've created a custom handler that that uses the \`${key2}\` gesture but isn't properly configured.

Please add \`${key2}Action\` when creating your handler.`);
    }
    return;
  }
  const startKey = handlerKey + "Start";
  const endKey = handlerKey + "End";
  const fn = (state) => {
    let memo = void 0;
    if (state.first && startKey in handlers)
      handlers[startKey](state);
    if (handlerKey in handlers)
      memo = handlers[handlerKey](state);
    if (state.last && endKey in handlers)
      handlers[endKey](state);
    return memo;
  };
  internalHandlers[key2] = fn;
  config3[key2] = config3[key2] || {};
}
function parseMergedHandlers(mergedHandlers, mergedConfig) {
  const [handlers, nativeHandlers, actions] = sortHandlers(mergedHandlers);
  const internalHandlers = {};
  registerGesture(actions, handlers, "onDrag", "drag", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onWheel", "wheel", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onScroll", "scroll", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onPinch", "pinch", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onMove", "move", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onHover", "hover", internalHandlers, mergedConfig);
  return {
    handlers: internalHandlers,
    config: mergedConfig,
    nativeHandlers
  };
}

// node_modules/@use-gesture/react/dist/use-gesture-react.esm.js
function useRecognizers(handlers, config3 = {}, gestureKey, nativeHandlers) {
  const ctrl = import_react150.default.useMemo(() => new Controller(handlers), []);
  ctrl.applyHandlers(handlers, nativeHandlers);
  ctrl.applyConfig(config3, gestureKey);
  import_react150.default.useEffect(ctrl.effect.bind(ctrl));
  import_react150.default.useEffect(() => {
    return ctrl.clean.bind(ctrl);
  }, []);
  if (config3.target === void 0) {
    return ctrl.bind.bind(ctrl);
  }
  return void 0;
}
function useDrag(handler, config3) {
  registerAction(dragAction);
  return useRecognizers({
    drag: handler
  }, config3 || {}, "drag");
}
function createUseGesture(actions) {
  actions.forEach(registerAction);
  return function useGesture2(_handlers, _config) {
    const {
      handlers,
      nativeHandlers,
      config: config3
    } = parseMergedHandlers(_handlers, _config || {});
    return useRecognizers(handlers, config3, void 0, nativeHandlers);
  };
}
function useGesture(handlers, config3) {
  const hook = createUseGesture([dragAction, pinchAction, scrollAction, wheelAction, moveAction, hoverAction]);
  return hook(handlers, config3 || {});
}

// node_modules/@react-spring/rafz/dist/react-spring-rafz.esm.js
var updateQueue = makeQueue();
var raf = (fn) => schedule(fn, updateQueue);
var writeQueue = makeQueue();
raf.write = (fn) => schedule(fn, writeQueue);
var onStartQueue = makeQueue();
raf.onStart = (fn) => schedule(fn, onStartQueue);
var onFrameQueue = makeQueue();
raf.onFrame = (fn) => schedule(fn, onFrameQueue);
var onFinishQueue = makeQueue();
raf.onFinish = (fn) => schedule(fn, onFinishQueue);
var timeouts = [];
raf.setTimeout = (handler, ms) => {
  let time2 = raf.now() + ms;
  let cancel = () => {
    let i6 = timeouts.findIndex((t) => t.cancel == cancel);
    if (~i6)
      timeouts.splice(i6, 1);
    pendingCount -= ~i6 ? 1 : 0;
  };
  let timeout2 = {
    time: time2,
    handler,
    cancel
  };
  timeouts.splice(findTimeout(time2), 0, timeout2);
  pendingCount += 1;
  start();
  return timeout2;
};
var findTimeout = (time2) => ~(~timeouts.findIndex((t) => t.time > time2) || ~timeouts.length);
raf.cancel = (fn) => {
  onStartQueue.delete(fn);
  onFrameQueue.delete(fn);
  onFinishQueue.delete(fn);
  updateQueue.delete(fn);
  writeQueue.delete(fn);
};
raf.sync = (fn) => {
  sync = true;
  raf.batchedUpdates(fn);
  sync = false;
};
raf.throttle = (fn) => {
  let lastArgs;
  function queuedFn() {
    try {
      fn(...lastArgs);
    } finally {
      lastArgs = null;
    }
  }
  function throttled(...args) {
    lastArgs = args;
    raf.onStart(queuedFn);
  }
  throttled.handler = fn;
  throttled.cancel = () => {
    onStartQueue.delete(queuedFn);
    lastArgs = null;
  };
  return throttled;
};
var nativeRaf = typeof window != "undefined" ? window.requestAnimationFrame : () => {
};
raf.use = (impl) => nativeRaf = impl;
raf.now = typeof performance != "undefined" ? () => performance.now() : Date.now;
raf.batchedUpdates = (fn) => fn();
raf.catch = console.error;
raf.frameLoop = "always";
raf.advance = () => {
  if (raf.frameLoop !== "demand") {
    console.warn("Cannot call the manual advancement of rafz whilst frameLoop is not set as demand");
  } else {
    update();
  }
};
var ts = -1;
var pendingCount = 0;
var sync = false;
function schedule(fn, queue) {
  if (sync) {
    queue.delete(fn);
    fn(0);
  } else {
    queue.add(fn);
    start();
  }
}
function start() {
  if (ts < 0) {
    ts = 0;
    if (raf.frameLoop !== "demand") {
      nativeRaf(loop);
    }
  }
}
function stop() {
  ts = -1;
}
function loop() {
  if (~ts) {
    nativeRaf(loop);
    raf.batchedUpdates(update);
  }
}
function update() {
  let prevTs = ts;
  ts = raf.now();
  let count = findTimeout(ts);
  if (count) {
    eachSafely(timeouts.splice(0, count), (t) => t.handler());
    pendingCount -= count;
  }
  if (!pendingCount) {
    stop();
    return;
  }
  onStartQueue.flush();
  updateQueue.flush(prevTs ? Math.min(64, ts - prevTs) : 16.667);
  onFrameQueue.flush();
  writeQueue.flush();
  onFinishQueue.flush();
}
function makeQueue() {
  let next = /* @__PURE__ */ new Set();
  let current = next;
  return {
    add(fn) {
      pendingCount += current == next && !next.has(fn) ? 1 : 0;
      next.add(fn);
    },
    delete(fn) {
      pendingCount -= current == next && next.has(fn) ? 1 : 0;
      return next.delete(fn);
    },
    flush(arg) {
      if (current.size) {
        next = /* @__PURE__ */ new Set();
        pendingCount -= current.size;
        eachSafely(current, (fn) => fn(arg) && next.add(fn));
        pendingCount += next.size;
        current = next;
      }
    }
  };
}
function eachSafely(values2, each2) {
  values2.forEach((value2) => {
    try {
      each2(value2);
    } catch (e2) {
      raf.catch(e2);
    }
  });
}

// node_modules/@react-spring/shared/dist/react-spring-shared.esm.js
var import_react151 = __toESM(require_react());
function noop3() {
}
var defineHidden = (obj, key2, value2) => Object.defineProperty(obj, key2, {
  value: value2,
  writable: true,
  configurable: true
});
var is = {
  arr: Array.isArray,
  obj: (a) => !!a && a.constructor.name === "Object",
  fun: (a) => typeof a === "function",
  str: (a) => typeof a === "string",
  num: (a) => typeof a === "number",
  und: (a) => a === void 0
};
function isEqual3(a, b) {
  if (is.arr(a)) {
    if (!is.arr(b) || a.length !== b.length)
      return false;
    for (let i6 = 0; i6 < a.length; i6++) {
      if (a[i6] !== b[i6])
        return false;
    }
    return true;
  }
  return a === b;
}
var each = (obj, fn) => obj.forEach(fn);
function eachProp(obj, fn, ctx2) {
  if (is.arr(obj)) {
    for (let i6 = 0; i6 < obj.length; i6++) {
      fn.call(ctx2, obj[i6], `${i6}`);
    }
    return;
  }
  for (const key2 in obj) {
    if (obj.hasOwnProperty(key2)) {
      fn.call(ctx2, obj[key2], key2);
    }
  }
}
var toArray2 = (a) => is.und(a) ? [] : is.arr(a) ? a : [a];
function flush(queue, iterator) {
  if (queue.size) {
    const items = Array.from(queue);
    queue.clear();
    each(items, iterator);
  }
}
var flushCalls = (queue, ...args) => flush(queue, (fn) => fn(...args));
var isSSR = () => typeof window === "undefined" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent);
var createStringInterpolator$1;
var to;
var colors$1 = null;
var skipAnimation = false;
var willAdvance = noop3;
var assign = (globals2) => {
  if (globals2.to)
    to = globals2.to;
  if (globals2.now)
    raf.now = globals2.now;
  if (globals2.colors !== void 0)
    colors$1 = globals2.colors;
  if (globals2.skipAnimation != null)
    skipAnimation = globals2.skipAnimation;
  if (globals2.createStringInterpolator)
    createStringInterpolator$1 = globals2.createStringInterpolator;
  if (globals2.requestAnimationFrame)
    raf.use(globals2.requestAnimationFrame);
  if (globals2.batchedUpdates)
    raf.batchedUpdates = globals2.batchedUpdates;
  if (globals2.willAdvance)
    willAdvance = globals2.willAdvance;
  if (globals2.frameLoop)
    raf.frameLoop = globals2.frameLoop;
};
var globals = Object.freeze({
  __proto__: null,
  get createStringInterpolator() {
    return createStringInterpolator$1;
  },
  get to() {
    return to;
  },
  get colors() {
    return colors$1;
  },
  get skipAnimation() {
    return skipAnimation;
  },
  get willAdvance() {
    return willAdvance;
  },
  assign
});
var startQueue = /* @__PURE__ */ new Set();
var currentFrame = [];
var prevFrame = [];
var priority = 0;
var frameLoop = {
  get idle() {
    return !startQueue.size && !currentFrame.length;
  },
  start(animation) {
    if (priority > animation.priority) {
      startQueue.add(animation);
      raf.onStart(flushStartQueue);
    } else {
      startSafely(animation);
      raf(advance);
    }
  },
  advance,
  sort(animation) {
    if (priority) {
      raf.onFrame(() => frameLoop.sort(animation));
    } else {
      const prevIndex = currentFrame.indexOf(animation);
      if (~prevIndex) {
        currentFrame.splice(prevIndex, 1);
        startUnsafely(animation);
      }
    }
  },
  clear() {
    currentFrame = [];
    startQueue.clear();
  }
};
function flushStartQueue() {
  startQueue.forEach(startSafely);
  startQueue.clear();
  raf(advance);
}
function startSafely(animation) {
  if (!currentFrame.includes(animation))
    startUnsafely(animation);
}
function startUnsafely(animation) {
  currentFrame.splice(findIndex(currentFrame, (other) => other.priority > animation.priority), 0, animation);
}
function advance(dt) {
  const nextFrame = prevFrame;
  for (let i6 = 0; i6 < currentFrame.length; i6++) {
    const animation = currentFrame[i6];
    priority = animation.priority;
    if (!animation.idle) {
      willAdvance(animation);
      animation.advance(dt);
      if (!animation.idle) {
        nextFrame.push(animation);
      }
    }
  }
  priority = 0;
  prevFrame = currentFrame;
  prevFrame.length = 0;
  currentFrame = nextFrame;
  return currentFrame.length > 0;
}
function findIndex(arr, test) {
  const index2 = arr.findIndex(test);
  return index2 < 0 ? arr.length : index2;
}
var clamp4 = (min, max, v3) => Math.min(Math.max(v3, min), max);
var colors = {
  transparent: 0,
  aliceblue: 4042850303,
  antiquewhite: 4209760255,
  aqua: 16777215,
  aquamarine: 2147472639,
  azure: 4043309055,
  beige: 4126530815,
  bisque: 4293182719,
  black: 255,
  blanchedalmond: 4293643775,
  blue: 65535,
  blueviolet: 2318131967,
  brown: 2771004159,
  burlywood: 3736635391,
  burntsienna: 3934150143,
  cadetblue: 1604231423,
  chartreuse: 2147418367,
  chocolate: 3530104575,
  coral: 4286533887,
  cornflowerblue: 1687547391,
  cornsilk: 4294499583,
  crimson: 3692313855,
  cyan: 16777215,
  darkblue: 35839,
  darkcyan: 9145343,
  darkgoldenrod: 3095792639,
  darkgray: 2846468607,
  darkgreen: 6553855,
  darkgrey: 2846468607,
  darkkhaki: 3182914559,
  darkmagenta: 2332068863,
  darkolivegreen: 1433087999,
  darkorange: 4287365375,
  darkorchid: 2570243327,
  darkred: 2332033279,
  darksalmon: 3918953215,
  darkseagreen: 2411499519,
  darkslateblue: 1211993087,
  darkslategray: 793726975,
  darkslategrey: 793726975,
  darkturquoise: 13554175,
  darkviolet: 2483082239,
  deeppink: 4279538687,
  deepskyblue: 12582911,
  dimgray: 1768516095,
  dimgrey: 1768516095,
  dodgerblue: 512819199,
  firebrick: 2988581631,
  floralwhite: 4294635775,
  forestgreen: 579543807,
  fuchsia: 4278255615,
  gainsboro: 3705462015,
  ghostwhite: 4177068031,
  gold: 4292280575,
  goldenrod: 3668254975,
  gray: 2155905279,
  green: 8388863,
  greenyellow: 2919182335,
  grey: 2155905279,
  honeydew: 4043305215,
  hotpink: 4285117695,
  indianred: 3445382399,
  indigo: 1258324735,
  ivory: 4294963455,
  khaki: 4041641215,
  lavender: 3873897215,
  lavenderblush: 4293981695,
  lawngreen: 2096890111,
  lemonchiffon: 4294626815,
  lightblue: 2916673279,
  lightcoral: 4034953471,
  lightcyan: 3774873599,
  lightgoldenrodyellow: 4210742015,
  lightgray: 3553874943,
  lightgreen: 2431553791,
  lightgrey: 3553874943,
  lightpink: 4290167295,
  lightsalmon: 4288707327,
  lightseagreen: 548580095,
  lightskyblue: 2278488831,
  lightslategray: 2005441023,
  lightslategrey: 2005441023,
  lightsteelblue: 2965692159,
  lightyellow: 4294959359,
  lime: 16711935,
  limegreen: 852308735,
  linen: 4210091775,
  magenta: 4278255615,
  maroon: 2147483903,
  mediumaquamarine: 1724754687,
  mediumblue: 52735,
  mediumorchid: 3126187007,
  mediumpurple: 2473647103,
  mediumseagreen: 1018393087,
  mediumslateblue: 2070474495,
  mediumspringgreen: 16423679,
  mediumturquoise: 1221709055,
  mediumvioletred: 3340076543,
  midnightblue: 421097727,
  mintcream: 4127193855,
  mistyrose: 4293190143,
  moccasin: 4293178879,
  navajowhite: 4292783615,
  navy: 33023,
  oldlace: 4260751103,
  olive: 2155872511,
  olivedrab: 1804477439,
  orange: 4289003775,
  orangered: 4282712319,
  orchid: 3664828159,
  palegoldenrod: 4008225535,
  palegreen: 2566625535,
  paleturquoise: 2951671551,
  palevioletred: 3681588223,
  papayawhip: 4293907967,
  peachpuff: 4292524543,
  peru: 3448061951,
  pink: 4290825215,
  plum: 3718307327,
  powderblue: 2967529215,
  purple: 2147516671,
  rebeccapurple: 1714657791,
  red: 4278190335,
  rosybrown: 3163525119,
  royalblue: 1097458175,
  saddlebrown: 2336560127,
  salmon: 4202722047,
  sandybrown: 4104413439,
  seagreen: 780883967,
  seashell: 4294307583,
  sienna: 2689740287,
  silver: 3233857791,
  skyblue: 2278484991,
  slateblue: 1784335871,
  slategray: 1887473919,
  slategrey: 1887473919,
  snow: 4294638335,
  springgreen: 16744447,
  steelblue: 1182971135,
  tan: 3535047935,
  teal: 8421631,
  thistle: 3636451583,
  tomato: 4284696575,
  turquoise: 1088475391,
  violet: 4001558271,
  wheat: 4125012991,
  white: 4294967295,
  whitesmoke: 4126537215,
  yellow: 4294902015,
  yellowgreen: 2597139199
};
var NUMBER = "[-+]?\\d*\\.?\\d+";
var PERCENTAGE = NUMBER + "%";
function call2(...parts) {
  return "\\(\\s*(" + parts.join(")\\s*,\\s*(") + ")\\s*\\)";
}
var rgb = new RegExp("rgb" + call2(NUMBER, NUMBER, NUMBER));
var rgba = new RegExp("rgba" + call2(NUMBER, NUMBER, NUMBER, NUMBER));
var hsl = new RegExp("hsl" + call2(NUMBER, PERCENTAGE, PERCENTAGE));
var hsla = new RegExp("hsla" + call2(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));
var hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex6 = /^#([0-9a-fA-F]{6})$/;
var hex8 = /^#([0-9a-fA-F]{8})$/;
function normalizeColor(color) {
  let match;
  if (typeof color === "number") {
    return color >>> 0 === color && color >= 0 && color <= 4294967295 ? color : null;
  }
  if (match = hex6.exec(color))
    return parseInt(match[1] + "ff", 16) >>> 0;
  if (colors$1 && colors$1[color] !== void 0) {
    return colors$1[color];
  }
  if (match = rgb.exec(color)) {
    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 255) >>> 0;
  }
  if (match = rgba.exec(color)) {
    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;
  }
  if (match = hex3.exec(color)) {
    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + "ff", 16) >>> 0;
  }
  if (match = hex8.exec(color))
    return parseInt(match[1], 16) >>> 0;
  if (match = hex4.exec(color)) {
    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;
  }
  if (match = hsl.exec(color)) {
    return (hslToRgb2(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 255) >>> 0;
  }
  if (match = hsla.exec(color)) {
    return (hslToRgb2(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;
  }
  return null;
}
function hue2rgb2(p10, q, t) {
  if (t < 0)
    t += 1;
  if (t > 1)
    t -= 1;
  if (t < 1 / 6)
    return p10 + (q - p10) * 6 * t;
  if (t < 1 / 2)
    return q;
  if (t < 2 / 3)
    return p10 + (q - p10) * (2 / 3 - t) * 6;
  return p10;
}
function hslToRgb2(h3, s8, l7) {
  const q = l7 < 0.5 ? l7 * (1 + s8) : l7 + s8 - l7 * s8;
  const p10 = 2 * l7 - q;
  const r = hue2rgb2(p10, q, h3 + 1 / 3);
  const g = hue2rgb2(p10, q, h3);
  const b = hue2rgb2(p10, q, h3 - 1 / 3);
  return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
}
function parse255(str) {
  const int = parseInt(str, 10);
  if (int < 0)
    return 0;
  if (int > 255)
    return 255;
  return int;
}
function parse360(str) {
  const int = parseFloat(str);
  return (int % 360 + 360) % 360 / 360;
}
function parse1(str) {
  const num = parseFloat(str);
  if (num < 0)
    return 0;
  if (num > 1)
    return 255;
  return Math.round(num * 255);
}
function parsePercentage(str) {
  const int = parseFloat(str);
  if (int < 0)
    return 0;
  if (int > 100)
    return 1;
  return int / 100;
}
function colorToRgba(input) {
  let int32Color = normalizeColor(input);
  if (int32Color === null)
    return input;
  int32Color = int32Color || 0;
  let r = (int32Color & 4278190080) >>> 24;
  let g = (int32Color & 16711680) >>> 16;
  let b = (int32Color & 65280) >>> 8;
  let a = (int32Color & 255) / 255;
  return `rgba(${r}, ${g}, ${b}, ${a})`;
}
var createInterpolator = (range3, output, extrapolate) => {
  if (is.fun(range3)) {
    return range3;
  }
  if (is.arr(range3)) {
    return createInterpolator({
      range: range3,
      output,
      extrapolate
    });
  }
  if (is.str(range3.output[0])) {
    return createStringInterpolator$1(range3);
  }
  const config3 = range3;
  const outputRange = config3.output;
  const inputRange = config3.range || [0, 1];
  const extrapolateLeft = config3.extrapolateLeft || config3.extrapolate || "extend";
  const extrapolateRight = config3.extrapolateRight || config3.extrapolate || "extend";
  const easing = config3.easing || ((t) => t);
  return (input) => {
    const range4 = findRange(input, inputRange);
    return interpolate(input, inputRange[range4], inputRange[range4 + 1], outputRange[range4], outputRange[range4 + 1], easing, extrapolateLeft, extrapolateRight, config3.map);
  };
};
function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map) {
  let result = map ? map(input) : input;
  if (result < inputMin) {
    if (extrapolateLeft === "identity")
      return result;
    else if (extrapolateLeft === "clamp")
      result = inputMin;
  }
  if (result > inputMax) {
    if (extrapolateRight === "identity")
      return result;
    else if (extrapolateRight === "clamp")
      result = inputMax;
  }
  if (outputMin === outputMax)
    return outputMin;
  if (inputMin === inputMax)
    return input <= inputMin ? outputMin : outputMax;
  if (inputMin === -Infinity)
    result = -result;
  else if (inputMax === Infinity)
    result = result - inputMin;
  else
    result = (result - inputMin) / (inputMax - inputMin);
  result = easing(result);
  if (outputMin === -Infinity)
    result = -result;
  else if (outputMax === Infinity)
    result = result + outputMin;
  else
    result = result * (outputMax - outputMin) + outputMin;
  return result;
}
function findRange(input, inputRange) {
  for (var i6 = 1; i6 < inputRange.length - 1; ++i6)
    if (inputRange[i6] >= input)
      break;
  return i6 - 1;
}
var steps = (steps2, direction = "end") => (progress) => {
  progress = direction === "end" ? Math.min(progress, 0.999) : Math.max(progress, 1e-3);
  const expanded = progress * steps2;
  const rounded = direction === "end" ? Math.floor(expanded) : Math.ceil(expanded);
  return clamp4(0, 1, rounded / steps2);
};
var c1 = 1.70158;
var c22 = c1 * 1.525;
var c32 = c1 + 1;
var c42 = 2 * Math.PI / 3;
var c52 = 2 * Math.PI / 4.5;
var bounceOut = (x2) => {
  const n1 = 7.5625;
  const d1 = 2.75;
  if (x2 < 1 / d1) {
    return n1 * x2 * x2;
  } else if (x2 < 2 / d1) {
    return n1 * (x2 -= 1.5 / d1) * x2 + 0.75;
  } else if (x2 < 2.5 / d1) {
    return n1 * (x2 -= 2.25 / d1) * x2 + 0.9375;
  } else {
    return n1 * (x2 -= 2.625 / d1) * x2 + 0.984375;
  }
};
var easings = {
  linear: (x2) => x2,
  easeInQuad: (x2) => x2 * x2,
  easeOutQuad: (x2) => 1 - (1 - x2) * (1 - x2),
  easeInOutQuad: (x2) => x2 < 0.5 ? 2 * x2 * x2 : 1 - Math.pow(-2 * x2 + 2, 2) / 2,
  easeInCubic: (x2) => x2 * x2 * x2,
  easeOutCubic: (x2) => 1 - Math.pow(1 - x2, 3),
  easeInOutCubic: (x2) => x2 < 0.5 ? 4 * x2 * x2 * x2 : 1 - Math.pow(-2 * x2 + 2, 3) / 2,
  easeInQuart: (x2) => x2 * x2 * x2 * x2,
  easeOutQuart: (x2) => 1 - Math.pow(1 - x2, 4),
  easeInOutQuart: (x2) => x2 < 0.5 ? 8 * x2 * x2 * x2 * x2 : 1 - Math.pow(-2 * x2 + 2, 4) / 2,
  easeInQuint: (x2) => x2 * x2 * x2 * x2 * x2,
  easeOutQuint: (x2) => 1 - Math.pow(1 - x2, 5),
  easeInOutQuint: (x2) => x2 < 0.5 ? 16 * x2 * x2 * x2 * x2 * x2 : 1 - Math.pow(-2 * x2 + 2, 5) / 2,
  easeInSine: (x2) => 1 - Math.cos(x2 * Math.PI / 2),
  easeOutSine: (x2) => Math.sin(x2 * Math.PI / 2),
  easeInOutSine: (x2) => -(Math.cos(Math.PI * x2) - 1) / 2,
  easeInExpo: (x2) => x2 === 0 ? 0 : Math.pow(2, 10 * x2 - 10),
  easeOutExpo: (x2) => x2 === 1 ? 1 : 1 - Math.pow(2, -10 * x2),
  easeInOutExpo: (x2) => x2 === 0 ? 0 : x2 === 1 ? 1 : x2 < 0.5 ? Math.pow(2, 20 * x2 - 10) / 2 : (2 - Math.pow(2, -20 * x2 + 10)) / 2,
  easeInCirc: (x2) => 1 - Math.sqrt(1 - Math.pow(x2, 2)),
  easeOutCirc: (x2) => Math.sqrt(1 - Math.pow(x2 - 1, 2)),
  easeInOutCirc: (x2) => x2 < 0.5 ? (1 - Math.sqrt(1 - Math.pow(2 * x2, 2))) / 2 : (Math.sqrt(1 - Math.pow(-2 * x2 + 2, 2)) + 1) / 2,
  easeInBack: (x2) => c32 * x2 * x2 * x2 - c1 * x2 * x2,
  easeOutBack: (x2) => 1 + c32 * Math.pow(x2 - 1, 3) + c1 * Math.pow(x2 - 1, 2),
  easeInOutBack: (x2) => x2 < 0.5 ? Math.pow(2 * x2, 2) * ((c22 + 1) * 2 * x2 - c22) / 2 : (Math.pow(2 * x2 - 2, 2) * ((c22 + 1) * (x2 * 2 - 2) + c22) + 2) / 2,
  easeInElastic: (x2) => x2 === 0 ? 0 : x2 === 1 ? 1 : -Math.pow(2, 10 * x2 - 10) * Math.sin((x2 * 10 - 10.75) * c42),
  easeOutElastic: (x2) => x2 === 0 ? 0 : x2 === 1 ? 1 : Math.pow(2, -10 * x2) * Math.sin((x2 * 10 - 0.75) * c42) + 1,
  easeInOutElastic: (x2) => x2 === 0 ? 0 : x2 === 1 ? 1 : x2 < 0.5 ? -(Math.pow(2, 20 * x2 - 10) * Math.sin((20 * x2 - 11.125) * c52)) / 2 : Math.pow(2, -20 * x2 + 10) * Math.sin((20 * x2 - 11.125) * c52) / 2 + 1,
  easeInBounce: (x2) => 1 - bounceOut(1 - x2),
  easeOutBounce: bounceOut,
  easeInOutBounce: (x2) => x2 < 0.5 ? (1 - bounceOut(1 - 2 * x2)) / 2 : (1 + bounceOut(2 * x2 - 1)) / 2,
  steps
};
function _extends2() {
  _extends2 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i6 = 1; i6 < arguments.length; i6++) {
      var source = arguments[i6];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
var $get = Symbol.for("FluidValue.get");
var $observers = Symbol.for("FluidValue.observers");
var hasFluidValue = (arg) => Boolean(arg && arg[$get]);
var getFluidValue = (arg) => arg && arg[$get] ? arg[$get]() : arg;
var getFluidObservers = (target) => target[$observers] || null;
function callFluidObserver(observer, event) {
  if (observer.eventObserved) {
    observer.eventObserved(event);
  } else {
    observer(event);
  }
}
function callFluidObservers(target, event) {
  let observers = target[$observers];
  if (observers) {
    observers.forEach((observer) => {
      callFluidObserver(observer, event);
    });
  }
}
var FluidValue = class {
  constructor(get) {
    this[$get] = void 0;
    this[$observers] = void 0;
    if (!get && !(get = this.get)) {
      throw Error("Unknown getter");
    }
    setFluidGetter(this, get);
  }
};
var setFluidGetter = (target, get) => setHidden(target, $get, get);
function addFluidObserver(target, observer) {
  if (target[$get]) {
    let observers = target[$observers];
    if (!observers) {
      setHidden(target, $observers, observers = /* @__PURE__ */ new Set());
    }
    if (!observers.has(observer)) {
      observers.add(observer);
      if (target.observerAdded) {
        target.observerAdded(observers.size, observer);
      }
    }
  }
  return observer;
}
function removeFluidObserver(target, observer) {
  let observers = target[$observers];
  if (observers && observers.has(observer)) {
    const count = observers.size - 1;
    if (count) {
      observers.delete(observer);
    } else {
      target[$observers] = null;
    }
    if (target.observerRemoved) {
      target.observerRemoved(count, observer);
    }
  }
}
var setHidden = (target, key2, value2) => Object.defineProperty(target, key2, {
  value: value2,
  writable: true,
  configurable: true
});
var numberRegex = /[+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
var colorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d\.]+%?\))/gi;
var unitRegex = new RegExp(`(${numberRegex.source})(%|[a-z]+)`, "i");
var rgbaRegex = /rgba\(([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+)\)/gi;
var cssVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
var variableToRgba = (input) => {
  const [token, fallback] = parseCSSVariable(input);
  if (!token || isSSR()) {
    return input;
  }
  const value2 = window.getComputedStyle(document.documentElement).getPropertyValue(token);
  if (value2) {
    return value2.trim();
  } else if (fallback && fallback.startsWith("--")) {
    const _value = window.getComputedStyle(document.documentElement).getPropertyValue(fallback);
    if (_value) {
      return _value;
    } else {
      return input;
    }
  } else if (fallback && cssVariableRegex.test(fallback)) {
    return variableToRgba(fallback);
  } else if (fallback) {
    return fallback;
  }
  return input;
};
var parseCSSVariable = (current) => {
  const match = cssVariableRegex.exec(current);
  if (!match)
    return [,];
  const [, token, fallback] = match;
  return [token, fallback];
};
var namedColorRegex;
var rgbaRound = (_, p1, p22, p32, p42) => `rgba(${Math.round(p1)}, ${Math.round(p22)}, ${Math.round(p32)}, ${p42})`;
var createStringInterpolator = (config3) => {
  if (!namedColorRegex)
    namedColorRegex = colors$1 ? new RegExp(`(${Object.keys(colors$1).join("|")})(?!\\w)`, "g") : /^\b$/;
  const output = config3.output.map((value2) => {
    return getFluidValue(value2).replace(cssVariableRegex, variableToRgba).replace(colorRegex, colorToRgba).replace(namedColorRegex, colorToRgba);
  });
  const keyframes = output.map((value2) => value2.match(numberRegex).map(Number));
  const outputRanges = keyframes[0].map((_, i6) => keyframes.map((values2) => {
    if (!(i6 in values2)) {
      throw Error('The arity of each "output" value must be equal');
    }
    return values2[i6];
  }));
  const interpolators = outputRanges.map((output2) => createInterpolator(_extends2({}, config3, {
    output: output2
  })));
  return (input) => {
    var _output$find;
    const missingUnit = !unitRegex.test(output[0]) && ((_output$find = output.find((value2) => unitRegex.test(value2))) == null ? void 0 : _output$find.replace(numberRegex, ""));
    let i6 = 0;
    return output[0].replace(numberRegex, () => `${interpolators[i6++](input)}${missingUnit || ""}`).replace(rgbaRegex, rgbaRound);
  };
};
var prefix = "react-spring: ";
var once = (fn) => {
  const func = fn;
  let called = false;
  if (typeof func != "function") {
    throw new TypeError(`${prefix}once requires a function parameter`);
  }
  return (...args) => {
    if (!called) {
      func(...args);
      called = true;
    }
  };
};
var warnInterpolate = once(console.warn);
function deprecateInterpolate() {
  warnInterpolate(`${prefix}The "interpolate" function is deprecated in v9 (use "to" instead)`);
}
var warnDirectCall = once(console.warn);
function deprecateDirectCall() {
  warnDirectCall(`${prefix}Directly calling start instead of using the api object is deprecated in v9 (use ".start" instead), this will be removed in later 0.X.0 versions`);
}
function isAnimatedString(value2) {
  return is.str(value2) && (value2[0] == "#" || /\d/.test(value2) || !isSSR() && cssVariableRegex.test(value2) || value2 in (colors$1 || {}));
}
var useIsomorphicLayoutEffect = isSSR() ? import_react151.useEffect : import_react151.useLayoutEffect;
var useIsMounted = () => {
  const isMounted = (0, import_react151.useRef)(false);
  useIsomorphicLayoutEffect(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  return isMounted;
};
function useForceUpdate() {
  const update3 = (0, import_react151.useState)()[1];
  const isMounted = useIsMounted();
  return () => {
    if (isMounted.current) {
      update3(Math.random());
    }
  };
}
function useMemoOne(getResult, inputs) {
  const [initial] = (0, import_react151.useState)(() => ({
    inputs,
    result: getResult()
  }));
  const committed = (0, import_react151.useRef)();
  const prevCache = committed.current;
  let cache = prevCache;
  if (cache) {
    const useCache = Boolean(inputs && cache.inputs && areInputsEqual(inputs, cache.inputs));
    if (!useCache) {
      cache = {
        inputs,
        result: getResult()
      };
    }
  } else {
    cache = initial;
  }
  (0, import_react151.useEffect)(() => {
    committed.current = cache;
    if (prevCache == initial) {
      initial.inputs = initial.result = void 0;
    }
  }, [cache]);
  return cache.result;
}
function areInputsEqual(next, prev) {
  if (next.length !== prev.length) {
    return false;
  }
  for (let i6 = 0; i6 < next.length; i6++) {
    if (next[i6] !== prev[i6]) {
      return false;
    }
  }
  return true;
}
var useOnce = (effect2) => (0, import_react151.useEffect)(effect2, emptyDeps);
var emptyDeps = [];
function usePrev(value2) {
  const prevRef = (0, import_react151.useRef)();
  (0, import_react151.useEffect)(() => {
    prevRef.current = value2;
  });
  return prevRef.current;
}

// node_modules/@react-spring/core/dist/react-spring-core.esm.js
var React32 = __toESM(require_react());
var import_react153 = __toESM(require_react());

// node_modules/@react-spring/animated/dist/react-spring-animated.esm.js
var React31 = __toESM(require_react());
var import_react152 = __toESM(require_react());
var $node = Symbol.for("Animated:node");
var isAnimated = (value2) => !!value2 && value2[$node] === value2;
var getAnimated = (owner) => owner && owner[$node];
var setAnimated = (owner, node) => defineHidden(owner, $node, node);
var getPayload = (owner) => owner && owner[$node] && owner[$node].getPayload();
var Animated = class {
  constructor() {
    this.payload = void 0;
    setAnimated(this, this);
  }
  getPayload() {
    return this.payload || [];
  }
};
var AnimatedValue = class _AnimatedValue extends Animated {
  constructor(_value) {
    super();
    this.done = true;
    this.elapsedTime = void 0;
    this.lastPosition = void 0;
    this.lastVelocity = void 0;
    this.v0 = void 0;
    this.durationProgress = 0;
    this._value = _value;
    if (is.num(this._value)) {
      this.lastPosition = this._value;
    }
  }
  static create(value2) {
    return new _AnimatedValue(value2);
  }
  getPayload() {
    return [this];
  }
  getValue() {
    return this._value;
  }
  setValue(value2, step) {
    if (is.num(value2)) {
      this.lastPosition = value2;
      if (step) {
        value2 = Math.round(value2 / step) * step;
        if (this.done) {
          this.lastPosition = value2;
        }
      }
    }
    if (this._value === value2) {
      return false;
    }
    this._value = value2;
    return true;
  }
  reset() {
    const {
      done
    } = this;
    this.done = false;
    if (is.num(this._value)) {
      this.elapsedTime = 0;
      this.durationProgress = 0;
      this.lastPosition = this._value;
      if (done)
        this.lastVelocity = null;
      this.v0 = null;
    }
  }
};
var AnimatedString = class _AnimatedString extends AnimatedValue {
  constructor(value2) {
    super(0);
    this._string = null;
    this._toString = void 0;
    this._toString = createInterpolator({
      output: [value2, value2]
    });
  }
  static create(value2) {
    return new _AnimatedString(value2);
  }
  getValue() {
    let value2 = this._string;
    return value2 == null ? this._string = this._toString(this._value) : value2;
  }
  setValue(value2) {
    if (is.str(value2)) {
      if (value2 == this._string) {
        return false;
      }
      this._string = value2;
      this._value = 1;
    } else if (super.setValue(value2)) {
      this._string = null;
    } else {
      return false;
    }
    return true;
  }
  reset(goal) {
    if (goal) {
      this._toString = createInterpolator({
        output: [this.getValue(), goal]
      });
    }
    this._value = 0;
    super.reset();
  }
};
var TreeContext = {
  dependencies: null
};
var AnimatedObject = class extends Animated {
  constructor(source) {
    super();
    this.source = source;
    this.setValue(source);
  }
  getValue(animated2) {
    const values2 = {};
    eachProp(this.source, (source, key2) => {
      if (isAnimated(source)) {
        values2[key2] = source.getValue(animated2);
      } else if (hasFluidValue(source)) {
        values2[key2] = getFluidValue(source);
      } else if (!animated2) {
        values2[key2] = source;
      }
    });
    return values2;
  }
  setValue(source) {
    this.source = source;
    this.payload = this._makePayload(source);
  }
  reset() {
    if (this.payload) {
      each(this.payload, (node) => node.reset());
    }
  }
  _makePayload(source) {
    if (source) {
      const payload = /* @__PURE__ */ new Set();
      eachProp(source, this._addToPayload, payload);
      return Array.from(payload);
    }
  }
  _addToPayload(source) {
    if (TreeContext.dependencies && hasFluidValue(source)) {
      TreeContext.dependencies.add(source);
    }
    const payload = getPayload(source);
    if (payload) {
      each(payload, (node) => this.add(node));
    }
  }
};
var AnimatedArray = class _AnimatedArray extends AnimatedObject {
  constructor(source) {
    super(source);
  }
  static create(source) {
    return new _AnimatedArray(source);
  }
  getValue() {
    return this.source.map((node) => node.getValue());
  }
  setValue(source) {
    const payload = this.getPayload();
    if (source.length == payload.length) {
      return payload.map((node, i6) => node.setValue(source[i6])).some(Boolean);
    }
    super.setValue(source.map(makeAnimated));
    return true;
  }
};
function makeAnimated(value2) {
  const nodeType = isAnimatedString(value2) ? AnimatedString : AnimatedValue;
  return nodeType.create(value2);
}
function getAnimatedType(value2) {
  const parentNode = getAnimated(value2);
  return parentNode ? parentNode.constructor : is.arr(value2) ? AnimatedArray : isAnimatedString(value2) ? AnimatedString : AnimatedValue;
}
function _extends3() {
  _extends3 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i6 = 1; i6 < arguments.length; i6++) {
      var source = arguments[i6];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
var withAnimated = (Component2, host2) => {
  const hasInstance = !is.fun(Component2) || Component2.prototype && Component2.prototype.isReactComponent;
  return (0, import_react152.forwardRef)((givenProps, givenRef) => {
    const instanceRef = (0, import_react152.useRef)(null);
    const ref = hasInstance && (0, import_react152.useCallback)((value2) => {
      instanceRef.current = updateRef(givenRef, value2);
    }, [givenRef]);
    const [props, deps] = getAnimatedState(givenProps, host2);
    const forceUpdate = useForceUpdate();
    const callback = () => {
      const instance = instanceRef.current;
      if (hasInstance && !instance) {
        return;
      }
      const didUpdate = instance ? host2.applyAnimatedValues(instance, props.getValue(true)) : false;
      if (didUpdate === false) {
        forceUpdate();
      }
    };
    const observer = new PropsObserver(callback, deps);
    const observerRef = (0, import_react152.useRef)();
    useIsomorphicLayoutEffect(() => {
      observerRef.current = observer;
      each(deps, (dep) => addFluidObserver(dep, observer));
      return () => {
        if (observerRef.current) {
          each(observerRef.current.deps, (dep) => removeFluidObserver(dep, observerRef.current));
          raf.cancel(observerRef.current.update);
        }
      };
    });
    (0, import_react152.useEffect)(callback, []);
    useOnce(() => () => {
      const observer2 = observerRef.current;
      each(observer2.deps, (dep) => removeFluidObserver(dep, observer2));
    });
    const usedProps = host2.getComponentProps(props.getValue());
    return React31.createElement(Component2, _extends3({}, usedProps, {
      ref
    }));
  });
};
var PropsObserver = class {
  constructor(update3, deps) {
    this.update = update3;
    this.deps = deps;
  }
  eventObserved(event) {
    if (event.type == "change") {
      raf.write(this.update);
    }
  }
};
function getAnimatedState(props, host2) {
  const dependencies = /* @__PURE__ */ new Set();
  TreeContext.dependencies = dependencies;
  if (props.style)
    props = _extends3({}, props, {
      style: host2.createAnimatedStyle(props.style)
    });
  props = new AnimatedObject(props);
  TreeContext.dependencies = null;
  return [props, dependencies];
}
function updateRef(ref, value2) {
  if (ref) {
    if (is.fun(ref))
      ref(value2);
    else
      ref.current = value2;
  }
  return value2;
}
var cacheKey = Symbol.for("AnimatedComponent");
var createHost = (components, {
  applyAnimatedValues: _applyAnimatedValues = () => false,
  createAnimatedStyle: _createAnimatedStyle = (style) => new AnimatedObject(style),
  getComponentProps: _getComponentProps = (props) => props
} = {}) => {
  const hostConfig = {
    applyAnimatedValues: _applyAnimatedValues,
    createAnimatedStyle: _createAnimatedStyle,
    getComponentProps: _getComponentProps
  };
  const animated2 = (Component2) => {
    const displayName = getDisplayName(Component2) || "Anonymous";
    if (is.str(Component2)) {
      Component2 = animated2[Component2] || (animated2[Component2] = withAnimated(Component2, hostConfig));
    } else {
      Component2 = Component2[cacheKey] || (Component2[cacheKey] = withAnimated(Component2, hostConfig));
    }
    Component2.displayName = `Animated(${displayName})`;
    return Component2;
  };
  eachProp(components, (Component2, key2) => {
    if (is.arr(components)) {
      key2 = getDisplayName(Component2);
    }
    animated2[key2] = animated2(Component2);
  });
  return {
    animated: animated2
  };
};
var getDisplayName = (arg) => is.str(arg) ? arg : arg && is.str(arg.displayName) ? arg.displayName : is.fun(arg) && arg.name || null;

// node_modules/@react-spring/core/dist/react-spring-core.esm.js
function _extends4() {
  _extends4 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i6 = 1; i6 < arguments.length; i6++) {
      var source = arguments[i6];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends4.apply(this, arguments);
}
function callProp(value2, ...args) {
  return is.fun(value2) ? value2(...args) : value2;
}
var matchProp = (value2, key2) => value2 === true || !!(key2 && value2 && (is.fun(value2) ? value2(key2) : toArray2(value2).includes(key2)));
var resolveProp = (prop, key2) => is.obj(prop) ? key2 && prop[key2] : prop;
var getDefaultProp = (props, key2) => props.default === true ? props[key2] : props.default ? props.default[key2] : void 0;
var noopTransform = (value2) => value2;
var getDefaultProps = (props, transform2 = noopTransform) => {
  let keys = DEFAULT_PROPS;
  if (props.default && props.default !== true) {
    props = props.default;
    keys = Object.keys(props);
  }
  const defaults2 = {};
  for (const key2 of keys) {
    const value2 = transform2(props[key2], key2);
    if (!is.und(value2)) {
      defaults2[key2] = value2;
    }
  }
  return defaults2;
};
var DEFAULT_PROPS = ["config", "onProps", "onStart", "onChange", "onPause", "onResume", "onRest"];
var RESERVED_PROPS = {
  config: 1,
  from: 1,
  to: 1,
  ref: 1,
  loop: 1,
  reset: 1,
  pause: 1,
  cancel: 1,
  reverse: 1,
  immediate: 1,
  default: 1,
  delay: 1,
  onProps: 1,
  onStart: 1,
  onChange: 1,
  onPause: 1,
  onResume: 1,
  onRest: 1,
  onResolve: 1,
  items: 1,
  trail: 1,
  sort: 1,
  expires: 1,
  initial: 1,
  enter: 1,
  update: 1,
  leave: 1,
  children: 1,
  onDestroyed: 1,
  keys: 1,
  callId: 1,
  parentId: 1
};
function getForwardProps(props) {
  const forward = {};
  let count = 0;
  eachProp(props, (value2, prop) => {
    if (!RESERVED_PROPS[prop]) {
      forward[prop] = value2;
      count++;
    }
  });
  if (count) {
    return forward;
  }
}
function inferTo(props) {
  const to2 = getForwardProps(props);
  if (to2) {
    const out = {
      to: to2
    };
    eachProp(props, (val2, key2) => key2 in to2 || (out[key2] = val2));
    return out;
  }
  return _extends4({}, props);
}
function computeGoal(value2) {
  value2 = getFluidValue(value2);
  return is.arr(value2) ? value2.map(computeGoal) : isAnimatedString(value2) ? globals.createStringInterpolator({
    range: [0, 1],
    output: [value2, value2]
  })(1) : value2;
}
function hasProps(props) {
  for (const _ in props)
    return true;
  return false;
}
function isAsyncTo(to2) {
  return is.fun(to2) || is.arr(to2) && is.obj(to2[0]);
}
function detachRefs(ctrl, ref) {
  var _ctrl$ref;
  (_ctrl$ref = ctrl.ref) == null ? void 0 : _ctrl$ref.delete(ctrl);
  ref == null ? void 0 : ref.delete(ctrl);
}
function replaceRef(ctrl, ref) {
  if (ref && ctrl.ref !== ref) {
    var _ctrl$ref2;
    (_ctrl$ref2 = ctrl.ref) == null ? void 0 : _ctrl$ref2.delete(ctrl);
    ref.add(ctrl);
    ctrl.ref = ref;
  }
}
var config = {
  default: {
    tension: 170,
    friction: 26
  },
  gentle: {
    tension: 120,
    friction: 14
  },
  wobbly: {
    tension: 180,
    friction: 12
  },
  stiff: {
    tension: 210,
    friction: 20
  },
  slow: {
    tension: 280,
    friction: 60
  },
  molasses: {
    tension: 280,
    friction: 120
  }
};
var defaults = _extends4({}, config.default, {
  mass: 1,
  damping: 1,
  easing: easings.linear,
  clamp: false
});
var AnimationConfig = class {
  constructor() {
    this.tension = void 0;
    this.friction = void 0;
    this.frequency = void 0;
    this.damping = void 0;
    this.mass = void 0;
    this.velocity = 0;
    this.restVelocity = void 0;
    this.precision = void 0;
    this.progress = void 0;
    this.duration = void 0;
    this.easing = void 0;
    this.clamp = void 0;
    this.bounce = void 0;
    this.decay = void 0;
    this.round = void 0;
    Object.assign(this, defaults);
  }
};
function mergeConfig(config3, newConfig, defaultConfig) {
  if (defaultConfig) {
    defaultConfig = _extends4({}, defaultConfig);
    sanitizeConfig(defaultConfig, newConfig);
    newConfig = _extends4({}, defaultConfig, newConfig);
  }
  sanitizeConfig(config3, newConfig);
  Object.assign(config3, newConfig);
  for (const key2 in defaults) {
    if (config3[key2] == null) {
      config3[key2] = defaults[key2];
    }
  }
  let {
    mass,
    frequency,
    damping
  } = config3;
  if (!is.und(frequency)) {
    if (frequency < 0.01)
      frequency = 0.01;
    if (damping < 0)
      damping = 0;
    config3.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;
    config3.friction = 4 * Math.PI * damping * mass / frequency;
  }
  return config3;
}
function sanitizeConfig(config3, props) {
  if (!is.und(props.decay)) {
    config3.duration = void 0;
  } else {
    const isTensionConfig = !is.und(props.tension) || !is.und(props.friction);
    if (isTensionConfig || !is.und(props.frequency) || !is.und(props.damping) || !is.und(props.mass)) {
      config3.duration = void 0;
      config3.decay = void 0;
    }
    if (isTensionConfig) {
      config3.frequency = void 0;
    }
  }
}
var emptyArray = [];
var Animation = class {
  constructor() {
    this.changed = false;
    this.values = emptyArray;
    this.toValues = null;
    this.fromValues = emptyArray;
    this.to = void 0;
    this.from = void 0;
    this.config = new AnimationConfig();
    this.immediate = false;
  }
};
function scheduleProps(callId, {
  key: key2,
  props,
  defaultProps: defaultProps104,
  state,
  actions
}) {
  return new Promise((resolve, reject) => {
    var _props$cancel;
    let delay;
    let timeout2;
    let cancel = matchProp((_props$cancel = props.cancel) != null ? _props$cancel : defaultProps104 == null ? void 0 : defaultProps104.cancel, key2);
    if (cancel) {
      onStart();
    } else {
      if (!is.und(props.pause)) {
        state.paused = matchProp(props.pause, key2);
      }
      let pause = defaultProps104 == null ? void 0 : defaultProps104.pause;
      if (pause !== true) {
        pause = state.paused || matchProp(pause, key2);
      }
      delay = callProp(props.delay || 0, key2);
      if (pause) {
        state.resumeQueue.add(onResume);
        actions.pause();
      } else {
        actions.resume();
        onResume();
      }
    }
    function onPause() {
      state.resumeQueue.add(onResume);
      state.timeouts.delete(timeout2);
      timeout2.cancel();
      delay = timeout2.time - raf.now();
    }
    function onResume() {
      if (delay > 0 && !globals.skipAnimation) {
        state.delayed = true;
        timeout2 = raf.setTimeout(onStart, delay);
        state.pauseQueue.add(onPause);
        state.timeouts.add(timeout2);
      } else {
        onStart();
      }
    }
    function onStart() {
      if (state.delayed) {
        state.delayed = false;
      }
      state.pauseQueue.delete(onPause);
      state.timeouts.delete(timeout2);
      if (callId <= (state.cancelId || 0)) {
        cancel = true;
      }
      try {
        actions.start(_extends4({}, props, {
          callId,
          cancel
        }), resolve);
      } catch (err) {
        reject(err);
      }
    }
  });
}
var getCombinedResult = (target, results) => results.length == 1 ? results[0] : results.some((result) => result.cancelled) ? getCancelledResult(target.get()) : results.every((result) => result.noop) ? getNoopResult(target.get()) : getFinishedResult(target.get(), results.every((result) => result.finished));
var getNoopResult = (value2) => ({
  value: value2,
  noop: true,
  finished: true,
  cancelled: false
});
var getFinishedResult = (value2, finished, cancelled = false) => ({
  value: value2,
  finished,
  cancelled
});
var getCancelledResult = (value2) => ({
  value: value2,
  cancelled: true,
  finished: false
});
function runAsync(to2, props, state, target) {
  const {
    callId,
    parentId,
    onRest
  } = props;
  const {
    asyncTo: prevTo,
    promise: prevPromise
  } = state;
  if (!parentId && to2 === prevTo && !props.reset) {
    return prevPromise;
  }
  return state.promise = (async () => {
    state.asyncId = callId;
    state.asyncTo = to2;
    const defaultProps104 = getDefaultProps(props, (value2, key2) => key2 === "onRest" ? void 0 : value2);
    let preventBail;
    let bail;
    const bailPromise = new Promise((resolve, reject) => (preventBail = resolve, bail = reject));
    const bailIfEnded = (bailSignal) => {
      const bailResult = callId <= (state.cancelId || 0) && getCancelledResult(target) || callId !== state.asyncId && getFinishedResult(target, false);
      if (bailResult) {
        bailSignal.result = bailResult;
        bail(bailSignal);
        throw bailSignal;
      }
    };
    const animate = (arg1, arg2) => {
      const bailSignal = new BailSignal();
      const skipAnimationSignal = new SkipAnimationSignal();
      return (async () => {
        if (globals.skipAnimation) {
          stopAsync(state);
          skipAnimationSignal.result = getFinishedResult(target, false);
          bail(skipAnimationSignal);
          throw skipAnimationSignal;
        }
        bailIfEnded(bailSignal);
        const props2 = is.obj(arg1) ? _extends4({}, arg1) : _extends4({}, arg2, {
          to: arg1
        });
        props2.parentId = callId;
        eachProp(defaultProps104, (value2, key2) => {
          if (is.und(props2[key2])) {
            props2[key2] = value2;
          }
        });
        const result2 = await target.start(props2);
        bailIfEnded(bailSignal);
        if (state.paused) {
          await new Promise((resume) => {
            state.resumeQueue.add(resume);
          });
        }
        return result2;
      })();
    };
    let result;
    if (globals.skipAnimation) {
      stopAsync(state);
      return getFinishedResult(target, false);
    }
    try {
      let animating;
      if (is.arr(to2)) {
        animating = (async (queue) => {
          for (const props2 of queue) {
            await animate(props2);
          }
        })(to2);
      } else {
        animating = Promise.resolve(to2(animate, target.stop.bind(target)));
      }
      await Promise.all([animating.then(preventBail), bailPromise]);
      result = getFinishedResult(target.get(), true, false);
    } catch (err) {
      if (err instanceof BailSignal) {
        result = err.result;
      } else if (err instanceof SkipAnimationSignal) {
        result = err.result;
      } else {
        throw err;
      }
    } finally {
      if (callId == state.asyncId) {
        state.asyncId = parentId;
        state.asyncTo = parentId ? prevTo : void 0;
        state.promise = parentId ? prevPromise : void 0;
      }
    }
    if (is.fun(onRest)) {
      raf.batchedUpdates(() => {
        onRest(result, target, target.item);
      });
    }
    return result;
  })();
}
function stopAsync(state, cancelId) {
  flush(state.timeouts, (t) => t.cancel());
  state.pauseQueue.clear();
  state.resumeQueue.clear();
  state.asyncId = state.asyncTo = state.promise = void 0;
  if (cancelId)
    state.cancelId = cancelId;
}
var BailSignal = class extends Error {
  constructor() {
    super("An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise.");
    this.result = void 0;
  }
};
var SkipAnimationSignal = class extends Error {
  constructor() {
    super("SkipAnimationSignal");
    this.result = void 0;
  }
};
var isFrameValue = (value2) => value2 instanceof FrameValue;
var nextId$1 = 1;
var FrameValue = class extends FluidValue {
  constructor(...args) {
    super(...args);
    this.id = nextId$1++;
    this.key = void 0;
    this._priority = 0;
  }
  get priority() {
    return this._priority;
  }
  set priority(priority2) {
    if (this._priority != priority2) {
      this._priority = priority2;
      this._onPriorityChange(priority2);
    }
  }
  get() {
    const node = getAnimated(this);
    return node && node.getValue();
  }
  to(...args) {
    return globals.to(this, args);
  }
  interpolate(...args) {
    deprecateInterpolate();
    return globals.to(this, args);
  }
  toJSON() {
    return this.get();
  }
  observerAdded(count) {
    if (count == 1)
      this._attach();
  }
  observerRemoved(count) {
    if (count == 0)
      this._detach();
  }
  _attach() {
  }
  _detach() {
  }
  _onChange(value2, idle = false) {
    callFluidObservers(this, {
      type: "change",
      parent: this,
      value: value2,
      idle
    });
  }
  _onPriorityChange(priority2) {
    if (!this.idle) {
      frameLoop.sort(this);
    }
    callFluidObservers(this, {
      type: "priority",
      parent: this,
      priority: priority2
    });
  }
};
var $P = Symbol.for("SpringPhase");
var HAS_ANIMATED = 1;
var IS_ANIMATING = 2;
var IS_PAUSED = 4;
var hasAnimated = (target) => (target[$P] & HAS_ANIMATED) > 0;
var isAnimating = (target) => (target[$P] & IS_ANIMATING) > 0;
var isPaused = (target) => (target[$P] & IS_PAUSED) > 0;
var setActiveBit = (target, active2) => active2 ? target[$P] |= IS_ANIMATING | HAS_ANIMATED : target[$P] &= ~IS_ANIMATING;
var setPausedBit = (target, paused) => paused ? target[$P] |= IS_PAUSED : target[$P] &= ~IS_PAUSED;
var SpringValue = class extends FrameValue {
  constructor(arg1, arg2) {
    super();
    this.key = void 0;
    this.animation = new Animation();
    this.queue = void 0;
    this.defaultProps = {};
    this._state = {
      paused: false,
      delayed: false,
      pauseQueue: /* @__PURE__ */ new Set(),
      resumeQueue: /* @__PURE__ */ new Set(),
      timeouts: /* @__PURE__ */ new Set()
    };
    this._pendingCalls = /* @__PURE__ */ new Set();
    this._lastCallId = 0;
    this._lastToId = 0;
    this._memoizedDuration = 0;
    if (!is.und(arg1) || !is.und(arg2)) {
      const props = is.obj(arg1) ? _extends4({}, arg1) : _extends4({}, arg2, {
        from: arg1
      });
      if (is.und(props.default)) {
        props.default = true;
      }
      this.start(props);
    }
  }
  get idle() {
    return !(isAnimating(this) || this._state.asyncTo) || isPaused(this);
  }
  get goal() {
    return getFluidValue(this.animation.to);
  }
  get velocity() {
    const node = getAnimated(this);
    return node instanceof AnimatedValue ? node.lastVelocity || 0 : node.getPayload().map((node2) => node2.lastVelocity || 0);
  }
  get hasAnimated() {
    return hasAnimated(this);
  }
  get isAnimating() {
    return isAnimating(this);
  }
  get isPaused() {
    return isPaused(this);
  }
  get isDelayed() {
    return this._state.delayed;
  }
  advance(dt) {
    let idle = true;
    let changed = false;
    const anim = this.animation;
    let {
      config: config3,
      toValues
    } = anim;
    const payload = getPayload(anim.to);
    if (!payload && hasFluidValue(anim.to)) {
      toValues = toArray2(getFluidValue(anim.to));
    }
    anim.values.forEach((node2, i6) => {
      if (node2.done)
        return;
      const to2 = node2.constructor == AnimatedString ? 1 : payload ? payload[i6].lastPosition : toValues[i6];
      let finished = anim.immediate;
      let position2 = to2;
      if (!finished) {
        position2 = node2.lastPosition;
        if (config3.tension <= 0) {
          node2.done = true;
          return;
        }
        let elapsed = node2.elapsedTime += dt;
        const from = anim.fromValues[i6];
        const v0 = node2.v0 != null ? node2.v0 : node2.v0 = is.arr(config3.velocity) ? config3.velocity[i6] : config3.velocity;
        let velocity2;
        const precision = config3.precision || (from == to2 ? 5e-3 : Math.min(1, Math.abs(to2 - from) * 1e-3));
        if (!is.und(config3.duration)) {
          let p10 = 1;
          if (config3.duration > 0) {
            if (this._memoizedDuration !== config3.duration) {
              this._memoizedDuration = config3.duration;
              if (node2.durationProgress > 0) {
                node2.elapsedTime = config3.duration * node2.durationProgress;
                elapsed = node2.elapsedTime += dt;
              }
            }
            p10 = (config3.progress || 0) + elapsed / this._memoizedDuration;
            p10 = p10 > 1 ? 1 : p10 < 0 ? 0 : p10;
            node2.durationProgress = p10;
          }
          position2 = from + config3.easing(p10) * (to2 - from);
          velocity2 = (position2 - node2.lastPosition) / dt;
          finished = p10 == 1;
        } else if (config3.decay) {
          const decay = config3.decay === true ? 0.998 : config3.decay;
          const e2 = Math.exp(-(1 - decay) * elapsed);
          position2 = from + v0 / (1 - decay) * (1 - e2);
          finished = Math.abs(node2.lastPosition - position2) <= precision;
          velocity2 = v0 * e2;
        } else {
          velocity2 = node2.lastVelocity == null ? v0 : node2.lastVelocity;
          const restVelocity = config3.restVelocity || precision / 10;
          const bounceFactor = config3.clamp ? 0 : config3.bounce;
          const canBounce = !is.und(bounceFactor);
          const isGrowing = from == to2 ? node2.v0 > 0 : from < to2;
          let isMoving;
          let isBouncing = false;
          const step = 1;
          const numSteps = Math.ceil(dt / step);
          for (let n38 = 0; n38 < numSteps; ++n38) {
            isMoving = Math.abs(velocity2) > restVelocity;
            if (!isMoving) {
              finished = Math.abs(to2 - position2) <= precision;
              if (finished) {
                break;
              }
            }
            if (canBounce) {
              isBouncing = position2 == to2 || position2 > to2 == isGrowing;
              if (isBouncing) {
                velocity2 = -velocity2 * bounceFactor;
                position2 = to2;
              }
            }
            const springForce = -config3.tension * 1e-6 * (position2 - to2);
            const dampingForce = -config3.friction * 1e-3 * velocity2;
            const acceleration = (springForce + dampingForce) / config3.mass;
            velocity2 = velocity2 + acceleration * step;
            position2 = position2 + velocity2 * step;
          }
        }
        node2.lastVelocity = velocity2;
        if (Number.isNaN(position2)) {
          console.warn(`Got NaN while animating:`, this);
          finished = true;
        }
      }
      if (payload && !payload[i6].done) {
        finished = false;
      }
      if (finished) {
        node2.done = true;
      } else {
        idle = false;
      }
      if (node2.setValue(position2, config3.round)) {
        changed = true;
      }
    });
    const node = getAnimated(this);
    const currVal = node.getValue();
    if (idle) {
      const finalVal = getFluidValue(anim.to);
      if ((currVal !== finalVal || changed) && !config3.decay) {
        node.setValue(finalVal);
        this._onChange(finalVal);
      } else if (changed && config3.decay) {
        this._onChange(currVal);
      }
      this._stop();
    } else if (changed) {
      this._onChange(currVal);
    }
  }
  set(value2) {
    raf.batchedUpdates(() => {
      this._stop();
      this._focus(value2);
      this._set(value2);
    });
    return this;
  }
  pause() {
    this._update({
      pause: true
    });
  }
  resume() {
    this._update({
      pause: false
    });
  }
  finish() {
    if (isAnimating(this)) {
      const {
        to: to2,
        config: config3
      } = this.animation;
      raf.batchedUpdates(() => {
        this._onStart();
        if (!config3.decay) {
          this._set(to2, false);
        }
        this._stop();
      });
    }
    return this;
  }
  update(props) {
    const queue = this.queue || (this.queue = []);
    queue.push(props);
    return this;
  }
  start(to2, arg2) {
    let queue;
    if (!is.und(to2)) {
      queue = [is.obj(to2) ? to2 : _extends4({}, arg2, {
        to: to2
      })];
    } else {
      queue = this.queue || [];
      this.queue = [];
    }
    return Promise.all(queue.map((props) => {
      const up = this._update(props);
      return up;
    })).then((results) => getCombinedResult(this, results));
  }
  stop(cancel) {
    const {
      to: to2
    } = this.animation;
    this._focus(this.get());
    stopAsync(this._state, cancel && this._lastCallId);
    raf.batchedUpdates(() => this._stop(to2, cancel));
    return this;
  }
  reset() {
    this._update({
      reset: true
    });
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._start();
    } else if (event.type == "priority") {
      this.priority = event.priority + 1;
    }
  }
  _prepareNode(props) {
    const key2 = this.key || "";
    let {
      to: to2,
      from
    } = props;
    to2 = is.obj(to2) ? to2[key2] : to2;
    if (to2 == null || isAsyncTo(to2)) {
      to2 = void 0;
    }
    from = is.obj(from) ? from[key2] : from;
    if (from == null) {
      from = void 0;
    }
    const range3 = {
      to: to2,
      from
    };
    if (!hasAnimated(this)) {
      if (props.reverse)
        [to2, from] = [from, to2];
      from = getFluidValue(from);
      if (!is.und(from)) {
        this._set(from);
      } else if (!getAnimated(this)) {
        this._set(to2);
      }
    }
    return range3;
  }
  _update(_ref, isLoop) {
    let props = _extends4({}, _ref);
    const {
      key: key2,
      defaultProps: defaultProps104
    } = this;
    if (props.default)
      Object.assign(defaultProps104, getDefaultProps(props, (value2, prop) => /^on/.test(prop) ? resolveProp(value2, key2) : value2));
    mergeActiveFn(this, props, "onProps");
    sendEvent(this, "onProps", props, this);
    const range3 = this._prepareNode(props);
    if (Object.isFrozen(this)) {
      throw Error("Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?");
    }
    const state = this._state;
    return scheduleProps(++this._lastCallId, {
      key: key2,
      props,
      defaultProps: defaultProps104,
      state,
      actions: {
        pause: () => {
          if (!isPaused(this)) {
            setPausedBit(this, true);
            flushCalls(state.pauseQueue);
            sendEvent(this, "onPause", getFinishedResult(this, checkFinished(this, this.animation.to)), this);
          }
        },
        resume: () => {
          if (isPaused(this)) {
            setPausedBit(this, false);
            if (isAnimating(this)) {
              this._resume();
            }
            flushCalls(state.resumeQueue);
            sendEvent(this, "onResume", getFinishedResult(this, checkFinished(this, this.animation.to)), this);
          }
        },
        start: this._merge.bind(this, range3)
      }
    }).then((result) => {
      if (props.loop && result.finished && !(isLoop && result.noop)) {
        const nextProps = createLoopUpdate(props);
        if (nextProps) {
          return this._update(nextProps, true);
        }
      }
      return result;
    });
  }
  _merge(range3, props, resolve) {
    if (props.cancel) {
      this.stop(true);
      return resolve(getCancelledResult(this));
    }
    const hasToProp = !is.und(range3.to);
    const hasFromProp = !is.und(range3.from);
    if (hasToProp || hasFromProp) {
      if (props.callId > this._lastToId) {
        this._lastToId = props.callId;
      } else {
        return resolve(getCancelledResult(this));
      }
    }
    const {
      key: key2,
      defaultProps: defaultProps104,
      animation: anim
    } = this;
    const {
      to: prevTo,
      from: prevFrom
    } = anim;
    let {
      to: to2 = prevTo,
      from = prevFrom
    } = range3;
    if (hasFromProp && !hasToProp && (!props.default || is.und(to2))) {
      to2 = from;
    }
    if (props.reverse)
      [to2, from] = [from, to2];
    const hasFromChanged = !isEqual3(from, prevFrom);
    if (hasFromChanged) {
      anim.from = from;
    }
    from = getFluidValue(from);
    const hasToChanged = !isEqual3(to2, prevTo);
    if (hasToChanged) {
      this._focus(to2);
    }
    const hasAsyncTo = isAsyncTo(props.to);
    const {
      config: config3
    } = anim;
    const {
      decay,
      velocity: velocity2
    } = config3;
    if (hasToProp || hasFromProp) {
      config3.velocity = 0;
    }
    if (props.config && !hasAsyncTo) {
      mergeConfig(config3, callProp(props.config, key2), props.config !== defaultProps104.config ? callProp(defaultProps104.config, key2) : void 0);
    }
    let node = getAnimated(this);
    if (!node || is.und(to2)) {
      return resolve(getFinishedResult(this, true));
    }
    const reset = is.und(props.reset) ? hasFromProp && !props.default : !is.und(from) && matchProp(props.reset, key2);
    const value2 = reset ? from : this.get();
    const goal = computeGoal(to2);
    const isAnimatable = is.num(goal) || is.arr(goal) || isAnimatedString(goal);
    const immediate = !hasAsyncTo && (!isAnimatable || matchProp(defaultProps104.immediate || props.immediate, key2));
    if (hasToChanged) {
      const nodeType = getAnimatedType(to2);
      if (nodeType !== node.constructor) {
        if (immediate) {
          node = this._set(goal);
        } else
          throw Error(`Cannot animate between ${node.constructor.name} and ${nodeType.name}, as the "to" prop suggests`);
      }
    }
    const goalType = node.constructor;
    let started = hasFluidValue(to2);
    let finished = false;
    if (!started) {
      const hasValueChanged = reset || !hasAnimated(this) && hasFromChanged;
      if (hasToChanged || hasValueChanged) {
        finished = isEqual3(computeGoal(value2), goal);
        started = !finished;
      }
      if (!isEqual3(anim.immediate, immediate) && !immediate || !isEqual3(config3.decay, decay) || !isEqual3(config3.velocity, velocity2)) {
        started = true;
      }
    }
    if (finished && isAnimating(this)) {
      if (anim.changed && !reset) {
        started = true;
      } else if (!started) {
        this._stop(prevTo);
      }
    }
    if (!hasAsyncTo) {
      if (started || hasFluidValue(prevTo)) {
        anim.values = node.getPayload();
        anim.toValues = hasFluidValue(to2) ? null : goalType == AnimatedString ? [1] : toArray2(goal);
      }
      if (anim.immediate != immediate) {
        anim.immediate = immediate;
        if (!immediate && !reset) {
          this._set(prevTo);
        }
      }
      if (started) {
        const {
          onRest
        } = anim;
        each(ACTIVE_EVENTS, (type4) => mergeActiveFn(this, props, type4));
        const result = getFinishedResult(this, checkFinished(this, prevTo));
        flushCalls(this._pendingCalls, result);
        this._pendingCalls.add(resolve);
        if (anim.changed)
          raf.batchedUpdates(() => {
            anim.changed = !reset;
            onRest == null ? void 0 : onRest(result, this);
            if (reset) {
              callProp(defaultProps104.onRest, result);
            } else {
              anim.onStart == null ? void 0 : anim.onStart(result, this);
            }
          });
      }
    }
    if (reset) {
      this._set(value2);
    }
    if (hasAsyncTo) {
      resolve(runAsync(props.to, props, this._state, this));
    } else if (started) {
      this._start();
    } else if (isAnimating(this) && !hasToChanged) {
      this._pendingCalls.add(resolve);
    } else {
      resolve(getNoopResult(value2));
    }
  }
  _focus(value2) {
    const anim = this.animation;
    if (value2 !== anim.to) {
      if (getFluidObservers(this)) {
        this._detach();
      }
      anim.to = value2;
      if (getFluidObservers(this)) {
        this._attach();
      }
    }
  }
  _attach() {
    let priority2 = 0;
    const {
      to: to2
    } = this.animation;
    if (hasFluidValue(to2)) {
      addFluidObserver(to2, this);
      if (isFrameValue(to2)) {
        priority2 = to2.priority + 1;
      }
    }
    this.priority = priority2;
  }
  _detach() {
    const {
      to: to2
    } = this.animation;
    if (hasFluidValue(to2)) {
      removeFluidObserver(to2, this);
    }
  }
  _set(arg, idle = true) {
    const value2 = getFluidValue(arg);
    if (!is.und(value2)) {
      const oldNode = getAnimated(this);
      if (!oldNode || !isEqual3(value2, oldNode.getValue())) {
        const nodeType = getAnimatedType(value2);
        if (!oldNode || oldNode.constructor != nodeType) {
          setAnimated(this, nodeType.create(value2));
        } else {
          oldNode.setValue(value2);
        }
        if (oldNode) {
          raf.batchedUpdates(() => {
            this._onChange(value2, idle);
          });
        }
      }
    }
    return getAnimated(this);
  }
  _onStart() {
    const anim = this.animation;
    if (!anim.changed) {
      anim.changed = true;
      sendEvent(this, "onStart", getFinishedResult(this, checkFinished(this, anim.to)), this);
    }
  }
  _onChange(value2, idle) {
    if (!idle) {
      this._onStart();
      callProp(this.animation.onChange, value2, this);
    }
    callProp(this.defaultProps.onChange, value2, this);
    super._onChange(value2, idle);
  }
  _start() {
    const anim = this.animation;
    getAnimated(this).reset(getFluidValue(anim.to));
    if (!anim.immediate) {
      anim.fromValues = anim.values.map((node) => node.lastPosition);
    }
    if (!isAnimating(this)) {
      setActiveBit(this, true);
      if (!isPaused(this)) {
        this._resume();
      }
    }
  }
  _resume() {
    if (globals.skipAnimation) {
      this.finish();
    } else {
      frameLoop.start(this);
    }
  }
  _stop(goal, cancel) {
    if (isAnimating(this)) {
      setActiveBit(this, false);
      const anim = this.animation;
      each(anim.values, (node) => {
        node.done = true;
      });
      if (anim.toValues) {
        anim.onChange = anim.onPause = anim.onResume = void 0;
      }
      callFluidObservers(this, {
        type: "idle",
        parent: this
      });
      const result = cancel ? getCancelledResult(this.get()) : getFinishedResult(this.get(), checkFinished(this, goal != null ? goal : anim.to));
      flushCalls(this._pendingCalls, result);
      if (anim.changed) {
        anim.changed = false;
        sendEvent(this, "onRest", result, this);
      }
    }
  }
};
function checkFinished(target, to2) {
  const goal = computeGoal(to2);
  const value2 = computeGoal(target.get());
  return isEqual3(value2, goal);
}
function createLoopUpdate(props, loop2 = props.loop, to2 = props.to) {
  let loopRet = callProp(loop2);
  if (loopRet) {
    const overrides = loopRet !== true && inferTo(loopRet);
    const reverse = (overrides || props).reverse;
    const reset = !overrides || overrides.reset;
    return createUpdate(_extends4({}, props, {
      loop: loop2,
      default: false,
      pause: void 0,
      to: !reverse || isAsyncTo(to2) ? to2 : void 0,
      from: reset ? props.from : void 0,
      reset
    }, overrides));
  }
}
function createUpdate(props) {
  const {
    to: to2,
    from
  } = props = inferTo(props);
  const keys = /* @__PURE__ */ new Set();
  if (is.obj(to2))
    findDefined(to2, keys);
  if (is.obj(from))
    findDefined(from, keys);
  props.keys = keys.size ? Array.from(keys) : null;
  return props;
}
function declareUpdate(props) {
  const update3 = createUpdate(props);
  if (is.und(update3.default)) {
    update3.default = getDefaultProps(update3);
  }
  return update3;
}
function findDefined(values2, keys) {
  eachProp(values2, (value2, key2) => value2 != null && keys.add(key2));
}
var ACTIVE_EVENTS = ["onStart", "onRest", "onChange", "onPause", "onResume"];
function mergeActiveFn(target, props, type4) {
  target.animation[type4] = props[type4] !== getDefaultProp(props, type4) ? resolveProp(props[type4], target.key) : void 0;
}
function sendEvent(target, type4, ...args) {
  var _target$animation$typ, _target$animation, _target$defaultProps$, _target$defaultProps;
  (_target$animation$typ = (_target$animation = target.animation)[type4]) == null ? void 0 : _target$animation$typ.call(_target$animation, ...args);
  (_target$defaultProps$ = (_target$defaultProps = target.defaultProps)[type4]) == null ? void 0 : _target$defaultProps$.call(_target$defaultProps, ...args);
}
var BATCHED_EVENTS = ["onStart", "onChange", "onRest"];
var nextId = 1;
var Controller2 = class {
  constructor(props, flush2) {
    this.id = nextId++;
    this.springs = {};
    this.queue = [];
    this.ref = void 0;
    this._flush = void 0;
    this._initialProps = void 0;
    this._lastAsyncId = 0;
    this._active = /* @__PURE__ */ new Set();
    this._changed = /* @__PURE__ */ new Set();
    this._started = false;
    this._item = void 0;
    this._state = {
      paused: false,
      pauseQueue: /* @__PURE__ */ new Set(),
      resumeQueue: /* @__PURE__ */ new Set(),
      timeouts: /* @__PURE__ */ new Set()
    };
    this._events = {
      onStart: /* @__PURE__ */ new Map(),
      onChange: /* @__PURE__ */ new Map(),
      onRest: /* @__PURE__ */ new Map()
    };
    this._onFrame = this._onFrame.bind(this);
    if (flush2) {
      this._flush = flush2;
    }
    if (props) {
      this.start(_extends4({
        default: true
      }, props));
    }
  }
  get idle() {
    return !this._state.asyncTo && Object.values(this.springs).every((spring) => {
      return spring.idle && !spring.isDelayed && !spring.isPaused;
    });
  }
  get item() {
    return this._item;
  }
  set item(item) {
    this._item = item;
  }
  get() {
    const values2 = {};
    this.each((spring, key2) => values2[key2] = spring.get());
    return values2;
  }
  set(values2) {
    for (const key2 in values2) {
      const value2 = values2[key2];
      if (!is.und(value2)) {
        this.springs[key2].set(value2);
      }
    }
  }
  update(props) {
    if (props) {
      this.queue.push(createUpdate(props));
    }
    return this;
  }
  start(props) {
    let {
      queue
    } = this;
    if (props) {
      queue = toArray2(props).map(createUpdate);
    } else {
      this.queue = [];
    }
    if (this._flush) {
      return this._flush(this, queue);
    }
    prepareKeys(this, queue);
    return flushUpdateQueue(this, queue);
  }
  stop(arg, keys) {
    if (arg !== !!arg) {
      keys = arg;
    }
    if (keys) {
      const springs = this.springs;
      each(toArray2(keys), (key2) => springs[key2].stop(!!arg));
    } else {
      stopAsync(this._state, this._lastAsyncId);
      this.each((spring) => spring.stop(!!arg));
    }
    return this;
  }
  pause(keys) {
    if (is.und(keys)) {
      this.start({
        pause: true
      });
    } else {
      const springs = this.springs;
      each(toArray2(keys), (key2) => springs[key2].pause());
    }
    return this;
  }
  resume(keys) {
    if (is.und(keys)) {
      this.start({
        pause: false
      });
    } else {
      const springs = this.springs;
      each(toArray2(keys), (key2) => springs[key2].resume());
    }
    return this;
  }
  each(iterator) {
    eachProp(this.springs, iterator);
  }
  _onFrame() {
    const {
      onStart,
      onChange,
      onRest
    } = this._events;
    const active2 = this._active.size > 0;
    const changed = this._changed.size > 0;
    if (active2 && !this._started || changed && !this._started) {
      this._started = true;
      flush(onStart, ([onStart2, result]) => {
        result.value = this.get();
        onStart2(result, this, this._item);
      });
    }
    const idle = !active2 && this._started;
    const values2 = changed || idle && onRest.size ? this.get() : null;
    if (changed && onChange.size) {
      flush(onChange, ([onChange2, result]) => {
        result.value = values2;
        onChange2(result, this, this._item);
      });
    }
    if (idle) {
      this._started = false;
      flush(onRest, ([onRest2, result]) => {
        result.value = values2;
        onRest2(result, this, this._item);
      });
    }
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._changed.add(event.parent);
      if (!event.idle) {
        this._active.add(event.parent);
      }
    } else if (event.type == "idle") {
      this._active.delete(event.parent);
    } else
      return;
    raf.onFrame(this._onFrame);
  }
};
function flushUpdateQueue(ctrl, queue) {
  return Promise.all(queue.map((props) => flushUpdate(ctrl, props))).then((results) => getCombinedResult(ctrl, results));
}
async function flushUpdate(ctrl, props, isLoop) {
  const {
    keys,
    to: to2,
    from,
    loop: loop2,
    onRest,
    onResolve
  } = props;
  const defaults2 = is.obj(props.default) && props.default;
  if (loop2) {
    props.loop = false;
  }
  if (to2 === false)
    props.to = null;
  if (from === false)
    props.from = null;
  const asyncTo = is.arr(to2) || is.fun(to2) ? to2 : void 0;
  if (asyncTo) {
    props.to = void 0;
    props.onRest = void 0;
    if (defaults2) {
      defaults2.onRest = void 0;
    }
  } else {
    each(BATCHED_EVENTS, (key2) => {
      const handler = props[key2];
      if (is.fun(handler)) {
        const queue = ctrl["_events"][key2];
        props[key2] = ({
          finished,
          cancelled
        }) => {
          const result2 = queue.get(handler);
          if (result2) {
            if (!finished)
              result2.finished = false;
            if (cancelled)
              result2.cancelled = true;
          } else {
            queue.set(handler, {
              value: null,
              finished: finished || false,
              cancelled: cancelled || false
            });
          }
        };
        if (defaults2) {
          defaults2[key2] = props[key2];
        }
      }
    });
  }
  const state = ctrl["_state"];
  if (props.pause === !state.paused) {
    state.paused = props.pause;
    flushCalls(props.pause ? state.pauseQueue : state.resumeQueue);
  } else if (state.paused) {
    props.pause = true;
  }
  const promises = (keys || Object.keys(ctrl.springs)).map((key2) => ctrl.springs[key2].start(props));
  const cancel = props.cancel === true || getDefaultProp(props, "cancel") === true;
  if (asyncTo || cancel && state.asyncId) {
    promises.push(scheduleProps(++ctrl["_lastAsyncId"], {
      props,
      state,
      actions: {
        pause: noop3,
        resume: noop3,
        start(props2, resolve) {
          if (cancel) {
            stopAsync(state, ctrl["_lastAsyncId"]);
            resolve(getCancelledResult(ctrl));
          } else {
            props2.onRest = onRest;
            resolve(runAsync(asyncTo, props2, state, ctrl));
          }
        }
      }
    }));
  }
  if (state.paused) {
    await new Promise((resume) => {
      state.resumeQueue.add(resume);
    });
  }
  const result = getCombinedResult(ctrl, await Promise.all(promises));
  if (loop2 && result.finished && !(isLoop && result.noop)) {
    const nextProps = createLoopUpdate(props, loop2, to2);
    if (nextProps) {
      prepareKeys(ctrl, [nextProps]);
      return flushUpdate(ctrl, nextProps, true);
    }
  }
  if (onResolve) {
    raf.batchedUpdates(() => onResolve(result, ctrl, ctrl.item));
  }
  return result;
}
function getSprings(ctrl, props) {
  const springs = _extends4({}, ctrl.springs);
  if (props) {
    each(toArray2(props), (props2) => {
      if (is.und(props2.keys)) {
        props2 = createUpdate(props2);
      }
      if (!is.obj(props2.to)) {
        props2 = _extends4({}, props2, {
          to: void 0
        });
      }
      prepareSprings(springs, props2, (key2) => {
        return createSpring(key2);
      });
    });
  }
  setSprings(ctrl, springs);
  return springs;
}
function setSprings(ctrl, springs) {
  eachProp(springs, (spring, key2) => {
    if (!ctrl.springs[key2]) {
      ctrl.springs[key2] = spring;
      addFluidObserver(spring, ctrl);
    }
  });
}
function createSpring(key2, observer) {
  const spring = new SpringValue();
  spring.key = key2;
  if (observer) {
    addFluidObserver(spring, observer);
  }
  return spring;
}
function prepareSprings(springs, props, create) {
  if (props.keys) {
    each(props.keys, (key2) => {
      const spring = springs[key2] || (springs[key2] = create(key2));
      spring["_prepareNode"](props);
    });
  }
}
function prepareKeys(ctrl, queue) {
  each(queue, (props) => {
    prepareSprings(ctrl.springs, props, (key2) => {
      return createSpring(key2, ctrl);
    });
  });
}
function _objectWithoutPropertiesLoose3(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key2, i6;
  for (i6 = 0; i6 < sourceKeys.length; i6++) {
    key2 = sourceKeys[i6];
    if (excluded.indexOf(key2) >= 0)
      continue;
    target[key2] = source[key2];
  }
  return target;
}
var _excluded$6 = ["children"];
var SpringContext = (_ref) => {
  let {
    children: children2
  } = _ref, props = _objectWithoutPropertiesLoose3(_ref, _excluded$6);
  const inherited = (0, import_react153.useContext)(ctx);
  const pause = props.pause || !!inherited.pause, immediate = props.immediate || !!inherited.immediate;
  props = useMemoOne(() => ({
    pause,
    immediate
  }), [pause, immediate]);
  const {
    Provider
  } = ctx;
  return React32.createElement(Provider, {
    value: props
  }, children2);
};
var ctx = makeContext(SpringContext, {});
SpringContext.Provider = ctx.Provider;
SpringContext.Consumer = ctx.Consumer;
function makeContext(target, init) {
  Object.assign(target, React32.createContext(init));
  target.Provider._context = target;
  target.Consumer._context = target;
  return target;
}
var SpringRef = () => {
  const current = [];
  const SpringRef2 = function SpringRef3(props) {
    deprecateDirectCall();
    const results = [];
    each(current, (ctrl, i6) => {
      if (is.und(props)) {
        results.push(ctrl.start());
      } else {
        const update3 = _getProps(props, ctrl, i6);
        if (update3) {
          results.push(ctrl.start(update3));
        }
      }
    });
    return results;
  };
  SpringRef2.current = current;
  SpringRef2.add = function(ctrl) {
    if (!current.includes(ctrl)) {
      current.push(ctrl);
    }
  };
  SpringRef2.delete = function(ctrl) {
    const i6 = current.indexOf(ctrl);
    if (~i6)
      current.splice(i6, 1);
  };
  SpringRef2.pause = function() {
    each(current, (ctrl) => ctrl.pause(...arguments));
    return this;
  };
  SpringRef2.resume = function() {
    each(current, (ctrl) => ctrl.resume(...arguments));
    return this;
  };
  SpringRef2.set = function(values2) {
    each(current, (ctrl) => ctrl.set(values2));
  };
  SpringRef2.start = function(props) {
    const results = [];
    each(current, (ctrl, i6) => {
      if (is.und(props)) {
        results.push(ctrl.start());
      } else {
        const update3 = this._getProps(props, ctrl, i6);
        if (update3) {
          results.push(ctrl.start(update3));
        }
      }
    });
    return results;
  };
  SpringRef2.stop = function() {
    each(current, (ctrl) => ctrl.stop(...arguments));
    return this;
  };
  SpringRef2.update = function(props) {
    each(current, (ctrl, i6) => ctrl.update(this._getProps(props, ctrl, i6)));
    return this;
  };
  const _getProps = function _getProps2(arg, ctrl, index2) {
    return is.fun(arg) ? arg(index2, ctrl) : arg;
  };
  SpringRef2._getProps = _getProps;
  return SpringRef2;
};
function useSprings(length2, props, deps) {
  const propsFn = is.fun(props) && props;
  if (propsFn && !deps)
    deps = [];
  const ref = (0, import_react153.useMemo)(() => propsFn || arguments.length == 3 ? SpringRef() : void 0, []);
  const layoutId = (0, import_react153.useRef)(0);
  const forceUpdate = useForceUpdate();
  const state = (0, import_react153.useMemo)(() => ({
    ctrls: [],
    queue: [],
    flush(ctrl, updates2) {
      const springs2 = getSprings(ctrl, updates2);
      const canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs2).some((key2) => !ctrl.springs[key2]);
      return canFlushSync ? flushUpdateQueue(ctrl, updates2) : new Promise((resolve) => {
        setSprings(ctrl, springs2);
        state.queue.push(() => {
          resolve(flushUpdateQueue(ctrl, updates2));
        });
        forceUpdate();
      });
    }
  }), []);
  const ctrls = (0, import_react153.useRef)([...state.ctrls]);
  const updates = [];
  const prevLength = usePrev(length2) || 0;
  (0, import_react153.useMemo)(() => {
    each(ctrls.current.slice(length2, prevLength), (ctrl) => {
      detachRefs(ctrl, ref);
      ctrl.stop(true);
    });
    ctrls.current.length = length2;
    declareUpdates(prevLength, length2);
  }, [length2]);
  (0, import_react153.useMemo)(() => {
    declareUpdates(0, Math.min(prevLength, length2));
  }, deps);
  function declareUpdates(startIndex, endIndex) {
    for (let i6 = startIndex; i6 < endIndex; i6++) {
      const ctrl = ctrls.current[i6] || (ctrls.current[i6] = new Controller2(null, state.flush));
      const update3 = propsFn ? propsFn(i6, ctrl) : props[i6];
      if (update3) {
        updates[i6] = declareUpdate(update3);
      }
    }
  }
  const springs = ctrls.current.map((ctrl, i6) => getSprings(ctrl, updates[i6]));
  const context2 = (0, import_react153.useContext)(SpringContext);
  const prevContext = usePrev(context2);
  const hasContext = context2 !== prevContext && hasProps(context2);
  useIsomorphicLayoutEffect(() => {
    layoutId.current++;
    state.ctrls = ctrls.current;
    const {
      queue
    } = state;
    if (queue.length) {
      state.queue = [];
      each(queue, (cb) => cb());
    }
    each(ctrls.current, (ctrl, i6) => {
      ref == null ? void 0 : ref.add(ctrl);
      if (hasContext) {
        ctrl.start({
          default: context2
        });
      }
      const update3 = updates[i6];
      if (update3) {
        replaceRef(ctrl, update3.ref);
        if (ctrl.ref) {
          ctrl.queue.push(update3);
        } else {
          ctrl.start(update3);
        }
      }
    });
  });
  useOnce(() => () => {
    each(state.ctrls, (ctrl) => ctrl.stop(true));
  });
  const values2 = springs.map((x2) => _extends4({}, x2));
  return ref ? [values2, ref] : values2;
}
function useSpring(props, deps) {
  const isFn = is.fun(props);
  const [[values2], ref] = useSprings(1, isFn ? props : [props], isFn ? deps || [] : deps);
  return isFn || arguments.length == 2 ? [values2, ref] : values2;
}
var TransitionPhase;
(function(TransitionPhase2) {
  TransitionPhase2["MOUNT"] = "mount";
  TransitionPhase2["ENTER"] = "enter";
  TransitionPhase2["UPDATE"] = "update";
  TransitionPhase2["LEAVE"] = "leave";
})(TransitionPhase || (TransitionPhase = {}));
var Interpolation = class extends FrameValue {
  constructor(source, args) {
    super();
    this.key = void 0;
    this.idle = true;
    this.calc = void 0;
    this._active = /* @__PURE__ */ new Set();
    this.source = source;
    this.calc = createInterpolator(...args);
    const value2 = this._get();
    const nodeType = getAnimatedType(value2);
    setAnimated(this, nodeType.create(value2));
  }
  advance(_dt) {
    const value2 = this._get();
    const oldValue = this.get();
    if (!isEqual3(value2, oldValue)) {
      getAnimated(this).setValue(value2);
      this._onChange(value2, this.idle);
    }
    if (!this.idle && checkIdle(this._active)) {
      becomeIdle(this);
    }
  }
  _get() {
    const inputs = is.arr(this.source) ? this.source.map(getFluidValue) : toArray2(getFluidValue(this.source));
    return this.calc(...inputs);
  }
  _start() {
    if (this.idle && !checkIdle(this._active)) {
      this.idle = false;
      each(getPayload(this), (node) => {
        node.done = false;
      });
      if (globals.skipAnimation) {
        raf.batchedUpdates(() => this.advance());
        becomeIdle(this);
      } else {
        frameLoop.start(this);
      }
    }
  }
  _attach() {
    let priority2 = 1;
    each(toArray2(this.source), (source) => {
      if (hasFluidValue(source)) {
        addFluidObserver(source, this);
      }
      if (isFrameValue(source)) {
        if (!source.idle) {
          this._active.add(source);
        }
        priority2 = Math.max(priority2, source.priority + 1);
      }
    });
    this.priority = priority2;
    this._start();
  }
  _detach() {
    each(toArray2(this.source), (source) => {
      if (hasFluidValue(source)) {
        removeFluidObserver(source, this);
      }
    });
    this._active.clear();
    becomeIdle(this);
  }
  eventObserved(event) {
    if (event.type == "change") {
      if (event.idle) {
        this.advance();
      } else {
        this._active.add(event.parent);
        this._start();
      }
    } else if (event.type == "idle") {
      this._active.delete(event.parent);
    } else if (event.type == "priority") {
      this.priority = toArray2(this.source).reduce((highest, parent2) => Math.max(highest, (isFrameValue(parent2) ? parent2.priority : 0) + 1), 0);
    }
  }
};
function isIdle(source) {
  return source.idle !== false;
}
function checkIdle(active2) {
  return !active2.size || Array.from(active2).every(isIdle);
}
function becomeIdle(self2) {
  if (!self2.idle) {
    self2.idle = true;
    each(getPayload(self2), (node) => {
      node.done = true;
    });
    callFluidObservers(self2, {
      type: "idle",
      parent: self2
    });
  }
}
globals.assign({
  createStringInterpolator,
  to: (source, args) => new Interpolation(source, args)
});
var update2 = frameLoop.advance;

// node_modules/@react-spring/web/dist/react-spring-web.esm.js
var import_react_dom3 = __toESM(require_react_dom());
function _objectWithoutPropertiesLoose4(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key2, i6;
  for (i6 = 0; i6 < sourceKeys.length; i6++) {
    key2 = sourceKeys[i6];
    if (excluded.indexOf(key2) >= 0)
      continue;
    target[key2] = source[key2];
  }
  return target;
}
var _excluded$2 = ["style", "children", "scrollTop", "scrollLeft", "viewBox"];
var isCustomPropRE = /^--/;
function dangerousStyleValue(name2, value2) {
  if (value2 == null || typeof value2 === "boolean" || value2 === "")
    return "";
  if (typeof value2 === "number" && value2 !== 0 && !isCustomPropRE.test(name2) && !(isUnitlessNumber.hasOwnProperty(name2) && isUnitlessNumber[name2]))
    return value2 + "px";
  return ("" + value2).trim();
}
var attributeCache = {};
function applyAnimatedValues(instance, props) {
  if (!instance.nodeType || !instance.setAttribute) {
    return false;
  }
  const isFilterElement = instance.nodeName === "filter" || instance.parentNode && instance.parentNode.nodeName === "filter";
  const _ref = props, {
    style,
    children: children2,
    scrollTop,
    scrollLeft,
    viewBox
  } = _ref, attributes = _objectWithoutPropertiesLoose4(_ref, _excluded$2);
  const values2 = Object.values(attributes);
  const names = Object.keys(attributes).map((name2) => isFilterElement || instance.hasAttribute(name2) ? name2 : attributeCache[name2] || (attributeCache[name2] = name2.replace(/([A-Z])/g, (n38) => "-" + n38.toLowerCase())));
  if (children2 !== void 0) {
    instance.textContent = children2;
  }
  for (let name2 in style) {
    if (style.hasOwnProperty(name2)) {
      const value2 = dangerousStyleValue(name2, style[name2]);
      if (isCustomPropRE.test(name2)) {
        instance.style.setProperty(name2, value2);
      } else {
        instance.style[name2] = value2;
      }
    }
  }
  names.forEach((name2, i6) => {
    instance.setAttribute(name2, values2[i6]);
  });
  if (scrollTop !== void 0) {
    instance.scrollTop = scrollTop;
  }
  if (scrollLeft !== void 0) {
    instance.scrollLeft = scrollLeft;
  }
  if (viewBox !== void 0) {
    instance.setAttribute("viewBox", viewBox);
  }
}
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};
var prefixKey = (prefix2, key2) => prefix2 + key2.charAt(0).toUpperCase() + key2.substring(1);
var prefixes = ["Webkit", "Ms", "Moz", "O"];
isUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop) => {
  prefixes.forEach((prefix2) => acc[prefixKey(prefix2, prop)] = acc[prop]);
  return acc;
}, isUnitlessNumber);
var _excluded$1 = ["x", "y", "z"];
var domTransforms = /^(matrix|translate|scale|rotate|skew)/;
var pxTransforms = /^(translate)/;
var degTransforms = /^(rotate|skew)/;
var addUnit = (value2, unit) => is.num(value2) && value2 !== 0 ? value2 + unit : value2;
var isValueIdentity = (value2, id) => is.arr(value2) ? value2.every((v3) => isValueIdentity(v3, id)) : is.num(value2) ? value2 === id : parseFloat(value2) === id;
var AnimatedStyle = class extends AnimatedObject {
  constructor(_ref) {
    let {
      x: x2,
      y,
      z
    } = _ref, style = _objectWithoutPropertiesLoose4(_ref, _excluded$1);
    const inputs = [];
    const transforms = [];
    if (x2 || y || z) {
      inputs.push([x2 || 0, y || 0, z || 0]);
      transforms.push((xyz) => [`translate3d(${xyz.map((v3) => addUnit(v3, "px")).join(",")})`, isValueIdentity(xyz, 0)]);
    }
    eachProp(style, (value2, key2) => {
      if (key2 === "transform") {
        inputs.push([value2 || ""]);
        transforms.push((transform2) => [transform2, transform2 === ""]);
      } else if (domTransforms.test(key2)) {
        delete style[key2];
        if (is.und(value2))
          return;
        const unit = pxTransforms.test(key2) ? "px" : degTransforms.test(key2) ? "deg" : "";
        inputs.push(toArray2(value2));
        transforms.push(key2 === "rotate3d" ? ([x3, y2, z2, deg]) => [`rotate3d(${x3},${y2},${z2},${addUnit(deg, unit)})`, isValueIdentity(deg, 0)] : (input) => [`${key2}(${input.map((v3) => addUnit(v3, unit)).join(",")})`, isValueIdentity(input, key2.startsWith("scale") ? 1 : 0)]);
      }
    });
    if (inputs.length) {
      style.transform = new FluidTransform(inputs, transforms);
    }
    super(style);
  }
};
var FluidTransform = class extends FluidValue {
  constructor(inputs, transforms) {
    super();
    this._value = null;
    this.inputs = inputs;
    this.transforms = transforms;
  }
  get() {
    return this._value || (this._value = this._get());
  }
  _get() {
    let transform2 = "";
    let identity2 = true;
    each(this.inputs, (input, i6) => {
      const arg1 = getFluidValue(input[0]);
      const [t, id] = this.transforms[i6](is.arr(arg1) ? arg1 : input.map(getFluidValue));
      transform2 += " " + t;
      identity2 = identity2 && id;
    });
    return identity2 ? "none" : transform2;
  }
  observerAdded(count) {
    if (count == 1)
      each(this.inputs, (input) => each(input, (value2) => hasFluidValue(value2) && addFluidObserver(value2, this)));
  }
  observerRemoved(count) {
    if (count == 0)
      each(this.inputs, (input) => each(input, (value2) => hasFluidValue(value2) && removeFluidObserver(value2, this)));
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._value = null;
    }
    callFluidObservers(this, event);
  }
};
var primitives = ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr", "circle", "clipPath", "defs", "ellipse", "foreignObject", "g", "image", "line", "linearGradient", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "tspan"];
var _excluded2 = ["scrollTop", "scrollLeft"];
globals.assign({
  batchedUpdates: import_react_dom3.unstable_batchedUpdates,
  createStringInterpolator,
  colors
});
var host = createHost(primitives, {
  applyAnimatedValues,
  createAnimatedStyle: (style) => new AnimatedStyle(style),
  getComponentProps: (_ref) => {
    let props = _objectWithoutPropertiesLoose4(_ref, _excluded2);
    return props;
  }
});
var animated = host.animated;

// node_modules/@nutui/nutui-react/dist/es/packages/elevator/elevator.js
var import_classnames18 = __toESM(require_classnames());
var elevatorContext = (0, import_react154.createContext)({});
var defaultProps16 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  height: "200px",
  floorKey: "title",
  list: [],
  sticky: false,
  spaceHeight: 23,
  titleHeight: 35,
  showKeys: true
});
var Elevator = function(props) {
  var _ref = _object_spread({}, defaultProps16, props), height2 = _ref.height, floorKey = _ref.floorKey, list = _ref.list, sticky = _ref.sticky, spaceHeight = _ref.spaceHeight, titleHeight = _ref.titleHeight, showKeys = _ref.showKeys, className = _ref.className, style = _ref.style, onItemClick = _ref.onItemClick, onIndexClick = _ref.onIndexClick, children2 = _ref.children, rest = _object_without_properties(_ref, [
    "height",
    "floorKey",
    "list",
    "sticky",
    "spaceHeight",
    "titleHeight",
    "showKeys",
    "className",
    "style",
    "onItemClick",
    "onIndexClick",
    "children"
  ]);
  var classPrefix33 = "nut-elevator";
  var listview = (0, import_react154.useRef)(null);
  var initData = {
    anchorIndex: 0,
    listHeight: [],
    listGroup: [],
    scrollY: 0
  };
  var touchState = (0, import_react154.useRef)({
    y1: 0,
    y2: 0
  });
  var _useState = _sliced_to_array((0, import_react154.useState)(0), 2), scrollY = _useState[0], setScrollY = _useState[1];
  var _useState1 = _sliced_to_array((0, import_react154.useState)({}), 2), currentData = _useState1[0], setCurrentData = _useState1[1];
  var _useState2 = _sliced_to_array((0, import_react154.useState)(""), 2), currentKey = _useState2[0], setCurrentKey = _useState2[1];
  var _useState3 = _sliced_to_array((0, import_react154.useState)(0), 2), currentIndex = _useState3[0], setCurrentIndex = _useState3[1];
  var _useState4 = _sliced_to_array((0, import_react154.useState)(0), 2), codeIndex = _useState4[0], setCodeIndex = _useState4[1];
  var _useState5 = _sliced_to_array((0, import_react154.useState)(false), 2), scrollStart = _useState5[0], setScrollStart = _useState5[1];
  var state = (0, import_react154.useRef)(initData);
  var resetScrollState = function() {
    setScrollStart(false);
  };
  var clientHeight = function() {
    return listview.current ? listview.current.clientHeight : 0;
  };
  var getData = function(el, name2) {
    var prefix2 = "data-";
    return el.getAttribute(prefix2 + name2);
  };
  var calculateHeight = function() {
    var height3 = 0;
    state.current.listHeight.push(height3);
    for (var i6 = 0; i6 < state.current.listGroup.length; i6++) {
      var item = state.current.listGroup[i6];
      height3 += item.clientHeight;
      state.current.listHeight.push(height3);
    }
  };
  var scrollTo = function(index2) {
    if (!index2 && index2 !== 0) {
      return;
    }
    if (!state.current.listHeight.length) {
      calculateHeight();
    }
    var cacheIndex = index2;
    if (index2 < 0) {
      cacheIndex = 0;
    }
    if (index2 > state.current.listHeight.length - 2) {
      cacheIndex = Math.max(0, state.current.listHeight.length - 2);
    }
    setCodeIndex(cacheIndex);
    if (listview.current) {
      listview.current.scrollTo(0, state.current.listHeight[cacheIndex]);
    }
  };
  var bind = useGesture({
    onDragStart: function(param) {
      var target = param.target, offset = param.offset;
      setScrollStart(true);
      var index2 = Number(getData(target, "index"));
      touchState.current.y1 = offset[1];
      state.current.anchorIndex = +index2;
      setCodeIndex(function(codeIndex2) {
        return codeIndex2 + index2;
      });
      scrollTo(index2);
    },
    onDragEnd: function(param) {
      var offset = param.offset;
      touchState.current.y2 = offset[1];
      var delta = (touchState.current.y2 - touchState.current.y1) / spaceHeight || 0;
      var cacheIndex = state.current.anchorIndex + Math.round(delta);
      setCodeIndex(cacheIndex);
      scrollTo(cacheIndex);
      resetScrollState();
    }
  });
  var handleClickItem = function(key2, item) {
    onItemClick && onItemClick(key2, item);
    setCurrentData(item);
    setCurrentKey(key2);
  };
  var handleClickIndex = function(key2) {
    onIndexClick && onIndexClick(key2);
  };
  var setListGroup = function() {
    if (listview.current) {
      var els = listview.current.querySelectorAll(".nut-elevator-list-item");
      els.forEach(function(el) {
        if (el != null && !state.current.listGroup.includes(el)) {
          state.current.listGroup.push(el);
        }
      });
    }
  };
  var listViewScroll = function(e2) {
    var listHeight = state.current.listHeight;
    if (!listHeight.length) {
      calculateHeight();
    }
    var target = e2.target;
    var scrollTop = target.scrollTop;
    scrollTop = Math.ceil(scrollTop);
    state.current.scrollY = scrollTop;
    setScrollY(scrollTop);
    for (var i6 = 0; i6 < listHeight.length - 1; i6++) {
      var height1 = listHeight[i6];
      var height22 = listHeight[i6 + 1];
      if (state.current.scrollY >= height1 && state.current.scrollY < height22) {
        setCurrentIndex(i6);
        return;
      }
    }
    setCurrentIndex(listHeight.length - 2);
  };
  (0, import_react154.useEffect)(function() {
    if (listview.current) {
      setListGroup();
      listview.current.addEventListener("scroll", listViewScroll);
    }
  }, [
    listview
  ]);
  var _obj;
  return import_react154.default.createElement("div", _object_spread({
    className: "".concat(classPrefix33, " ").concat(className),
    style
  }, rest), sticky && scrollY > 0 ? import_react154.default.createElement("div", {
    className: "".concat(classPrefix33, "-list-fixed")
  }, import_react154.default.createElement("span", {
    className: "".concat(classPrefix33, "-list-fixed-title")
  }, list[currentIndex][floorKey])) : null, import_react154.default.createElement("div", {
    className: "".concat(classPrefix33, "-list"),
    style: {
      height: Number.isNaN(+height2) ? height2 : "".concat(height2, "px")
    }
  }, import_react154.default.createElement("div", {
    className: "".concat(classPrefix33, "-list-inner"),
    ref: listview
  }, list.map(function(item, idx) {
    return import_react154.default.createElement("div", {
      className: "".concat(classPrefix33, "-list-item"),
      key: idx
    }, import_react154.default.createElement("div", {
      className: "".concat(classPrefix33, "-list-item-code")
    }, item[floorKey]), import_react154.default.createElement(import_react154.default.Fragment, null, item.list.map(function(subitem) {
      var _obj2;
      return import_react154.default.createElement("div", {
        className: (0, import_classnames18.default)((_obj2 = {}, _define_property(_obj2, "".concat(classPrefix33, "-list-item-name"), true), _define_property(_obj2, "".concat(classPrefix33, "-list-item-name-highcolor"), currentData.id === subitem.id && currentKey === item[floorKey]), _obj2)),
        key: subitem.id,
        onClick: function() {
          return handleClickItem(item[floorKey], subitem);
        }
      }, children2 ? import_react154.default.createElement(import_react154.default.Fragment, null, import_react154.default.createElement(elevatorContext.Provider, {
        value: subitem
      }, children2)) : subitem.name);
    })));
  }))), showKeys ? import_react154.default.createElement(import_react154.default.Fragment, null, list.length && scrollStart ? import_react154.default.createElement("div", {
    className: (0, import_classnames18.default)((_obj = {}, _define_property(_obj, "".concat(classPrefix33, "-code-current"), true), _define_property(_obj, "".concat(classPrefix33, "-code-current-current"), true), _obj))
  }, list[codeIndex][floorKey]) : null, import_react154.default.createElement("div", {
    className: "".concat(classPrefix33, "-bars")
  }, import_react154.default.createElement(animated.div, _object_spread_props(_object_spread({
    className: "".concat(classPrefix33, "-bars-inner")
  }, bind()), {
    style: {
      touchAction: "pan-y"
    }
  }), list.map(function(item, index2) {
    var _list_currentIndex;
    var _obj2;
    return import_react154.default.createElement("div", {
      className: (0, import_classnames18.default)((_obj2 = {}, _define_property(_obj2, "".concat(classPrefix33, "-bars-inner-item"), true), _define_property(_obj2, "".concat(classPrefix33, "-bars-inner-item-active"), item[floorKey] === ((_list_currentIndex = list[currentIndex]) === null || _list_currentIndex === void 0 ? void 0 : _list_currentIndex[floorKey])), _obj2)),
      "data-index": index2,
      key: index2,
      onClick: function() {
        return handleClickIndex(item[floorKey]);
      }
    }, item[floorKey]);
  })))) : null);
};
Elevator.displayName = "NutElevator";
Elevator.Context = elevatorContext;

// node_modules/@nutui/nutui-react/dist/es/packages/elevator/index.js
var elevator_default = Elevator;

// node_modules/@nutui/nutui-react/dist/es/packages/fixednav/fixednav.js
var import_react157 = __toESM(require_react());
var import_classnames20 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/badge/badge.js
var import_react156 = __toESM(require_react());
var import_classnames19 = __toESM(require_classnames());
var defaultProps17 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  value: "",
  dot: false,
  max: 99,
  top: 0,
  right: 0,
  fill: "solid",
  size: "large",
  disabled: false
});
var Badge = function(props) {
  var isIcon = function isIcon2() {
    if ((typeof value2 === "undefined" ? "undefined" : _type_of(value2)) === "object" && value2)
      return value2;
  };
  var isNumber = function isNumber2() {
    if (typeof value2 === "number" && value2)
      return value2;
  };
  var isString = function isString2() {
    if (typeof value2 === "string" && value2)
      return value2;
  };
  var _this;
  var rtl = useRtl();
  var _$_object_spread = _object_spread({}, defaultProps17, props), className = _$_object_spread.className, style = _$_object_spread.style, value2 = _$_object_spread.value, max = _$_object_spread.max, children2 = _$_object_spread.children, dot = _$_object_spread.dot, top = _$_object_spread.top, right = _$_object_spread.right, fill = _$_object_spread.fill, size = _$_object_spread.size, disabled = _$_object_spread.disabled;
  var classPrefix33 = "nut-badge";
  var classes = (0, import_classnames19.default)(classPrefix33, className);
  var getContent = function() {
    if (dot || value2 === 0)
      return null;
    if (typeof value2 === "number") {
      return max < value2 ? "".concat(max, "+") : "".concat(value2);
    }
    return value2;
  };
  var _obj;
  var contentClasses = (0, import_classnames19.default)((_obj = {}, _define_property(_obj, "".concat(classPrefix33, "-sup"), isNumber() || isString() || dot), _define_property(_obj, "".concat(classPrefix33, "-number"), isNumber()), _define_property(_obj, "".concat(classPrefix33, "-one"), typeof getContent() === "string" && ((_this = "".concat(getContent())) === null || _this === void 0 ? void 0 : _this.length) === 1), _define_property(_obj, "".concat(classPrefix33, "-dot"), dot), _define_property(_obj, "".concat(classPrefix33, "-dot-").concat(size), dot), _define_property(_obj, "".concat(classPrefix33, "-").concat(fill), fill === "outline"), _define_property(_obj, "".concat(classPrefix33, "-content"), children2), _define_property(_obj, "".concat(classPrefix33, "-disabled"), disabled), _obj));
  var getPositionStyle = function() {
    return _define_property({
      top: "".concat(Number(top) || 0, "px")
    }, rtl ? "left" : "right", "".concat(Number(right) || 0, "px"));
  };
  var _obj1;
  return import_react156.default.createElement("div", {
    className: classes,
    style
  }, isIcon() && import_react156.default.createElement("div", {
    className: (0, import_classnames19.default)("".concat(classPrefix33, "-content"), (_obj1 = {}, _define_property(_obj1, "".concat(classPrefix33, "-icon"), true), _define_property(_obj1, "".concat(classPrefix33, "-icon-rtl"), rtl), _obj1)),
    style: getPositionStyle()
  }, value2), children2, !isIcon() && (getContent() || dot) && import_react156.default.createElement("div", {
    className: contentClasses,
    style: getPositionStyle()
  }, getContent()));
};
Badge.displayName = "NutBadge";

// node_modules/@nutui/nutui-react/dist/es/packages/badge/index.js
var badge_default = Badge;

// node_modules/@nutui/nutui-react/dist/es/packages/fixednav/fixednav.js
var defaultProps18 = _object_spread_props(_object_spread({}, defaultOverlayProps), {
  activeText: "",
  inactiveText: "",
  type: "right",
  list: [],
  overlay: true,
  position: {
    top: "auto",
    bottom: "auto"
  },
  zIndex: 200,
  onChange: function(value2) {
  },
  onSelect: function() {
  }
});
var FixedNav = function(props) {
  var locale = useConfig().locale;
  var _ref = _object_spread({}, defaultProps18, props), overlay = _ref.overlay, visible = _ref.visible, list = _ref.list, activeText = _ref.activeText, inactiveText = _ref.inactiveText, position2 = _ref.position, type4 = _ref.type, children2 = _ref.children, style = _ref.style, className = _ref.className, content2 = _ref.content, zIndex = _ref.zIndex, onChange = _ref.onChange, onSelect = _ref.onSelect, rest = _object_without_properties(_ref, [
    "overlay",
    "visible",
    "list",
    "activeText",
    "inactiveText",
    "position",
    "type",
    "children",
    "style",
    "className",
    "content",
    "zIndex",
    "onChange",
    "onSelect"
  ]);
  var classPrefix33 = "nut-fixednav";
  var classes = (0, import_classnames20.default)(classPrefix33, {
    active: visible
  }, "".concat(classPrefix33, "-").concat(type4), className);
  var renderListItem = function(item, index2) {
    return import_react157.default.createElement("div", {
      className: "".concat(classPrefix33, "-list-item"),
      onClick: function(event) {
        return onSelect(item, event);
      },
      key: item.id || index2
    }, import_react157.default.isValidElement(item.icon) ? item.icon : import_react157.default.createElement("img", {
      src: item.icon,
      alt: "",
      className: "".concat(classPrefix33, "-list-image")
    }), import_react157.default.createElement("div", {
      className: "".concat(classPrefix33, "-list-text")
    }, item.text));
  };
  return import_react157.default.createElement("div", _object_spread({
    className: classes,
    style: _object_spread({}, position2, style)
  }, rest), overlay && import_react157.default.createElement(overlay_default, {
    visible,
    zIndex,
    onClick: function() {
      return onChange(false);
    }
  }), import_react157.default.createElement("div", {
    className: "list"
  }, children2 || import_react157.default.createElement("div", {
    className: "".concat(classPrefix33, "-list")
  }, list.map(function(item, index2) {
    return import_react157.default.createElement(import_react157.default.Fragment, null, item.num ? import_react157.default.createElement(badge_default, {
      value: item.num,
      top: 8,
      right: 6
    }, renderListItem(item, index2)) : import_react157.default.createElement(import_react157.default.Fragment, null, renderListItem(item, index2)));
  }))), import_react157.default.createElement("div", {
    className: "".concat(classPrefix33, "-btn"),
    onClick: function() {
      return onChange(!visible);
    }
  }, content2 || import_react157.default.createElement(import_react157.default.Fragment, null, import_react157.default.createElement(d, {
    color: "#fff"
  }), import_react157.default.createElement("div", {
    className: "text"
  }, visible ? activeText || locale.fixednav.activeText : inactiveText || locale.fixednav.inactiveText))));
};
FixedNav.displayName = "NutFixedNav";

// node_modules/@nutui/nutui-react/dist/es/packages/fixednav/index.js
var fixednav_default = FixedNav;

// node_modules/@nutui/nutui-react/dist/es/packages/navbar/navbar.js
var import_react158 = __toESM(require_react());
var import_classnames21 = __toESM(require_classnames());
var defaultProps19 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  left: "",
  right: "",
  back: "",
  fixed: false,
  safeAreaInsetTop: false,
  placeholder: false,
  zIndex: 10
});
var NavBar = function(props) {
  var _$_object_spread = _object_spread({}, defaultProps19, props), right = _$_object_spread.right, left = _$_object_spread.left, title = _$_object_spread.title, className = _$_object_spread.className, style = _$_object_spread.style, back = _$_object_spread.back, fixed = _$_object_spread.fixed, safeAreaInsetTop = _$_object_spread.safeAreaInsetTop, placeholder = _$_object_spread.placeholder, zIndex = _$_object_spread.zIndex, onBackClick = _$_object_spread.onBackClick;
  var classPrefix33 = "nut-navbar";
  var rtl = useRtl();
  var children2 = Array.isArray(props.children) ? props.children : [
    props.children
  ];
  var styles = function() {
    return _object_spread_props(_object_spread({}, style), {
      zIndex
    });
  };
  var renderLeft = function() {
    var _obj2, _obj1;
    return import_react158.default.createElement("div", {
      className: (0, import_classnames21.default)((_obj2 = {}, _define_property(_obj2, "".concat(classPrefix33, "-left"), true), _define_property(_obj2, "".concat(classPrefix33, "-left-maxwidth"), title), _define_property(_obj2, "".concat(classPrefix33, "-left-hidden"), !left && !back), _define_property(_obj2, "".concat(classPrefix33, "-left-rtl"), rtl), _obj2))
    }, back ? import_react158.default.createElement("div", {
      className: (0, import_classnames21.default)((_obj1 = {}, _define_property(_obj1, "".concat(classPrefix33, "-left-back"), true), _define_property(_obj1, "".concat(classPrefix33, "-left-back-children"), left), _define_property(_obj1, "".concat(classPrefix33, "-left-back-children-rtl"), left && rtl), _obj1)),
      onClick: function(e2) {
        return onBackClick(e2);
      }
    }, back) : null, left);
  };
  var renderContent = function() {
    var _obj2;
    return import_react158.default.createElement("div", {
      className: (0, import_classnames21.default)((_obj2 = {}, _define_property(_obj2, "".concat(classPrefix33, "-title"), true), _define_property(_obj2, "".concat(classPrefix33, "-title-center"), title), _obj2))
    }, title || children2);
  };
  var renderRight = function() {
    var _obj2;
    return import_react158.default.createElement("div", {
      className: (0, import_classnames21.default)((_obj2 = {}, _define_property(_obj2, "".concat(classPrefix33, "-right"), true), _define_property(_obj2, "".concat(classPrefix33, "-right-maxwidth"), title), _define_property(_obj2, "".concat(classPrefix33, "-right-rtl"), rtl), _obj2))
    }, right);
  };
  var renderWrapper = function() {
    return import_react158.default.createElement("div", {
      className: cls,
      style: styles()
    }, renderLeft(), renderContent(), renderRight());
  };
  var _obj;
  var classes = (0, import_classnames21.default)((_obj = {}, _define_property(_obj, "".concat(classPrefix33, "-fixed"), fixed), _define_property(_obj, "".concat(classPrefix33, "-safe-area-inset-top"), safeAreaInsetTop), _define_property(_obj, "".concat(classPrefix33, "-rtl"), rtl), _obj));
  var cls = (0, import_classnames21.default)(classPrefix33, classes, className, _define_property({}, "".concat(classPrefix33, "-title-wrapper"), title));
  return import_react158.default.createElement(import_react158.default.Fragment, null, safeAreaInsetTop && import_react158.default.createElement(safearea_default, {
    position: "top"
  }), fixed && placeholder ? import_react158.default.createElement("div", {
    className: "".concat(classPrefix33, "-placeholder")
  }, renderWrapper()) : renderWrapper());
};
NavBar.displayName = "NutNavBar";

// node_modules/@nutui/nutui-react/dist/es/packages/navbar/index.js
var navbar_default = NavBar;

// node_modules/@nutui/nutui-react/dist/es/packages/sidebar/sidebar.js
var import_react162 = __toESM(require_react());
var import_classnames23 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/sidebaritem/sidebaritem.js
var import_react159 = __toESM(require_react());
var import_classnames22 = __toESM(require_classnames());
var defaultProps20 = {
  title: "",
  value: "",
  disabled: false
};
var SideBarItem = function(props) {
  var _mergeProps = mergeProps(defaultProps20, props), children2 = _mergeProps.children, className = _mergeProps.className, disabled = _mergeProps.disabled;
  var classPrefix33 = "nut-sidebaritem";
  var classes = (0, import_classnames22.default)(classPrefix33, {
    active: !disabled && props.active
  }, className);
  return children2 ? import_react159.default.createElement("div", {
    className: classes
  }, !disabled && children2) : null;
};

// node_modules/@nutui/nutui-react/dist/es/packages/sidebaritem/index.js
var sidebaritem_default = SideBarItem;

// node_modules/@nutui/nutui-react/dist/es/hooks/use-props-value.js
var import_react161 = __toESM(require_react());

// node_modules/@nutui/nutui-react/dist/es/hooks/use-force-update.js
var import_react160 = __toESM(require_react());
function useForceUpdate2() {
  var _React_useState = _sliced_to_array(import_react160.default.useState(), 2), updateState = _React_useState[1];
  return import_react160.default.useCallback(function() {
    return updateState({});
  }, []);
}

// node_modules/@nutui/nutui-react/dist/es/hooks/use-props-value.js
function usePropsValue(param) {
  var value2 = param.value, defaultValue = param.defaultValue, finalValue = param.finalValue, _param_onChange = param.onChange, onChange = _param_onChange === void 0 ? function(value3) {
  } : _param_onChange;
  var forceUpdate = useForceUpdate2();
  var dfValue = defaultValue !== void 0 ? defaultValue : finalValue;
  var stateRef = (0, import_react161.useRef)(value2 !== void 0 ? value2 : dfValue);
  if (value2 !== void 0) {
    stateRef.current = value2;
  }
  var setState = (0, import_react161.useCallback)(function(v3) {
    var forceTrigger = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var prevState = stateRef.current;
    stateRef.current = v3;
    if (prevState !== stateRef.current || forceTrigger) {
      forceUpdate();
      onChange === null || onChange === void 0 ? void 0 : onChange(v3);
    }
  }, [
    value2,
    onChange
  ]);
  return [
    stateRef.current,
    setState
  ];
}

// node_modules/@nutui/nutui-react/dist/es/packages/sidebar/sidebar.js
var defaultProps21 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  contentDuration: 0,
  sidebarDuration: 0
});
var classPrefix11 = "nut-sidebar";
var SideBar = function(props) {
  var _mergeProps = mergeProps(defaultProps21, props), contentDuration = _mergeProps.contentDuration, sidebarDuration = _mergeProps.sidebarDuration, children2 = _mergeProps.children, onClick = _mergeProps.onClick, onChange = _mergeProps.onChange, className = _mergeProps.className, rest = _object_without_properties(_mergeProps, [
    "contentDuration",
    "sidebarDuration",
    "children",
    "onClick",
    "onChange",
    "className"
  ]);
  var _usePropsValue = _sliced_to_array(usePropsValue({
    value: props.value,
    defaultValue: props.defaultValue,
    finalValue: 0,
    onChange
  }), 2), value2 = _usePropsValue[0], setValue = _usePropsValue[1];
  var titleItemsRef = (0, import_react162.useRef)([]);
  var navRef = (0, import_react162.useRef)(null);
  var scroll = function(nav, to2) {
    var count = 0;
    var from = nav.scrollTop;
    var frames2 = sidebarDuration === 0 ? 1 : Math.round(sidebarDuration / 16);
    function animate() {
      nav.scrollTop += (to2 - from) / frames2;
      if (++count < frames2) {
        raf_default(animate);
      }
    }
    animate();
  };
  var scrollIntoView = function(index2) {
    var nav = navRef.current;
    var titleItem = titleItemsRef.current;
    var titlesLength = titles.current.length;
    var itemLength = titleItemsRef.current.length;
    if (!nav || !titleItem || !titleItem[itemLength - titlesLength + index2]) {
      return;
    }
    var title = titleItem[itemLength - titlesLength + index2];
    var runTop = title.offsetTop - nav.offsetTop + 10;
    var to2 = runTop - (nav.offsetHeight - title.offsetHeight) / 2 + title.offsetHeight;
    scroll(nav, to2);
  };
  var getTitles = function() {
    var titles2 = [];
    import_react162.default.Children.forEach(children2, function(child, idx) {
      if (import_react162.default.isValidElement(child)) {
        var _$props = child === null || child === void 0 ? void 0 : child.props;
        if ((_$props === null || _$props === void 0 ? void 0 : _$props.title) || (_$props === null || _$props === void 0 ? void 0 : _$props.value)) {
          var _props_value;
          titles2.push({
            title: _$props.title,
            value: (_props_value = _$props.value) !== null && _props_value !== void 0 ? _props_value : idx,
            disabled: _$props.disabled
          });
        }
      }
    });
    return titles2;
  };
  var titles = (0, import_react162.useRef)(getTitles());
  var forceUpdate = useForceUpdate2();
  (0, import_react162.useEffect)(function() {
    titles.current = getTitles();
    var current = "";
    titles.current.forEach(function(title) {
      if (title.value === value2) {
        current = value2;
      }
    });
    forceUpdate();
  }, [
    children2
  ]);
  var classes = (0, import_classnames23.default)(classPrefix11, className);
  var classesTitle = (0, import_classnames23.default)("".concat(classPrefix11, "-titles"), "".concat(classPrefix11, "-titles-scrollable"));
  var getContentStyle = function() {
    var index2 = titles.current.findIndex(function(t) {
      return t.value === value2;
    });
    index2 = index2 < 0 ? 0 : index2;
    return {
      transform: "translate3d( 0,-".concat(index2 * 100, "%, 0)"),
      transitionDuration: "".concat(contentDuration, "ms")
    };
  };
  (0, import_react162.useEffect)(function() {
    var index2 = titles.current.findIndex(function(t) {
      return t.value === value2;
    });
    index2 = index2 < 0 ? 0 : index2;
    var rafId = requestAnimationFrame(function() {
      scrollIntoView(index2);
    });
    return function() {
      return cancelAnimationFrame(rafId);
    };
  }, [
    value2
  ]);
  var tabChange = function(item) {
    if (item.disabled)
      return;
    onClick === null || onClick === void 0 ? void 0 : onClick(item.value);
    setValue(item.value);
  };
  return import_react162.default.createElement("div", _object_spread({
    className: classes
  }, rest), import_react162.default.createElement("div", {
    className: classesTitle,
    ref: navRef
  }, titles.current.map(function(item) {
    var _obj;
    return import_react162.default.createElement("div", {
      onClick: function() {
        tabChange(item);
      },
      className: (0, import_classnames23.default)("".concat(classPrefix11, "-titles-item"), (_obj = {}, _define_property(_obj, "".concat(classPrefix11, "-titles-item-active"), !item.disabled && String(item.value) === String(value2)), _define_property(_obj, "".concat(classPrefix11, "-titles-item-disabled"), item.disabled), _obj)),
      ref: function(ref) {
        return titleItemsRef.current.push(ref);
      },
      key: item.value
    }, import_react162.default.createElement("div", {
      className: "".concat(classPrefix11, "-titles-item-text")
    }, item.title));
  })), import_react162.default.createElement("div", {
    className: "".concat(classPrefix11, "-content-wrap")
  }, import_react162.default.createElement("div", {
    className: "".concat(classPrefix11, "-content"),
    style: getContentStyle()
  }, import_react162.default.Children.map(children2, function(child, idx) {
    if (!import_react162.default.isValidElement(child)) {
      return null;
    }
    var childProps = _object_spread_props(_object_spread({}, child.props), {
      active: value2 === child.props.value
    });
    if (String(value2) !== String(child.props.value || idx)) {
      childProps = _object_spread({}, childProps);
    }
    return import_react162.default.cloneElement(child, childProps);
  }))));
};
SideBar.displayName = "NutSideBar";
SideBar.Item = sidebaritem_default;

// node_modules/@nutui/nutui-react/dist/es/packages/sidebar/index.js
var sidebar_default = SideBar;

// node_modules/@nutui/nutui-react/dist/es/packages/tabbar/tabbar.js
var import_react165 = __toESM(require_react());
var import_classnames25 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/tabbaritem/tabbaritem.js
var import_react164 = __toESM(require_react());
var import_classnames24 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/tabbar/context.js
var import_react163 = __toESM(require_react());
var context_default3 = import_react163.default.createContext(null);

// node_modules/@nutui/nutui-react/dist/es/packages/tabbaritem/tabbaritem.js
var defaultProps22 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  title: "",
  icon: null,
  value: "",
  dot: false,
  max: 99,
  top: "0",
  right: "0",
  direction: "vertical"
});
var TabbarItem = function(props) {
  var ctx2 = (0, import_react164.useContext)(context_default3);
  var _ref = _object_spread({}, defaultProps22, props), className = _ref.className, style = _ref.style, title = _ref.title, icon = _ref.icon, value2 = _ref.value, dot = _ref.dot, max = _ref.max, top = _ref.top, right = _ref.right, index2 = _ref.index, direction = _ref.direction, onActiveClick = _ref.onActiveClick, rest = _object_without_properties(_ref, [
    "className",
    "style",
    "title",
    "icon",
    "value",
    "dot",
    "max",
    "top",
    "right",
    "index",
    "direction",
    "onActiveClick"
  ]);
  var active2 = index2 === (ctx2 === null || ctx2 === void 0 ? void 0 : ctx2.selectIndex);
  var classPrefix33 = "nut-tabbar-item";
  var _obj;
  var tabbarItemClass = (0, import_classnames24.default)(classPrefix33, (_obj = {}, _define_property(_obj, "".concat(classPrefix33, "-active"), active2), _define_property(_obj, "".concat(classPrefix33, "-large"), !icon || !title), _obj), className);
  var renderNodeWithActive = function(node) {
    return node && typeof node === "function" ? node(active2) : node;
  };
  var badgeProps = {
    value: renderNodeWithActive(value2),
    dot,
    max,
    top,
    right,
    color: ctx2 === null || ctx2 === void 0 ? void 0 : ctx2.activeColor
  };
  var renderTitleText = function() {
    return title && import_react164.default.createElement("div", {
      className: "".concat(classPrefix33, "-text")
    }, renderNodeWithActive(title));
  };
  var renderTitle = function() {
    return import_react164.default.createElement(badge_default, _object_spread({
      size: "normal"
    }, badgeProps), renderTitleText());
  };
  var renderIcon = function() {
    return renderNodeWithActive(icon);
  };
  var renderIconAndTitle = function() {
    return import_react164.default.createElement(import_react164.default.Fragment, null, import_react164.default.createElement(badge_default, _object_spread_props(_object_spread({
      size: "normal"
    }, badgeProps), {
      top: 3
    }), renderIcon()), renderTitleText());
  };
  var renderDualItem = function() {
    return dot ? null : import_react164.default.createElement(import_react164.default.Fragment, null, renderIcon(), renderTitleText(), import_react164.default.createElement(badge_default, badgeProps));
  };
  return import_react164.default.createElement("div", _object_spread({
    className: tabbarItemClass,
    style: _object_spread({
      color: active2 ? ctx2 === null || ctx2 === void 0 ? void 0 : ctx2.activeColor : ctx2 === null || ctx2 === void 0 ? void 0 : ctx2.inactiveColor
    }, style),
    onClick: function() {
      return active2 ? onActiveClick === null || onActiveClick === void 0 ? void 0 : onActiveClick() : ctx2 === null || ctx2 === void 0 ? void 0 : ctx2.handleClick(index2);
    }
  }, rest), direction === "horizontal" && !dot ? renderDualItem() : import_react164.default.createElement(import_react164.default.Fragment, null, icon && renderIconAndTitle(), !icon && renderTitle()));
};

// node_modules/@nutui/nutui-react/dist/es/packages/tabbaritem/index.js
var tabbaritem_default = TabbarItem;

// node_modules/@nutui/nutui-react/dist/es/packages/tabbar/tabbar.js
var defaultProps23 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  defaultValue: 0,
  fixed: false,
  inactiveColor: "",
  activeColor: "",
  direction: "vertical",
  safeArea: false,
  onSwitch: function() {
  }
});
var Tabbar = function(props) {
  var _$_object_spread = _object_spread({}, defaultProps23, props), children2 = _$_object_spread.children, defaultValue = _$_object_spread.defaultValue, value2 = _$_object_spread.value, fixed = _$_object_spread.fixed, activeColor = _$_object_spread.activeColor, inactiveColor = _$_object_spread.inactiveColor, direction = _$_object_spread.direction, safeArea = _$_object_spread.safeArea, className = _$_object_spread.className, style = _$_object_spread.style, onSwitch = _$_object_spread.onSwitch;
  var classPrefix33 = "nut-tabbar";
  var _usePropsValue = _sliced_to_array(usePropsValue({
    value: value2,
    defaultValue,
    finalValue: 0,
    onChange: onSwitch
  }), 2), selectIndex = _usePropsValue[0], setSelectIndex = _usePropsValue[1];
  var sizeCls = (0, import_react165.useMemo)(function() {
    var size = import_react165.default.Children.count(children2);
    var _obj;
    return size > 3 ? "" : (0, import_classnames25.default)((_obj = {}, _define_property(_obj, "".concat(classPrefix33, "-wrap-3"), size === 3), _define_property(_obj, "".concat(classPrefix33, "-wrap-2"), size === 2), _define_property(_obj, "".concat(classPrefix33, "-wrap-").concat(direction), size === 2 && direction !== "vertical"), _obj));
  }, [
    children2,
    direction
  ]);
  var itemDirection = (0, import_react165.useMemo)(function() {
    var size = import_react165.default.Children.count(children2);
    return size === 2 && direction !== "vertical" && direction;
  }, [
    direction,
    children2
  ]);
  return import_react165.default.createElement("div", {
    className: (0, import_classnames25.default)(classPrefix33, _define_property({}, "".concat(classPrefix33, "-fixed"), fixed), className),
    style
  }, import_react165.default.createElement("div", {
    className: "".concat(classPrefix33, "-wrap ").concat(sizeCls)
  }, import_react165.default.createElement(context_default3.Provider, {
    value: {
      selectIndex,
      activeColor,
      inactiveColor,
      handleClick: setSelectIndex
    }
  }, import_react165.default.Children.map(children2, function(child, index2) {
    return import_react165.default.isValidElement(child) ? import_react165.default.cloneElement(child, _object_spread_props(_object_spread({}, child.props), {
      index: index2,
      direction: itemDirection
    })) : null;
  }))), (fixed || safeArea) && import_react165.default.createElement(safearea_default, {
    position: "bottom"
  }));
};
Tabbar.displayName = "NutTabbar";
Tabbar.Item = tabbaritem_default;

// node_modules/@nutui/nutui-react/dist/es/packages/tabbar/index.js
var tabbar_default = Tabbar;

// node_modules/@nutui/nutui-react/dist/es/packages/tabpane/tabpane.js
var import_react166 = __toESM(require_react());
var import_classnames26 = __toESM(require_classnames());
var defaultProps24 = {
  title: "",
  value: "",
  disabled: false
};
var TabPane = function(props) {
  var _$_object_spread = _object_spread({}, defaultProps24, props), children2 = _$_object_spread.children, autoHeightClassName = _$_object_spread.autoHeightClassName, className = _$_object_spread.className, disabled = _$_object_spread.disabled;
  var classPrefix33 = "nut-tabpane";
  var classes = (0, import_classnames26.default)(classPrefix33, {
    active: !disabled && props.active
  }, autoHeightClassName, className);
  return children2 ? import_react166.default.createElement("div", {
    className: classes
  }, !disabled && children2) : null;
};

// node_modules/@nutui/nutui-react/dist/es/packages/tabpane/index.js
var tabpane_default = TabPane;

// node_modules/@nutui/nutui-react/dist/es/packages/tabs/tabs.js
var import_react167 = __toESM(require_react());
var import_classnames27 = __toESM(require_classnames());
var defaultProps25 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  tabStyle: {},
  activeColor: "",
  direction: "horizontal",
  activeType: "line",
  duration: 300,
  autoHeight: false
});
var classPrefix12 = "nut-tabs";
var Tabs = function(props) {
  var rtl = useRtl();
  var _ref = _object_spread({}, defaultProps25, props), activeColor = _ref.activeColor, tabStyle = _ref.tabStyle, direction = _ref.direction, activeType = _ref.activeType, duration = _ref.duration, align = _ref.align, title = _ref.title, children2 = _ref.children, onClick = _ref.onClick, onChange = _ref.onChange, className = _ref.className, autoHeight = _ref.autoHeight, outerValue = _ref.value, outerDefaultValue = _ref.defaultValue, rest = _object_without_properties(_ref, [
    "activeColor",
    "tabStyle",
    "direction",
    "activeType",
    "duration",
    "align",
    "title",
    "children",
    "onClick",
    "onChange",
    "className",
    "autoHeight",
    "value",
    "defaultValue"
  ]);
  var _usePropsValue = _sliced_to_array(usePropsValue({
    value: outerValue,
    defaultValue: outerDefaultValue,
    onChange
  }), 2), value2 = _usePropsValue[0], setValue = _usePropsValue[1];
  var titleItemsRef = (0, import_react167.useRef)([]);
  var navRef = (0, import_react167.useRef)(null);
  var scrollDirection = function(nav, to2, duration2) {
    var from = direction === "horizontal" ? nav.scrollLeft : nav.scrollTop;
    var frames2 = duration2 === 0 ? 1 : Math.round(duration2 * 1e3 / 16);
    var count = 0;
    var animate = function() {
      if (direction === "horizontal")
        nav.scrollLeft += (to2 - from) / frames2;
      else
        nav.scrollTop += (to2 - from) / frames2;
      if (++count < frames2)
        raf_default(animate);
    };
    animate();
  };
  var scrollIntoView = function(index2, immediate) {
    var nav = navRef.current;
    var titleItem = titleItemsRef.current;
    var titlesLength = titles.current.length;
    var itemLength = titleItem.length;
    if (!nav || !titleItem || !titleItem[itemLength - titlesLength + index2]) {
      return;
    }
    var title2 = titleItem[itemLength - titlesLength + index2];
    var to2 = 0;
    if (direction === "vertical") {
      var runTop = title2.offsetTop - nav.offsetTop + 10;
      to2 = runTop - (nav.offsetHeight - title2.offsetHeight) / 2;
    } else {
      to2 = title2.offsetLeft - (nav.offsetWidth - title2.offsetWidth) / 2;
    }
    scrollDirection(nav, to2, immediate ? 0 : 0.3);
  };
  var getTitles = function() {
    var titles2 = [];
    import_react167.default.Children.forEach(children2, function(child, idx) {
      if (import_react167.default.isValidElement(child)) {
        var _$props = child.props;
        if ((_$props === null || _$props === void 0 ? void 0 : _$props.title) || (_$props === null || _$props === void 0 ? void 0 : _$props.value)) {
          titles2.push({
            title: _$props.title,
            value: _$props.value || idx,
            disabled: _$props.disabled
          });
        }
      }
    });
    return titles2;
  };
  var titles = (0, import_react167.useRef)(getTitles());
  var forceUpdate = useForceUpdate2();
  (0, import_react167.useEffect)(function() {
    titles.current = getTitles();
    var current = "";
    titles.current.forEach(function(title2) {
      if (title2.value === value2) {
        current = value2;
      }
    });
    if (current !== "" && current !== value2) {
      setValue(current);
    } else {
      forceUpdate();
    }
  }, [
    children2
  ]);
  var classes = (0, import_classnames27.default)(classPrefix12, "".concat(classPrefix12, "-").concat(direction), className);
  var _obj;
  var classesTitle = (0, import_classnames27.default)("".concat(classPrefix12, "-titles"), (_obj = {}, _define_property(_obj, "".concat(classPrefix12, "-titles-").concat(activeType), activeType), _define_property(_obj, "".concat(classPrefix12, "-titles-scrollable"), true), _define_property(_obj, "".concat(classPrefix12, "-titles-").concat(align), align), _obj));
  var getContentStyle = function() {
    var index2 = titles.current.findIndex(function(t) {
      return t.value === value2;
    });
    index2 = index2 < 0 ? 0 : index2;
    return {
      transform: direction === "horizontal" ? "translate3d(".concat(rtl ? "" : "-").concat(index2 * 100, "%, 0, 0)") : "translate3d( 0, -".concat(index2 * 100, "%, 0)"),
      transitionDuration: "".concat(duration, "ms")
    };
  };
  (0, import_react167.useEffect)(function() {
    var index2 = titles.current.findIndex(function(t) {
      return t.value === value2;
    });
    index2 = index2 < 0 ? 0 : index2;
    setTimeout(function() {
      scrollIntoView(index2);
    });
  }, [
    value2
  ]);
  var tabChange = function(item) {
    onClick && onClick(item.value);
    if (!item.disabled) {
      setValue(item.value);
    }
  };
  return import_react167.default.createElement("div", _object_spread({
    className: classes
  }, rest), import_react167.default.createElement("div", {
    className: classesTitle,
    style: tabStyle,
    ref: navRef
  }, !!title && typeof title === "function" ? title() : titles.current.map(function(item) {
    var _obj2;
    return import_react167.default.createElement("div", {
      key: item.value,
      ref: function(ref) {
        return titleItemsRef.current.push(ref);
      },
      onClick: function() {
        return tabChange(item);
      },
      className: (0, import_classnames27.default)("".concat(classPrefix12, "-titles-item"), (_obj2 = {}, _define_property(_obj2, "nut-tabs-titles-item-active", !item.disabled && String(item.value) === String(value2)), _define_property(_obj2, "nut-tabs-titles-item-disabled", item.disabled), _define_property(_obj2, "nut-tabs-titles-item-".concat(align), align), _obj2))
    }, activeType === "line" && import_react167.default.createElement("div", {
      className: (0, import_classnames27.default)("".concat(classPrefix12, "-titles-item-line"), "".concat(classPrefix12, "-titles-item-line-").concat(direction)),
      style: {
        background: activeColor
      }
    }), activeType === "smile" && import_react167.default.createElement("div", {
      className: "".concat(classPrefix12, "-titles-item-smile")
    }, import_react167.default.createElement(c2, {
      color: activeColor,
      width: 40,
      height: 20
    })), import_react167.default.createElement("div", {
      className: (0, import_classnames27.default)(_define_property({}, "".concat(classPrefix12, "-ellipsis"), direction === "vertical"), "".concat(classPrefix12, "-titles-item-text")),
      style: {
        color: activeColor
      }
    }, item.title));
  })), import_react167.default.createElement("div", {
    className: "".concat(classPrefix12, "-content-wrap")
  }, import_react167.default.createElement("div", {
    className: "".concat(classPrefix12, "-content"),
    style: getContentStyle()
  }, import_react167.default.Children.map(children2, function(child, idx) {
    if (!import_react167.default.isValidElement(child))
      return null;
    return import_react167.default.cloneElement(child, _object_spread_props(_object_spread({}, child.props), {
      active: value2 === child.props.value,
      autoHeightClassName: autoHeight && String(value2) !== String(child.props.value || idx) ? "inactive" : ""
    }));
  }))));
};
Tabs.displayName = "NutTabs";
Tabs.TabPane = tabpane_default;

// node_modules/@nutui/nutui-react/dist/es/packages/tabs/index.js
var tabs_default = Tabs;

// node_modules/@nutui/nutui-react/dist/es/packages/address/address.js
var import_react174 = __toESM(require_react());

// node_modules/@nutui/nutui-react/dist/es/packages/popup/popup.js
var import_react168 = __toESM(require_react());
var import_react_dom4 = __toESM(require_react_dom());
var import_classnames28 = __toESM(require_classnames());
var defaultProps26 = _object_spread_props(_object_spread({}, defaultOverlayProps), {
  position: "center",
  transition: "",
  overlayStyle: {},
  overlayClassName: "",
  closeable: false,
  closeIconPosition: "top-right",
  closeIcon: "close",
  destroyOnClose: false,
  portal: null,
  overlay: true,
  round: false,
  onOpen: function() {
  },
  onClose: function() {
  },
  onOverlayClick: function() {
    return true;
  },
  onCloseIconClick: function() {
    return true;
  }
});
var _zIndex = 1100;
var Popup = function(props) {
  var _$_object_spread = _object_spread({}, defaultProps26, props), children2 = _$_object_spread.children, visible = _$_object_spread.visible, overlay = _$_object_spread.overlay, closeOnOverlayClick = _$_object_spread.closeOnOverlayClick, overlayStyle = _$_object_spread.overlayStyle, overlayClassName = _$_object_spread.overlayClassName, zIndex = _$_object_spread.zIndex, lockScroll = _$_object_spread.lockScroll, duration = _$_object_spread.duration, closeable = _$_object_spread.closeable, closeIconPosition = _$_object_spread.closeIconPosition, closeIcon = _$_object_spread.closeIcon, left = _$_object_spread.left, title = _$_object_spread.title, description = _$_object_spread.description, style = _$_object_spread.style, transition = _$_object_spread.transition, round = _$_object_spread.round, position2 = _$_object_spread.position, className = _$_object_spread.className, destroyOnClose = _$_object_spread.destroyOnClose, portal = _$_object_spread.portal, onOpen = _$_object_spread.onOpen, onClose = _$_object_spread.onClose, onOverlayClick = _$_object_spread.onOverlayClick, onCloseIconClick = _$_object_spread.onCloseIconClick, afterShow = _$_object_spread.afterShow, afterClose = _$_object_spread.afterClose, onClick = _$_object_spread.onClick;
  var nodeRef = import_react168.default.useRef(null);
  var innerIndex = zIndex || _zIndex;
  var _useState = _sliced_to_array((0, import_react168.useState)(innerIndex), 2), index2 = _useState[0], setIndex = _useState[1];
  var _useState1 = _sliced_to_array((0, import_react168.useState)(visible), 2), innerVisible = _useState1[0], setInnerVisible = _useState1[1];
  var _useState2 = _sliced_to_array((0, import_react168.useState)(true), 2), showChildren = _useState2[0], setShowChildren = _useState2[1];
  var _useState3 = _sliced_to_array((0, import_react168.useState)(""), 2), transitionName = _useState3[0], setTransitionName = _useState3[1];
  useLockScroll(nodeRef, innerVisible && lockScroll);
  var classPrefix33 = "nut-popup";
  var overlayStyles = _object_spread({}, overlayStyle);
  var popStyles = _object_spread_props(_object_spread({}, style), {
    zIndex: index2
  });
  var _obj;
  var popClassName = (0, import_classnames28.default)(classPrefix33, (_obj = {}, _define_property(_obj, "".concat(classPrefix33, "-round"), round || position2 === "bottom"), _define_property(_obj, "".concat(classPrefix33, "-").concat(position2), true), _obj), className);
  var open = function() {
    if (!innerVisible) {
      setInnerVisible(true);
      setIndex(++innerIndex);
    }
    if (destroyOnClose) {
      setShowChildren(true);
    }
    onOpen && onOpen();
  };
  var close = function() {
    if (innerVisible) {
      setInnerVisible(false);
      if (destroyOnClose) {
        setTimeout(function() {
          setShowChildren(false);
        }, Number(duration));
      }
      onClose && onClose();
    }
  };
  var handleOverlayClick = function(e2) {
    e2.stopPropagation();
    if (closeOnOverlayClick && onOverlayClick(e2)) {
      close();
    }
  };
  var handleCloseIconClick = function(e2) {
    onCloseIconClick(e2) && close();
  };
  var renderCloseIcon = function() {
    var closeClasses = (0, import_classnames28.default)("".concat(classPrefix33, "-title-right"), "".concat(classPrefix33, "-title-right-").concat(closeIconPosition));
    return import_react168.default.createElement(import_react168.default.Fragment, null, closeable && import_react168.default.createElement("div", {
      className: closeClasses,
      onClick: handleCloseIconClick
    }, import_react168.default.isValidElement(closeIcon) ? closeIcon : import_react168.default.createElement(n6, null)));
  };
  var renderTitle = function() {
    if (left || title || description) {
      return import_react168.default.createElement("div", {
        className: "".concat(classPrefix33, "-title")
      }, position2 === "bottom" && import_react168.default.createElement(import_react168.default.Fragment, null, left && import_react168.default.createElement("div", {
        className: "".concat(classPrefix33, "-title-left")
      }, left), (title || description) && import_react168.default.createElement("div", {
        className: "".concat(classPrefix33, "-title-wrapper")
      }, title && import_react168.default.createElement("div", {
        className: "".concat(classPrefix33, "-title-title")
      }, title), description && import_react168.default.createElement("div", {
        className: "".concat(classPrefix33, "-title-description ").concat(title ? "".concat(classPrefix33, "-title-description-gap") : "")
      }, description))), renderCloseIcon());
    }
    if (closeable) {
      return renderCloseIcon();
    }
  };
  var renderPop = function() {
    return import_react168.default.createElement(CSSTransition_default, {
      nodeRef,
      classNames: transitionName,
      mountOnEnter: true,
      unmountOnExit: destroyOnClose,
      timeout: duration,
      in: innerVisible,
      onEntered: afterShow,
      onExited: afterClose
    }, import_react168.default.createElement("div", {
      ref: nodeRef,
      style: popStyles,
      className: popClassName,
      onClick
    }, renderTitle(), showChildren && children2));
  };
  var renderNode = function() {
    return import_react168.default.createElement(import_react168.default.Fragment, null, overlay && import_react168.default.createElement(overlay_default, {
      zIndex: index2,
      style: overlayStyles,
      className: overlayClassName,
      visible: innerVisible,
      closeOnOverlayClick,
      lockScroll,
      duration,
      onClick: handleOverlayClick
    }), renderPop());
  };
  (0, import_react168.useEffect)(function() {
    visible ? open() : close();
  }, [
    visible
  ]);
  (0, import_react168.useEffect)(function() {
    setTransitionName(transition || "".concat(classPrefix33, "-slide-").concat(position2));
  }, [
    position2,
    transition
  ]);
  var resolveContainer = function(getContainer) {
    return (typeof getContainer === "function" ? getContainer() : getContainer) || document.body;
  };
  var renderToContainer = function(getContainer, node) {
    if (getContainer) {
      var container = resolveContainer(getContainer);
      return (0, import_react_dom4.createPortal)(node, container);
    }
    return node;
  };
  return import_react168.default.createElement(import_react168.default.Fragment, null, renderToContainer(portal, renderNode()));
};
Popup.displayName = "NutPopup";

// node_modules/@nutui/nutui-react/dist/es/packages/popup/index.js
var popup_default = Popup;

// node_modules/@nutui/nutui-react/dist/es/packages/address/cascaderRender.js
var import_react171 = __toESM(require_react());

// node_modules/@nutui/nutui-react/dist/es/packages/cascader/cascader.js
var import_react170 = __toESM(require_react());
var import_classnames29 = __toESM(require_classnames());

// node_modules/@swc/helpers/esm/_to_primitive.js
function _to_primitive(input, hint) {
  if (_type_of(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_type_of(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}

// node_modules/@swc/helpers/esm/_to_property_key.js
function _to_property_key(arg) {
  var key2 = _to_primitive(arg, "string");
  return _type_of(key2) === "symbol" ? key2 : String(key2);
}

// node_modules/@nutui/nutui-react/dist/es/packages/cascader/utils.js
var normalizeOptions = function(options2, keyMap) {
  if (!options2)
    return void 0;
  return options2.map(function(opt) {
    var _keyMap_textKey = keyMap.textKey, _keyMap_valueKey = keyMap.valueKey, _keyMap_childrenKey = keyMap.childrenKey, text3 = opt[_keyMap_textKey], value2 = opt[_keyMap_valueKey], children2 = opt[_keyMap_childrenKey], others = _object_without_properties(opt, [
      _keyMap_textKey,
      _keyMap_valueKey,
      _keyMap_childrenKey
    ].map(_to_property_key));
    return _object_spread({
      text: text3,
      value: value2,
      children: normalizeOptions(children2, keyMap)
    }, others);
  });
};
var normalizeListOptions = function(options2, format2) {
  var defaultConvertConfig = {
    topId: null,
    idKey: "id",
    pidKey: "pid",
    sortKey: "sortKey"
  };
  var mergedFormat = _object_spread({}, defaultConvertConfig, format2);
  var topId = mergedFormat.topId, idKey = mergedFormat.idKey, pidKey = mergedFormat.pidKey, sortKey = mergedFormat.sortKey;
  var map = {};
  options2.forEach(function(opt) {
    var pid = opt[pidKey], id = opt[idKey], others = _object_without_properties(opt, [
      pidKey,
      idKey
    ].map(_to_property_key));
    var newNode = _object_spread({
      pid,
      id
    }, others);
    if (map[pid]) {
      map[pid].push(newNode);
    } else {
      map[pid] = [
        newNode
      ];
    }
  });
  for (var key2 in map) {
    if (!Object.prototype.hasOwnProperty.call(map, key2))
      continue;
    map[key2].sort(function(a, b) {
      return a[sortKey] - b[sortKey];
    });
    map[key2].forEach(function(option) {
      if (map[option.id]) {
        option.children = map[option.id];
      }
    });
  }
  return map[topId];
};

// node_modules/@nutui/nutui-react/dist/es/hooks/use-ref-state.js
var import_react169 = __toESM(require_react());
var getRefValue = function(ref) {
  return ref.current;
};
var useRefState = function(param) {
  var ref = (0, import_react169.useRef)(param);
  var _useState = _sliced_to_array((0, import_react169.useState)(param), 2), setState = _useState[1];
  var updateState = function(p10) {
    ref.current = p10;
    setState(p10);
  };
  return [
    ref,
    updateState
  ];
};

// node_modules/@nutui/nutui-react/dist/es/packages/cascader/cascader.js
var defaultProps27 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  activeColor: "",
  activeIcon: "checklist",
  popup: true,
  options: [],
  optionKey: {},
  format: {},
  closeable: false,
  closeIconPosition: "top-right",
  closeIcon: "close",
  lazy: false,
  onClose: function() {
  },
  onChange: function() {
  },
  onPathChange: function() {
  }
});
var Cascader = (0, import_react170.forwardRef)(function(props, ref) {
  var classPrefix33 = "nut-cascader";
  var classPane = "".concat(classPrefix33, "-pane");
  var _mergeProps = mergeProps(defaultProps27, props), activeColor = _mergeProps.activeColor, activeIcon = _mergeProps.activeIcon, popup = _mergeProps.popup, _mergeProps_popupProps = _mergeProps.popupProps, popupProps = _mergeProps_popupProps === void 0 ? {} : _mergeProps_popupProps, outerVisible = _mergeProps.visible, outerOptions = _mergeProps.options, outerValue = _mergeProps.value, outerDefaultValue = _mergeProps.defaultValue, optionKey = _mergeProps.optionKey, format2 = _mergeProps.format, closeable = _mergeProps.closeable, closeIconPosition = _mergeProps.closeIconPosition, closeIcon = _mergeProps.closeIcon, lazy = _mergeProps.lazy, onLoad = _mergeProps.onLoad;
  var locale = useConfig().locale;
  var _useState = _sliced_to_array((0, import_react170.useState)(0), 2), tabActiveIndex = _useState[0], setTabActiveIndex = _useState[1];
  var _useRefState = _sliced_to_array(useRefState(outerOptions), 2), optionsRef = _useRefState[0], setInnerOptions = _useRefState[1];
  var innerOptions = getRefValue(optionsRef);
  var _useState1 = _sliced_to_array((0, import_react170.useState)({}), 2), loading = _useState1[0], setLoading = _useState1[1];
  var _usePropsValue = _sliced_to_array(usePropsValue({
    value: outerValue,
    defaultValue: outerDefaultValue,
    finalValue: [],
    onChange: function(value3) {
      var _props_onChange, _props_onPathChange;
      (_props_onChange = props.onChange) === null || _props_onChange === void 0 ? void 0 : _props_onChange.call(props, value3, pathNodes.current);
      (_props_onPathChange = props.onPathChange) === null || _props_onPathChange === void 0 ? void 0 : _props_onPathChange.call(props, value3, pathNodes.current);
    }
  }), 2), value2 = _usePropsValue[0], setValue = _usePropsValue[1];
  var _useState2 = _sliced_to_array((0, import_react170.useState)(value2), 2), innerValue = _useState2[0], setInnerValue = _useState2[1];
  var options2 = (0, import_react170.useMemo)(function() {
    if (!isEmpty(format2)) {
      return normalizeListOptions(innerOptions, format2);
    }
    if (!isEmpty(optionKey)) {
      return normalizeOptions(innerOptions, optionKey);
    }
    return innerOptions;
  }, [
    innerOptions,
    optionKey,
    format2,
    innerValue
  ]);
  var pathNodes = (0, import_react170.useRef)([]);
  var levels = (0, import_react170.useMemo)(function() {
    var next = [];
    var end = false;
    var currentOptions = options2;
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = void 0;
    try {
      var _loop = function() {
        var _step_value = _sliced_to_array(_step.value, 2), index2 = _step_value[0], val2 = _step_value[1];
        var opt = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.find(function(o) {
          return o.value === val2;
        });
        next.push({
          selected: val2,
          selectedText: opt === null || opt === void 0 ? void 0 : opt.text,
          pane: currentOptions
        });
        pathNodes.current[index2] = opt;
        if (opt === null || opt === void 0 ? void 0 : opt.children) {
          currentOptions = opt.children;
        } else {
          end = true;
          return "break";
        }
      };
      for (var _iterator = innerValue.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _ret = _loop();
        if (_ret === "break")
          break;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
    if (!end) {
      next.push({
        selected: null,
        pane: currentOptions
      });
    }
    return next;
  }, [
    innerValue,
    options2,
    innerOptions
  ]);
  var _usePropsValue1 = _sliced_to_array(usePropsValue({
    value: outerVisible,
    defaultValue: void 0,
    onChange: function(value3) {
      if (value3 === false) {
        var _props_onClose;
        (_props_onClose = props.onClose) === null || _props_onClose === void 0 ? void 0 : _props_onClose.call(props);
      }
    }
  }), 2), visible = _usePropsValue1[0], setVisible = _usePropsValue1[1];
  var actions = {
    open: function() {
      setVisible(true);
    },
    close: function() {
      setVisible(false);
    }
  };
  (0, import_react170.useImperativeHandle)(ref, function() {
    return actions;
  });
  (0, import_react170.useEffect)(function() {
    if (!visible) {
      setInnerValue(value2);
    }
  }, [
    visible,
    value2
  ]);
  (0, import_react170.useEffect)(function() {
    setInnerOptions(outerOptions);
  }, [
    outerOptions
  ]);
  (0, import_react170.useEffect)(function() {
    setTabActiveIndex(levels.length - 1);
  }, [
    innerValue,
    innerOptions,
    outerOptions
  ]);
  (0, import_react170.useEffect)(function() {
    var max = levels.length - 1;
    if (tabActiveIndex > max) {
      setTabActiveIndex(max);
    }
  }, [
    tabActiveIndex,
    levels,
    innerOptions,
    outerOptions
  ]);
  (0, import_react170.useEffect)(function() {
    var load = function() {
      var _ref = _async_to_generator(function() {
        var parent2, error;
        return __generator(this, function(_state) {
          switch (_state.label) {
            case 0:
              parent2 = {
                children: []
              };
              _state.label = 1;
            case 1:
              _state.trys.push([
                1,
                3,
                ,
                4
              ]);
              return [
                4,
                innerValue.reduce(function() {
                  var _ref2 = _async_to_generator(function(promise, val2, key2) {
                    var pane, parent3, node;
                    return __generator(this, function(_state2) {
                      switch (_state2.label) {
                        case 0:
                          return [
                            4,
                            onLoad({
                              value: val2
                            }, key2)
                          ];
                        case 1:
                          pane = _state2.sent();
                          return [
                            4,
                            promise
                          ];
                        case 2:
                          parent3 = _state2.sent();
                          parent3.children = pane;
                          if (key2 === innerValue.length - 1) {
                            return [
                              2,
                              Promise.resolve(parent3)
                            ];
                          }
                          if (pane) {
                            node = pane.find(function(p10) {
                              return p10.value === val2;
                            });
                            return [
                              2,
                              Promise.resolve(node)
                            ];
                          }
                          return [
                            2
                          ];
                      }
                    });
                  });
                  return function(promise, val2, key2) {
                    return _ref2.apply(this, arguments);
                  };
                }(), Promise.resolve(parent2))
              ];
            case 2:
              _state.sent();
              setInnerOptions(parent2.children);
              return [
                3,
                4
              ];
            case 3:
              error = _state.sent();
              console.error("Error loading data:", error);
              return [
                3,
                4
              ];
            case 4:
              return [
                2
              ];
          }
        });
      });
      return function load2() {
        return _ref.apply(this, arguments);
      };
    }();
    if (lazy)
      load();
  }, [
    lazy
  ]);
  var chooseItem = function() {
    var _ref = _async_to_generator(function(pane, levelIndex) {
      var nextValue, nextPathNodes, _props_onPathChange, asyncOptions;
      return __generator(this, function(_state) {
        switch (_state.label) {
          case 0:
            if (pane.disabled)
              return [
                2
              ];
            nextValue = innerValue.slice(0, levelIndex);
            nextPathNodes = pathNodes.current.slice(0, levelIndex);
            if (pane.value) {
              ;
              setLoading(!!onLoad && _define_property({}, levelIndex, pane.value));
              nextValue[levelIndex] = pane.value;
              nextPathNodes[levelIndex] = pane;
              pathNodes.current = nextPathNodes;
              props === null || props === void 0 ? void 0 : (_props_onPathChange = props.onPathChange) === null || _props_onPathChange === void 0 ? void 0 : _props_onPathChange.call(props, nextValue, pathNodes.current);
            }
            if (!onLoad)
              return [
                3,
                3
              ];
            if (!!pane.leaf)
              return [
                3,
                2
              ];
            return [
              4,
              onLoad(pane, levelIndex)
            ];
          case 1:
            asyncOptions = _state.sent();
            if (asyncOptions)
              pane.children = asyncOptions;
            return [
              3,
              3
            ];
          case 2:
            setVisible(false);
            setValue(nextValue);
            _state.label = 3;
          case 3:
            if (!pane.children && !onLoad) {
              setVisible(false);
              setValue(nextValue);
            }
            setInnerValue(nextValue);
            setLoading({});
            return [
              2
            ];
        }
      });
    });
    return function chooseItem2(pane, levelIndex) {
      return _ref.apply(this, arguments);
    };
  }();
  var renderCascaderItem = function(item, levelIndex) {
    var _item_pane;
    return (_item_pane = item.pane) === null || _item_pane === void 0 ? void 0 : _item_pane.map(function(pane, index2) {
      var active2 = item.selected === pane.value;
      var classes = (0, import_classnames29.default)({
        active: active2,
        disabled: pane.disabled
      }, "nut-cascader-item");
      var showLoadingIcon = loading[levelIndex] === pane.value;
      return import_react170.default.createElement("div", {
        className: classes,
        style: {
          color: active2 ? activeColor : ""
        },
        key: pane.value,
        onClick: function() {
          chooseItem(pane, levelIndex);
        }
      }, import_react170.default.createElement("div", {
        className: "nut-cascader-item-title"
      }, pane.text), showLoadingIcon && import_react170.default.createElement(s, {
        color: "#969799",
        className: "nut-cascader-item-icon-loading"
      }), active2 && ((0, import_react170.isValidElement)(activeIcon) ? activeIcon : import_react170.default.createElement(d2, {
        className: "".concat(classPrefix33, "-icon-check")
      })));
    });
  };
  var renderTab = function() {
    return import_react170.default.createElement("div", {
      className: (0, import_classnames29.default)(classPrefix33, props.className),
      style: props.style
    }, import_react170.default.createElement(tabs_default, {
      value: tabActiveIndex,
      onChange: function(index2) {
        var _props_onTabsChange;
        (_props_onTabsChange = props.onTabsChange) === null || _props_onTabsChange === void 0 ? void 0 : _props_onTabsChange.call(props, Number(index2));
        setTabActiveIndex(Number(index2));
      }
    }, levels.map(function(pane, index2) {
      return import_react170.default.createElement(tabs_default.TabPane, {
        title: pane.selectedText || locale.select,
        key: index2
      }, import_react170.default.createElement("div", {
        className: classPane
      }, renderCascaderItem(pane, index2)));
    })));
  };
  return popup ? import_react170.default.createElement(popup_default, _object_spread_props(_object_spread({}, popupProps), {
    visible,
    position: "bottom",
    round: true,
    closeIcon,
    closeable,
    closeIconPosition,
    title: props.title,
    left: props.left,
    onOverlayClick: function() {
      return setVisible(false);
    },
    onCloseIconClick: function() {
      return setVisible(false);
    }
  }), renderTab()) : renderTab();
});
Cascader.displayName = "NutCascader";

// node_modules/@nutui/nutui-react/dist/es/packages/cascader/index.js
var cascader_default = Cascader;

// node_modules/@nutui/nutui-react/dist/es/packages/address/cascaderRender.js
var defaultProps28 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  visible: false,
  type: "cascader",
  options: [],
  optionKey: {
    textKey: "text",
    valueKey: "value",
    childrenKey: "children"
  },
  format: {},
  height: "200px"
});
var CascaderRender = function(props) {
  var _ref = _object_spread({}, defaultProps28, props), children2 = _ref.children, visible = _ref.visible, type4 = _ref.type, height2 = _ref.height, options2 = _ref.options, title = _ref.title, left = _ref.left, value2 = _ref.value, defaultValue = _ref.defaultValue, optionKey = _ref.optionKey, format2 = _ref.format, onClose = _ref.onClose, onChange = _ref.onChange, onPathChange = _ref.onPathChange, rest = _object_without_properties(_ref, [
    "children",
    "visible",
    "type",
    "height",
    "options",
    "title",
    "left",
    "value",
    "defaultValue",
    "optionKey",
    "format",
    "onClose",
    "onChange",
    "onPathChange"
  ]);
  return import_react171.default.createElement(import_react171.default.Fragment, null, type4 === "cascader" && import_react171.default.createElement(cascader_default, _object_spread({
    visible,
    value: value2,
    defaultValue,
    title,
    left,
    options: options2,
    format: format2,
    optionKey,
    onClose: function() {
      onClose === null || onClose === void 0 ? void 0 : onClose();
    },
    onChange: function(val2, params) {
      onChange === null || onChange === void 0 ? void 0 : onChange(val2, params);
    },
    onPathChange
  }, rest)));
};

// node_modules/@nutui/nutui-react/dist/es/packages/address/elevatorRender.js
var import_react172 = __toESM(require_react());

// node_modules/@nutui/nutui-react/dist/es/packages/address/utils.js
var generateId = function(name2) {
  return name2.split("").reduce(function(sum2, char) {
    return sum2 + char.charCodeAt(0);
  }, 0);
};
var transformData = function(data2) {
  var groupByWordCode = function(data3, parentId, parentName) {
    return data3 === null || data3 === void 0 ? void 0 : data3.reduce(function(acc, item) {
      var wordCode = item.wordCode;
      if (!acc[wordCode]) {
        acc[wordCode] = [];
      }
      var currentId = generateId(item.value);
      acc[wordCode].push({
        name: item.value,
        wordCode: item.wordCode,
        id: currentId,
        pId: parentId,
        pName: parentName,
        children: item.children && groupByWordCode(item.children, currentId, item.text) || null
      });
      return acc;
    }, {});
  };
  var extractTitles = function(obj) {
    return Object.keys(obj).map(function(key2) {
      return {
        title: key2,
        list: obj[key2].map(function(item) {
          if (item.children) {
            item.children = extractTitles(item.children);
          }
          return item;
        })
      };
    });
  };
  var middleData = groupByWordCode(data2, "", "");
  var resultData = extractTitles(middleData);
  return resultData;
};
var findDataByName = function(data2, name2) {
  var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = void 0;
  try {
    for (var _iterator = data2[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var item = _step.value;
      var _item_name;
      if (((_item_name = item.name) === null || _item_name === void 0 ? void 0 : _item_name.indexOf(name2)) === 0)
        return item;
      if (item.children) {
        var found = findDataByName(item.children, name2);
        if (found)
          return found;
      }
      if (item.list) {
        var found1 = findDataByName(item.list, name2);
        if (found1)
          return found1;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
  return null;
};

// node_modules/@nutui/nutui-react/dist/es/packages/address/elevatorRender.js
var defaultProps29 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  visible: false,
  type: "elevator",
  options: [],
  optionKey: {
    textKey: "text",
    valueKey: "value",
    childrenKey: "children"
  },
  format: {},
  height: "200px",
  activeColor: "",
  activeIcon: "checklist",
  popup: true,
  closeable: false,
  closeIconPosition: "top-right",
  closeIcon: "close",
  lazy: false,
  hotList: [],
  onClose: function() {
  },
  onChange: function() {
  },
  onPathChange: function() {
  }
});
var ElevatorRender = function(props) {
  var _mergeProps = mergeProps(defaultProps29, props), hotList = _mergeProps.hotList, title = _mergeProps.title, left = _mergeProps.left, optionKey = _mergeProps.optionKey, format2 = _mergeProps.format, onClose = _mergeProps.onClose, onChange = _mergeProps.onChange, onPathChange = _mergeProps.onPathChange, popup = _mergeProps.popup, _mergeProps_popupProps = _mergeProps.popupProps, popupProps = _mergeProps_popupProps === void 0 ? {} : _mergeProps_popupProps, outerVisible = _mergeProps.visible, outerOptions = _mergeProps.options, outerValue = _mergeProps.value, outerDefaultValue = _mergeProps.defaultValue, closeable = _mergeProps.closeable, closeIconPosition = _mergeProps.closeIconPosition, closeIcon = _mergeProps.closeIcon;
  var _useConfig = useConfig(), _useConfig_locale = _useConfig.locale, select = _useConfig_locale.select, _useConfig_locale_address = _useConfig_locale.address, hotCity = _useConfig_locale_address.hotCity, selectProvince = _useConfig_locale_address.selectProvince;
  var classPrefix33 = "nut-address";
  var MAX_LENGTH = 10;
  var _usePropsValue = _sliced_to_array(usePropsValue({
    value: outerValue,
    defaultValue: outerDefaultValue,
    finalValue: [],
    onChange: function(value3) {
      onChange(value3, []);
      onPathChange(value3, []);
    }
  }), 2), value2 = _usePropsValue[0], setValue = _usePropsValue[1];
  var _useState = _sliced_to_array((0, import_react172.useState)(outerOptions), 2), innerOptions = _useState[0], setInnerOptions = _useState[1];
  var _useState1 = _sliced_to_array((0, import_react172.useState)(value2), 2), innerValue = _useState1[0], setInnerValue = _useState1[1];
  var _useState2 = _sliced_to_array((0, import_react172.useState)([]), 2), elevatorOptions = _useState2[0], setElevatorOptions = _useState2[1];
  var _useState3 = _sliced_to_array((0, import_react172.useState)(selectProvince), 2), addressTip = _useState3[0], setAddressTip = _useState3[1];
  var _useState4 = _sliced_to_array((0, import_react172.useState)(0), 2), levelIndex = _useState4[0], setLevelIndex = _useState4[1];
  var _useState5 = _sliced_to_array((0, import_react172.useState)(0), 2), tabActiveIndex = _useState5[0], setTabActiveIndex = _useState5[1];
  var options2 = (0, import_react172.useMemo)(function() {
    if (!isEmpty(format2)) {
      return transformData(normalizeListOptions(innerOptions, format2));
    }
    if (!isEmpty(optionKey)) {
      return transformData(normalizeOptions(innerOptions, optionKey) || []);
    }
    return transformData(innerOptions);
  }, [
    innerOptions,
    optionKey,
    format2
  ]);
  (0, import_react172.useEffect)(function() {
    setElevatorOptions(options2);
  }, [
    options2
  ]);
  var levels = (0, import_react172.useMemo)(function() {
    var next = [];
    var end = false;
    var currentOptions = options2;
    innerValue.forEach(function(val2, index2) {
      var opt = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.flatMap(function(o) {
        return o.list.find(function(item) {
          return item.name === val2;
        });
      }).filter(function(item) {
        return item !== void 0;
      })[0];
      next.push({
        name: val2,
        children: currentOptions,
        levelIndex: index2,
        current: index2 === tabActiveIndex
      });
      if (opt === null || opt === void 0 ? void 0 : opt.children) {
        currentOptions = opt.children;
      } else {
        end = true;
      }
    });
    if (!end) {
      next.push({
        name: null,
        children: currentOptions,
        levels: -1,
        current: false
      });
    }
    return next;
  }, [
    innerValue,
    options2,
    tabActiveIndex
  ]);
  var _usePropsValue1 = _sliced_to_array(usePropsValue({
    value: outerVisible,
    defaultValue: void 0,
    onChange: function(value3) {
      if (value3 === false)
        onClose();
    }
  }), 2), visible = _usePropsValue1[0], setVisible = _usePropsValue1[1];
  (0, import_react172.useEffect)(function() {
    if (!visible)
      setInnerValue(value2);
  }, [
    visible,
    value2
  ]);
  (0, import_react172.useEffect)(function() {
    setInnerOptions(outerOptions);
  }, [
    outerOptions
  ]);
  (0, import_react172.useEffect)(function() {
    setTabActiveIndex(levels.length - 1);
    setAddressTip(innerValue.length ? select : selectProvince);
  }, [
    innerValue
  ]);
  var handleElevatorItemClick = function(elevatorItem, levelIndex2) {
    var _elevatorItem_children;
    var nextValue = innerValue.slice(0, levelIndex2);
    if (elevatorItem.name) {
      nextValue[levelIndex2] = elevatorItem.name;
    }
    setInnerValue(nextValue);
    if ((_elevatorItem_children = elevatorItem.children) === null || _elevatorItem_children === void 0 ? void 0 : _elevatorItem_children.length) {
      setElevatorOptions(elevatorItem.children);
      setLevelIndex(levelIndex2 + 1);
    } else {
      setVisible(false);
      setValue(nextValue);
    }
  };
  var handleHotItemClick = function(hotItem) {
    var distData = findDataByName(options2, hotItem.name);
    if (distData) {
      var nextValue = [
        distData.pName,
        distData.name
      ].filter(function(item) {
        return item !== "";
      });
      setInnerValue(nextValue);
      setElevatorOptions(distData.children);
      setLevelIndex(nextValue.length);
    }
  };
  var renderTabs = function() {
    if (!levels.length || !levels[0].name)
      return null;
    return import_react172.default.createElement("div", {
      className: "".concat(classPrefix33, "-selected")
    }, levels.map(function(item, index2) {
      var _levels_;
      return import_react172.default.createElement(import_react172.default.Fragment, {
        key: "adtabs-".concat(index2)
      }, item.name && import_react172.default.createElement("div", {
        className: "".concat(classPrefix33, "-selected-item ").concat(item.current ? "active" : ""),
        onClick: function() {
          var _props_onTabsChange;
          (_props_onTabsChange = props.onTabsChange) === null || _props_onTabsChange === void 0 ? void 0 : _props_onTabsChange.call(props, index2);
          setTabActiveIndex(index2);
          setLevelIndex(index2);
          setElevatorOptions(item.children);
        }
      }, item.name), ((_levels_ = levels[index2 + 1]) === null || _levels_ === void 0 ? void 0 : _levels_.name) && import_react172.default.createElement("div", {
        className: "".concat(classPrefix33, "-selected-border")
      }, "-"));
    }));
  };
  var renderHotCity = function() {
    if (levels.length && tabActiveIndex !== 0)
      return null;
    return import_react172.default.createElement(import_react172.default.Fragment, null, import_react172.default.createElement("div", {
      className: "".concat(classPrefix33, "-title")
    }, hotCity), import_react172.default.createElement("div", {
      className: "".concat(classPrefix33, "-hotlist ").concat(hotList.length > MAX_LENGTH ? "hotlist-more" : "")
    }, hotList.map(function(item, index2) {
      return import_react172.default.createElement("div", {
        className: "".concat(classPrefix33, "-hotlist-item"),
        key: "hot-".concat(index2),
        onClick: function() {
          return handleHotItemClick(item);
        }
      }, item.name);
    })));
  };
  var renderArea = function() {
    return import_react172.default.createElement(import_react172.default.Fragment, null, import_react172.default.createElement("div", {
      className: "".concat(classPrefix33, "-title")
    }, addressTip), import_react172.default.createElement(elevator_default, {
      className: "".concat(classPrefix33, "-elevator"),
      list: elevatorOptions,
      onItemClick: function(key2, item) {
        return handleElevatorItemClick(item, levelIndex);
      },
      style: {
        height: "100%"
      },
      height: "93%"
    }));
  };
  var renderContent = function() {
    return import_react172.default.createElement(import_react172.default.Fragment, null, renderTabs(), import_react172.default.createElement("div", {
      style: {
        height: innerValue.length ? "80%" : "93%",
        overflowY: levels.length && tabActiveIndex !== 0 ? "hidden" : "auto"
      }
    }, renderHotCity(), renderArea()));
  };
  return popup ? import_react172.default.createElement(popup_default, _object_spread_props(_object_spread({}, popupProps), {
    visible,
    position: "bottom",
    style: {
      height: "89%"
    },
    round: true,
    closeIcon,
    closeable,
    closeIconPosition,
    title,
    left,
    onOverlayClick: function() {
      return setVisible(false);
    },
    onCloseIconClick: function() {
      return setVisible(false);
    }
  }), renderContent()) : renderContent();
};
ElevatorRender.displayName = "NutElevatorRender";

// node_modules/@nutui/nutui-react/dist/es/packages/address/existRender.js
var import_react173 = __toESM(require_react());
var defaultProps30 = {
  type: "exist",
  existList: [],
  defaultIcon: null,
  selectIcon: null,
  custom: false
};
var ExistRender = function(props) {
  var locale = useConfig().locale;
  var _ref = _object_spread({}, defaultProps30, props), children2 = _ref.children, type4 = _ref.type, existList = _ref.existList, selectIcon = _ref.selectIcon, defaultIcon = _ref.defaultIcon, custom = _ref.custom, onSelect = _ref.onSelect, onSwitch = _ref.onSwitch, rest = _object_without_properties(_ref, [
    "children",
    "type",
    "existList",
    "selectIcon",
    "defaultIcon",
    "custom",
    "onSelect",
    "onSwitch"
  ]);
  var classPrefix33 = "nut-address";
  var selectedExist = function(item) {
    existList.forEach(function(list, index2) {
      ;
      list.selectedAddress = false;
    });
    item.selectedAddress = true;
    onSelect && onSelect(item);
  };
  var onClick = function(e2) {
    e2.stopPropagation();
    onSwitch && onSwitch({
      type: type4 === "exist" ? "cascader" : "exist"
    });
  };
  return import_react173.default.createElement(import_react173.default.Fragment, null, import_react173.default.createElement("ul", {
    className: "".concat(classPrefix33, "-exist")
  }, existList.map(function(item, index2) {
    return import_react173.default.createElement("li", {
      className: "".concat(classPrefix33, "-exist-item ").concat(item.selectedAddress ? "active" : ""),
      key: index2,
      onClick: function(e2) {
        e2.stopPropagation();
        selectedExist(item);
      }
    }, item.selectedAddress ? import_react173.default.createElement(import_react173.default.Fragment, null, import_react173.default.isValidElement(selectIcon) ? selectIcon : import_react173.default.createElement(d2, {
      color: "var(--nutui-color-primary)"
    })) : import_react173.default.createElement(import_react173.default.Fragment, null, import_react173.default.isValidElement(defaultIcon) ? defaultIcon : import_react173.default.createElement(m, null)), import_react173.default.createElement("div", {
      className: "".concat(classPrefix33, "-exist-item-info")
    }, item.name && item.phone && import_react173.default.createElement(import_react173.default.Fragment, null, import_react173.default.createElement("div", null, item.name), import_react173.default.createElement("div", null, item.phone)), import_react173.default.createElement("div", null, item.provinceName + item.cityName + item.countyName + item.townName + item.addressDetail)));
  })), (custom || custom && locale.address.chooseAnotherAddress) && import_react173.default.createElement("div", {
    className: "".concat(classPrefix33, "-footer"),
    onClick
  }, import_react173.default.createElement("div", {
    className: "".concat(classPrefix33, "-footer-btn")
  }, custom)));
};

// node_modules/@nutui/nutui-react/dist/es/packages/address/address.js
var defaultProps31 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  defaultValue: [],
  type: "cascader",
  options: [],
  optionKey: {
    textKey: "text",
    valueKey: "value",
    childrenKey: "children"
  },
  format: {},
  custom: false,
  existList: [],
  hotList: [],
  height: "200px",
  defaultIcon: null,
  selectIcon: null,
  closeIcon: null,
  backIcon: null
});
var InternalAddress = function(props, ref) {
  var locale = useConfig().locale;
  var _mergeProps = mergeProps(defaultProps31, props), style = _mergeProps.style, className = _mergeProps.className, visible = _mergeProps.visible, defaultVisible = _mergeProps.defaultVisible, defaultValue = _mergeProps.defaultValue, children2 = _mergeProps.children, type4 = _mergeProps.type, options2 = _mergeProps.options, optionKey = _mergeProps.optionKey, format2 = _mergeProps.format, height2 = _mergeProps.height, title = _mergeProps.title, existList = _mergeProps.existList, custom = _mergeProps.custom, selectIcon = _mergeProps.selectIcon, defaultIcon = _mergeProps.defaultIcon, closeIcon = _mergeProps.closeIcon, backIcon = _mergeProps.backIcon, hotList = _mergeProps.hotList, onChange = _mergeProps.onChange, onExistSelect = _mergeProps.onExistSelect, onClose = _mergeProps.onClose, onSwitch = _mergeProps.onSwitch, rest = _object_without_properties(_mergeProps, [
    "style",
    "className",
    "visible",
    "defaultVisible",
    "defaultValue",
    "children",
    "type",
    "options",
    "optionKey",
    "format",
    "height",
    "title",
    "existList",
    "custom",
    "selectIcon",
    "defaultIcon",
    "closeIcon",
    "backIcon",
    "hotList",
    "onChange",
    "onExistSelect",
    "onClose",
    "onSwitch"
  ]);
  var classPrefix33 = "nut-address";
  var _useState = _sliced_to_array((0, import_react174.useState)(type4), 2), currentType = _useState[0], setCurrentType = _useState[1];
  var _usePropsValue = _sliced_to_array(usePropsValue({
    value: visible,
    defaultValue: defaultVisible,
    finalValue: defaultVisible
  }), 2), innerVisible = _usePropsValue[0], setInnerVisible = _usePropsValue[1];
  (0, import_react174.useImperativeHandle)(ref, function() {
    return {
      open: function open() {
        setInnerVisible(true);
      },
      close: function close() {
        setInnerVisible(false);
      }
    };
  });
  var handleClose = function() {
    setInnerVisible(false);
    onClose && onClose();
  };
  var renderLeftOnCascaderSwitch = function() {
    if (!custom)
      return null;
    return import_react174.default.createElement("div", {
      className: "".concat(classPrefix33, "-left-icon"),
      onClick: onSwitchModule
    }, import_react174.default.isValidElement(backIcon) ? backIcon : import_react174.default.createElement(d, {
      color: "#cccccc"
    }));
  };
  var selectedExistItem = function(data2) {
    onExistSelect && onExistSelect(data2);
    handleClose();
  };
  var onSwitchModule = function() {
    var nextType = currentType === "exist" ? "cascader" : "exist";
    setCurrentType(nextType);
    onSwitch && onSwitch({
      type: nextType
    });
  };
  var renderElevator = function() {
    return import_react174.default.createElement(ElevatorRender, {
      visible: innerVisible,
      closeable: true,
      title: title || locale.address.selectRegion,
      left: backIcon,
      defaultValue,
      closeIcon,
      options: options2,
      hotList,
      format: format2,
      optionKey,
      type: currentType,
      height: height2,
      onClose: handleClose,
      onChange: function(val2, params) {
        onChange === null || onChange === void 0 ? void 0 : onChange(val2, params);
      }
    });
  };
  var renderCascator = function() {
    return import_react174.default.createElement(CascaderRender, {
      visible: innerVisible,
      closeable: true,
      title: title || locale.address.selectRegion,
      left: renderLeftOnCascaderSwitch(),
      defaultValue,
      closeIcon,
      options: options2,
      format: format2,
      optionKey,
      type: currentType,
      height: height2,
      onClose: handleClose,
      onChange: function(val2, params) {
        onChange && onChange(val2, params);
      }
    });
  };
  var renderExist = function() {
    return import_react174.default.createElement(popup_default, {
      visible: innerVisible,
      position: "bottom",
      round: true,
      closeable: true,
      closeIcon,
      title: title || locale.address.selectRegion,
      onClose: handleClose
    }, import_react174.default.createElement(
      "div",
      {
        className: "".concat(classPrefix33, " ").concat(className || ""),
        style: _object_spread({}, style)
      },
      // 不需要 close，选中切换即关闭弹框。可手动关闭弹框，只关闭弹框不处理逻辑。
      import_react174.default.createElement(ExistRender, {
        type: currentType,
        existList,
        selectIcon,
        defaultIcon,
        custom,
        onSelect: selectedExistItem,
        onSwitch: onSwitchModule
      })
    ));
  };
  return import_react174.default.createElement(import_react174.default.Fragment, null, currentType === "elevator" ? renderElevator() : null, currentType === "cascader" ? renderCascator() : null, currentType === "exist" ? renderExist() : null);
};
var Address = (0, import_react174.forwardRef)(InternalAddress);
Address.displayName = "NutAddress";

// node_modules/@nutui/nutui-react/dist/es/packages/address/index.js
var address_default = Address;

// node_modules/@nutui/nutui-react/dist/es/packages/calendar/calendar.js
var import_react176 = __toESM(require_react());

// node_modules/@nutui/nutui-react/dist/es/packages/calendaritem/calendaritem.js
var import_react175 = __toESM(require_react());
var import_classnames30 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/calendar/utils.js
var splitDate = function(date4) {
  var split = date4.indexOf("-") !== -1 ? "-" : "/";
  return date4.split(split);
};
var isMultiple = function(day, days) {
  if (days.length > 0) {
    return days.some(function(item) {
      return Utils.isEqual(item, day);
    });
  }
  return false;
};
var isCurrDay = function(month, day) {
  var date4 = "".concat(month.curData[0], "/").concat(month.curData[1], "/").concat(day);
  return Utils.isEqual(date4, Utils.date2Str(/* @__PURE__ */ new Date(), "/"));
};
var getCurrDate = function(day, month) {
  return "".concat(month.curData[0], "/").concat(month.curData[1], "/").concat(Utils.getNumTwoBit(+day.day));
};
var isStart = function(day, days) {
  return Utils.isEqual(days[0], day);
};
var isEnd = function(day, days) {
  return Utils.isEqual(days[1], day);
};
var isStartAndEnd = function(days) {
  return days.length >= 2 && Utils.isEqual(days[0], days[1]);
};

// node_modules/@nutui/nutui-react/dist/es/packages/calendaritem/calendaritem.js
var defaultProps32 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  type: "single",
  autoBackfill: false,
  popup: true,
  title: "",
  startDate: Utils.getDay(0),
  endDate: Utils.getDay(365),
  showToday: true,
  startText: "",
  endText: "",
  confirmText: "",
  showTitle: true,
  showSubTitle: true,
  scrollAnimation: true,
  firstDayOfWeek: 0,
  disableDate: function(date4) {
    return false;
  },
  renderHeaderButtons: void 0,
  renderDay: void 0,
  renderDayTop: void 0,
  renderDayBottom: void 0,
  onConfirm: function(data2) {
  },
  onUpdate: function() {
  },
  onDayClick: function(data2) {
  },
  onPageChange: function(data2) {
  }
});
var CalendarItem = import_react175.default.forwardRef(function(props, ref) {
  var locale = useConfig().locale;
  var _$_object_spread = _object_spread({}, defaultProps32, props), style = _$_object_spread.style, className = _$_object_spread.className, children2 = _$_object_spread.children, popup = _$_object_spread.popup, type4 = _$_object_spread.type, autoBackfill = _$_object_spread.autoBackfill, title = _$_object_spread.title, defaultValue = _$_object_spread.defaultValue, startDate = _$_object_spread.startDate, endDate = _$_object_spread.endDate, showToday = _$_object_spread.showToday, startText = _$_object_spread.startText, endText = _$_object_spread.endText, confirmText = _$_object_spread.confirmText, showTitle = _$_object_spread.showTitle, showSubTitle = _$_object_spread.showSubTitle, scrollAnimation = _$_object_spread.scrollAnimation, firstDayOfWeek = _$_object_spread.firstDayOfWeek, disableDate = _$_object_spread.disableDate, renderHeaderButtons = _$_object_spread.renderHeaderButtons, renderBottomButton = _$_object_spread.renderBottomButton, renderDay = _$_object_spread.renderDay, renderDayTop = _$_object_spread.renderDayTop, renderDayBottom = _$_object_spread.renderDayBottom, value2 = _$_object_spread.value, onConfirm = _$_object_spread.onConfirm, onUpdate = _$_object_spread.onUpdate, onDayClick = _$_object_spread.onDayClick, onPageChange = _$_object_spread.onPageChange;
  var weekdays = locale.calendaritem.weekdays;
  var weeks = _to_consumable_array(weekdays.slice(firstDayOfWeek, 7)).concat(_to_consumable_array(weekdays.slice(0, firstDayOfWeek)));
  var monthTitle = locale.calendaritem.monthTitle;
  var _useState = _sliced_to_array((0, import_react175.useState)(""), 2), yearMonthTitle = _useState[0], setYearMonthTitle = _useState[1];
  var _useState1 = _sliced_to_array((0, import_react175.useState)([]), 2), monthsData = _useState1[0], setMonthsData = _useState1[1];
  var _useState2 = _sliced_to_array((0, import_react175.useState)(0), 2), monthsNum = _useState2[0], setMonthsNum = _useState2[1];
  var _useState3 = _sliced_to_array((0, import_react175.useState)(0), 2), translateY = _useState3[0], setTranslateY = _useState3[1];
  var _useState4 = _sliced_to_array((0, import_react175.useState)([]), 2), monthDefaultRange = _useState4[0], setMonthDefaultRange = _useState4[1];
  var propStartDate = startDate || Utils.getDay(0);
  var propEndDate = endDate || Utils.getDay(365);
  var startDates = splitDate(propStartDate);
  var endDates = splitDate(propEndDate);
  var _useState5 = _sliced_to_array((0, import_react175.useState)({
    currDateArray: []
  }), 1), state = _useState5[0];
  var getMonthsPanel = function() {
    return monthsPanel.current;
  };
  var getMonthsRef = function() {
    return monthsRef.current;
  };
  var resetDefaultValue = function() {
    if (defaultValue || Array.isArray(defaultValue) && defaultValue.length > 0) {
      return type4 !== "single" ? _to_consumable_array(defaultValue) : defaultValue;
    }
    return void 0;
  };
  var _usePropsValue = _sliced_to_array(usePropsValue({
    value: value2,
    defaultValue: resetDefaultValue(),
    finalValue: [],
    onChange: function(val2) {
    }
  }), 2), currentDate = _usePropsValue[0], setCurrentDate = _usePropsValue[1];
  var weeksPanel = (0, import_react175.useRef)(null);
  var monthsRef = (0, import_react175.useRef)(null);
  var monthsPanel = (0, import_react175.useRef)(null);
  var viewAreaRef = (0, import_react175.useRef)(null);
  var _useState6 = _sliced_to_array((0, import_react175.useState)(0), 2), avgHeight = _useState6[0], setAvgHeight = _useState6[1];
  var viewHeight = 0;
  var classPrefix33 = "nut-calendar";
  var dayPrefix = "nut-calendar-day";
  var getMonthData = function(curData, monthNum, type5) {
    var i6 = 0;
    var date4 = curData;
    var monthData = monthsData;
    do {
      var y = parseInt(date4[0], 10);
      var m13 = parseInt(date4[1], 10);
      var days = _to_consumable_array(getPreMonthDates("prev", y, m13, firstDayOfWeek)).concat(_to_consumable_array(getDaysStatus("active", y, m13)));
      var cssHeight = 39 + (days.length > 35 ? 384 : 320);
      var scrollTop = 0;
      if (monthData.length > 0) {
        var monthEle = monthData[monthData.length - 1];
        scrollTop = monthEle.scrollTop + monthEle.cssHeight;
      }
      var monthInfo = {
        curData: date4,
        title: monthTitle(y, m13),
        monthData: days,
        cssHeight,
        scrollTop
      };
      if (type5 === "next") {
        if (!endDates || !Utils.compareDate("".concat(endDates[0], "/").concat(endDates[1], "/").concat(Utils.getMonthDays(endDates[0], endDates[1])), "".concat(curData[0], "/").concat(curData[1], "/").concat(curData[2]))) {
          monthData.push(monthInfo);
        }
      } else if (!startDates || !Utils.compareDate("".concat(curData[0], "/").concat(curData[1], "/").concat(curData[2]), "".concat(startDates[0], "/").concat(startDates[1], "/01"))) {
        monthData.unshift(monthInfo);
      }
      date4 = getCurrMonthData("next", y, m13);
    } while (i6++ < monthNum);
    setMonthsData(monthData);
  };
  var setReachedYearMonthInfo = function(current) {
    var currentMonthsData = monthsData[current];
    var _currentMonthsData_curData = _sliced_to_array(currentMonthsData.curData, 2), year = _currentMonthsData_curData[0], month = _currentMonthsData_curData[1];
    if (currentMonthsData.title === yearMonthTitle)
      return;
    onPageChange && onPageChange([
      year,
      month,
      "".concat(year, "-").concat(month)
    ]);
    setYearMonthTitle(currentMonthsData.title);
  };
  var setDefaultRange = function(monthNum, current) {
    var start2 = 0;
    var end = 0;
    if (monthNum >= 3) {
      if (current > 0 && current < monthNum) {
        start2 = current - 1;
        end = current + 3;
      } else if (current === 0) {
        start2 = current;
        end = current + 4;
      } else if (current === monthNum) {
        start2 = current - 2;
        end = current + 2;
      }
    } else {
      start2 = 0;
      end = monthNum + 2;
    }
    setMonthDefaultRange([
      start2,
      end
    ]);
    setTranslateY(monthsData[start2].scrollTop);
    setReachedYearMonthInfo(current);
  };
  var getMonthNum = function() {
    var monthNum = Number(endDates[1]) - Number(startDates[1]);
    var yearNum = Number(endDates[0]) - Number(startDates[0]);
    if (yearNum > 0) {
      monthNum += 12 * yearNum;
    }
    if (monthNum <= 0) {
      monthNum = 1;
    }
    setMonthsNum(monthNum);
    return monthNum;
  };
  var setDefaultDate = function() {
    var defaultData = [];
    if (type4 === "range" && Array.isArray(currentDate)) {
      if (currentDate.length > 0) {
        if (propStartDate && Utils.compareDate(currentDate[0], propStartDate)) {
          currentDate.splice(0, 1, propStartDate);
        }
        if (propEndDate && Utils.compareDate(propEndDate, currentDate[1])) {
          currentDate.splice(1, 1, propEndDate);
        }
        defaultData = _to_consumable_array(splitDate(currentDate[0])).concat(_to_consumable_array(splitDate(currentDate[1])));
      }
    } else if (type4 === "multiple" && Array.isArray(currentDate)) {
      if (currentDate.length > 0) {
        var _currentDate;
        var defaultArr = [];
        var obj = {};
        currentDate.forEach(function(item) {
          if (propStartDate && !Utils.compareDate(item, propStartDate) && propEndDate && !Utils.compareDate(propEndDate, item)) {
            if (!Object.hasOwnProperty.call(obj, item)) {
              defaultArr.push(item);
              obj[item] = item;
            }
          }
        });
        currentDate.splice(0) && (_currentDate = currentDate).push.apply(_currentDate, _to_consumable_array(defaultArr));
        defaultData = _to_consumable_array(splitDate(defaultArr[0]));
      }
    } else if (type4 === "week" && Array.isArray(currentDate)) {
      if (currentDate.length > 0) {
        var _currentDate1;
        var _splitDate = _sliced_to_array(splitDate(currentDate[0]), 3), y = _splitDate[0], m13 = _splitDate[1], d30 = _splitDate[2];
        var weekArr = Utils.getWeekDate(y, m13, d30, firstDayOfWeek);
        currentDate.splice(0) && (_currentDate1 = currentDate).push.apply(_currentDate1, _to_consumable_array(weekArr));
        if (propStartDate && Utils.compareDate(currentDate[0], propStartDate)) {
          currentDate.splice(0, 1, propStartDate);
        }
        if (propEndDate && Utils.compareDate(propEndDate, currentDate[1])) {
          currentDate.splice(1, 1, propEndDate);
        }
        defaultData = _to_consumable_array(splitDate(currentDate[0])).concat(_to_consumable_array(splitDate(currentDate[1])));
      }
    } else if (currentDate) {
      if (currentDate.length > 0) {
        if (propStartDate && Utils.compareDate(currentDate, propStartDate)) {
          defaultData = _to_consumable_array(splitDate(propStartDate));
        } else if (propEndDate && !Utils.compareDate(currentDate, propEndDate)) {
          defaultData = _to_consumable_array(splitDate(propEndDate));
        } else {
          defaultData = _to_consumable_array(splitDate(currentDate));
        }
      } else {
        defaultData = [];
      }
    }
    return defaultData;
  };
  var getCurrentIndex = function(defaultData) {
    var current = 0;
    var lastCurrent = 0;
    if (defaultData.length > 0) {
      monthsData.forEach(function(item, index3) {
        if (item.title === monthTitle(defaultData[0], defaultData[1])) {
          current = index3;
        }
        if (type4 === "range" || type4 === "week") {
          if (item.title === monthTitle(defaultData[3], defaultData[4])) {
            lastCurrent = index3;
          }
        }
      });
    } else {
      var date4 = /* @__PURE__ */ new Date();
      var year = date4.getFullYear();
      var month = date4.getMonth() + 1;
      var index2 = monthsData.findIndex(function(item) {
        return +item.curData[0] === year && +item.curData[1] === month;
      });
      if (index2 > -1) {
        current = index2;
      }
    }
    return {
      current,
      lastCurrent
    };
  };
  var renderCurrentDate = function() {
    var defaultData = setDefaultDate();
    var current = getCurrentIndex(defaultData);
    if (defaultData.length > 0) {
      if (type4 === "range") {
        chooseDay({
          day: defaultData[2],
          type: "active"
        }, monthsData[current.current], true);
        chooseDay({
          day: defaultData[5],
          type: "active"
        }, monthsData[current.lastCurrent], true);
      } else if (type4 === "week") {
        chooseDay({
          day: defaultData[2],
          type: "curr"
        }, monthsData[current.current], true);
      } else if (type4 === "multiple") {
        ;
        _to_consumable_array(currentDate).forEach(function(item) {
          var dateArr = splitDate(item);
          var currentIndex = current.current;
          monthsData.forEach(function(item2, index2) {
            if (item2.title === monthTitle(dateArr[0], dateArr[1])) {
              currentIndex = index2;
            }
          });
          chooseDay({
            day: dateArr[2],
            type: "active"
          }, monthsData[currentIndex], true);
        });
      } else {
        chooseDay({
          day: defaultData[2],
          type: "active"
        }, monthsData[current.current], true);
      }
    }
    return current.current;
  };
  var requestAniFrameFunc = function(current, monthNum) {
    var lastItem = monthsData[monthsData.length - 1];
    var containerHeight = lastItem.cssHeight + lastItem.scrollTop;
    raf_default(function() {
      if (monthsRef && monthsPanel && viewAreaRef) {
        viewHeight = getMonthsRef().clientHeight;
        getMonthsPanel().style.height = "".concat(containerHeight, "px");
        getMonthsRef().scrollTop = monthsData[current].scrollTop;
      }
    });
    setAvgHeight(Math.floor(containerHeight / (monthNum + 1)));
  };
  var initData = function() {
    var monthNum = getMonthNum();
    getMonthData(startDates, monthNum, "next");
    var current = renderCurrentDate();
    setDefaultRange(monthNum, current);
    requestAniFrameFunc(current, monthNum);
  };
  (0, import_react175.useEffect)(function() {
    initData();
  }, []);
  var resetRender = function() {
    state.currDateArray.splice(0);
    monthsData.splice(0);
    initData();
  };
  (0, import_react175.useEffect)(function() {
    setCurrentDate(resetDefaultValue() || []);
  }, [
    defaultValue
  ]);
  (0, import_react175.useEffect)(function() {
    popup && resetRender();
  }, [
    currentDate
  ]);
  var scrollToDate = function(date4) {
    if (Utils.compareDate(date4, propStartDate)) {
      date4 = propStartDate;
    } else if (!Utils.compareDate(date4, propEndDate)) {
      date4 = propEndDate;
    }
    var dateArr = splitDate(date4);
    monthsData.forEach(function(item, index2) {
      if (item.title === monthTitle(dateArr[0], dateArr[1])) {
        var currTop = monthsData[index2].scrollTop;
        if (monthsRef.current) {
          var distance = currTop - monthsRef.current.scrollTop;
          if (scrollAnimation) {
            var flag = 0;
            var interval = setInterval(function() {
              flag++;
              if (monthsRef.current) {
                var offset = distance / 10;
                monthsRef.current.scrollTop += offset;
              }
              if (flag >= 10) {
                clearInterval(interval);
                if (monthsRef.current) {
                  monthsRef.current.scrollTop = currTop;
                }
              }
            }, 40);
          } else {
            monthsRef.current.scrollTop = currTop;
          }
        }
      }
    });
  };
  var monthsViewScroll = function(e2) {
    if (monthsData.length <= 1) {
      return;
    }
    var scrollTop = e2.target.scrollTop;
    var current = Math.floor(scrollTop / avgHeight);
    if (current < 0)
      return;
    if (!monthsData[current + 1])
      return;
    var nextTop = monthsData[current + 1].scrollTop;
    var nextHeight = monthsData[current + 1].cssHeight;
    if (current === 0) {
      if (scrollTop >= nextTop) {
        current += 1;
      }
    } else if (current > 0 && current < monthsNum - 1) {
      if (scrollTop >= nextTop) {
        current += 1;
      }
      if (scrollTop < monthsData[current].scrollTop) {
        current -= 1;
      }
    } else {
      var viewPosition = Math.round(scrollTop + viewHeight);
      if (current + 1 <= monthsNum && viewPosition >= nextTop + nextHeight) {
        current += 1;
      }
      if (current >= 1 && scrollTop < monthsData[current - 1].scrollTop) {
        current -= 1;
      }
    }
    setDefaultRange(monthsNum, current);
  };
  import_react175.default.useImperativeHandle(ref, function() {
    return {
      scrollToDate
    };
  });
  var getClasses = function(day, month) {
    var dateStr = getCurrDate(day, month);
    if (day.type === "active") {
      if (propStartDate && Utils.compareDate(dateStr, propStartDate) || propEndDate && Utils.compareDate(propEndDate, dateStr)) {
        return "".concat(dayPrefix, "-disabled");
      }
      if (type4 === "range" || type4 === "week") {
        if (isStart(dateStr, currentDate) || isEnd(dateStr, currentDate)) {
          return "".concat(dayPrefix, "-active ").concat(isStart(dateStr, currentDate) ? "active-start" : "", " ").concat(isEnd(dateStr, currentDate) ? "active-end" : "");
        }
        if (Array.isArray(currentDate) && Object.values(currentDate).length === 2 && Utils.compareDate(currentDate[0], dateStr) && Utils.compareDate(dateStr, currentDate[1])) {
          if (disableDate(day)) {
            return "".concat(dayPrefix, "-choose-disabled");
          }
          return "".concat(dayPrefix, "-choose");
        }
      } else if (type4 === "multiple" && isMultiple(dateStr, currentDate) || !Array.isArray(currentDate) && Utils.isEqual(currentDate, dateStr)) {
        return "".concat(dayPrefix, "-active");
      }
      if (disableDate(day)) {
        return "".concat(dayPrefix, "-disabled");
      }
      return null;
    }
    return "".concat(dayPrefix, "-disabled");
  };
  var chooseDay = function(day, month, isFirst) {
    if (getClasses(day, month) === "".concat(dayPrefix, "-disabled")) {
      return;
    }
    var days = _to_consumable_array(month.curData);
    var _month_curData = _sliced_to_array(month.curData, 2), y = _month_curData[0], m13 = _month_curData[1];
    days[2] = typeof day.day === "number" ? Utils.getNumTwoBit(day.day) : day.day;
    days[3] = "".concat(days[0], "/").concat(days[1], "/").concat(days[2]);
    days[4] = Utils.getWhatDay(+days[0], +days[1], +days[2]);
    if (type4 === "multiple") {
      if (currentDate.length > 0) {
        var hasIndex = "";
        currentDate.forEach(function(item, index2) {
          if (item === days[3]) {
            hasIndex = index2;
          }
        });
        if (isFirst) {
          state.currDateArray.push(_to_consumable_array(days));
        } else if (hasIndex !== "") {
          ;
          currentDate.splice(hasIndex, 1);
          state.currDateArray.splice(hasIndex, 1);
        } else {
          ;
          currentDate.push(days[3]);
          state.currDateArray.push(_to_consumable_array(days));
        }
      } else {
        ;
        currentDate.push(days[3]);
        state.currDateArray = [
          _to_consumable_array(days)
        ];
      }
    } else if (type4 === "range") {
      var curDataLength = Object.values(currentDate).length;
      if (curDataLength === 2 || curDataLength === 0) {
        Array.isArray(currentDate) && currentDate.splice(0) && currentDate.push(days[3]);
        state.currDateArray = [
          _to_consumable_array(days)
        ];
      } else if (Utils.compareDate(currentDate[0], days[3])) {
        Array.isArray(currentDate) && currentDate.push(days[3]);
        state.currDateArray = _to_consumable_array(state.currDateArray).concat([
          _to_consumable_array(days)
        ]);
      } else {
        Array.isArray(currentDate) && currentDate.unshift(days[3]);
        state.currDateArray = [
          _to_consumable_array(days)
        ].concat(_to_consumable_array(state.currDateArray));
      }
    } else if (type4 === "week") {
      var _currentDate;
      var weekArr = Utils.getWeekDate(y, m13, "".concat(day.day), firstDayOfWeek);
      if (propStartDate && Utils.compareDate(weekArr[0], propStartDate)) {
        weekArr.splice(0, 1, propStartDate);
      }
      if (propEndDate && Utils.compareDate(propEndDate, weekArr[1])) {
        weekArr.splice(1, 1, propEndDate);
      }
      Array.isArray(currentDate) && currentDate.splice(0) && (_currentDate = currentDate).push.apply(_currentDate, _to_consumable_array(weekArr));
      state.currDateArray = [
        Utils.formatResultDate(weekArr[0]),
        Utils.formatResultDate(weekArr[1])
      ];
    } else {
      setCurrentDate(days[3]);
      state.currDateArray = _to_consumable_array(days);
    }
    if (!isFirst) {
      onDayClick && onDayClick(state.currDateArray);
      if (autoBackfill || !popup) {
        confirm2();
      }
    }
    setMonthsData(monthsData.slice());
  };
  var resetSelectedValue = function() {
    var itemData = function(dateArr) {
      days = dateArr.split("/");
      days[3] = "".concat(days[0], "/").concat(days[1], "/").concat(days[2]);
      days[4] = Utils.getWhatDay(+days[0], +days[1], +days[2]);
      return days;
    };
    var days = [];
    if (Array.isArray(currentDate) && currentDate) {
      days = currentDate.map(function(item) {
        return itemData(item);
      });
    } else {
      days = itemData(currentDate);
    }
    return days;
  };
  var confirm2 = function() {
    if (type4 === "range" && state.currDateArray.length === 2 || type4 !== "range") {
      var chooseData = state.currDateArray.slice(0);
      onConfirm && onConfirm(chooseData);
      if (popup) {
        onUpdate && onUpdate();
      }
    }
  };
  var _obj;
  var classes = (0, import_classnames30.default)((_obj = {}, _define_property(_obj, "".concat(classPrefix33, "-title"), !popup), _define_property(_obj, "".concat(classPrefix33, "-nofooter"), !!autoBackfill), _obj), classPrefix33, className);
  var _obj1;
  var headerClasses = (0, import_classnames30.default)((_obj1 = {}, _define_property(_obj1, "".concat(classPrefix33, "-header"), true), _define_property(_obj1, "".concat(classPrefix33, "-header-title"), !popup), _obj1));
  var isStartTip = function(day, month) {
    return (type4 === "range" || type4 === "week") && day.type === "active" && isStart(getCurrDate(day, month), currentDate);
  };
  var isEndTip = function(day, month) {
    return currentDate.length >= 2 && (type4 === "range" || type4 === "week") && day.type === "active" && isEnd(getCurrDate(day, month), currentDate);
  };
  var renderHeader = function() {
    return import_react175.default.createElement("div", {
      className: headerClasses
    }, showTitle && import_react175.default.createElement("div", {
      className: "".concat(classPrefix33, "-title")
    }, title || locale.calendaritem.title), renderHeaderButtons && import_react175.default.createElement("div", {
      className: "".concat(classPrefix33, "-header-buttons")
    }, renderHeaderButtons()), showSubTitle && import_react175.default.createElement("div", {
      className: "".concat(classPrefix33, "-sub-title")
    }, yearMonthTitle), import_react175.default.createElement("div", {
      className: "".concat(classPrefix33, "-weeks"),
      ref: weeksPanel
    }, weeks.map(function(item) {
      return import_react175.default.createElement("div", {
        className: "".concat(classPrefix33, "-week-item"),
        key: item
      }, item);
    })));
  };
  var renderContent = function() {
    return import_react175.default.createElement("div", {
      className: "".concat(classPrefix33, "-content"),
      onScroll: monthsViewScroll,
      ref: monthsRef
    }, import_react175.default.createElement("div", {
      className: "".concat(classPrefix33, "-pannel"),
      ref: monthsPanel
    }, import_react175.default.createElement("div", {
      className: "viewArea",
      ref: viewAreaRef,
      style: {
        transform: "translateY(".concat(translateY, "px)")
      }
    }, monthsData.slice(monthDefaultRange[0], monthDefaultRange[1]).map(function(month, key2) {
      return import_react175.default.createElement("div", {
        className: "".concat(classPrefix33, "-month"),
        key: key2
      }, import_react175.default.createElement("div", {
        className: "".concat(classPrefix33, "-month-title")
      }, month.title), import_react175.default.createElement("div", {
        className: "".concat(classPrefix33, "-days")
      }, month.monthData.map(function(day, i6) {
        return import_react175.default.createElement("div", {
          className: [
            "".concat(classPrefix33, "-day"),
            getClasses(day, month)
          ].join(" "),
          onClick: function() {
            chooseDay(day, month);
          },
          key: i6
        }, import_react175.default.createElement("div", {
          className: "".concat(classPrefix33, "-day-day")
        }, renderDay ? renderDay(day) : day.day), !isStartTip(day, month) && renderDayTop && import_react175.default.createElement("div", {
          className: "".concat(classPrefix33, "-day-info-top")
        }, renderDayTop(day)), !isStartTip(day, month) && !isEndTip(day, month) && renderDayBottom && import_react175.default.createElement("div", {
          className: "".concat(classPrefix33, "-day-info-bottom")
        }, renderDayBottom(day)), !isStartTip(day, month) && !isEndTip(day, month) && !renderDayBottom && showToday && isCurrDay(month, day.day) && import_react175.default.createElement("div", {
          className: "".concat(classPrefix33, "-day-info-curr")
        }, locale.calendaritem.today), isStartTip(day, month) && import_react175.default.createElement("div", {
          className: "".concat(classPrefix33, "-day-info ").concat(isStartAndEnd(currentDate) ? "".concat(classPrefix33, "-day-info-top") : "")
        }, startText || locale.calendaritem.start), isEndTip(day, month) && import_react175.default.createElement("div", {
          className: "".concat(classPrefix33, "-day-info")
        }, endText || locale.calendaritem.end));
      })));
    }))));
  };
  var renderFooter = function() {
    return import_react175.default.createElement("div", {
      className: "nut-calendar-footer"
    }, children2, import_react175.default.createElement("div", {
      onClick: confirm2
    }, renderBottomButton ? renderBottomButton() : import_react175.default.createElement("div", {
      className: "calendar-confirm-btn"
    }, confirmText || locale.confirm)));
  };
  return import_react175.default.createElement("div", {
    className: classes,
    style
  }, renderHeader(), renderContent(), popup && !autoBackfill ? renderFooter() : "");
});
CalendarItem.displayName = "NutCalendarItem";

// node_modules/@nutui/nutui-react/dist/es/packages/calendaritem/index.js
var calendaritem_default = CalendarItem;

// node_modules/@nutui/nutui-react/dist/es/packages/calendar/calendar.js
var defaultProps33 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  type: "single",
  autoBackfill: false,
  popup: true,
  visible: false,
  title: "",
  defaultValue: "",
  startDate: Utils.getDay(0),
  endDate: Utils.getDay(365),
  showToday: true,
  startText: "",
  endText: "",
  confirmText: "",
  showTitle: true,
  showSubTitle: true,
  scrollAnimation: true,
  firstDayOfWeek: 0,
  disableDate: function(date4) {
    return false;
  },
  renderHeaderButtons: void 0,
  renderDay: void 0,
  renderDayTop: void 0,
  renderDayBottom: void 0,
  onClose: function() {
  },
  onConfirm: function(param) {
  },
  onDayClick: function(data2) {
  },
  onPageChange: function(param) {
  }
});
var Calendar = import_react176.default.forwardRef(function(props, ref) {
  var locale = useConfig().locale;
  var _$_object_spread = _object_spread({}, defaultProps33, props), style = _$_object_spread.style, className = _$_object_spread.className, children2 = _$_object_spread.children, popup = _$_object_spread.popup, visible = _$_object_spread.visible, type4 = _$_object_spread.type, autoBackfill = _$_object_spread.autoBackfill, title = _$_object_spread.title, defaultValue = _$_object_spread.defaultValue, startDate = _$_object_spread.startDate, endDate = _$_object_spread.endDate, showToday = _$_object_spread.showToday, startText = _$_object_spread.startText, endText = _$_object_spread.endText, confirmText = _$_object_spread.confirmText, showTitle = _$_object_spread.showTitle, showSubTitle = _$_object_spread.showSubTitle, scrollAnimation = _$_object_spread.scrollAnimation, firstDayOfWeek = _$_object_spread.firstDayOfWeek, closeIcon = _$_object_spread.closeIcon, disableDate = _$_object_spread.disableDate, renderHeaderButtons = _$_object_spread.renderHeaderButtons, renderBottomButton = _$_object_spread.renderBottomButton, renderDay = _$_object_spread.renderDay, renderDayTop = _$_object_spread.renderDayTop, renderDayBottom = _$_object_spread.renderDayBottom, onClose = _$_object_spread.onClose, onConfirm = _$_object_spread.onConfirm, onDayClick = _$_object_spread.onDayClick, onPageChange = _$_object_spread.onPageChange;
  var calendarRef = (0, import_react176.useRef)(null);
  var close = function() {
    onClose && onClose();
  };
  var choose = function(param) {
    close();
    onConfirm && onConfirm(param);
  };
  var closePopup = function() {
    close();
  };
  var select = function(param) {
    onDayClick && onDayClick(param);
  };
  var scrollToDate = function(date4) {
    var _calendarRef_current;
    (_calendarRef_current = calendarRef.current) === null || _calendarRef_current === void 0 ? void 0 : _calendarRef_current.scrollToDate(date4);
  };
  var yearMonthChange = function(param) {
    onPageChange && onPageChange(param);
  };
  import_react176.default.useImperativeHandle(ref, function() {
    return {
      scrollToDate
    };
  });
  var renderItem = function() {
    return import_react176.default.createElement(calendaritem_default, {
      ref: calendarRef,
      style,
      className,
      children: children2,
      type: type4,
      autoBackfill,
      renderBottomButton,
      popup,
      title: title || locale.calendaritem.title,
      defaultValue,
      startDate,
      endDate,
      showToday,
      startText: startText || locale.calendaritem.start,
      endText: endText || locale.calendaritem.end,
      confirmText: confirmText || locale.calendaritem.confirm,
      showTitle,
      showSubTitle,
      scrollAnimation,
      firstDayOfWeek,
      disableDate,
      renderHeaderButtons,
      renderDay,
      renderDayTop,
      renderDayBottom,
      onConfirm: choose,
      onDayClick: select,
      onPageChange: yearMonthChange
    });
  };
  return import_react176.default.createElement(import_react176.default.Fragment, null, popup ? import_react176.default.createElement(popup_default, {
    className: "nut-calendar-popup",
    visible,
    position: "bottom",
    round: true,
    closeable: true,
    closeIcon,
    destroyOnClose: true,
    onOverlayClick: closePopup,
    onCloseIconClick: closePopup,
    style: {
      height: "83%"
    }
  }, renderItem()) : renderItem());
});
Calendar.displayName = "NutCalendar";

// node_modules/@nutui/nutui-react/dist/es/packages/calendar/index.js
var calendar_default = Calendar;

// node_modules/@nutui/nutui-react/dist/es/packages/calendarcard/calendarcard.js
var import_react178 = __toESM(require_react());
var import_classnames31 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/calendarcard/icon.js
var import_react177 = __toESM(require_react());
var ArrowLeft = function() {
  return import_react177.default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "18",
    height: "18",
    viewBox: "0 0 18 18"
  }, import_react177.default.createElement("path", {
    d: "M6.605 9.49a.771.771 0 0 1 0-.98l3.6-4.372a.771.771 0 0 1 1.19.981L8.2 9l3.197 3.881a.771.771 0 1 1-1.191.98l-3.6-4.37Z"
  }));
};
var ArrowRight = function() {
  return import_react177.default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "18",
    height: "18",
    viewBox: "0 0 18 18"
  }, import_react177.default.createElement("path", {
    d: "M11.396 9.49a.771.771 0 0 0 0-.98l-3.6-4.372a.771.771 0 0 0-1.191.981L9.8 9l-3.196 3.881a.771.771 0 0 0 1.19.98l3.6-4.37Z"
  }));
};
var DoubleLeft = function() {
  return import_react177.default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "18",
    height: "18",
    viewBox: "0 0 18 18"
  }, import_react177.default.createElement("path", {
    d: "M13.853 4.026a.771.771 0 0 1 .12 1.085L10.864 9l3.11 3.889a.771.771 0 1 1-1.204.963L9.272 9.482a.771.771 0 0 1 0-.964l3.497-4.371a.771.771 0 0 1 1.084-.12Zm-5.245 0a.771.771 0 0 1 .12 1.085L5.617 9l3.111 3.889a.771.771 0 0 1-1.205.963L4.026 9.482a.771.771 0 0 1 0-.964l3.497-4.371a.771.771 0 0 1 1.085-.12Z"
  }));
};
var DoubleRight = function() {
  return import_react177.default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "18",
    height: "18",
    viewBox: "0 0 18 18"
  }, import_react177.default.createElement("path", {
    d: "M4.147 13.974a.771.771 0 0 1-.12-1.085L7.136 9 4.028 5.11a.771.771 0 1 1 1.204-.963l3.497 4.371a.771.771 0 0 1 0 .964l-3.497 4.371a.771.771 0 0 1-1.084.12Zm5.245 0a.771.771 0 0 1-.12-1.085L12.383 9 9.272 5.11a.771.771 0 1 1 1.205-.963l3.497 4.371a.771.771 0 0 1 0 .964l-3.497 4.371a.771.771 0 0 1-1.085.12Z"
  }));
};

// node_modules/@nutui/nutui-react/dist/es/packages/calendarcard/utils.js
var convertDateToDay = function(date4) {
  return date4 ? {
    year: date4.getFullYear(),
    month: date4.getMonth() + 1,
    date: date4.getDate()
  } : null;
};
var convertDayToDate = function(day) {
  return day ? new Date(day.year, day.month - 1, day.date) : null;
};
var getPrevMonthDays = function(year, month, firstDayOfWeek) {
  var prevMonth = month - 1;
  var prevYear = year;
  if (prevMonth <= 0) {
    prevMonth = 12;
    prevYear -= 1;
  }
  var days = Utils.getMonthPreDay(year, month);
  days -= firstDayOfWeek;
  if (days >= 7) {
    days -= 7;
  }
  var preDates = Utils.getMonthDays("".concat(prevYear), "".concat(prevMonth));
  var months = Array.from(Array(preDates), function(_, k2) {
    return {
      type: "prev",
      year: prevYear,
      month: prevMonth,
      date: k2 + 1
    };
  });
  return months.slice(preDates - days);
};
var getCurrentMonthDays = function(year, month) {
  var days = Utils.getMonthDays("".concat(year), "".concat(month));
  return Array.from(Array(days), function(_, k2) {
    return {
      type: "current",
      year,
      month,
      date: k2 + 1
    };
  });
};
var getCurrentWeekDays = function(day, firstDayOfWeek) {
  var current = new Date(day.year, day.month - 1, day.date);
  var count = (current.getDay() + 7 - firstDayOfWeek) % 7;
  return [
    convertDateToDay(new Date(current.getTime() - 24 * 60 * 60 * 1e3 * count)),
    convertDateToDay(new Date(current.getTime() + 24 * 60 * 60 * 1e3 * (6 - count)))
  ];
};

// node_modules/@nutui/nutui-react/dist/es/packages/calendarcard/calendarcard.js
var defaultProps34 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  type: "single",
  firstDayOfWeek: 0
});
var prefixCls3 = "nut-calendarcard";
var CalendarCard = import_react178.default.forwardRef(function(props, ref) {
  var locale = useConfig().locale;
  var _$_object_spread = _object_spread({}, defaultProps34, props), style = _$_object_spread.style, className = _$_object_spread.className, type4 = _$_object_spread.type, value2 = _$_object_spread.value, defaultValue = _$_object_spread.defaultValue, firstDayOfWeek = _$_object_spread.firstDayOfWeek, startDate = _$_object_spread.startDate, endDate = _$_object_spread.endDate, disableDay = _$_object_spread.disableDay, renderDay = _$_object_spread.renderDay, renderDayTop = _$_object_spread.renderDayTop, renderDayBottom = _$_object_spread.renderDayBottom, onDayClick = _$_object_spread.onDayClick, onPageChange = _$_object_spread.onPageChange, onChange = _$_object_spread.onChange;
  var _useState = _sliced_to_array((0, import_react178.useState)(function() {
    var date4 = new Date(Date.now());
    var val2 = value2 || defaultValue;
    if (Array.isArray(val2)) {
      if (val2.length) {
        date4 = val2[0];
      }
    } else if (val2) {
      date4 = val2;
    }
    return {
      year: date4.getFullYear(),
      month: date4.getMonth() + 1
    };
  }), 2), month = _useState[0], setMonth = _useState[1];
  var _useState1 = _sliced_to_array((0, import_react178.useState)([]), 2), days = _useState1[0], setDays = _useState1[1];
  var valueToRange = function(val2) {
    if (Array.isArray(val2)) {
      return val2.map(function(date4) {
        return convertDateToDay(date4);
      });
    }
    return val2 ? [
      convertDateToDay(val2)
    ] : [];
  };
  var rangeTovalue = function(range3) {
    if (Array.isArray(range3)) {
      return range3.map(function(day) {
        return convertDayToDate(day);
      });
    }
    return range3 ? [
      convertDayToDate(range3)
    ] : [];
  };
  var _usePropsValue = _sliced_to_array(usePropsValue({
    value: value2 ? valueToRange(value2) : void 0,
    defaultValue: defaultValue ? valueToRange(defaultValue) : void 0,
    finalValue: []
  }), 2), innerValue = _usePropsValue[0], setInnerValue = _usePropsValue[1];
  var change = function(v3) {
    setInnerValue(v3);
    if (type4 === "single") {
      var date4 = convertDayToDate(v3[0]);
      onChange === null || onChange === void 0 ? void 0 : onChange(date4);
    } else if (type4 === "multiple" || type4 === "range" || type4 === "week") {
      var val2 = rangeTovalue(v3);
      onChange === null || onChange === void 0 ? void 0 : onChange(val2);
    }
  };
  var getDays = (0, import_react178.useCallback)(function(month2) {
    var y = month2.year;
    var m13 = month2.month;
    var days2 = _to_consumable_array(getPrevMonthDays(y, m13, firstDayOfWeek)).concat(_to_consumable_array(getCurrentMonthDays(y, m13)));
    var size = days2.length;
    var yearOfNextMonth = month2.month === 12 ? month2.year + 1 : month2.year;
    var monthOfNextMonth = month2.month === 12 ? 1 : month2.month + 1;
    for (var i6 = 1; i6 <= 42 - size; i6++) {
      days2.push({
        type: "next",
        year: yearOfNextMonth,
        month: monthOfNextMonth,
        date: i6
      });
    }
    return days2;
  }, [
    firstDayOfWeek
  ]);
  (0, import_react178.useEffect)(function() {
    var newDays = getDays(month);
    setDays(newDays);
    onPageChange === null || onPageChange === void 0 ? void 0 : onPageChange(month);
  }, [
    month,
    getDays,
    onPageChange,
    firstDayOfWeek
  ]);
  var isSameDay = function(day1, day2) {
    return (day1 === null || day1 === void 0 ? void 0 : day1.year) === (day2 === null || day2 === void 0 ? void 0 : day2.year) && (day1 === null || day1 === void 0 ? void 0 : day1.month) === (day2 === null || day2 === void 0 ? void 0 : day2.month) && (day1 === null || day1 === void 0 ? void 0 : day1.date) === (day2 === null || day2 === void 0 ? void 0 : day2.date);
  };
  var compareDay = function(day1, day2) {
    if (day1 && day2) {
      if (day1.year === day2.year) {
        if (day1.month === day2.month) {
          return day1.date - day2.date;
        }
        return day1.month - day2.month;
      }
      return day1.year - day2.year;
    }
  };
  var isDisable = function(day) {
    if (disableDay && disableDay(day)) {
      return true;
    }
    if (startDate && Number(compareDay(day, convertDateToDay(startDate))) < 0) {
      return true;
    }
    if (endDate && Number(compareDay(day, convertDateToDay(endDate))) > 0) {
      return true;
    }
    return false;
  };
  var isActive = function(day) {
    if (type4 === "single" || type4 === "multiple") {
      var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = void 0;
      try {
        for (var _iterator = innerValue[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var val2 = _step.value;
          if (isSameDay(day, val2)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    } else if (type4 === "range" && innerValue.length === 1 && isSameDay(innerValue[0], day)) {
      return true;
    }
    return false;
  };
  var isStart2 = function(day) {
    return (type4 === "range" || type4 === "week") && innerValue.length === 2 && isSameDay(day, innerValue[0]);
  };
  var isEnd2 = function(day) {
    return (type4 === "range" || type4 === "week") && innerValue.length === 2 && isSameDay(day, innerValue[1]);
  };
  var isMid = function(day) {
    if (type4 === "range" || type4 === "week") {
      if (innerValue.length === 2) {
        var c12 = compareDay(innerValue[0], day);
        var c23 = compareDay(day, innerValue[1]);
        if (c12 && c12 < 0 && c23 && c23 < 0) {
          return true;
        }
      }
    }
    return false;
  };
  var isWeekend = function(day) {
    var d30 = new Date(day.year, day.month - 1, day.date).getDay();
    return d30 === 0 || d30 === 6;
  };
  var getClasses = function(day) {
    if (isDisable(day)) {
      return [
        "disabled"
      ];
    }
    var res = [];
    if (day.type === "current") {
      if (isActive(day)) {
        res.push("active");
      }
      if (isStart2(day)) {
        res.push("start");
      }
      if (isEnd2(day)) {
        res.push("end");
      }
      if (isMid(day)) {
        res.push("mid");
      }
      if (isWeekend(day)) {
        res.push("weekend");
      }
    }
    return res;
  };
  var jumpTo = function(year, month2) {
    if (startDate) {
      var c10 = compareDay({
        year,
        month: month2,
        date: 31
      }, convertDateToDay(startDate));
      if (c10 && c10 < 0) {
        return;
      }
    }
    if (endDate) {
      var c12 = compareDay({
        year,
        month: month2,
        date: 1
      }, convertDateToDay(endDate));
      if (c12 && c12 > 0) {
        return;
      }
    }
    setMonth({
      year,
      month: month2
    });
  };
  var jump = function() {
    var step = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;
    var current = month.year * 12 + month.month;
    var newMonth = (current + step) % 12;
    if (newMonth === 0) {
      newMonth = 12;
    }
    var newYear = Math.floor((current + step - newMonth) / 12);
    jumpTo(newYear, newMonth);
  };
  import_react178.default.useImperativeHandle(ref, function() {
    return {
      jump,
      jumpTo
    };
  });
  var handleDayClick = function(day) {
    onDayClick === null || onDayClick === void 0 ? void 0 : onDayClick(day);
    if (day.type === "prev" || day.type === "next" || isDisable(day)) {
      return;
    }
    switch (type4) {
      case "single": {
        if (innerValue[0] && isSameDay(innerValue[0], day)) {
          change([]);
        } else {
          change([
            day
          ]);
        }
        break;
      }
      case "multiple": {
        var t = innerValue.find(function(i6) {
          return isSameDay(i6, day);
        });
        if (t) {
          change(innerValue.filter(function(i6) {
            return i6 !== t;
          }));
        } else {
          change(_to_consumable_array(innerValue).concat([
            day
          ]));
        }
        break;
      }
      case "range": {
        var len = innerValue.length;
        if (len === 0 || len === 2) {
          change([
            day
          ]);
        } else if (len === 1) {
          var t1 = compareDay(innerValue[0], day);
          if (t1 === null || t1 === void 0) {
            change([]);
          } else if (t1 < 0) {
            change([
              innerValue[0],
              day
            ]);
          } else {
            change([
              day,
              innerValue[0]
            ]);
          }
        } else {
          console.warn("[NutUI] Calendar range error");
        }
        break;
      }
      case "week": {
        if (innerValue.length === 2 || innerValue.length === 0) {
          var _getCurrentWeekDays = _sliced_to_array(getCurrentWeekDays(day, firstDayOfWeek), 2), left = _getCurrentWeekDays[0], right = _getCurrentWeekDays[1];
          change([
            left,
            right
          ]);
        } else {
          console.warn("[NutUI] Calendar week error");
        }
        break;
      }
      default: {
        console.warn("[NutUI] Calendar type error");
      }
    }
  };
  var monthTitle = locale.calendaritem.monthTitle;
  var renderHeader = function() {
    return import_react178.default.createElement("div", {
      className: "".concat(prefixCls3, "-header")
    }, import_react178.default.createElement("div", {
      className: "".concat(prefixCls3, "-header-left")
    }, import_react178.default.createElement("div", {
      className: "double-left",
      onClick: function() {
        return jump(-12);
      }
    }, import_react178.default.createElement(DoubleLeft, null)), import_react178.default.createElement("div", {
      className: "left",
      onClick: function() {
        return jump(-1);
      }
    }, import_react178.default.createElement(ArrowLeft, null))), import_react178.default.createElement("div", {
      className: "".concat(prefixCls3, "-header-title")
    }, monthTitle(month.year, month.month)), import_react178.default.createElement("div", {
      className: "".concat(prefixCls3, "-header-right")
    }, import_react178.default.createElement("div", {
      className: "right",
      onClick: function() {
        return jump(1);
      }
    }, import_react178.default.createElement(ArrowRight, null)), import_react178.default.createElement("div", {
      className: "double-right",
      onClick: function() {
        return jump(12);
      }
    }, import_react178.default.createElement(DoubleRight, null))));
  };
  var _useState2 = _sliced_to_array((0, import_react178.useState)(function() {
    var weekdays = locale.calendaritem.weekdays.map(function(day, index2) {
      return {
        name: day,
        key: index2
      };
    });
    return _to_consumable_array(weekdays.slice(firstDayOfWeek, 7)).concat(_to_consumable_array(weekdays.slice(0, firstDayOfWeek)));
  }), 1), weekHeader = _useState2[0];
  var renderContent = function() {
    return import_react178.default.createElement("div", {
      className: "".concat(prefixCls3, "-content")
    }, import_react178.default.createElement("div", {
      className: "".concat(prefixCls3, "-days")
    }, weekHeader.map(function(day) {
      return import_react178.default.createElement("div", {
        className: (0, import_classnames31.default)("".concat(prefixCls3, "-day"), "header", {
          weekend: day.key === 0 || day.key === 6
        }),
        key: day.key
      }, day.name);
    })), import_react178.default.createElement("div", {
      className: "".concat(prefixCls3, "-days")
    }, days.map(function(day) {
      return import_react178.default.createElement("div", {
        className: (0, import_classnames31.default)("".concat(prefixCls3, "-day"), day.type, getClasses(day)),
        key: "".concat(day.year, "-").concat(day.month, "-").concat(day.date),
        onClick: function() {
          return handleDayClick(day);
        }
      }, import_react178.default.createElement("div", {
        className: "".concat(prefixCls3, "-day-top")
      }, renderDayTop ? renderDayTop(day) : ""), import_react178.default.createElement("div", {
        className: "".concat(prefixCls3, "-day-inner")
      }, renderDay ? renderDay(day) : day.date), import_react178.default.createElement("div", {
        className: "".concat(prefixCls3, "-day-bottom")
      }, renderDayBottom ? renderDayBottom(day) : ""));
    })));
  };
  return days.length > 0 ? import_react178.default.createElement("div", {
    className: (0, import_classnames31.default)(prefixCls3, className),
    style
  }, renderHeader(), renderContent()) : null;
});
CalendarCard.displayName = "NutCalendarCard";

// node_modules/@nutui/nutui-react/dist/es/packages/calendarcard/index.js
var calendarcard_default = CalendarCard;

// node_modules/@nutui/nutui-react/dist/es/packages/checkbox/checkbox.js
var import_react180 = __toESM(require_react());
var import_classnames32 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/checkboxgroup/context.js
var import_react179 = __toESM(require_react());
var CheckboxGroupContext = (0, import_react179.createContext)(null);
var context_default4 = CheckboxGroupContext;

// node_modules/@nutui/nutui-react/dist/es/packages/checkbox/checkbox.js
var defaultProps35 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  disabled: false,
  shape: "round",
  labelPosition: "right",
  icon: null,
  activeIcon: null,
  indeterminateIcon: null,
  onChange: function(value2) {
  }
});
var classPrefix13 = "nut-checkbox";
var Checkbox = function(props) {
  var children2 = _object_spread({}, defaultProps35, props).children;
  var icon = props.icon, label = props.label, className = props.className, activeIcon = props.activeIcon, checked = props.checked, value2 = props.value, defaultChecked = props.defaultChecked, shape = props.shape, disabled = props.disabled, onChange = props.onChange, indeterminate = props.indeterminate, indeterminateIcon = props.indeterminateIcon, others = _object_without_properties(props, [
    "icon",
    "label",
    "className",
    "activeIcon",
    "checked",
    "value",
    "defaultChecked",
    "shape",
    "disabled",
    "onChange",
    "indeterminate",
    "indeterminateIcon"
  ]);
  var labelPosition = others.labelPosition, rest = _object_without_properties(others, [
    "labelPosition"
  ]);
  var ctx2 = (0, import_react180.useContext)(context_default4);
  var _usePropsValue = _sliced_to_array(usePropsValue({
    value: checked,
    defaultValue: defaultChecked,
    finalValue: defaultChecked,
    onChange
  }), 2), innerChecked = _usePropsValue[0], setChecked = _usePropsValue[1];
  var _useState = _sliced_to_array((0, import_react180.useState)(disabled), 2), innerDisabled = _useState[0], setDisabled = _useState[1];
  var _useState1 = _sliced_to_array((0, import_react180.useState)(indeterminate), 2), innerIndeterminate = _useState1[0], setIndeterminate = _useState1[1];
  (0, import_react180.useEffect)(function() {
    setDisabled(disabled);
  }, [
    disabled
  ]);
  (0, import_react180.useEffect)(function() {
    setIndeterminate(indeterminate);
  }, [
    indeterminate
  ]);
  if (ctx2) {
    if (ctx2.labelPosition !== void 0) {
      labelPosition = ctx2.labelPosition;
    }
    innerDisabled = ctx2.disabled !== void 0 ? ctx2.disabled : innerDisabled;
    innerChecked = ctx2.value.includes(value2);
    setChecked = function(checked2) {
      if (ctx2.disabled)
        return;
      if (checked2)
        ctx2.check(value2);
      if (!checked2)
        ctx2.uncheck(value2);
    };
  }
  var renderIcon = function() {
    if (innerDisabled) {
      if (innerIndeterminate) {
        return import_react180.default.createElement(n3, {
          className: color()
        });
      }
      if (innerChecked) {
        return import_react180.default.createElement(n5, {
          className: color()
        });
      }
      return import_react180.default.createElement(n3, {
        className: color()
      });
    }
    if (!innerChecked) {
      return import_react180.default.isValidElement(icon) ? icon : import_react180.default.createElement(n4, {
        className: color()
      });
    }
    if (innerIndeterminate) {
      return import_react180.default.isValidElement(indeterminateIcon) ? indeterminateIcon : import_react180.default.createElement(n3, {
        className: color()
      });
    }
    return import_react180.default.isValidElement(activeIcon) ? activeIcon : import_react180.default.createElement("div", {
      className: "".concat(classPrefix13, "-icon-wrap")
    }, import_react180.default.createElement(n5, {
      className: color()
    }));
  };
  var color = function() {
    var cls = "".concat(classPrefix13, "-icon ");
    if (innerDisabled) {
      if (innerChecked && !innerIndeterminate) {
        return "".concat(cls).concat(classPrefix13, "-icon-checked ").concat(classPrefix13, "-icon-disabled");
      }
      if (innerChecked && innerIndeterminate) {
        return "".concat(cls).concat(classPrefix13, "-icon-indeterminate ").concat(classPrefix13, "-icon-disabled");
      }
      return "".concat(cls).concat(classPrefix13, "-icon-disabled");
    }
    if (innerChecked) {
      if (innerIndeterminate) {
        return "".concat(cls).concat(classPrefix13, "-icon-indeterminate");
      }
      return "".concat(cls).concat(classPrefix13, "-icon-checked");
    }
    return cls;
  };
  var renderLabel = function() {
    return import_react180.default.createElement("span", {
      className: (0, import_classnames32.default)("".concat(classPrefix13, "-label "), _define_property({}, "".concat(classPrefix13, "-label-disabled"), innerDisabled))
    }, children2 || label);
  };
  var handleClick = function() {
    if (disabled)
      return;
    var latestChecked = !innerChecked;
    setChecked(latestChecked);
  };
  var renderButton = function() {
    var _obj2;
    return import_react180.default.createElement("div", {
      className: (0, import_classnames32.default)("".concat(classPrefix13, "-button"), (_obj2 = {}, _define_property(_obj2, "".concat(classPrefix13, "-button-active"), innerChecked), _define_property(_obj2, "".concat(classPrefix13, "-button-disabled"), disabled), _obj2))
    }, children2 || label, innerChecked && activeIcon ? import_react180.default.createElement(import_react180.default.Fragment, null, import_react180.default.createElement("div", {
      className: (0, import_classnames32.default)("".concat(classPrefix13, "-button-icon"))
    }), activeIcon) : null);
  };
  var renderListItem = function() {
    return import_react180.default.createElement(import_react180.default.Fragment, null, renderIcon(), renderLabel());
  };
  var renderCheckboxItem = function() {
    if (ctx2 === null || ctx2 === void 0 ? void 0 : ctx2.list) {
      return import_react180.default.createElement(import_react180.default.Fragment, null, renderListItem());
    }
    if (shape === "button") {
      return renderButton();
    }
    return import_react180.default.createElement(import_react180.default.Fragment, null, renderIcon(), renderLabel());
  };
  var _obj;
  return import_react180.default.createElement("div", _object_spread_props(_object_spread({
    className: (0, import_classnames32.default)(classPrefix13, (_obj = {}, _define_property(_obj, "".concat(classPrefix13, "-reverse"), labelPosition === "left"), _define_property(_obj, "nut-checkbox-list-item", ctx2 === null || ctx2 === void 0 ? void 0 : ctx2.list), _obj), className)
  }, rest), {
    onClick: handleClick
  }), renderCheckboxItem());
};
Checkbox.displayName = "NutCheckBox";

// node_modules/@nutui/nutui-react/dist/es/packages/checkboxgroup/checkboxgroup.js
var import_react181 = __toESM(require_react());
var import_classnames33 = __toESM(require_classnames());
var defaultProps36 = {
  max: void 0,
  min: void 0,
  list: false,
  labelPosition: "right",
  direction: "vertical",
  onChange: function(value2) {
  },
  onLimit: function(type4) {
  },
  options: []
};
var classPrefix14 = "nut-checkboxgroup";
var CheckboxGroup = import_react181.default.forwardRef(function(props, ref) {
  var _ref = _object_spread({}, defaultProps36, props), children2 = _ref.children, className = _ref.className, disabled = _ref.disabled, list = _ref.list, value2 = _ref.value, defaultValue = _ref.defaultValue, max = _ref.max, min = _ref.min, labelPosition = _ref.labelPosition, direction = _ref.direction, options2 = _ref.options, onChange = _ref.onChange, onLimit = _ref.onLimit, rest = _object_without_properties(_ref, [
    "children",
    "className",
    "disabled",
    "list",
    "value",
    "defaultValue",
    "max",
    "min",
    "labelPosition",
    "direction",
    "options",
    "onChange",
    "onLimit"
  ]);
  (0, import_react181.useImperativeHandle)(ref, function() {
    return {
      toggle: function toggle(state) {
        if (state === false) {
          setValue([]);
        } else {
          var childrenLabel = [];
          import_react181.default.Children.map(children2, function(child) {
            var childProps = child.props;
            childrenLabel.push(childProps.value);
          });
          setValue(childrenLabel);
        }
      },
      reverse: function reverse() {
        var childrenLabel = [];
        import_react181.default.Children.map(children2, function(child) {
          var childProps = child.props;
          childrenLabel.push(childProps.value);
        });
        var reverse2 = childrenLabel.filter(function(c10) {
          return (_value === null || _value === void 0 ? void 0 : _value.findIndex(function(v3) {
            return v3 === c10;
          })) === -1;
        });
        setValue(reverse2);
      }
    };
  });
  var _usePropsValue = _sliced_to_array(usePropsValue({
    value: value2,
    defaultValue,
    finalValue: [],
    onChange
  }), 2), _value = _usePropsValue[0], setValue = _usePropsValue[1];
  var renderOptions = (0, import_react181.useCallback)(function() {
    return options2 === null || options2 === void 0 ? void 0 : options2.map(function(_param) {
      var label = _param.label, value3 = _param.value, disabled2 = _param.disabled, onChange2 = _param.onChange, rest2 = _object_without_properties(_param, [
        "label",
        "value",
        "disabled",
        "onChange"
      ]);
      return import_react181.default.createElement(Checkbox, _object_spread({
        key: value3 === null || value3 === void 0 ? void 0 : value3.toString(),
        label,
        disabled: disabled2,
        value: value3
      }, rest2));
    });
  }, [
    options2,
    max,
    min
  ]);
  var _obj;
  return import_react181.default.createElement(context_default4.Provider, {
    value: {
      labelPosition: labelPosition || "right",
      disabled,
      max,
      list,
      onLimit,
      value: _value,
      check: function(value3) {
        var combined = _to_consumable_array(_value).concat([
          value3
        ]);
        if (max !== void 0) {
          if (combined.length > max) {
            return onLimit === null || onLimit === void 0 ? void 0 : onLimit("max");
          }
        }
        setValue(combined);
      },
      uncheck: function(value3) {
        var reduced = _value.filter(function(item) {
          return item !== value3;
        });
        if (min !== void 0 && reduced.length < min) {
          return onLimit === null || onLimit === void 0 ? void 0 : onLimit("min");
        }
        setValue(reduced);
      }
    }
  }, import_react181.default.createElement("div", _object_spread({
    className: (0, import_classnames33.default)(classPrefix14, (_obj = {}, _define_property(_obj, "nut-checkboxgroup-".concat(direction), direction), _define_property(_obj, "nut-checkboxgroup-list", list), _obj), className)
  }, rest), (options2 === null || options2 === void 0 ? void 0 : options2.length) ? renderOptions() : children2));
});
CheckboxGroup.displayName = "NutCheckboxGroup";

// node_modules/@nutui/nutui-react/dist/es/packages/checkbox/index.js
var InnerCheckbox = Checkbox;
InnerCheckbox.Group = CheckboxGroup;
var checkbox_default = InnerCheckbox;

// node_modules/@nutui/nutui-react/dist/es/packages/checkboxgroup/index.js
var checkboxgroup_default = CheckboxGroup;

// node_modules/@nutui/nutui-react/dist/es/packages/datepicker/datepicker.js
var import_react186 = __toESM(require_react());
var import_react_fast_compare4 = __toESM(require_react_fast_compare());
var import_classnames37 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/picker/picker.js
var import_react185 = __toESM(require_react());
var import_classnames36 = __toESM(require_classnames());
var import_react_fast_compare3 = __toESM(require_react_fast_compare());

// node_modules/@nutui/nutui-react/dist/es/packages/pickerview/pickerview.js
var import_react183 = __toESM(require_react());
var import_classnames35 = __toESM(require_classnames());
var import_react_fast_compare2 = __toESM(require_react_fast_compare());

// node_modules/@nutui/nutui-react/dist/es/packages/pickerview/pickerroller.js
var import_react182 = __toESM(require_react());
var import_classnames34 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/pickerview/utils.js
var momentum = function(distance, duration) {
  var speed = Math.abs(distance / duration);
  return speed / 3e-3 * (distance < 0 ? -1 : 1);
};
var useStyles = function(touchTime, touchDeg, scrollDistance, lineSpacing, rotation2) {
  var getTransitionStyle = function(transformValue) {
    return {
      transition: "transform ".concat(touchTime, "ms cubic-bezier(0.17, 0.89, 0.45, 1)"),
      transform: transformValue
    };
  };
  var touchRollerStyle = function() {
    return getTransitionStyle("rotate3d(1, 0, 0, ".concat(touchDeg, ")"));
  };
  var touchTiledStyle = function() {
    return getTransitionStyle("translate3d(0, ".concat(scrollDistance, "px, 0)"));
  };
  var rollerStyle = function(index2) {
    return {
      transform: "rotate3d(1, 0, 0, ".concat(-rotation2 * (index2 + 1), "deg) translate3d(0px, 0px, ").concat(Math.round(lineSpacing.current * 3.2), "px)")
    };
  };
  return {
    touchRollerStyle,
    touchTiledStyle,
    rollerStyle
  };
};

// node_modules/@nutui/nutui-react/dist/es/packages/pickerview/pickerroller.js
var InternalPickerRoller = function(props, ref) {
  var _props_keyIndex = props.keyIndex, keyIndex = _props_keyIndex === void 0 ? 0 : _props_keyIndex, _props_options = props.options, options2 = _props_options === void 0 ? [] : _props_options, _props_threeDimensional = props.threeDimensional, threeDimensional = _props_threeDimensional === void 0 ? true : _props_threeDimensional, _props_duration = props.duration, duration = _props_duration === void 0 ? 1e3 : _props_duration, onSelect = props.onSelect, _props_renderLabel = props.renderLabel, renderLabel = _props_renderLabel === void 0 ? function(item) {
    return item.label;
  } : _props_renderLabel;
  var classPrefix33 = "nut-pickerview-roller";
  var DEFAULT_DURATION = 200;
  var INERTIA_TIME = 300;
  var INERTIA_DISTANCE = 15;
  var ROTATION = 20;
  var touch = useTouch();
  var _useState = _sliced_to_array((0, import_react182.useState)(0), 2), currentIndex = _useState[0], setCurrentIndex = _useState[1];
  var lineSpacing = (0, import_react182.useRef)(36);
  var _useState1 = _sliced_to_array((0, import_react182.useState)(0), 2), touchTime = _useState1[0], setTouchTime = _useState1[1];
  var _useState2 = _sliced_to_array((0, import_react182.useState)("0deg"), 2), touchDeg = _useState2[0], setTouchDeg = _useState2[1];
  var isMoving = (0, import_react182.useRef)(false);
  var rollerRef = (0, import_react182.useRef)(null);
  var pickerRollerRef = (0, import_react182.useRef)(null);
  var _useState3 = _sliced_to_array((0, import_react182.useState)(0), 2), startTime = _useState3[0], setStartTime = _useState3[1];
  var _useState4 = _sliced_to_array((0, import_react182.useState)(0), 2), startY = _useState4[0], setStartY = _useState4[1];
  var transformY = (0, import_react182.useRef)(0);
  var _useState5 = _sliced_to_array((0, import_react182.useState)(0), 2), scrollDistance = _useState5[0], setScrollDistance = _useState5[1];
  var _useStyles = useStyles(touchTime, touchDeg, scrollDistance, lineSpacing, ROTATION), touchRollerStyle = _useStyles.touchRollerStyle, touchTiledStyle = _useStyles.touchTiledStyle, rollerStyle = _useStyles.rollerStyle;
  var isItemHidden = function(index2) {
    return index2 >= currentIndex + 8 || index2 <= currentIndex - 8;
  };
  var applyTransform = function(type4, deg) {
    var time2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : DEFAULT_DURATION, translateY = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
    setTouchTime(type4 !== "end" ? 0 : time2);
    setTouchDeg(deg);
    setScrollDistance(translateY);
  };
  var handleMove = function(move, type4, time2) {
    var updatedMove = move + transformY.current;
    if (type4 === "end") {
      updatedMove = Math.max(Math.min(updatedMove, 0), -(options2.length - 1) * lineSpacing.current);
      var endMove = Math.round(updatedMove / lineSpacing.current) * lineSpacing.current;
      var deg = "".concat((Math.abs(Math.round(endMove / lineSpacing.current)) + 1) * ROTATION, "deg");
      applyTransform(type4, deg, time2, endMove);
      setCurrentIndex(Math.abs(Math.round(endMove / lineSpacing.current)) + 1);
    } else {
      var currentDeg = (-updatedMove / lineSpacing.current + 1) * ROTATION;
      var deg1 = Math.min(Math.max(currentDeg, 0), (options2.length + 1) * ROTATION);
      if (deg1 >= 0 && deg1 < (options2.length + 1) * ROTATION) {
        applyTransform("", "".concat(deg1, "deg"), void 0, updatedMove);
        deg1 > 0 && setCurrentIndex(Math.abs(Math.round(updatedMove / lineSpacing.current)) + 1);
      }
    }
  };
  var selectValue = function(move) {
    onSelect === null || onSelect === void 0 ? void 0 : onSelect(options2 === null || options2 === void 0 ? void 0 : options2[Math.round(-move / lineSpacing.current)], keyIndex);
  };
  var handleTouchStart = function(event) {
    touch.start(event);
    setStartY(touch.deltaY.current);
    setStartTime(Date.now());
    transformY.current = scrollDistance;
  };
  var handleTouchMove = function(event) {
    touch.move(event);
    if (touch.isVertical) {
      isMoving.current = true;
      preventDefault(event, true);
    }
    var move = touch.deltaY.current - startY;
    handleMove(move);
  };
  var handleTouchEnd = function() {
    if (!isMoving.current)
      return;
    var move = touch.deltaY.current - startY;
    var moveTime = Date.now() - startTime;
    if (moveTime <= INERTIA_TIME && Math.abs(move) > INERTIA_DISTANCE) {
      var distance = momentum(move, moveTime);
      handleMove(distance, "end", +duration);
    } else {
      handleMove(move, "end");
    }
    setTimeout(function() {
      touch.reset();
    }, 0);
  };
  var updateStatus = function(shouldSelect, value2) {
    var selectedValue = value2 || props.value;
    var index2 = options2.findIndex(function(item) {
      return item.value === selectedValue;
    });
    setCurrentIndex(index2 === -1 ? 0 : index2 + 1);
    var move = index2 * lineSpacing.current;
    shouldSelect && selectValue(-move);
    handleMove(-move);
  };
  var stopMomentumScroll = function() {
    isMoving.current = false;
    setTouchTime(0);
    selectValue(scrollDistance);
  };
  (0, import_react182.useEffect)(function() {
    var element = pickerRollerRef.current;
    if (element) {
      var computedStyle = getComputedStyle(element);
      var currentLineSpacing = computedStyle.getPropertyValue("--nutui-picker-item-height");
      !!currentLineSpacing && (lineSpacing.current = parseFloat(currentLineSpacing));
    }
  }, [
    pickerRollerRef.current
  ]);
  (0, import_react182.useEffect)(function() {
    isMoving.current = false;
    setScrollDistance(0);
    transformY.current = 0;
    updateStatus(false);
  }, [
    options2,
    props.value
  ]);
  (0, import_react182.useImperativeHandle)(ref, function() {
    return {
      stopMomentum: stopMomentumScroll,
      moving: isMoving.current
    };
  });
  (0, import_react182.useEffect)(function() {
    var _pickerRollerRef_current, _pickerRollerRef_current1, _pickerRollerRef_current2;
    var options3 = passiveSupported ? {
      passive: false
    } : false;
    (_pickerRollerRef_current = pickerRollerRef.current) === null || _pickerRollerRef_current === void 0 ? void 0 : _pickerRollerRef_current.addEventListener("touchstart", handleTouchStart, options3);
    (_pickerRollerRef_current1 = pickerRollerRef.current) === null || _pickerRollerRef_current1 === void 0 ? void 0 : _pickerRollerRef_current1.addEventListener("touchmove", handleTouchMove, options3);
    (_pickerRollerRef_current2 = pickerRollerRef.current) === null || _pickerRollerRef_current2 === void 0 ? void 0 : _pickerRollerRef_current2.addEventListener("touchend", handleTouchEnd, options3);
    return function() {
      var _pickerRollerRef_current3, _pickerRollerRef_current12, _pickerRollerRef_current22;
      (_pickerRollerRef_current3 = pickerRollerRef.current) === null || _pickerRollerRef_current3 === void 0 ? void 0 : _pickerRollerRef_current3.removeEventListener("touchstart", handleTouchStart);
      (_pickerRollerRef_current12 = pickerRollerRef.current) === null || _pickerRollerRef_current12 === void 0 ? void 0 : _pickerRollerRef_current12.removeEventListener("touchmove", handleTouchMove);
      (_pickerRollerRef_current22 = pickerRollerRef.current) === null || _pickerRollerRef_current22 === void 0 ? void 0 : _pickerRollerRef_current22.removeEventListener("touchend", handleTouchEnd);
    };
  }, [
    pickerRollerRef.current,
    handleTouchStart,
    handleTouchMove,
    handleTouchEnd
  ]);
  return import_react182.default.createElement("div", {
    className: "nut-pickerview-list",
    ref: pickerRollerRef
  }, import_react182.default.createElement("div", {
    className: classPrefix33,
    ref: rollerRef,
    style: threeDimensional ? touchRollerStyle() : touchTiledStyle(),
    onTransitionEnd: stopMomentumScroll
  }, threeDimensional && options2.map(function(item, index2) {
    var _item_value;
    var _obj;
    return import_react182.default.createElement("div", {
      className: (0, import_classnames34.default)("".concat(classPrefix33, "-item"), (_obj = {}, _define_property(_obj, "".concat(classPrefix33, "-item-hidden"), isItemHidden(index2 + 1)), _define_property(_obj, "".concat(classPrefix33, "-item-active"), index2 + 1 === currentIndex), _obj)),
      style: rollerStyle(index2),
      key: (_item_value = item.value) !== null && _item_value !== void 0 ? _item_value : index2
    }, renderLabel(item));
  }), !threeDimensional && options2.map(function(item, index2) {
    var _item_value;
    return import_react182.default.createElement("div", {
      className: (0, import_classnames34.default)("".concat(classPrefix33, "-item-tiled"), _define_property({}, "".concat(classPrefix33, "-item-active"), index2 + 1 === currentIndex)),
      key: (_item_value = item.value) !== null && _item_value !== void 0 ? _item_value : index2
    }, renderLabel(item));
  })));
};
var PickerRoller = import_react182.default.forwardRef(InternalPickerRoller);
var pickerroller_default = PickerRoller;

// node_modules/@nutui/nutui-react/dist/es/packages/pickerview/pickerview.js
var defaultProps37 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  options: [],
  defaultValue: [],
  value: void 0,
  renderLabel: function(item) {
    return item.label;
  }
});
var InternalPickerView = function(props, ref) {
  var _$_object_spread = _object_spread({}, defaultProps37, props), options2 = _$_object_spread.options, _object_spread_defaultValue = _$_object_spread.defaultValue, defaultValue = _object_spread_defaultValue === void 0 ? [] : _object_spread_defaultValue, value2 = _$_object_spread.value, duration = _$_object_spread.duration, threeDimensional = _$_object_spread.threeDimensional, renderLabel = _$_object_spread.renderLabel, className = _$_object_spread.className, style = _$_object_spread.style, onChange = _$_object_spread.onChange;
  var classPrefix33 = "nut-pickerview";
  var cls = (0, import_classnames35.default)(classPrefix33, className);
  var _usePropsValue = _sliced_to_array(usePropsValue({
    value: value2,
    defaultValue: _to_consumable_array(defaultValue),
    finalValue: _to_consumable_array(defaultValue)
  }), 1), selectedValue = _usePropsValue[0];
  var _useState = _sliced_to_array((0, import_react183.useState)(selectedValue), 2), innerValue = _useState[0], setInnerValue = _useState[1];
  var _useState1 = _sliced_to_array((0, import_react183.useState)([]), 2), innerOptions = _useState1[0], setInnerOptions = _useState1[1];
  var changeIndex = (0, import_react183.useRef)(0);
  var columnsType = (0, import_react183.useMemo)(function() {
    var firstColumn = props.options[0] || [];
    if (Array.isArray(firstColumn) && firstColumn.length > 0 && "children" in firstColumn[0]) {
      return "cascade";
    }
    return "multiple";
  }, [
    props.options
  ]);
  var formatCascadeOptions = function(options3, value3) {
    var _loop = function() {
      var currentOptions = columnOptions.children;
      formatted.push(currentOptions);
      var currentValue = value3 === null || value3 === void 0 ? void 0 : value3[columnIndex];
      if (currentValue === 0) {
        columnOptions = currentOptions[0];
      } else if (currentValue) {
        var index2 = currentOptions.findIndex(function(columnItem) {
          return columnItem.value === currentValue;
        });
        columnOptions = currentOptions[index2 === -1 ? 0 : index2];
      } else {
        return "break";
      }
      columnIndex++;
    };
    if (!options3.length)
      return [];
    var formatted = [];
    var columnOptions = {
      label: "",
      value: "",
      children: options3
    };
    var columnIndex = 0;
    while (columnOptions && columnOptions.children) {
      var _ret = _loop();
      if (_ret === "break")
        break;
    }
    return formatted;
  };
  var formatOptions = (0, import_react183.useMemo)(function() {
    if (columnsType === "cascade") {
      var _props_options;
      return formatCascadeOptions(props === null || props === void 0 ? void 0 : (_props_options = props.options) === null || _props_options === void 0 ? void 0 : _props_options[0], innerValue);
    }
    return props.options;
  }, [
    innerValue,
    options2,
    columnsType
  ]);
  (0, import_react183.useEffect)(function() {
    var options3 = props.options;
    if (Array.isArray(options3) && options3.length && options3 !== innerOptions) {
      setInnerOptions(formatOptions);
    }
  }, [
    props.options,
    innerValue
  ]);
  (0, import_react183.useEffect)(function() {
    if (selectedValue !== innerValue) {
      setInnerValue(selectedValue);
    }
  }, [
    selectedValue
  ]);
  var handleSelect = (0, import_react183.useCallback)(function(option, index2) {
    var newValue = option === null || option === void 0 ? void 0 : option.value;
    if (isEmpty(newValue) || innerValue[index2] === newValue)
      return;
    changeIndex.current = index2;
    if (columnsType === "multiple") {
      setInnerValue(function(prev) {
        var next = _to_consumable_array(prev);
        next[index2] = newValue;
        return next;
      });
    } else {
      var _option_children, _option_children1, _props_options;
      var startIndex = index2;
      var values2 = [];
      values2[index2] = option.value;
      while (option === null || option === void 0 ? void 0 : (_option_children = option.children) === null || _option_children === void 0 ? void 0 : _option_children[0]) {
        values2[index2 + 1] = option.children[0].value;
        index2++;
        option = option.children[0];
      }
      if (option === null || option === void 0 ? void 0 : (_option_children1 = option.children) === null || _option_children1 === void 0 ? void 0 : _option_children1.length) {
        values2[index2 + 1] = "";
      }
      var combineResult = _to_consumable_array(innerValue.slice(0, startIndex)).concat(_to_consumable_array(values2.splice(startIndex)));
      setInnerValue(_to_consumable_array(combineResult));
      var optionFirst = props === null || props === void 0 ? void 0 : (_props_options = props.options) === null || _props_options === void 0 ? void 0 : _props_options[0];
      if (!(0, import_react_fast_compare2.default)(formatCascadeOptions(optionFirst, combineResult), innerOptions)) {
        setInnerOptions(formatCascadeOptions(optionFirst, combineResult));
      }
    }
  }, [
    innerValue,
    props.options,
    columnsType,
    innerOptions
  ]);
  var selectedOptions = (0, import_react183.useMemo)(function() {
    return innerOptions.map(function(columnOptions, index2) {
      var selectedOption = columnOptions.find(function(item) {
        return item.value === innerValue[index2];
      });
      return selectedOption;
    }).filter(Boolean);
  }, [
    innerOptions,
    innerValue
  ]);
  (0, import_react183.useEffect)(function() {
    onChange === null || onChange === void 0 ? void 0 : onChange({
      value: innerValue,
      index: changeIndex.current,
      selectedOptions
    });
  }, [
    innerValue,
    selectedOptions,
    onChange
  ]);
  return import_react183.default.createElement("div", {
    className: cls,
    style
  }, innerOptions.map(function(item, index2) {
    var _props_setRefs;
    return import_react183.default.createElement(pickerroller_default, {
      ref: props === null || props === void 0 ? void 0 : (_props_setRefs = props.setRefs) === null || _props_setRefs === void 0 ? void 0 : _props_setRefs.call(props, index2),
      key: index2,
      keyIndex: index2,
      value: innerValue[index2],
      options: item,
      renderLabel,
      onSelect: handleSelect,
      duration,
      threeDimensional
    });
  }), (innerOptions === null || innerOptions === void 0 ? void 0 : innerOptions.length) ? import_react183.default.createElement(import_react183.default.Fragment, null, import_react183.default.createElement("div", {
    className: "nut-pickerview-mask"
  }), import_react183.default.createElement("div", {
    className: "nut-pickerview-indicator"
  })) : null);
};
var PickerView = import_react183.default.forwardRef(InternalPickerView);
var pickerview_default = PickerView;

// node_modules/@nutui/nutui-react/dist/es/packages/pickerview/index.js
var pickerview_default2 = pickerview_default;

// node_modules/@nutui/nutui-react/dist/es/hooks/use-refs.js
var import_react184 = __toESM(require_react());
function useRefs() {
  var refs = import_react184.default.useRef([]);
  var setRefs = import_react184.default.useCallback(function(index2) {
    return function(el) {
      if (el)
        refs.current[index2] = el;
    };
  }, []);
  var reset = import_react184.default.useCallback(function() {
    refs.current = [];
  }, []);
  return [
    refs.current,
    setRefs,
    reset
  ];
}

// node_modules/@nutui/nutui-react/dist/es/packages/picker/picker.js
var defaultProps38 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  title: "",
  options: [],
  value: void 0,
  defaultValue: [],
  closeOnOverlayClick: true
});
var InternalPicker = function(props, ref) {
  var locale = useConfig().locale;
  var _ref = _object_spread({}, defaultProps38, props), children2 = _ref.children, visible = _ref.visible, title = _ref.title, _ref_options = _ref.options, options2 = _ref_options === void 0 ? [] : _ref_options, closeOnOverlayClick = _ref.closeOnOverlayClick, _ref_popupProps = _ref.popupProps, popupProps = _ref_popupProps === void 0 ? {} : _ref_popupProps, _ref_defaultValue = _ref.defaultValue, defaultValue = _ref_defaultValue === void 0 ? [] : _ref_defaultValue, className = _ref.className, style = _ref.style, threeDimensional = _ref.threeDimensional, duration = _ref.duration, onConfirm = _ref.onConfirm, onCancel = _ref.onCancel, onClose = _ref.onClose, onChange = _ref.onChange, rest = _object_without_properties(_ref, [
    "children",
    "visible",
    "title",
    "options",
    "closeOnOverlayClick",
    "popupProps",
    "defaultValue",
    "className",
    "style",
    "threeDimensional",
    "duration",
    "onConfirm",
    "onCancel",
    "onClose",
    "onChange"
  ]);
  var classPrefix33 = "nut-picker";
  var classes = (0, import_classnames36.default)(classPrefix33, className);
  var _usePropsValue = _sliced_to_array(usePropsValue({
    value: props.value,
    defaultValue: _to_consumable_array(defaultValue),
    finalValue: _to_consumable_array(defaultValue),
    onChange: function(value2) {
      var _props_onConfirm;
      (_props_onConfirm = props.onConfirm) === null || _props_onConfirm === void 0 ? void 0 : _props_onConfirm.call(props, selectedOptionsRef.current, value2);
    }
  }), 2), selectedValue = _usePropsValue[0], setSelectedValue = _usePropsValue[1];
  var _usePropsValue1 = _sliced_to_array(usePropsValue({
    value: props.visible,
    defaultValue: false,
    finalValue: false,
    onChange: function(v3) {
      if (!v3) {
        var _props_onClose;
        (_props_onClose = props.onClose) === null || _props_onClose === void 0 ? void 0 : _props_onClose.call(props, selectedOptionsRef.current, innerValue);
      }
    }
  }), 2), innerVisible = _usePropsValue1[0], setInnerVisible = _usePropsValue1[1];
  var actions = {
    open: function() {
      setInnerVisible(true);
    },
    close: function() {
      setInnerVisible(false);
    }
  };
  (0, import_react185.useImperativeHandle)(ref, function() {
    return actions;
  });
  var _useState = _sliced_to_array((0, import_react185.useState)(_to_consumable_array(selectedValue)), 2), innerValue = _useState[0], setInnerValue = _useState[1];
  var innerValueRef = (0, import_react185.useRef)(innerValue);
  var _useState1 = _sliced_to_array((0, import_react185.useState)([]), 2), innerOptions = _useState1[0], setInnerOptions = _useState1[1];
  var selectedOptionsRef = (0, import_react185.useRef)([]);
  var _useRefs = _sliced_to_array(useRefs(), 2), refs = _useRefs[0], setRefs = _useRefs[1];
  (0, import_react185.useEffect)(function() {
    if (innerVisible) {
      setInnerValue(selectedValue);
      setInnerOptions(options2);
    }
  }, [
    selectedValue,
    innerOptions,
    innerVisible
  ]);
  var onChangeItem = function(param) {
    var value2 = param.value, index2 = param.index, selectedOptions = param.selectedOptions;
    if (selectedOptions === null || selectedOptions === void 0 ? void 0 : selectedOptions.length) {
      selectedOptionsRef.current = selectedOptions;
    }
    if ((0, import_react_fast_compare3.default)(value2, innerValueRef.current))
      return;
    innerValueRef.current = value2;
    setInnerValue(value2);
    innerVisible && (onChange === null || onChange === void 0 ? void 0 : onChange({
      selectedOptions,
      value: value2,
      index: index2
    }));
  };
  var onConfirmEvent = function() {
    var moving = false;
    refs.forEach(function(ref2) {
      if (ref2.moving)
        moving = true;
      ref2.stopMomentum();
    });
    if (!moving) {
      setSelectedValue(innerValue, true);
      setInnerVisible(false);
    }
  };
  var onCancelEvent = function() {
    setInnerValue(selectedValue);
    onCancel === null || onCancel === void 0 ? void 0 : onCancel();
    setInnerVisible(false);
  };
  var renderTitleBar = function() {
    return import_react185.default.createElement("div", {
      className: "".concat(classPrefix33, "-control")
    }, import_react185.default.createElement("span", {
      className: "".concat(classPrefix33, "-cancel-btn"),
      onClick: function(e2) {
        e2.stopPropagation();
        onCancelEvent();
      }
    }, locale === null || locale === void 0 ? void 0 : locale.cancel), import_react185.default.createElement("div", {
      className: "".concat(classPrefix33, "-title")
    }, title || ""), import_react185.default.createElement("span", {
      className: "".concat(classPrefix33, "-confirm-btn"),
      onClick: function(e2) {
        e2.stopPropagation();
        onConfirmEvent();
      }
    }, locale.confirm));
  };
  var renderPickerElement = function() {
    return import_react185.default.createElement("div", _object_spread({
      className: classes,
      style
    }, rest), renderTitleBar(), typeof children2 !== "function" && children2, import_react185.default.createElement("div", {
      className: "".concat(classPrefix33, "-panel")
    }, import_react185.default.createElement(pickerview_default2, {
      setRefs,
      value: innerValue,
      options: props.options,
      threeDimensional,
      duration,
      onChange: function(param) {
        var value2 = param.value, index2 = param.index, selectedOptions = param.selectedOptions;
        onChangeItem({
          value: value2,
          index: index2,
          selectedOptions
        });
      }
    })));
  };
  return import_react185.default.createElement(import_react185.default.Fragment, null, typeof children2 === "function" && children2(selectedValue), import_react185.default.createElement(popup_default, _object_spread_props(_object_spread({}, popupProps), {
    visible: innerVisible,
    position: "bottom",
    onOverlayClick: function() {
      if (!closeOnOverlayClick)
        return;
      onCancelEvent();
    }
  }), innerVisible ? import_react185.default.createElement(import_react185.default.Fragment, null, renderPickerElement(), " ") : null, import_react185.default.createElement(safearea_default, {
    position: "bottom"
  })));
};
var Picker = import_react185.default.forwardRef(InternalPicker);
var picker_default = Picker;

// node_modules/@nutui/nutui-react/dist/es/packages/picker/index.js
var picker_default2 = picker_default;

// node_modules/@nutui/nutui-react/dist/es/packages/datepicker/utils.js
function getLastDayOfMonth(year, month) {
  return new Date(year, month, 0).getDate();
}
var calculateDateBoundary = function(type4, value2, startDate, endDate) {
  var boundary = type4 === "min" ? startDate : endDate;
  var year = boundary.getFullYear();
  var isMax = type4 === "max";
  var month = isMax ? 12 : 1;
  var date4 = isMax ? getLastDayOfMonth(value2.getFullYear(), value2.getMonth() + 1) : 1;
  var hour = isMax ? 23 : 0;
  var minute = isMax ? 59 : 0;
  if (value2.getFullYear() === year) {
    month = boundary.getMonth() + 1;
    if (value2.getMonth() + 1 === month) {
      date4 = boundary.getDate();
      if (value2.getDate() === date4) {
        hour = boundary.getHours();
        if (value2.getHours() === hour) {
          minute = boundary.getMinutes();
        }
      }
    }
  }
  var _obj;
  return _obj = {}, _define_property(_obj, "".concat(type4, "Year"), year), _define_property(_obj, "".concat(type4, "Month"), month), _define_property(_obj, "".concat(type4, "Date"), date4), _define_property(_obj, "".concat(type4, "Hour"), hour), _define_property(_obj, "".concat(type4, "Minute"), minute), _define_property(_obj, "".concat(type4, "Seconds"), minute), _obj;
};
var generateDatePickerRanges = function(type4, selectedDate, startDate, endDate) {
  var selected = new Date(selectedDate);
  if (!selected)
    return [];
  var _calculateDateBoundary = calculateDateBoundary("max", selected, startDate, endDate), maxYear = _calculateDateBoundary.maxYear, maxDate = _calculateDateBoundary.maxDate, maxMonth = _calculateDateBoundary.maxMonth, maxHour = _calculateDateBoundary.maxHour, maxMinute = _calculateDateBoundary.maxMinute, maxSeconds = _calculateDateBoundary.maxSeconds;
  var _calculateDateBoundary1 = calculateDateBoundary("min", selected, startDate, endDate), minYear = _calculateDateBoundary1.minYear, minDate = _calculateDateBoundary1.minDate, minMonth = _calculateDateBoundary1.minMonth, minHour = _calculateDateBoundary1.minHour, minMinute = _calculateDateBoundary1.minMinute, minSeconds = _calculateDateBoundary1.minSeconds;
  var fullRanges = [
    {
      type: "year",
      range: [
        minYear,
        maxYear
      ]
    },
    {
      type: "month",
      range: [
        minMonth,
        maxMonth
      ]
    },
    {
      type: "day",
      range: [
        minDate,
        maxDate
      ]
    },
    {
      type: "hour",
      range: [
        minHour,
        maxHour
      ]
    },
    {
      type: "minute",
      range: [
        minMinute,
        maxMinute
      ]
    },
    {
      type: "seconds",
      range: [
        minSeconds,
        maxSeconds
      ]
    }
  ];
  switch (type4.toLocaleLowerCase()) {
    case "date":
      return fullRanges.slice(0, 3);
    case "datetime":
      return fullRanges.slice(0, 5);
    case "time":
      return fullRanges.slice(3, 6);
    case "year-month":
      return fullRanges.slice(0, 2);
    case "hour-minutes":
      return fullRanges.slice(3, 5);
    case "month-day":
      return fullRanges.slice(1, 3);
    case "datehour":
      return fullRanges.slice(0, 4);
    default:
      return fullRanges;
  }
};
var getDatePartValue = function(type4, selectedDate) {
  var date4 = new Date(selectedDate);
  if (!selectedDate)
    return 0;
  switch (type4) {
    case "year":
      return date4.getFullYear();
    case "month":
      return date4.getMonth() + 1;
    case "day":
      return date4.getDate();
    case "hour":
      return date4.getHours();
    case "minute":
      return date4.getMinutes();
    case "seconds":
      return date4.getSeconds();
    default:
      return 0;
  }
};
var generatePickerColumnWithCallback = function(min, max, currentValue, type4, minuteStep, callback, showChinese, zhCNType, formatter) {
  var currentMin = min;
  var options2 = [];
  var selectedIndex = 0;
  while (currentMin <= max) {
    options2.push(formatPickerOption(type4, currentMin, showChinese, zhCNType, formatter));
    if (type4 === "minute") {
      currentMin += minuteStep;
    } else {
      currentMin++;
    }
    if (currentMin <= Number(currentValue)) {
      selectedIndex++;
    }
  }
  callback(selectedIndex, options2);
  return options2;
};
var formatPickerOption = function(type4, value2, showChinese, zhCNType, formatter) {
  if (formatter) {
    return formatter(type4, {
      label: padZero(value2, 2),
      value: padZero(value2, 2)
    });
  }
  var paddedValue = padZero(value2, 2);
  var chineseText = showChinese ? zhCNType[type4] : "";
  return {
    label: paddedValue + chineseText,
    value: paddedValue
  };
};
var formatValue = function(value2, startDate, endDate) {
  if (!value2 || value2 && !isDate(value2)) {
    value2 = startDate;
  }
  return Math.min(Math.max(value2.getTime(), startDate.getTime()), endDate.getTime());
};
var handlePickerValueChange = function(selectedOptions, selectedValue, index2, type4, defaultDate, handleDateComparison) {
  var rangeType = type4.toLocaleLowerCase();
  if ([
    "date",
    "datetime",
    "datehour",
    "month-day",
    "year-month"
  ].includes(rangeType)) {
    var formattedDate = [];
    selectedValue.forEach(function(item) {
      formattedDate.push(item);
    });
    if (rangeType === "month-day" && formattedDate.length < 3) {
      formattedDate.unshift(new Date(defaultDate).getFullYear());
    }
    if (rangeType === "year-month" && formattedDate.length < 3) {
      formattedDate.push(new Date(defaultDate).getDate());
    }
    var year = Number(formattedDate[0]);
    var month = Number(formattedDate[1]) - 1;
    var day = Math.min(Number(formattedDate[2]), getLastDayOfMonth(year, month + 1));
    var date4 = null;
    if (rangeType === "date" || rangeType === "month-day" || rangeType === "year-month") {
      date4 = new Date(year, month, day);
    } else if (rangeType === "datetime") {
      date4 = new Date(year, month, day, Number(formattedDate[3]), Number(formattedDate[4]));
    } else if (rangeType === "datehour") {
      date4 = new Date(year, month, day, Number(formattedDate[3]));
    }
    handleDateComparison(date4, selectedOptions, index2);
  } else {
    var _selectedValue = _sliced_to_array(selectedValue, 3), hour = _selectedValue[0], minute = _selectedValue[1], seconds = _selectedValue[2];
    var currentDate = new Date(defaultDate);
    var year1 = currentDate.getFullYear();
    var month1 = currentDate.getMonth();
    var day1 = currentDate.getDate();
    var date1 = new Date(year1, month1, day1, Number(hour), Number(minute), rangeType === "time" ? Number(seconds) : 0);
    handleDateComparison(date1, selectedOptions, index2);
  }
};

// node_modules/@nutui/nutui-react/dist/es/packages/datepicker/datepicker.js
var currentYear = (/* @__PURE__ */ new Date()).getFullYear();
var defaultProps39 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  visible: false,
  title: "",
  type: "date",
  showChinese: false,
  threeDimensional: true,
  minuteStep: 1,
  startDate: new Date(currentYear - 10, 0, 1),
  endDate: new Date(currentYear + 10, 11, 31)
});
var InternalPicker2 = function(props, ref) {
  var _ref = _object_spread({}, defaultProps39, props), startDate = _ref.startDate, endDate = _ref.endDate, type4 = _ref.type, showChinese = _ref.showChinese, minuteStep = _ref.minuteStep, visible = _ref.visible, title = _ref.title, defaultValue = _ref.defaultValue, _ref_pickerProps = _ref.pickerProps, pickerProps = _ref_pickerProps === void 0 ? {} : _ref_pickerProps, formatter = _ref.formatter, onClose = _ref.onClose, onCancel = _ref.onCancel, onConfirm = _ref.onConfirm, filter = _ref.filter, onChange = _ref.onChange, threeDimensional = _ref.threeDimensional, className = _ref.className, style = _ref.style, children2 = _ref.children, rest = _object_without_properties(_ref, [
    "startDate",
    "endDate",
    "type",
    "showChinese",
    "minuteStep",
    "visible",
    "title",
    "defaultValue",
    "pickerProps",
    "formatter",
    "onClose",
    "onCancel",
    "onConfirm",
    "filter",
    "onChange",
    "threeDimensional",
    "className",
    "style",
    "children"
  ]);
  var locale = useConfig().locale;
  var lang = locale.datepicker;
  var zhCNType = {
    day: lang.day,
    year: lang.year,
    month: lang.month,
    hour: lang.hour,
    minute: lang.min,
    seconds: lang.seconds
  };
  var classPrefix33 = "nut-datepicker";
  var cls = (0, import_classnames37.default)(classPrefix33, className);
  var _useState = _sliced_to_array((0, import_react186.useState)([]), 2), pickerValue = _useState[0], setPickerValue = _useState[1];
  var _useState1 = _sliced_to_array((0, import_react186.useState)([]), 2), pickerOptions = _useState1[0], setPickerOptions = _useState1[1];
  var _usePropsValue = _sliced_to_array(usePropsValue({
    value: props.value && formatValue(props.value, startDate, endDate),
    defaultValue: props.defaultValue && formatValue(props.defaultValue, startDate, endDate),
    finalValue: 0
  }), 2), selectedDate = _usePropsValue[0], setSelectedDate = _usePropsValue[1];
  var _useState2 = _sliced_to_array((0, import_react186.useState)(selectedDate), 2), innerDate = _useState2[0], setInnerDate = _useState2[1];
  var _usePropsValue1 = _sliced_to_array(usePropsValue({
    value: props.visible,
    defaultValue: false,
    finalValue: false
  }), 2), innerVisible = _usePropsValue1[0], setInnerVisible = _usePropsValue1[1];
  var actions = {
    open: function() {
      setInnerVisible(true);
    },
    close: function() {
      setInnerVisible(false);
    }
  };
  (0, import_react186.useImperativeHandle)(ref, function() {
    return actions;
  });
  var handleDateComparison = function(newDate, selectedOptions, index2) {
    if (newDate && isDate(newDate)) {
      var _this;
      if (!(0, import_react_fast_compare4.default)((_this = new Date(selectedDate)) === null || _this === void 0 ? void 0 : _this.getTime(), newDate === null || newDate === void 0 ? void 0 : newDate.getTime())) {
        setInnerDate(formatValue(newDate, startDate, endDate));
      }
      onChange === null || onChange === void 0 ? void 0 : onChange(selectedOptions, [
        String(newDate.getFullYear()),
        String(newDate.getMonth() + 1),
        String(newDate.getDate())
      ], index2);
    }
  };
  var handleConfirmDateComparison = function(newDate) {
    if (newDate && isDate(newDate)) {
      var _this;
      if (!(0, import_react_fast_compare4.default)((_this = new Date(selectedDate)) === null || _this === void 0 ? void 0 : _this.getTime(), newDate === null || newDate === void 0 ? void 0 : newDate.getTime())) {
        setSelectedDate(formatValue(newDate, startDate, endDate));
      }
    }
  };
  var handleCancel = function() {
    setInnerDate(selectedDate);
    onCancel === null || onCancel === void 0 ? void 0 : onCancel();
  };
  var handleClose = function() {
    setInnerVisible(false);
    onClose === null || onClose === void 0 ? void 0 : onClose();
  };
  var handleConfirm = function(options2, value2) {
    handlePickerValueChange(options2, value2, 0, type4, defaultValue || startDate || endDate, handleConfirmDateComparison);
    onConfirm === null || onConfirm === void 0 ? void 0 : onConfirm(options2, value2);
  };
  var handleChange = function(selectedOptions, selectedValue, index2) {
    innerVisible && handlePickerValueChange(selectedOptions, selectedValue, index2, type4, defaultValue || startDate || endDate, handleDateComparison);
  };
  var generatePickerColumns = function() {
    var dateRanges = generateDatePickerRanges(type4, innerDate, startDate, endDate);
    var columns = dateRanges.map(function(rangeConfig, columnIndex) {
      var columnType = rangeConfig.type, range3 = rangeConfig.range;
      var selectedValue = getDatePartValue(columnType, innerDate);
      var pickerColumn = generatePickerColumnWithCallback(range3[0], range3[1], selectedValue, columnType, minuteStep, function(selectedIndex, options2) {
        var _options_selectedIndex;
        pickerValue[columnIndex] = (_options_selectedIndex = options2[selectedIndex]) === null || _options_selectedIndex === void 0 ? void 0 : _options_selectedIndex.value;
        setPickerValue(_to_consumable_array(pickerValue));
      }, showChinese, zhCNType, formatter);
      if (filter === null || filter === void 0 ? void 0 : filter(columnType, pickerColumn)) {
        return filter(columnType, pickerColumn);
      }
      return pickerColumn;
    });
    return columns || [];
  };
  (0, import_react186.useEffect)(function() {
    setInnerDate(selectedDate);
  }, [
    selectedDate
  ]);
  (0, import_react186.useEffect)(function() {
    setPickerOptions(generatePickerColumns());
  }, [
    innerDate,
    startDate,
    endDate
  ]);
  return import_react186.default.createElement(import_react186.default.Fragment, null, typeof children2 === "function" && children2(selectedDate), import_react186.default.createElement("div", _object_spread({
    className: cls,
    style
  }, rest), pickerOptions.length && import_react186.default.createElement(picker_default2, _object_spread_props(_object_spread({}, pickerProps), {
    title,
    visible: innerVisible,
    value: pickerValue,
    options: pickerOptions,
    onClose: handleClose,
    onCancel: handleCancel,
    onConfirm: handleConfirm,
    onChange: function(param) {
      var value2 = param.value, index2 = param.index, selectedOptions = param.selectedOptions;
      handleChange(selectedOptions, value2, index2);
    },
    threeDimensional
  }))));
};
var DatePicker = import_react186.default.forwardRef(InternalPicker2);
var datepicker_default = DatePicker;

// node_modules/@nutui/nutui-react/dist/es/packages/datepicker/index.js
var datepicker_default2 = datepicker_default;

// node_modules/@nutui/nutui-react/dist/es/packages/datepickerview/datepickerview.js
var import_react187 = __toESM(require_react());
var import_classnames38 = __toESM(require_classnames());
var import_react_fast_compare5 = __toESM(require_react_fast_compare());
var currentYear2 = (/* @__PURE__ */ new Date()).getFullYear();
var defaultProps40 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  type: "date",
  showChinese: false,
  threeDimensional: true,
  minuteStep: 1,
  startDate: new Date(currentYear2 - 10, 0, 1),
  endDate: new Date(currentYear2 + 10, 11, 31)
});
var DatePickerView = function(props) {
  var _$_object_spread = _object_spread({}, defaultProps40, props), startDate = _$_object_spread.startDate, endDate = _$_object_spread.endDate, type4 = _$_object_spread.type, showChinese = _$_object_spread.showChinese, minuteStep = _$_object_spread.minuteStep, defaultValue = _$_object_spread.defaultValue, formatter = _$_object_spread.formatter, filter = _$_object_spread.filter, onChange = _$_object_spread.onChange, threeDimensional = _$_object_spread.threeDimensional, className = _$_object_spread.className, style = _$_object_spread.style;
  var classPrefix33 = "nut-datepickerview";
  var cls = (0, import_classnames38.default)(classPrefix33, className);
  var locale = useConfig().locale;
  var lang = locale.datepicker;
  var zhCNType = {
    day: lang.day,
    year: lang.year,
    month: lang.month,
    hour: lang.hour,
    minute: lang.min,
    seconds: lang.seconds
  };
  var _useState = _sliced_to_array((0, import_react187.useState)([]), 2), pickerValue = _useState[0], setPickerValue = _useState[1];
  var _useState1 = _sliced_to_array((0, import_react187.useState)([]), 2), pickerOptions = _useState1[0], setPickerOptions = _useState1[1];
  var _usePropsValue = _sliced_to_array(usePropsValue({
    value: props.value && formatValue(props.value, startDate, endDate),
    defaultValue: defaultValue && formatValue(defaultValue, startDate, endDate),
    finalValue: 0
  }), 2), selectedDate = _usePropsValue[0], setSelectedDate = _usePropsValue[1];
  var handleDateComparison = function(newDate, selectedOptions, index2) {
    if (newDate && isDate(newDate)) {
      var _this;
      if (!(0, import_react_fast_compare5.default)((_this = new Date(selectedDate)) === null || _this === void 0 ? void 0 : _this.getTime(), newDate === null || newDate === void 0 ? void 0 : newDate.getTime())) {
        setSelectedDate(formatValue(newDate, startDate, endDate));
        onChange === null || onChange === void 0 ? void 0 : onChange(selectedOptions, [
          String(newDate.getFullYear()),
          padZero(newDate.getMonth() + 1),
          padZero(newDate.getDate())
        ], index2);
      }
    }
  };
  var handleChange = function(selectedOptions, selectedValue, index2) {
    handlePickerValueChange(selectedOptions, selectedValue, index2, type4, defaultValue || startDate || endDate, handleDateComparison);
  };
  var generatePickerColumns = function() {
    var dateRanges = generateDatePickerRanges(type4, selectedDate, startDate, endDate);
    var columns = dateRanges.map(function(rangeConfig, columnIndex) {
      var columnType = rangeConfig.type, range3 = rangeConfig.range;
      var selectedValue = getDatePartValue(columnType, selectedDate);
      var pickerColumn = generatePickerColumnWithCallback(range3[0], range3[1], selectedValue, columnType, minuteStep, function(selectedIndex, options2) {
        var _options_selectedIndex;
        pickerValue[columnIndex] = (_options_selectedIndex = options2[selectedIndex]) === null || _options_selectedIndex === void 0 ? void 0 : _options_selectedIndex.value;
        setPickerValue(_to_consumable_array(pickerValue));
      }, showChinese, zhCNType, formatter);
      if (filter === null || filter === void 0 ? void 0 : filter(columnType, pickerColumn)) {
        return filter(columnType, pickerColumn);
      }
      return pickerColumn;
    });
    return columns || [];
  };
  (0, import_react187.useEffect)(function() {
    var _this, _this1;
    if (!(0, import_react_fast_compare5.default)((_this = new Date(selectedDate)) === null || _this === void 0 ? void 0 : _this.getTime(), (_this1 = new Date(selectedDate)) === null || _this1 === void 0 ? void 0 : _this1.getTime())) {
      setSelectedDate(selectedDate);
    }
  }, [
    selectedDate
  ]);
  (0, import_react187.useEffect)(function() {
    setPickerOptions(generatePickerColumns());
  }, [
    selectedDate,
    startDate,
    endDate
  ]);
  return import_react187.default.createElement("div", {
    className: cls,
    style
  }, pickerOptions.length && import_react187.default.createElement(pickerview_default2, {
    value: pickerValue,
    options: pickerOptions,
    onChange: function(param) {
      var selectedOptions = param.selectedOptions, value2 = param.value, index2 = param.index;
      handleChange(selectedOptions, value2, index2);
    },
    threeDimensional
  }));
};
DatePickerView.displayName = "NutDatePickerView";

// node_modules/@nutui/nutui-react/dist/es/packages/datepickerview/index.js
var datepickerview_default = DatePickerView;

// node_modules/@nutui/nutui-react/dist/es/packages/form/index.js
var import_react192 = __toESM(require_react());

// node_modules/@nutui/nutui-react/dist/es/packages/form/form.js
var import_react190 = __toESM(require_react());
var import_classnames39 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/form/context.js
var import_react188 = __toESM(require_react());
var Context = (0, import_react188.createContext)({});

// node_modules/@nutui/nutui-react/dist/es/packages/form/useform.js
var import_react189 = __toESM(require_react());

// node_modules/async-validator/dist-web/index.js
function _extends5() {
  _extends5 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i6 = 1; i6 < arguments.length; i6++) {
      var source = arguments[i6];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends5.apply(this, arguments);
}
function _inheritsLoose2(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf2(subClass, superClass);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function _setPrototypeOf2(o, p10) {
  _setPrototypeOf2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p11) {
    o2.__proto__ = p11;
    return o2;
  };
  return _setPrototypeOf2(o, p10);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct.bind();
  } else {
    _construct = function _construct2(Parent2, args2, Class2) {
      var a = [null];
      a.push.apply(a, args2);
      var Constructor = Function.bind.apply(Parent2, a);
      var instance = new Constructor();
      if (Class2)
        _setPrototypeOf2(instance, Class2.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}
function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
  _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
    if (Class2 === null || !_isNativeFunction(Class2))
      return Class2;
    if (typeof Class2 !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class2))
        return _cache.get(Class2);
      _cache.set(Class2, Wrapper);
    }
    function Wrapper() {
      return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class2.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf2(Wrapper, Class2);
  };
  return _wrapNativeSuper(Class);
}
var formatRegExp = /%[sdj%]/g;
var warning = function warning2() {
};
if (typeof process !== "undefined" && process.env && true && typeof window !== "undefined" && typeof document !== "undefined") {
  warning = function warning3(type4, errors) {
    if (typeof console !== "undefined" && console.warn && typeof ASYNC_VALIDATOR_NO_WARNING === "undefined") {
      if (errors.every(function(e2) {
        return typeof e2 === "string";
      })) {
        console.warn(type4, errors);
      }
    }
  };
}
function convertFieldsError(errors) {
  if (!errors || !errors.length)
    return null;
  var fields = {};
  errors.forEach(function(error) {
    var field = error.field;
    fields[field] = fields[field] || [];
    fields[field].push(error);
  });
  return fields;
}
function format(template) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  var i6 = 0;
  var len = args.length;
  if (typeof template === "function") {
    return template.apply(null, args);
  }
  if (typeof template === "string") {
    var str = template.replace(formatRegExp, function(x2) {
      if (x2 === "%%") {
        return "%";
      }
      if (i6 >= len) {
        return x2;
      }
      switch (x2) {
        case "%s":
          return String(args[i6++]);
        case "%d":
          return Number(args[i6++]);
        case "%j":
          try {
            return JSON.stringify(args[i6++]);
          } catch (_) {
            return "[Circular]";
          }
          break;
        default:
          return x2;
      }
    });
    return str;
  }
  return template;
}
function isNativeStringType(type4) {
  return type4 === "string" || type4 === "url" || type4 === "hex" || type4 === "email" || type4 === "date" || type4 === "pattern";
}
function isEmptyValue(value2, type4) {
  if (value2 === void 0 || value2 === null) {
    return true;
  }
  if (type4 === "array" && Array.isArray(value2) && !value2.length) {
    return true;
  }
  if (isNativeStringType(type4) && typeof value2 === "string" && !value2) {
    return true;
  }
  return false;
}
function asyncParallelArray(arr, func, callback) {
  var results = [];
  var total = 0;
  var arrLength = arr.length;
  function count(errors) {
    results.push.apply(results, errors || []);
    total++;
    if (total === arrLength) {
      callback(results);
    }
  }
  arr.forEach(function(a) {
    func(a, count);
  });
}
function asyncSerialArray(arr, func, callback) {
  var index2 = 0;
  var arrLength = arr.length;
  function next(errors) {
    if (errors && errors.length) {
      callback(errors);
      return;
    }
    var original = index2;
    index2 = index2 + 1;
    if (original < arrLength) {
      func(arr[original], next);
    } else {
      callback([]);
    }
  }
  next([]);
}
function flattenObjArr(objArr) {
  var ret = [];
  Object.keys(objArr).forEach(function(k2) {
    ret.push.apply(ret, objArr[k2] || []);
  });
  return ret;
}
var AsyncValidationError = function(_Error) {
  _inheritsLoose2(AsyncValidationError2, _Error);
  function AsyncValidationError2(errors, fields) {
    var _this;
    _this = _Error.call(this, "Async Validation Error") || this;
    _this.errors = errors;
    _this.fields = fields;
    return _this;
  }
  return AsyncValidationError2;
}(_wrapNativeSuper(Error));
function asyncMap(objArr, option, func, callback, source) {
  if (option.first) {
    var _pending = new Promise(function(resolve, reject) {
      var next = function next2(errors) {
        callback(errors);
        return errors.length ? reject(new AsyncValidationError(errors, convertFieldsError(errors))) : resolve(source);
      };
      var flattenArr = flattenObjArr(objArr);
      asyncSerialArray(flattenArr, func, next);
    });
    _pending["catch"](function(e2) {
      return e2;
    });
    return _pending;
  }
  var firstFields = option.firstFields === true ? Object.keys(objArr) : option.firstFields || [];
  var objArrKeys = Object.keys(objArr);
  var objArrLength = objArrKeys.length;
  var total = 0;
  var results = [];
  var pending = new Promise(function(resolve, reject) {
    var next = function next2(errors) {
      results.push.apply(results, errors);
      total++;
      if (total === objArrLength) {
        callback(results);
        return results.length ? reject(new AsyncValidationError(results, convertFieldsError(results))) : resolve(source);
      }
    };
    if (!objArrKeys.length) {
      callback(results);
      resolve(source);
    }
    objArrKeys.forEach(function(key2) {
      var arr = objArr[key2];
      if (firstFields.indexOf(key2) !== -1) {
        asyncSerialArray(arr, func, next);
      } else {
        asyncParallelArray(arr, func, next);
      }
    });
  });
  pending["catch"](function(e2) {
    return e2;
  });
  return pending;
}
function isErrorObj(obj) {
  return !!(obj && obj.message !== void 0);
}
function getValue(value2, path) {
  var v3 = value2;
  for (var i6 = 0; i6 < path.length; i6++) {
    if (v3 == void 0) {
      return v3;
    }
    v3 = v3[path[i6]];
  }
  return v3;
}
function complementError(rule, source) {
  return function(oe) {
    var fieldValue;
    if (rule.fullFields) {
      fieldValue = getValue(source, rule.fullFields);
    } else {
      fieldValue = source[oe.field || rule.fullField];
    }
    if (isErrorObj(oe)) {
      oe.field = oe.field || rule.fullField;
      oe.fieldValue = fieldValue;
      return oe;
    }
    return {
      message: typeof oe === "function" ? oe() : oe,
      fieldValue,
      field: oe.field || rule.fullField
    };
  };
}
function deepMerge(target, source) {
  if (source) {
    for (var s8 in source) {
      if (source.hasOwnProperty(s8)) {
        var value2 = source[s8];
        if (typeof value2 === "object" && typeof target[s8] === "object") {
          target[s8] = _extends5({}, target[s8], value2);
        } else {
          target[s8] = value2;
        }
      }
    }
  }
  return target;
}
var required$1 = function required(rule, value2, source, errors, options2, type4) {
  if (rule.required && (!source.hasOwnProperty(rule.field) || isEmptyValue(value2, type4 || rule.type))) {
    errors.push(format(options2.messages.required, rule.fullField));
  }
};
var whitespace = function whitespace2(rule, value2, source, errors, options2) {
  if (/^\s+$/.test(value2) || value2 === "") {
    errors.push(format(options2.messages.whitespace, rule.fullField));
  }
};
var urlReg;
var getUrlRegex = function() {
  if (urlReg) {
    return urlReg;
  }
  var word = "[a-fA-F\\d:]";
  var b = function b2(options2) {
    return options2 && options2.includeBoundaries ? "(?:(?<=\\s|^)(?=" + word + ")|(?<=" + word + ")(?=\\s|$))" : "";
  };
  var v4 = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}";
  var v6seg = "[a-fA-F\\d]{1,4}";
  var v6 = ("\n(?:\n(?:" + v6seg + ":){7}(?:" + v6seg + "|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:" + v6seg + ":){6}(?:" + v4 + "|:" + v6seg + "|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:" + v6seg + ":){5}(?::" + v4 + "|(?::" + v6seg + "){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:" + v6seg + ":){4}(?:(?::" + v6seg + "){0,1}:" + v4 + "|(?::" + v6seg + "){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:" + v6seg + ":){3}(?:(?::" + v6seg + "){0,2}:" + v4 + "|(?::" + v6seg + "){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:" + v6seg + ":){2}(?:(?::" + v6seg + "){0,3}:" + v4 + "|(?::" + v6seg + "){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:" + v6seg + ":){1}(?:(?::" + v6seg + "){0,4}:" + v4 + "|(?::" + v6seg + "){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::(?:(?::" + v6seg + "){0,5}:" + v4 + "|(?::" + v6seg + "){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\n").replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim();
  var v46Exact = new RegExp("(?:^" + v4 + "$)|(?:^" + v6 + "$)");
  var v4exact = new RegExp("^" + v4 + "$");
  var v6exact = new RegExp("^" + v6 + "$");
  var ip = function ip2(options2) {
    return options2 && options2.exact ? v46Exact : new RegExp("(?:" + b(options2) + v4 + b(options2) + ")|(?:" + b(options2) + v6 + b(options2) + ")", "g");
  };
  ip.v4 = function(options2) {
    return options2 && options2.exact ? v4exact : new RegExp("" + b(options2) + v4 + b(options2), "g");
  };
  ip.v6 = function(options2) {
    return options2 && options2.exact ? v6exact : new RegExp("" + b(options2) + v6 + b(options2), "g");
  };
  var protocol = "(?:(?:[a-z]+:)?//)";
  var auth = "(?:\\S+(?::\\S*)?@)?";
  var ipv4 = ip.v4().source;
  var ipv6 = ip.v6().source;
  var host2 = "(?:(?:[a-z\\u00a1-\\uffff0-9][-_]*)*[a-z\\u00a1-\\uffff0-9]+)";
  var domain = "(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*";
  var tld = "(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))";
  var port = "(?::\\d{2,5})?";
  var path = '(?:[/?#][^\\s"]*)?';
  var regex = "(?:" + protocol + "|www\\.)" + auth + "(?:localhost|" + ipv4 + "|" + ipv6 + "|" + host2 + domain + tld + ")" + port + path;
  urlReg = new RegExp("(?:^" + regex + "$)", "i");
  return urlReg;
};
var pattern$2 = {
  // http://emailregex.com/
  email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+\.)+[a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}))$/,
  // url: new RegExp(
  //   '^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$',
  //   'i',
  // ),
  hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i
};
var types = {
  integer: function integer(value2) {
    return types.number(value2) && parseInt(value2, 10) === value2;
  },
  "float": function float(value2) {
    return types.number(value2) && !types.integer(value2);
  },
  array: function array(value2) {
    return Array.isArray(value2);
  },
  regexp: function regexp(value2) {
    if (value2 instanceof RegExp) {
      return true;
    }
    try {
      return !!new RegExp(value2);
    } catch (e2) {
      return false;
    }
  },
  date: function date(value2) {
    return typeof value2.getTime === "function" && typeof value2.getMonth === "function" && typeof value2.getYear === "function" && !isNaN(value2.getTime());
  },
  number: function number(value2) {
    if (isNaN(value2)) {
      return false;
    }
    return typeof value2 === "number";
  },
  object: function object(value2) {
    return typeof value2 === "object" && !types.array(value2);
  },
  method: function method(value2) {
    return typeof value2 === "function";
  },
  email: function email(value2) {
    return typeof value2 === "string" && value2.length <= 320 && !!value2.match(pattern$2.email);
  },
  url: function url(value2) {
    return typeof value2 === "string" && value2.length <= 2048 && !!value2.match(getUrlRegex());
  },
  hex: function hex(value2) {
    return typeof value2 === "string" && !!value2.match(pattern$2.hex);
  }
};
var type$1 = function type(rule, value2, source, errors, options2) {
  if (rule.required && value2 === void 0) {
    required$1(rule, value2, source, errors, options2);
    return;
  }
  var custom = ["integer", "float", "array", "regexp", "object", "method", "email", "number", "date", "url", "hex"];
  var ruleType = rule.type;
  if (custom.indexOf(ruleType) > -1) {
    if (!types[ruleType](value2)) {
      errors.push(format(options2.messages.types[ruleType], rule.fullField, rule.type));
    }
  } else if (ruleType && typeof value2 !== rule.type) {
    errors.push(format(options2.messages.types[ruleType], rule.fullField, rule.type));
  }
};
var range = function range2(rule, value2, source, errors, options2) {
  var len = typeof rule.len === "number";
  var min = typeof rule.min === "number";
  var max = typeof rule.max === "number";
  var spRegexp = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
  var val2 = value2;
  var key2 = null;
  var num = typeof value2 === "number";
  var str = typeof value2 === "string";
  var arr = Array.isArray(value2);
  if (num) {
    key2 = "number";
  } else if (str) {
    key2 = "string";
  } else if (arr) {
    key2 = "array";
  }
  if (!key2) {
    return false;
  }
  if (arr) {
    val2 = value2.length;
  }
  if (str) {
    val2 = value2.replace(spRegexp, "_").length;
  }
  if (len) {
    if (val2 !== rule.len) {
      errors.push(format(options2.messages[key2].len, rule.fullField, rule.len));
    }
  } else if (min && !max && val2 < rule.min) {
    errors.push(format(options2.messages[key2].min, rule.fullField, rule.min));
  } else if (max && !min && val2 > rule.max) {
    errors.push(format(options2.messages[key2].max, rule.fullField, rule.max));
  } else if (min && max && (val2 < rule.min || val2 > rule.max)) {
    errors.push(format(options2.messages[key2].range, rule.fullField, rule.min, rule.max));
  }
};
var ENUM$1 = "enum";
var enumerable$1 = function enumerable(rule, value2, source, errors, options2) {
  rule[ENUM$1] = Array.isArray(rule[ENUM$1]) ? rule[ENUM$1] : [];
  if (rule[ENUM$1].indexOf(value2) === -1) {
    errors.push(format(options2.messages[ENUM$1], rule.fullField, rule[ENUM$1].join(", ")));
  }
};
var pattern$1 = function pattern(rule, value2, source, errors, options2) {
  if (rule.pattern) {
    if (rule.pattern instanceof RegExp) {
      rule.pattern.lastIndex = 0;
      if (!rule.pattern.test(value2)) {
        errors.push(format(options2.messages.pattern.mismatch, rule.fullField, value2, rule.pattern));
      }
    } else if (typeof rule.pattern === "string") {
      var _pattern = new RegExp(rule.pattern);
      if (!_pattern.test(value2)) {
        errors.push(format(options2.messages.pattern.mismatch, rule.fullField, value2, rule.pattern));
      }
    }
  }
};
var rules = {
  required: required$1,
  whitespace,
  type: type$1,
  range,
  "enum": enumerable$1,
  pattern: pattern$1
};
var string = function string2(rule, value2, callback, source, options2) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value2, "string") && !rule.required) {
      return callback();
    }
    rules.required(rule, value2, source, errors, options2, "string");
    if (!isEmptyValue(value2, "string")) {
      rules.type(rule, value2, source, errors, options2);
      rules.range(rule, value2, source, errors, options2);
      rules.pattern(rule, value2, source, errors, options2);
      if (rule.whitespace === true) {
        rules.whitespace(rule, value2, source, errors, options2);
      }
    }
  }
  callback(errors);
};
var method2 = function method3(rule, value2, callback, source, options2) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value2) && !rule.required) {
      return callback();
    }
    rules.required(rule, value2, source, errors, options2);
    if (value2 !== void 0) {
      rules.type(rule, value2, source, errors, options2);
    }
  }
  callback(errors);
};
var number2 = function number3(rule, value2, callback, source, options2) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (value2 === "") {
      value2 = void 0;
    }
    if (isEmptyValue(value2) && !rule.required) {
      return callback();
    }
    rules.required(rule, value2, source, errors, options2);
    if (value2 !== void 0) {
      rules.type(rule, value2, source, errors, options2);
      rules.range(rule, value2, source, errors, options2);
    }
  }
  callback(errors);
};
var _boolean = function _boolean2(rule, value2, callback, source, options2) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value2) && !rule.required) {
      return callback();
    }
    rules.required(rule, value2, source, errors, options2);
    if (value2 !== void 0) {
      rules.type(rule, value2, source, errors, options2);
    }
  }
  callback(errors);
};
var regexp2 = function regexp3(rule, value2, callback, source, options2) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value2) && !rule.required) {
      return callback();
    }
    rules.required(rule, value2, source, errors, options2);
    if (!isEmptyValue(value2)) {
      rules.type(rule, value2, source, errors, options2);
    }
  }
  callback(errors);
};
var integer2 = function integer3(rule, value2, callback, source, options2) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value2) && !rule.required) {
      return callback();
    }
    rules.required(rule, value2, source, errors, options2);
    if (value2 !== void 0) {
      rules.type(rule, value2, source, errors, options2);
      rules.range(rule, value2, source, errors, options2);
    }
  }
  callback(errors);
};
var floatFn = function floatFn2(rule, value2, callback, source, options2) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value2) && !rule.required) {
      return callback();
    }
    rules.required(rule, value2, source, errors, options2);
    if (value2 !== void 0) {
      rules.type(rule, value2, source, errors, options2);
      rules.range(rule, value2, source, errors, options2);
    }
  }
  callback(errors);
};
var array2 = function array3(rule, value2, callback, source, options2) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if ((value2 === void 0 || value2 === null) && !rule.required) {
      return callback();
    }
    rules.required(rule, value2, source, errors, options2, "array");
    if (value2 !== void 0 && value2 !== null) {
      rules.type(rule, value2, source, errors, options2);
      rules.range(rule, value2, source, errors, options2);
    }
  }
  callback(errors);
};
var object2 = function object3(rule, value2, callback, source, options2) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value2) && !rule.required) {
      return callback();
    }
    rules.required(rule, value2, source, errors, options2);
    if (value2 !== void 0) {
      rules.type(rule, value2, source, errors, options2);
    }
  }
  callback(errors);
};
var ENUM = "enum";
var enumerable2 = function enumerable3(rule, value2, callback, source, options2) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value2) && !rule.required) {
      return callback();
    }
    rules.required(rule, value2, source, errors, options2);
    if (value2 !== void 0) {
      rules[ENUM](rule, value2, source, errors, options2);
    }
  }
  callback(errors);
};
var pattern2 = function pattern3(rule, value2, callback, source, options2) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value2, "string") && !rule.required) {
      return callback();
    }
    rules.required(rule, value2, source, errors, options2);
    if (!isEmptyValue(value2, "string")) {
      rules.pattern(rule, value2, source, errors, options2);
    }
  }
  callback(errors);
};
var date2 = function date3(rule, value2, callback, source, options2) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value2, "date") && !rule.required) {
      return callback();
    }
    rules.required(rule, value2, source, errors, options2);
    if (!isEmptyValue(value2, "date")) {
      var dateObject;
      if (value2 instanceof Date) {
        dateObject = value2;
      } else {
        dateObject = new Date(value2);
      }
      rules.type(rule, dateObject, source, errors, options2);
      if (dateObject) {
        rules.range(rule, dateObject.getTime(), source, errors, options2);
      }
    }
  }
  callback(errors);
};
var required2 = function required3(rule, value2, callback, source, options2) {
  var errors = [];
  var type4 = Array.isArray(value2) ? "array" : typeof value2;
  rules.required(rule, value2, source, errors, options2, type4);
  callback(errors);
};
var type2 = function type3(rule, value2, callback, source, options2) {
  var ruleType = rule.type;
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value2, ruleType) && !rule.required) {
      return callback();
    }
    rules.required(rule, value2, source, errors, options2, ruleType);
    if (!isEmptyValue(value2, ruleType)) {
      rules.type(rule, value2, source, errors, options2);
    }
  }
  callback(errors);
};
var any = function any2(rule, value2, callback, source, options2) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value2) && !rule.required) {
      return callback();
    }
    rules.required(rule, value2, source, errors, options2);
  }
  callback(errors);
};
var validators = {
  string,
  method: method2,
  number: number2,
  "boolean": _boolean,
  regexp: regexp2,
  integer: integer2,
  "float": floatFn,
  array: array2,
  object: object2,
  "enum": enumerable2,
  pattern: pattern2,
  date: date2,
  url: type2,
  hex: type2,
  email: type2,
  required: required2,
  any
};
function newMessages() {
  return {
    "default": "Validation error on field %s",
    required: "%s is required",
    "enum": "%s must be one of %s",
    whitespace: "%s cannot be empty",
    date: {
      format: "%s date %s is invalid for format %s",
      parse: "%s date could not be parsed, %s is invalid ",
      invalid: "%s date %s is invalid"
    },
    types: {
      string: "%s is not a %s",
      method: "%s is not a %s (function)",
      array: "%s is not an %s",
      object: "%s is not an %s",
      number: "%s is not a %s",
      date: "%s is not a %s",
      "boolean": "%s is not a %s",
      integer: "%s is not an %s",
      "float": "%s is not a %s",
      regexp: "%s is not a valid %s",
      email: "%s is not a valid %s",
      url: "%s is not a valid %s",
      hex: "%s is not a valid %s"
    },
    string: {
      len: "%s must be exactly %s characters",
      min: "%s must be at least %s characters",
      max: "%s cannot be longer than %s characters",
      range: "%s must be between %s and %s characters"
    },
    number: {
      len: "%s must equal %s",
      min: "%s cannot be less than %s",
      max: "%s cannot be greater than %s",
      range: "%s must be between %s and %s"
    },
    array: {
      len: "%s must be exactly %s in length",
      min: "%s cannot be less than %s in length",
      max: "%s cannot be greater than %s in length",
      range: "%s must be between %s and %s in length"
    },
    pattern: {
      mismatch: "%s value %s does not match pattern %s"
    },
    clone: function clone2() {
      var cloned = JSON.parse(JSON.stringify(this));
      cloned.clone = this.clone;
      return cloned;
    }
  };
}
var messages = newMessages();
var Schema = function() {
  function Schema2(descriptor) {
    this.rules = null;
    this._messages = messages;
    this.define(descriptor);
  }
  var _proto = Schema2.prototype;
  _proto.define = function define2(rules2) {
    var _this = this;
    if (!rules2) {
      throw new Error("Cannot configure a schema with no rules");
    }
    if (typeof rules2 !== "object" || Array.isArray(rules2)) {
      throw new Error("Rules must be an object");
    }
    this.rules = {};
    Object.keys(rules2).forEach(function(name2) {
      var item = rules2[name2];
      _this.rules[name2] = Array.isArray(item) ? item : [item];
    });
  };
  _proto.messages = function messages2(_messages) {
    if (_messages) {
      this._messages = deepMerge(newMessages(), _messages);
    }
    return this._messages;
  };
  _proto.validate = function validate(source_, o, oc) {
    var _this2 = this;
    if (o === void 0) {
      o = {};
    }
    if (oc === void 0) {
      oc = function oc2() {
      };
    }
    var source = source_;
    var options2 = o;
    var callback = oc;
    if (typeof options2 === "function") {
      callback = options2;
      options2 = {};
    }
    if (!this.rules || Object.keys(this.rules).length === 0) {
      if (callback) {
        callback(null, source);
      }
      return Promise.resolve(source);
    }
    function complete(results) {
      var errors = [];
      var fields = {};
      function add2(e2) {
        if (Array.isArray(e2)) {
          var _errors;
          errors = (_errors = errors).concat.apply(_errors, e2);
        } else {
          errors.push(e2);
        }
      }
      for (var i6 = 0; i6 < results.length; i6++) {
        add2(results[i6]);
      }
      if (!errors.length) {
        callback(null, source);
      } else {
        fields = convertFieldsError(errors);
        callback(errors, fields);
      }
    }
    if (options2.messages) {
      var messages$1 = this.messages();
      if (messages$1 === messages) {
        messages$1 = newMessages();
      }
      deepMerge(messages$1, options2.messages);
      options2.messages = messages$1;
    } else {
      options2.messages = this.messages();
    }
    var series = {};
    var keys = options2.keys || Object.keys(this.rules);
    keys.forEach(function(z) {
      var arr = _this2.rules[z];
      var value2 = source[z];
      arr.forEach(function(r) {
        var rule = r;
        if (typeof rule.transform === "function") {
          if (source === source_) {
            source = _extends5({}, source);
          }
          value2 = source[z] = rule.transform(value2);
        }
        if (typeof rule === "function") {
          rule = {
            validator: rule
          };
        } else {
          rule = _extends5({}, rule);
        }
        rule.validator = _this2.getValidationMethod(rule);
        if (!rule.validator) {
          return;
        }
        rule.field = z;
        rule.fullField = rule.fullField || z;
        rule.type = _this2.getType(rule);
        series[z] = series[z] || [];
        series[z].push({
          rule,
          value: value2,
          source,
          field: z
        });
      });
    });
    var errorFields = {};
    return asyncMap(series, options2, function(data2, doIt) {
      var rule = data2.rule;
      var deep = (rule.type === "object" || rule.type === "array") && (typeof rule.fields === "object" || typeof rule.defaultField === "object");
      deep = deep && (rule.required || !rule.required && data2.value);
      rule.field = data2.field;
      function addFullField(key2, schema) {
        return _extends5({}, schema, {
          fullField: rule.fullField + "." + key2,
          fullFields: rule.fullFields ? [].concat(rule.fullFields, [key2]) : [key2]
        });
      }
      function cb(e2) {
        if (e2 === void 0) {
          e2 = [];
        }
        var errorList = Array.isArray(e2) ? e2 : [e2];
        if (!options2.suppressWarning && errorList.length) {
          Schema2.warning("async-validator:", errorList);
        }
        if (errorList.length && rule.message !== void 0) {
          errorList = [].concat(rule.message);
        }
        var filledErrors = errorList.map(complementError(rule, source));
        if (options2.first && filledErrors.length) {
          errorFields[rule.field] = 1;
          return doIt(filledErrors);
        }
        if (!deep) {
          doIt(filledErrors);
        } else {
          if (rule.required && !data2.value) {
            if (rule.message !== void 0) {
              filledErrors = [].concat(rule.message).map(complementError(rule, source));
            } else if (options2.error) {
              filledErrors = [options2.error(rule, format(options2.messages.required, rule.field))];
            }
            return doIt(filledErrors);
          }
          var fieldsSchema = {};
          if (rule.defaultField) {
            Object.keys(data2.value).map(function(key2) {
              fieldsSchema[key2] = rule.defaultField;
            });
          }
          fieldsSchema = _extends5({}, fieldsSchema, data2.rule.fields);
          var paredFieldsSchema = {};
          Object.keys(fieldsSchema).forEach(function(field) {
            var fieldSchema = fieldsSchema[field];
            var fieldSchemaList = Array.isArray(fieldSchema) ? fieldSchema : [fieldSchema];
            paredFieldsSchema[field] = fieldSchemaList.map(addFullField.bind(null, field));
          });
          var schema = new Schema2(paredFieldsSchema);
          schema.messages(options2.messages);
          if (data2.rule.options) {
            data2.rule.options.messages = options2.messages;
            data2.rule.options.error = options2.error;
          }
          schema.validate(data2.value, data2.rule.options || options2, function(errs) {
            var finalErrors = [];
            if (filledErrors && filledErrors.length) {
              finalErrors.push.apply(finalErrors, filledErrors);
            }
            if (errs && errs.length) {
              finalErrors.push.apply(finalErrors, errs);
            }
            doIt(finalErrors.length ? finalErrors : null);
          });
        }
      }
      var res;
      if (rule.asyncValidator) {
        res = rule.asyncValidator(rule, data2.value, cb, data2.source, options2);
      } else if (rule.validator) {
        try {
          res = rule.validator(rule, data2.value, cb, data2.source, options2);
        } catch (error) {
          console.error == null ? void 0 : console.error(error);
          if (!options2.suppressValidatorError) {
            setTimeout(function() {
              throw error;
            }, 0);
          }
          cb(error.message);
        }
        if (res === true) {
          cb();
        } else if (res === false) {
          cb(typeof rule.message === "function" ? rule.message(rule.fullField || rule.field) : rule.message || (rule.fullField || rule.field) + " fails");
        } else if (res instanceof Array) {
          cb(res);
        } else if (res instanceof Error) {
          cb(res.message);
        }
      }
      if (res && res.then) {
        res.then(function() {
          return cb();
        }, function(e2) {
          return cb(e2);
        });
      }
    }, function(results) {
      complete(results);
    }, source);
  };
  _proto.getType = function getType(rule) {
    if (rule.type === void 0 && rule.pattern instanceof RegExp) {
      rule.type = "pattern";
    }
    if (typeof rule.validator !== "function" && rule.type && !validators.hasOwnProperty(rule.type)) {
      throw new Error(format("Unknown rule type %s", rule.type));
    }
    return rule.type || "string";
  };
  _proto.getValidationMethod = function getValidationMethod(rule) {
    if (typeof rule.validator === "function") {
      return rule.validator;
    }
    var keys = Object.keys(rule);
    var messageIndex = keys.indexOf("message");
    if (messageIndex !== -1) {
      keys.splice(messageIndex, 1);
    }
    if (keys.length === 1 && keys[0] === "required") {
      return validators.required;
    }
    return validators[this.getType(rule)] || void 0;
  };
  return Schema2;
}();
Schema.register = function register(type4, validator) {
  if (typeof validator !== "function") {
    throw new Error("Cannot register a validator by type, validator is not a function");
  }
  validators[type4] = validator;
};
Schema.warning = warning;
Schema.messages = messages;
Schema.validators = validators;

// node_modules/@nutui/nutui-react/dist/es/packages/form/useform.js
var SECRET = "NUT_FORM_INTERNAL";
var FormStore = function() {
  "use strict";
  function FormStore2() {
    var _this = this;
    var _this1 = this;
    _class_call_check(this, FormStore2);
    var _this2 = this;
    _define_property(this, "initialValues", {});
    _define_property(this, "updateList", []);
    _define_property(this, "store", {});
    _define_property(this, "fieldEntities", []);
    _define_property(this, "callbacks", {});
    _define_property(this, "errors", {});
    _define_property(this, "registerField", function(field) {
      _this.fieldEntities.push(field);
      return function() {
        _this.fieldEntities = _this.fieldEntities.filter(function(item) {
          return item !== field;
        });
      };
    });
    _define_property(this, "getFieldValue", function(name2) {
      var _this_store;
      return (_this_store = _this.store) === null || _this_store === void 0 ? void 0 : _this_store[name2];
    });
    _define_property(this, "getFieldsValue", function(nameList) {
      if (typeof nameList === "boolean") {
        return JSON.parse(JSON.stringify(_this.store));
      }
      var fieldsValue = {};
      nameList.forEach(function(field) {
        fieldsValue[field] = _this.getFieldValue(field);
      });
      return fieldsValue;
    });
    _define_property(this, "setInitialValues", function(initialValues, init) {
      _this.initialValues = initialValues || {};
      if (init) {
        var nextStore = merge(initialValues, _this.store);
        _this.updateStore(nextStore);
        _this.notifyWatch();
      }
    });
    _define_property(this, "setFieldsValue", function(newStore) {
      var nextStore = recursive(true, _this.store, newStore);
      _this.updateStore(nextStore);
      _this.fieldEntities.forEach(function(entity) {
        var name2 = entity.props.name;
        Object.keys(newStore).forEach(function(key2) {
          if (key2 === name2) {
            entity.onStoreChange("update");
          }
        });
      });
      _this.updateList.forEach(function(item) {
        var shouldUpdate = item.condition;
        if (typeof item.condition === "function") {
          shouldUpdate = item.condition();
        }
        if (shouldUpdate) {
          item.entity.onStoreChange("update");
        }
      });
      _this.notifyWatch();
    });
    _define_property(this, "setFieldValue", function(name2, value2) {
      var store = _define_property({}, name2, value2);
      _this.setFieldsValue(store);
      _this.notifyWatch([
        name2
      ]);
    });
    _define_property(this, "setCallback", function(callback) {
      _this.callbacks = _object_spread({}, _this.callbacks, callback);
    });
    _define_property(this, "validateEntities", function() {
      var _ref = _async_to_generator(function(entity, errs) {
        var _entity_props, name2, _entity_props_rules, rules2, descriptor, validator, _this_store, param, errors, _errs;
        return __generator(this, function(_state) {
          switch (_state.label) {
            case 0:
              _entity_props = entity.props, name2 = _entity_props.name, _entity_props_rules = _entity_props.rules, rules2 = _entity_props_rules === void 0 ? [] : _entity_props_rules;
              if (!name2) {
                console.warn("Form field missing name property");
                return [
                  2
                ];
              }
              descriptor = {};
              if (rules2.length) {
                if (rules2.length > 1) {
                  descriptor[name2] = [];
                  rules2.forEach(function(v3) {
                    descriptor[name2].push(v3);
                  });
                } else {
                  descriptor[name2] = rules2[0];
                }
              }
              validator = new Schema(descriptor);
              _state.label = 1;
            case 1:
              _state.trys.push([
                1,
                3,
                4,
                5
              ]);
              return [
                4,
                validator.validate(_define_property({}, name2, (_this_store = _this2.store) === null || _this_store === void 0 ? void 0 : _this_store[name2]))
              ];
            case 2:
              _state.sent();
              return [
                3,
                5
              ];
            case 3:
              param = _state.sent();
              errors = param.errors;
              if (errors) {
                ;
                (_errs = errs).push.apply(_errs, _to_consumable_array(errors));
                _this2.errors[name2] = errors;
              }
              return [
                3,
                5
              ];
            case 4:
              if (!errs || errs.length === 0) {
                _this2.errors[name2] = [];
              }
              return [
                7
              ];
            case 5:
              entity.onStoreChange("validate");
              return [
                2
              ];
          }
        });
      });
      return function(entity, errs) {
        return _ref.apply(this, arguments);
      };
    }());
    _define_property(this, "validateFields", function() {
      var _ref = _async_to_generator(function(nameList) {
        var filterEntities, errs;
        return __generator(this, function(_state) {
          switch (_state.label) {
            case 0:
              filterEntities = [];
              if (!nameList || nameList.length === 0) {
                filterEntities = _this2.fieldEntities;
              } else {
                filterEntities = _this2.fieldEntities.filter(function(param) {
                  var name2 = param.props.name;
                  return nameList.includes(name2);
                });
              }
              errs = [];
              return [
                4,
                Promise.all(filterEntities.map(function() {
                  var _ref2 = _async_to_generator(function(entity) {
                    return __generator(this, function(_state2) {
                      switch (_state2.label) {
                        case 0:
                          return [
                            4,
                            _this2.validateEntities(entity, errs)
                          ];
                        case 1:
                          _state2.sent();
                          return [
                            2
                          ];
                      }
                    });
                  });
                  return function(entity) {
                    return _ref2.apply(this, arguments);
                  };
                }()))
              ];
            case 1:
              _state.sent();
              return [
                2,
                errs
              ];
          }
        });
      });
      return function(nameList) {
        return _ref.apply(this, arguments);
      };
    }());
    _define_property(this, "submit", _async_to_generator(function() {
      var errors, _this_callbacks_onFinish, _this_callbacks, _this_callbacks_onFinishFailed, _this_callbacks1;
      return __generator(this, function(_state) {
        switch (_state.label) {
          case 0:
            return [
              4,
              _this2.validateFields()
            ];
          case 1:
            errors = _state.sent();
            if (errors.length === 0) {
              ;
              (_this_callbacks_onFinish = (_this_callbacks = _this2.callbacks).onFinish) === null || _this_callbacks_onFinish === void 0 ? void 0 : _this_callbacks_onFinish.call(_this_callbacks, _this2.store);
            } else if (errors.length > 0) {
              ;
              (_this_callbacks_onFinishFailed = (_this_callbacks1 = _this2.callbacks).onFinishFailed) === null || _this_callbacks_onFinishFailed === void 0 ? void 0 : _this_callbacks_onFinishFailed.call(_this_callbacks1, _this2.store, errors);
            }
            return [
              2
            ];
        }
      });
    }));
    _define_property(this, "resetFields", function(namePaths) {
      if (namePaths && namePaths.length) {
        namePaths.forEach(function(path) {
          _this.errors[path] = null;
          _this.fieldEntities.forEach(function(entity) {
            var name2 = entity.props.name;
            if (name2 === path) {
              if (path in _this.initialValues) {
                _this.updateStore(_define_property({}, path, _this.initialValues[path]));
              } else {
                delete _this.store[path];
              }
              entity.onStoreChange("reset");
            }
          });
        });
      } else {
        var nextStore = merge({}, _this.initialValues);
        _this.updateStore(nextStore);
        _this.fieldEntities.forEach(function(entity) {
          entity.onStoreChange("reset");
        });
      }
    });
    _define_property(this, "registerUpdate", function(field, shouldUpdate) {
      _this.updateList.push({
        entity: field,
        condition: shouldUpdate
      });
      return function() {
        _this.updateList = _this.updateList.filter(function(i6) {
          return i6.entity !== field;
        });
      };
    });
    _define_property(this, "dispatch", function(param) {
      var name2 = param.name;
      _this.validateFields([
        name2
      ]);
    });
    _define_property(this, "getInternal", function(key2) {
      if (key2 === SECRET) {
        return {
          registerField: _this.registerField,
          setCallback: _this.setCallback,
          setInitialValues: _this.setInitialValues,
          dispatch: _this.dispatch,
          store: _this.store,
          fieldEntities: _this.fieldEntities,
          registerUpdate: _this.registerUpdate,
          registerWatch: _this.registerWatch
        };
      }
    });
    _define_property(this, "getForm", function() {
      return {
        getFieldValue: _this.getFieldValue,
        getFieldsValue: _this.getFieldsValue,
        setFieldsValue: _this.setFieldsValue,
        setFieldValue: _this.setFieldValue,
        resetFields: _this.resetFields,
        validateFields: _this.validateFields,
        submit: _this.submit,
        errors: _this.errors,
        getInternal: _this.getInternal
      };
    });
    _define_property(this, "watchList", []);
    _define_property(this, "registerWatch", function(callback) {
      _this.watchList.push(callback);
      return function() {
        _this.watchList = _this.watchList.filter(function(fn) {
          return fn !== callback;
        });
      };
    });
    _define_property(this, "notifyWatch", function() {
      var namePath = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      if (_this1.watchList.length) {
        var allValues;
        if (!namePath || namePath.length === 0) {
          allValues = _this1.getFieldsValue(true);
        } else {
          allValues = _this1.getFieldsValue(namePath);
        }
        _this1.watchList.forEach(function(callback) {
          callback(allValues, namePath);
        });
      }
    });
    this.callbacks = {
      onFinish: function() {
      },
      onFinishFailed: function() {
      }
    };
  }
  _create_class(FormStore2, [
    {
      key: "updateStore",
      value: function updateStore(nextStore) {
        this.store = nextStore;
      }
    }
  ]);
  return FormStore2;
}();
var useForm = function(form) {
  var formRef = (0, import_react189.useRef)();
  if (!formRef.current) {
    if (form) {
      formRef.current = form;
    } else {
      var formStore = new FormStore();
      formRef.current = formStore.getForm();
    }
  }
  return [
    formRef.current
  ];
};
var useWatch2 = function(path, form) {
  var formInstance = form.getInternal(SECRET);
  var _useState = _sliced_to_array((0, import_react189.useState)(), 2), value2 = _useState[0], setValue = _useState[1];
  (0, import_react189.useEffect)(function() {
    var unsubscribe = formInstance.registerWatch(function(data2, namePath) {
      var value3 = data2[path];
      setValue(value3);
    });
    var initialValue = form.getFieldsValue(true);
    if (value2 !== initialValue[path]) {
      setValue(initialValue[path]);
    }
    return function() {
      return unsubscribe();
    };
  }, [
    form
  ]);
  return value2;
};

// node_modules/@nutui/nutui-react/dist/es/packages/form/form.js
var defaultProps41 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  labelPosition: "right",
  starPosition: "left",
  disabled: false,
  divider: false,
  validateTrigger: "onChange",
  onReset: function() {
  },
  onSubmit: function() {
  },
  onFinish: function(values2) {
  },
  onFinishFailed: function(values2, errorFields) {
  }
});
var PositionInfo = {
  top: "form-layout-top",
  left: "form-layout-left",
  right: "form-layout-right"
};
var Form = import_react190.default.forwardRef(function(props, ref) {
  var classPrefix33 = "nut-form";
  var _$_object_spread = _object_spread({}, defaultProps41, props), className = _$_object_spread.className, style = _$_object_spread.style, footer = _$_object_spread.footer, children2 = _$_object_spread.children, initialValues = _$_object_spread.initialValues, divider = _$_object_spread.divider, disabled = _$_object_spread.disabled, onFinish = _$_object_spread.onFinish, onFinishFailed = _$_object_spread.onFinishFailed, onSubmit = _$_object_spread.onSubmit, onReset = _$_object_spread.onReset, validateTrigger = _$_object_spread.validateTrigger, labelPosition = _$_object_spread.labelPosition, starPosition = _$_object_spread.starPosition, form = _$_object_spread.form;
  var formInstance;
  if (form !== void 0) {
    formInstance = form;
  } else {
    ;
    var _$ref;
    _$ref = _sliced_to_array(useForm(), 1), formInstance = _$ref[0], _$ref;
  }
  import_react190.default.useImperativeHandle(ref, function() {
    return formInstance;
  });
  formInstance.starPosition = starPosition;
  var submit = formInstance.submit, resetFields = formInstance.resetFields;
  var _formInstance_getInternal = formInstance.getInternal(SECRET), setCallback = _formInstance_getInternal.setCallback, setInitialValues = _formInstance_getInternal.setInitialValues;
  setCallback({
    onFinish,
    onFinishFailed
  });
  var mountRef = import_react190.default.useRef(false);
  setInitialValues(initialValues, !mountRef.current);
  if (!mountRef.current) {
    mountRef.current = true;
  }
  return import_react190.default.createElement("form", {
    className: (0, import_classnames39.default)(classPrefix33, PositionInfo[labelPosition], className),
    style,
    onSubmit: function(e2) {
      e2.preventDefault();
      e2.stopPropagation();
      submit();
      onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit();
    },
    onReset: function(e2) {
      e2.preventDefault();
      e2.stopPropagation();
      resetFields();
      onReset === null || onReset === void 0 ? void 0 : onReset();
    }
  }, import_react190.default.createElement(cell_default.Group, {
    divider
  }, import_react190.default.createElement(Context.Provider, {
    value: {
      formInstance,
      labelPosition,
      disabled,
      validateTrigger
    }
  }, children2), footer ? import_react190.default.createElement(cell_default, {
    className: "".concat(classPrefix33, "-footer")
  }, footer) : null));
});
Form.displayName = "NutForm";

// node_modules/@swc/helpers/esm/_get_prototype_of.js
function _get_prototype_of(o) {
  _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _get_prototype_of(o);
}

// node_modules/@swc/helpers/esm/_is_native_reflect_construct.js
function _is_native_reflect_construct() {
  try {
    var result = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (_) {
  }
  return (_is_native_reflect_construct = function() {
    return !!result;
  })();
}

// node_modules/@swc/helpers/esm/_assert_this_initialized.js
function _assert_this_initialized(self2) {
  if (self2 === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return self2;
}

// node_modules/@swc/helpers/esm/_possible_constructor_return.js
function _possible_constructor_return(self2, call3) {
  if (call3 && (_type_of(call3) === "object" || typeof call3 === "function"))
    return call3;
  return _assert_this_initialized(self2);
}

// node_modules/@swc/helpers/esm/_call_super.js
function _call_super(_this, derived, args) {
  derived = _get_prototype_of(derived);
  return _possible_constructor_return(
    _this,
    _is_native_reflect_construct() ? Reflect.construct(derived, args || [], _get_prototype_of(_this).constructor) : derived.apply(_this, args)
  );
}

// node_modules/@swc/helpers/esm/_set_prototype_of.js
function _set_prototype_of(o, p10) {
  _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o2, p11) {
    o2.__proto__ = p11;
    return o2;
  };
  return _set_prototype_of(o, p10);
}

// node_modules/@swc/helpers/esm/_inherits.js
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _set_prototype_of(subClass, superClass);
}

// node_modules/@nutui/nutui-react/dist/es/packages/formitem/formitem.js
var import_react191 = __toESM(require_react());
var defaultProps42 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  required: false,
  name: "",
  label: "",
  rules: [
    {
      required: false,
      message: ""
    }
  ],
  errorMessageAlign: "left",
  shouldUpdate: false,
  noStyle: false
});
var _React_Component;
var FormItem = function(_superClass) {
  "use strict";
  _inherits(FormItem2, _superClass);
  function FormItem2(props) {
    _class_call_check(this, FormItem2);
    var _this;
    _this = _call_super(this, FormItem2, [
      props
    ]), _define_property(_this, "cancelRegister", void 0), _define_property(_this, "componentRef", void 0), _define_property(_this, "eventOff", void 0), // children添加value属性和onChange事件
    _define_property(_this, "getControlled", function(children2) {
      var _children_props;
      var _this_context_formInstance = _this.context.formInstance, setFieldsValue = _this_context_formInstance.setFieldsValue, getFieldValue = _this_context_formInstance.getFieldValue;
      var dispatch = _this.context.formInstance.getInternal(SECRET).dispatch;
      var _this_props = _this.props, _this_props_name = _this_props.name, name2 = _this_props_name === void 0 ? "" : _this_props_name;
      if (children2 === null || children2 === void 0 ? void 0 : (_children_props = children2.props) === null || _children_props === void 0 ? void 0 : _children_props.defaultValue) {
        if (true) {
          console.warn("[NutUI] FormItem:", "请通过 initialValue 设置初始值，而不是 defaultValue");
        }
      }
      var fieldValue = getFieldValue(name2);
      var _obj;
      var controlled = _object_spread_props(_object_spread({}, children2.props), (_obj = {
        className: children2.props.className
      }, _define_property(_obj, _this.props.valuePropName || "value", fieldValue !== void 0 ? fieldValue : _this.props.initialValue), _define_property(_obj, _this.props.trigger || "onChange", function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        var originOnChange = children2.props[_this.props.trigger || "onChange"];
        if (originOnChange) {
          originOnChange.apply(void 0, _to_consumable_array(args));
        }
        var _args = _sliced_to_array(args, 1), next = _args[0];
        if (_this.props.getValueFromEvent) {
          var _this_props2;
          next = (_this_props2 = _this.props).getValueFromEvent.apply(_this_props2, _to_consumable_array(args));
        }
        setFieldsValue(_define_property({}, name2, next));
      }), _obj));
      var validateTrigger = _this.props.validateTrigger;
      var mergedValidateTrigger = validateTrigger || _this.context.validateTrigger;
      var validateTriggers = toArray(mergedValidateTrigger);
      validateTriggers.forEach(function(trigger) {
        var originTrigger = controlled[trigger];
        controlled[trigger] = function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          if (originTrigger) {
            originTrigger.apply(void 0, _to_consumable_array(args));
          }
          if (_this.props.rules && _this.props.rules.length) {
            dispatch({
              name: _this.props.name
            });
          }
        };
      });
      if (isForwardRefComponent(children2)) {
        controlled.ref = function(componentInstance) {
          var originRef = children2.ref;
          if (originRef) {
            if (typeof originRef === "function") {
              originRef(componentInstance);
            }
            if ("current" in originRef) {
              originRef.current = componentInstance;
            }
          }
          _this.componentRef = componentInstance;
        };
      }
      return controlled;
    }), _define_property(_this, "refresh", function() {
      _this.setState(function(param) {
        var resetCount = param.resetCount;
        return {
          resetCount: resetCount + 1
        };
      });
    }), _define_property(_this, "onStoreChange", function(type4) {
      if (type4 === "reset") {
        _this.context.formInstance.errors[_this.props.name] = [];
        _this.refresh();
      } else {
        _this.forceUpdate();
      }
    }), _define_property(_this, "renderLayout", function(childNode) {
      var _$_object_spread = _object_spread({}, defaultProps42, _this.props), label = _$_object_spread.label, name2 = _$_object_spread.name, required4 = _$_object_spread.required, rules2 = _$_object_spread.rules, className = _$_object_spread.className, style = _$_object_spread.style, errorMessageAlign = _$_object_spread.errorMessageAlign, align = _$_object_spread.align;
      var requiredInRules = rules2 === null || rules2 === void 0 ? void 0 : rules2.some(function(rule) {
        return rule.required;
      });
      var item = name2 ? _this.context.formInstance.errors[name2] : [];
      var starPosition = _this.context.formInstance.starPosition;
      var renderStar = (required4 || requiredInRules) && import_react191.default.createElement("div", {
        className: "nut-form-item-label-required required"
      }, "*");
      var renderLabel = import_react191.default.createElement(import_react191.default.Fragment, null, import_react191.default.createElement("span", {
        className: "nut-form-item-labeltxt"
      }, starPosition === "left" ? renderStar : null, label), starPosition === "right" ? renderStar : null);
      return import_react191.default.createElement(cell_default, {
        className: "".concat(_this.getClassNameWithDirection("nut-form-item"), " ").concat(className),
        style,
        align,
        onClick: function(e2) {
          return _this.props.onClick && _this.props.onClick(e2, _this.componentRef);
        }
      }, label ? import_react191.default.createElement("div", {
        className: "nut-cell-title ".concat(_this.getClassNameWithDirection("nut-form-item-label"))
      }, renderLabel) : null, import_react191.default.createElement("div", {
        className: "nut-cell-value ".concat(_this.getClassNameWithDirection("nut-form-item-body"))
      }, import_react191.default.createElement("div", {
        className: "nut-form-item-body-slots"
      }, childNode), item && item.length > 0 && import_react191.default.createElement("div", {
        className: "nut-form-item-body-tips",
        style: {
          textAlign: errorMessageAlign
        }
      }, item[0].message)));
    });
    _this.componentRef = import_react191.default.createRef();
    _this.state = {
      resetCount: 1
    };
    return _this;
  }
  _create_class(FormItem2, [
    {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this_context_formInstance_getInternal = this.context.formInstance.getInternal(SECRET), _this_context_formInstance_getInternal_store = _this_context_formInstance_getInternal.store, store = _this_context_formInstance_getInternal_store === void 0 ? {} : _this_context_formInstance_getInternal_store, setInitialValues = _this_context_formInstance_getInternal.setInitialValues;
        if (this.props.initialValue && this.props.name && !Object.keys(store).includes(this.props.name)) {
          setInitialValues(_object_spread_props(_object_spread({}, store), _define_property({}, this.props.name, this.props.initialValue)), true);
        }
        var _this_context_formInstance_getInternal1 = this.context.formInstance.getInternal(SECRET), registerField = _this_context_formInstance_getInternal1.registerField, registerUpdate = _this_context_formInstance_getInternal1.registerUpdate;
        this.cancelRegister = registerField(this);
        this.eventOff = registerUpdate(this, this.props.shouldUpdate);
      }
    },
    {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.cancelRegister) {
          this.cancelRegister();
        }
        if (this.eventOff) {
          this.eventOff();
        }
      }
    },
    {
      key: "getClassNameWithDirection",
      value: function getClassNameWithDirection(className) {
        if (className && this.context.labelPosition) {
          return "".concat(className, " ").concat(className, "-").concat(this.context.labelPosition);
        }
        return className;
      }
    },
    {
      key: "render",
      value: function render2() {
        var children2 = this.props.children;
        var child = Array.isArray(children2) ? children2[0] : children2;
        var returnChildNode;
        if (!this.props.shouldUpdate) {
          returnChildNode = import_react191.default.cloneElement(child, this.getControlled(child));
        } else {
          returnChildNode = child(this.context.formInstance);
        }
        return import_react191.default.createElement(import_react191.default.Fragment, {
          key: this.state.resetCount
        }, import_react191.default.createElement("div", {
          className: this.context.disabled ? "nut-form-item-disabled" : ""
        }, this.props.noStyle ? returnChildNode : this.renderLayout(returnChildNode)));
      }
    }
  ]);
  return FormItem2;
}(_React_Component = import_react191.default.Component);
_define_property(FormItem, "defaultProps", defaultProps42);
_define_property(FormItem, "contextType", Context);

// node_modules/@nutui/nutui-react/dist/es/packages/form/index.js
var InnerForm = Form;
InnerForm.Item = FormItem;
InnerForm.useForm = useForm;
InnerForm.useWatch = useWatch2;
var form_default = InnerForm;

// node_modules/@nutui/nutui-react/dist/es/packages/formitem/index.js
var formitem_default = FormItem;

// node_modules/@nutui/nutui-react/dist/es/packages/input/input.js
var import_react193 = __toESM(require_react());

// node_modules/@nutui/nutui-react/dist/es/packages/input/utils.js
function trimExtraChar(value2, char, regExp) {
  var index2 = value2.indexOf(char);
  if (index2 === -1) {
    return value2;
  }
  if (char === "-" && index2 !== 0) {
    return value2.slice(0, index2);
  }
  return value2.slice(0, index2 + 1) + value2.slice(index2).replace(regExp, "");
}
function formatNumber(value2) {
  var allowDot = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true, allowMinus = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
  if (allowDot) {
    value2 = trimExtraChar(value2, ".", /\./g);
  } else {
    value2 = value2.split(".")[0];
  }
  if (allowMinus) {
    value2 = trimExtraChar(value2, "-", /-/g);
  } else {
    value2 = value2.replace(/-/, "");
  }
  var regExp = allowDot ? /[^-0-9.]/g : /[^-0-9]/g;
  return value2.replace(regExp, "");
}

// node_modules/@nutui/nutui-react/dist/es/packages/input/input.js
var defaultProps43 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  type: "text",
  name: "",
  placeholder: void 0,
  confirmType: "done",
  align: "left",
  required: false,
  disabled: false,
  readOnly: false,
  maxLength: 9999,
  clearable: false,
  clearIcon: null,
  formatTrigger: "onChange",
  autoFocus: false,
  plain: false
});
var Input = (0, import_react193.forwardRef)(function(props, ref) {
  var rtl = useRtl();
  var locale = useConfig().locale;
  var _ref = _object_spread({}, defaultProps43, props), type4 = _ref.type, name2 = _ref.name, placeholder = _ref.placeholder, align = _ref.align, disabled = _ref.disabled, readOnly = _ref.readOnly, maxLength = _ref.maxLength, clearable = _ref.clearable, clearIcon = _ref.clearIcon, formatTrigger = _ref.formatTrigger, autoFocus = _ref.autoFocus, style = _ref.style, className = _ref.className, onChange = _ref.onChange, onFocus = _ref.onFocus, onClear = _ref.onClear, formatter = _ref.formatter, onClick = _ref.onClick, confirmType = _ref.confirmType, plain = _ref.plain, defaultValue = _ref.defaultValue, _value = _ref.value, onCompositionStart = _ref.onCompositionStart, onCompositionEnd = _ref.onCompositionEnd, rest = _object_without_properties(_ref, [
    "type",
    "name",
    "placeholder",
    "align",
    "disabled",
    "readOnly",
    "maxLength",
    "clearable",
    "clearIcon",
    "formatTrigger",
    "autoFocus",
    "style",
    "className",
    "onChange",
    "onFocus",
    "onClear",
    "formatter",
    "onClick",
    "confirmType",
    "plain",
    "defaultValue",
    "value",
    "onCompositionStart",
    "onCompositionEnd"
  ]);
  var _usePropsValue = _sliced_to_array(usePropsValue({
    value: _value,
    defaultValue,
    finalValue: "",
    onChange
  }), 2), value2 = _usePropsValue[0], setValue = _usePropsValue[1];
  var inputRef = (0, import_react193.useRef)(null);
  var composingRef = (0, import_react193.useRef)(false);
  var _useState = _sliced_to_array((0, import_react193.useState)(false), 2), active2 = _useState[0], setActive = _useState[1];
  (0, import_react193.useImperativeHandle)(ref, function() {
    return {
      clear: function() {
        return setValue("");
      },
      focus: function() {
        var _inputRef_current;
        return (_inputRef_current = inputRef.current) === null || _inputRef_current === void 0 ? void 0 : _inputRef_current.focus();
      },
      blur: function() {
        var _inputRef_current;
        return (_inputRef_current = inputRef.current) === null || _inputRef_current === void 0 ? void 0 : _inputRef_current.blur();
      },
      get nativeElement() {
        return inputRef.current;
      }
    };
  });
  var getInputClass = (0, import_react193.useCallback)(function() {
    var classPrefix33 = "nut-input";
    return [
      classPrefix33,
      "".concat(disabled ? "".concat(classPrefix33, "-disabled") : ""),
      readOnly ? "".concat(classPrefix33, "-readonly") : "",
      "".concat(plain ? "".concat(classPrefix33, "-plain") : "".concat(classPrefix33, "-container"))
    ].filter(Boolean).join(" ");
  }, [
    disabled,
    readOnly,
    plain
  ]);
  var handleValueUpdate = function(inputValue, trigger) {
    var updatedValue = inputValue;
    if (type4 === "number")
      updatedValue = formatNumber(updatedValue, false, true);
    if (type4 === "digit")
      updatedValue = formatNumber(updatedValue, true, true);
    if (formatter && trigger === formatTrigger)
      updatedValue = formatter(updatedValue);
    setValue(updatedValue);
    if (trigger !== "onChange") {
      var eventHandler = props[trigger];
      eventHandler === null || eventHandler === void 0 ? void 0 : eventHandler(updatedValue);
    }
  };
  var handleFocus = function(event) {
    onFocus === null || onFocus === void 0 ? void 0 : onFocus(event.target.value);
    setActive(true);
  };
  var handleBlur = function(event) {
    handleValueUpdate(event.target.value, "onBlur");
    setTimeout(function() {
      return setActive(false);
    }, 200);
  };
  var handleInputChange = function(event) {
    handleValueUpdate(event.target.value, "onChange");
  };
  var getInputType = function(inputType) {
    if (inputType === "digit")
      return "text";
    if (inputType === "number")
      return "tel";
    return inputType;
  };
  var getTextAlign = function() {
    if (rtl) {
      if (align === "right")
        return "left";
      if (align === "left")
        return "right";
    }
    return align;
  };
  return import_react193.default.createElement("div", {
    className: "".concat(getInputClass(), " ").concat(className || ""),
    style,
    onClick
  }, import_react193.default.createElement("input", _object_spread_props(_object_spread({}, rest), {
    ref: inputRef,
    name: name2,
    className: "nut-input-native",
    style: {
      textAlign: getTextAlign()
    },
    type: getInputType(type4),
    maxLength,
    placeholder: placeholder === void 0 ? locale.placeholder : placeholder,
    disabled,
    readOnly,
    value: value2,
    autoFocus,
    enterKeyHint: confirmType,
    onFocus: handleFocus,
    onBlur: handleBlur,
    onChange: handleInputChange,
    onCompositionStart: function(e2) {
      composingRef.current = true;
      onCompositionStart === null || onCompositionStart === void 0 ? void 0 : onCompositionStart(e2);
    },
    onCompositionEnd: function(e2) {
      composingRef.current = false;
      onCompositionEnd === null || onCompositionEnd === void 0 ? void 0 : onCompositionEnd(e2);
    }
  })), clearable && !readOnly && active2 && value2.length > 0 && import_react193.default.createElement("span", {
    style: {
      display: "flex",
      alignItems: "center",
      cursor: "pointer"
    },
    onClick: function() {
      if (!disabled) {
        setValue("");
        onClear === null || onClear === void 0 ? void 0 : onClear("");
      }
    }
  }, clearIcon || import_react193.default.createElement(n10, {
    className: "nut-input-clear"
  })));
});
Input.displayName = "NutInput";

// node_modules/@nutui/nutui-react/dist/es/packages/input/index.js
var input_default = Input;

// node_modules/@nutui/nutui-react/dist/es/packages/inputnumber/inputnumber.js
var import_react194 = __toESM(require_react());
var import_classnames40 = __toESM(require_classnames());
var defaultProps44 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  disabled: false,
  readOnly: false,
  allowEmpty: false,
  min: 1,
  max: 9999,
  step: 1,
  digits: 0,
  select: true,
  beforeChange: function(value2) {
    return Promise.resolve(true);
  }
});
var classPrefix15 = "nut-inputnumber";
var InputNumber = function(props) {
  var _ref = _object_spread({}, defaultProps44, props), children2 = _ref.children, disabled = _ref.disabled, min = _ref.min, max = _ref.max, readOnly = _ref.readOnly, value2 = _ref.value, defaultValue = _ref.defaultValue, allowEmpty = _ref.allowEmpty, digits = _ref.digits, step = _ref.step, select = _ref.select, className = _ref.className, style = _ref.style, formatter = _ref.formatter, onPlus = _ref.onPlus, onMinus = _ref.onMinus, onOverlimit = _ref.onOverlimit, onBlur = _ref.onBlur, onFocus = _ref.onFocus, onChange = _ref.onChange, beforeChange = _ref.beforeChange, restProps = _object_without_properties(_ref, [
    "children",
    "disabled",
    "min",
    "max",
    "readOnly",
    "value",
    "defaultValue",
    "allowEmpty",
    "digits",
    "step",
    "select",
    "className",
    "style",
    "formatter",
    "onPlus",
    "onMinus",
    "onOverlimit",
    "onBlur",
    "onFocus",
    "onChange",
    "beforeChange"
  ]);
  var classes = (0, import_classnames40.default)(classPrefix15, className, _define_property({}, "".concat(classPrefix15, "-disabled"), disabled));
  var _useState = _sliced_to_array((0, import_react194.useState)(false), 2), focused = _useState[0], setFocused = _useState[1];
  var inputRef = (0, import_react194.useRef)(null);
  (0, import_react194.useEffect)(function() {
    if (select && focused) {
      var _inputRef_current_select, _inputRef_current;
      (_inputRef_current = inputRef.current) === null || _inputRef_current === void 0 ? void 0 : (_inputRef_current_select = _inputRef_current.select) === null || _inputRef_current_select === void 0 ? void 0 : _inputRef_current_select.call(_inputRef_current);
    }
  }, [
    select,
    focused
  ]);
  var _usePropsValue = _sliced_to_array(usePropsValue({
    value: typeof value2 === "string" ? parseFloat(value2) : value2,
    defaultValue: typeof defaultValue === "string" ? parseFloat(defaultValue) : defaultValue,
    finalValue: 0
  }), 2), shadowValue = _usePropsValue[0], setShadowValue = _usePropsValue[1];
  var format2 = function(value3) {
    if (value3 === null)
      return "";
    var fixedValue = bound(typeof value3 === "string" ? parseFloat(value3) : value3, Number(min), Number(max));
    if (formatter) {
      return formatter(fixedValue);
    }
    if (digits) {
      return fixedValue.toFixed(digits).toString();
    }
    return fixedValue.toString();
  };
  var _useState1 = _sliced_to_array((0, import_react194.useState)(format2(shadowValue)), 2), inputValue = _useState1[0], setInputValue = _useState1[1];
  (0, import_react194.useEffect)(function() {
    if (!focused) {
      setInputValue(format2(shadowValue));
    }
  }, [
    focused,
    shadowValue
  ]);
  var calcNextValue = function(current, stepValue, symbol) {
    var dig = digits + 1;
    var currentValue = parseFloat(current || "0");
    var stepAmount = parseFloat(stepValue) * symbol;
    return (currentValue * dig + stepAmount * dig) / dig;
  };
  var update3 = function() {
    var _ref2 = _async_to_generator(function(negative, e2) {
      var shouldOverBoundary, maybeResume, nextValue;
      return __generator(this, function(_state) {
        switch (_state.label) {
          case 0:
            if (step === void 0)
              return [
                2
              ];
            negative ? onMinus === null || onMinus === void 0 ? void 0 : onMinus(e2) : onPlus === null || onPlus === void 0 ? void 0 : onPlus(e2);
            shouldOverBoundary = calcNextValue(bound(Number(shadowValue), Number(min), Number(max)), step, negative ? -1 : 1);
            return [
              4,
              beforeChange(Number(shouldOverBoundary))
            ];
          case 1:
            maybeResume = _state.sent();
            if (!maybeResume)
              return [
                2
              ];
            nextValue = bound(shouldOverBoundary, Number(min), Number(max));
            setShadowValue(nextValue);
            if (negative ? shouldOverBoundary < Number(min) : shouldOverBoundary > Number(max)) {
              onOverlimit === null || onOverlimit === void 0 ? void 0 : onOverlimit(e2);
            } else {
              onChange === null || onChange === void 0 ? void 0 : onChange(nextValue, e2);
            }
            return [
              2
            ];
        }
      });
    });
    return function update4(negative, e2) {
      return _ref2.apply(this, arguments);
    };
  }();
  var handleReduce = function() {
    var _ref2 = _async_to_generator(function(e2) {
      return __generator(this, function(_state) {
        switch (_state.label) {
          case 0:
            if (disabled)
              return [
                2
              ];
            return [
              4,
              update3(true, e2)
            ];
          case 1:
            _state.sent();
            return [
              2
            ];
        }
      });
    });
    return function handleReduce2(e2) {
      return _ref2.apply(this, arguments);
    };
  }();
  var handlePlus = function() {
    var _ref2 = _async_to_generator(function(e2) {
      return __generator(this, function(_state) {
        switch (_state.label) {
          case 0:
            if (disabled)
              return [
                2
              ];
            return [
              4,
              update3(false, e2)
            ];
          case 1:
            _state.sent();
            return [
              2
            ];
        }
      });
    });
    return function handlePlus2(e2) {
      return _ref2.apply(this, arguments);
    };
  }();
  var parseValue = function(text3) {
    if (text3 === "")
      return null;
    if (text3 === "-")
      return null;
    return text3;
  };
  var handleInputChange = function() {
    var _ref2 = _async_to_generator(function(e2) {
      var valueStr, maybeResume;
      return __generator(this, function(_state) {
        switch (_state.label) {
          case 0:
            setInputValue(e2.target.value);
            valueStr = parseValue(e2.target.value);
            return [
              4,
              beforeChange(Number(valueStr))
            ];
          case 1:
            maybeResume = _state.sent();
            if (!maybeResume)
              return [
                2
              ];
            setShadowValue(
              // eslint-disable-next-line no-nested-ternary
              valueStr === null ? allowEmpty ? null : defaultValue : valueStr
            );
            if (valueStr !== null && (Number(valueStr) < Number(min) || Number(valueStr) > Number(max))) {
              onOverlimit === null || onOverlimit === void 0 ? void 0 : onOverlimit(e2);
            } else {
              onChange === null || onChange === void 0 ? void 0 : onChange(parseFloat(valueStr || "0").toFixed(digits), e2);
            }
            return [
              2
            ];
        }
      });
    });
    return function handleInputChange2(e2) {
      return _ref2.apply(this, arguments);
    };
  }();
  var handleFocus = function(e2) {
    setFocused(true);
    setInputValue(shadowValue !== void 0 && shadowValue !== null ? bound(Number(shadowValue), Number(min), Number(max)).toString() : "");
    onFocus === null || onFocus === void 0 ? void 0 : onFocus(e2);
  };
  var handleBlur = function(e2) {
    setFocused(false);
    onBlur && onBlur(e2);
    var valueStr = parseValue(e2.target.value);
    onChange === null || onChange === void 0 ? void 0 : onChange(parseFloat(valueStr || "0").toFixed(digits), e2);
  };
  return import_react194.default.createElement("div", _object_spread({
    className: classes,
    style
  }, restProps), import_react194.default.createElement("div", {
    className: "".concat(classPrefix15, "-minus"),
    onClick: handleReduce
  }, import_react194.default.createElement(i3, {
    className: (0, import_classnames40.default)("".concat(classPrefix15, "-icon ").concat(classPrefix15, "-icon-minus"), _define_property({}, "".concat(classPrefix15, "-icon-disabled"), Number(shadowValue) <= Number(min) || disabled))
  })), import_react194.default.createElement("input", {
    className: (0, import_classnames40.default)("".concat(classPrefix15, "-input"), _define_property({}, "".concat(classPrefix15, "-input-disabled"), disabled)),
    ref: inputRef,
    inputMode: "decimal",
    disabled,
    readOnly,
    value: inputValue,
    onInput: handleInputChange,
    onBlur: handleBlur,
    onFocus: handleFocus
  }), import_react194.default.createElement("div", {
    className: "".concat(classPrefix15, "-add"),
    onClick: handlePlus
  }, import_react194.default.createElement(d6, {
    className: (0, import_classnames40.default)("".concat(classPrefix15, "-icon ").concat(classPrefix15, "-icon-plus"), _define_property({}, "".concat(classPrefix15, "-icon-disabled"), Number(shadowValue) >= Number(max) || disabled))
  })));
};
InputNumber.displayName = "NutInputNumber";

// node_modules/@nutui/nutui-react/dist/es/packages/inputnumber/index.js
var inputnumber_default = InputNumber;

// node_modules/@nutui/nutui-react/dist/es/packages/menu/menu.js
var import_react197 = __toESM(require_react());
var import_classnames42 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/menuitem/menuitem.js
var import_react196 = __toESM(require_react());
var import_classnames41 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/hooks/use-click-away.js
var import_react195 = __toESM(require_react());
var getTargetElement = function(target) {
  var targetElement;
  if (isFunction(target)) {
    targetElement = target();
  } else if ("current" in target) {
    targetElement = target.current;
  } else {
    targetElement = target;
  }
  return targetElement;
};
function useClickAway(onClickAway, target) {
  var eventName = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "click", useCapture = arguments.length > 3 ? arguments[3] : void 0, isListener = arguments.length > 4 ? arguments[4] : void 0, outerVar = arguments.length > 5 ? arguments[5] : void 0;
  var handler = function(event) {
    var targets = Array.isArray(target) ? target : [
      target
    ];
    if (targets.some(function(item) {
      var targetElement = getTargetElement(item);
      return !targetElement || targetElement.contains(event.target);
    })) {
      return;
    }
    if (outerVar) {
      onClickAway();
    }
  };
  (0, import_react195.useEffect)(function() {
    if (isListener) {
      window.addEventListener(eventName, handler, useCapture);
    } else {
      window.removeEventListener(eventName, handler, useCapture);
    }
    return function() {
      window.removeEventListener(eventName, handler, useCapture);
    };
  }, [
    target
  ]);
}

// node_modules/@nutui/nutui-react/dist/es/packages/menuitem/menuitem.js
var defaultProps45 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  titleIcon: null,
  columns: 1,
  direction: "down",
  icon: null,
  closeOnClickAway: true,
  activeTitleClass: "",
  inactiveTitleClass: "",
  onChange: function(value2) {
    return void 0;
  }
});
var MenuItem = (0, import_react196.forwardRef)(function(props, ref) {
  var _$_object_spread = _object_spread({}, defaultProps45, props), className = _$_object_spread.className, style = _$_object_spread.style, options2 = _$_object_spread.options, value2 = _$_object_spread.value, defaultValue = _$_object_spread.defaultValue, columns = _$_object_spread.columns, title = _$_object_spread.title, icon = _$_object_spread.icon, direction = _$_object_spread.direction, onChange = _$_object_spread.onChange, activeTitleClass = _$_object_spread.activeTitleClass, inactiveTitleClass = _$_object_spread.inactiveTitleClass, closeOnClickAway = _$_object_spread.closeOnClickAway, children2 = _$_object_spread.children, activeColor = _$_object_spread.activeColor, show2 = _$_object_spread.show, parent2 = _$_object_spread.parent, index2 = _$_object_spread.index;
  var _useState = _sliced_to_array((0, import_react196.useState)(show2), 2), showPopup = _useState[0], setShowPopup = _useState[1];
  var _usePropsValue = _sliced_to_array(usePropsValue({
    defaultValue,
    value: value2,
    finalValue: void 0,
    onChange: function(v3) {
      var _options_filter = _sliced_to_array(options2.filter(function(o) {
        return o.value === v3;
      }), 1), option = _options_filter[0];
      onChange === null || onChange === void 0 ? void 0 : onChange(option);
    }
  }), 2), innerValue = _usePropsValue[0], setValue = _usePropsValue[1];
  (0, import_react196.useEffect)(function() {
    setShowPopup(show2);
  }, [
    show2
  ]);
  var getParentOffset = (0, import_react196.useCallback)(function() {
    setTimeout(function() {
      var p10 = parent2.menuRef.current;
      if (p10) {
        var rect = p10.getBoundingClientRect();
        setPosition({
          height: rect.height,
          top: rect.top
        });
      }
    });
  }, [
    parent2.menuRef
  ]);
  (0, import_react196.useEffect)(function() {
    getParentOffset();
  }, [
    showPopup,
    getParentOffset
  ]);
  (0, import_react196.useImperativeHandle)(ref, function() {
    return {
      toggle: function(s8) {
        var from = "REF";
        s8 ? parent2.toggleMenuItem(index2, from) : parent2.hideMenuItem(index2, from);
      }
    };
  });
  var getIconCName = function(optionVal, value3) {
    var _obj;
    return (0, import_classnames41.default)((_obj = {}, _define_property(_obj, activeTitleClass, optionVal === value3), _define_property(_obj, inactiveTitleClass, optionVal !== value3), _obj));
  };
  var setTitle = function(text3) {
    if (!title) {
      parent2.updateTitle(text3, index2);
    }
  };
  var handleClick = function(item) {
    parent2.toggleMenuItem(index2);
    setTitle(item.text);
    setValue(item.value);
  };
  var isShow = function() {
    if (showPopup)
      return {};
    return {
      display: "none"
    };
  };
  var _useState1 = _sliced_to_array((0, import_react196.useState)({
    top: 0,
    height: 0
  }), 2), position2 = _useState1[0], setPosition = _useState1[1];
  var scrollParent = (0, import_react196.useMemo)(function() {
    return getScrollParent(parent2.menuRef, window);
  }, [
    parent2.menuRef
  ]);
  (0, import_react196.useEffect)(function() {
    if (!parent2.lockScroll) {
      scrollParent === null || scrollParent === void 0 ? void 0 : scrollParent.addEventListener("scroll", getParentOffset, false);
      return function() {
        scrollParent === null || scrollParent === void 0 ? void 0 : scrollParent.removeEventListener("scroll", getParentOffset, false);
      };
    }
  }, [
    parent2.lockScroll,
    scrollParent,
    getParentOffset
  ]);
  var getPosition = function() {
    return direction === "down" ? {
      top: "".concat(position2.top + position2.height, "px"),
      bottom: "0",
      height: "initial"
    } : {
      bottom: "".concat(window.innerHeight - position2.top, "px"),
      top: "auto",
      height: "initial"
    };
  };
  var micRef = (0, import_react196.useRef)(null);
  var cssRef = (0, import_react196.useRef)(null);
  var targetSet = [
    micRef.current
  ];
  useClickAway(
    function() {
      parent2.hideMenuItem(index2);
    },
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    targetSet,
    "click",
    false,
    showPopup,
    closeOnClickAway
  );
  return import_react196.default.createElement("div", {
    className: "nut-menu-container",
    ref: micRef
  }, parent2.overlay ? import_react196.default.createElement(Overlay, {
    className: "nut-menu-container-overlay",
    style: getPosition(),
    lockScroll: parent2.lockScroll,
    visible: showPopup,
    closeOnOverlayClick: parent2.closeOnOverlayClick,
    onClick: function() {
      parent2.closeOnOverlayClick && parent2.hideMenuItem(index2);
    }
  }) : null, import_react196.default.createElement("div", {
    className: (0, import_classnames41.default)({
      "nut-menu-container-wrap": direction === "down",
      "nut-menu-container-wrap-up": direction !== "down"
    }, className),
    style: _object_spread({}, style, isShow())
  }, import_react196.default.createElement(CSSTransition_default, {
    nodeRef: cssRef,
    in: showPopup,
    timeout: 100,
    classNames: direction === "down" ? "nut-menu-container-down" : "nut-menu-container-up"
  }, import_react196.default.createElement("div", {
    className: "nut-menu-container-content"
  }, options2 === null || options2 === void 0 ? void 0 : options2.map(function(item) {
    return import_react196.default.createElement("div", {
      className: "nut-menu-container-item ".concat((0, import_classnames41.default)({
        active: item.value === innerValue
      })),
      key: item.text,
      style: {
        flexBasis: "".concat(100 / columns, "%")
      },
      onClick: function() {
        handleClick(item);
      }
    }, item.value === innerValue ? import_react196.default.createElement("i", {
      className: "nut-menu-container-item-icon"
    }, icon || import_react196.default.createElement(d2, {
      color: activeColor,
      className: getIconCName(item.value, value2)
    })) : null, import_react196.default.createElement("div", {
      className: "nut-menu-container-item-title ".concat(getIconCName(item.value, value2)),
      style: {
        color: "".concat(item.value === innerValue ? activeColor : "")
      }
    }, item.text));
  }), children2))));
});
MenuItem.displayName = "NutMenuItem";

// node_modules/@nutui/nutui-react/dist/es/packages/menu/menu.js
var defaultProps46 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  activeColor: "",
  closeOnOverlayClick: true,
  scrollFixed: false,
  lockScroll: true,
  overlay: true,
  icon: null,
  onOpen: function(index2, from) {
  },
  onClose: function(index2, from) {
  }
});
var Menu = function(props) {
  var _ref = _object_spread({}, defaultProps46, props), className = _ref.className, icon = _ref.icon, scrollFixed = _ref.scrollFixed, lockScroll = _ref.lockScroll, overlay = _ref.overlay, closeOnOverlayClick = _ref.closeOnOverlayClick, children2 = _ref.children, activeColor = _ref.activeColor, onClose = _ref.onClose, onOpen = _ref.onOpen, rest = _object_without_properties(_ref, [
    "className",
    "icon",
    "scrollFixed",
    "lockScroll",
    "overlay",
    "closeOnOverlayClick",
    "children",
    "activeColor",
    "onClose",
    "onOpen"
  ]);
  var menuRef = (0, import_react197.useRef)(null);
  var _useState = _sliced_to_array((0, import_react197.useState)([]), 2), showMenuItem = _useState[0], setShowMenuItem = _useState[1];
  var _useState1 = _sliced_to_array((0, import_react197.useState)([]), 2), menuItemTitle = _useState1[0], setMenuItemTitle = _useState1[1];
  var _useState2 = _sliced_to_array((0, import_react197.useState)(false), 2), isScrollFixed = _useState2[0], setIsScrollFixed = _useState2[1];
  var cls = (0, import_classnames42.default)("nut-menu", className, {
    "scroll-fixed": isScrollFixed
  });
  var getScrollTop = function(el) {
    return Math.max(0, el === window ? window.scrollY : el.scrollTop);
  };
  var onScroll2 = (0, import_react197.useCallback)(function() {
    var scrollTop = getScrollTop(window);
    var isFixed = scrollTop > (typeof scrollFixed === "boolean" ? 30 : Number(scrollFixed));
    setIsScrollFixed(isFixed);
  }, [
    scrollFixed
  ]);
  (0, import_react197.useEffect)(function() {
    if (scrollFixed) {
      window.addEventListener("scroll", onScroll2);
    }
    return function() {
      return window.removeEventListener("scroll", onScroll2);
    };
  }, [
    scrollFixed,
    onScroll2
  ]);
  var toggleMenuItem = function(index2) {
    var from = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "NORMAL";
    showMenuItem[index2] = !showMenuItem[index2];
    if (showMenuItem[index2]) {
      onOpen && onOpen(index2, from);
    } else {
      onClose && onClose(index2, from);
    }
    var temp = showMenuItem.map(function(i6, idx) {
      return idx === index2 ? i6 : false;
    });
    setShowMenuItem(_to_consumable_array(temp));
  };
  var hideMenuItem = function(index2) {
    var from = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "NORMAL";
    showMenuItem[index2] = false;
    setShowMenuItem(_to_consumable_array(showMenuItem));
    onClose && onClose(index2, from);
  };
  var updateTitle = function(text3, index2) {
    menuItemTitle[index2] = text3;
    setMenuItemTitle(_to_consumable_array(menuItemTitle));
  };
  var cloneChildren = function() {
    return import_react197.default.Children.map(children2, function(child, index2) {
      return import_react197.default.cloneElement(child, _object_spread_props(_object_spread({}, child.props), {
        show: showMenuItem[index2],
        index: index2,
        activeColor,
        parent: {
          closeOnOverlayClick,
          overlay,
          lockScroll,
          toggleMenuItem,
          updateTitle,
          hideMenuItem,
          menuRef
        }
      }));
    });
  };
  var menuTitle = function() {
    return import_react197.default.Children.map(children2, function(child, index2) {
      if (import_react197.default.isValidElement(child)) {
        var _child_props = child.props, title = _child_props.title, titleIcon = _child_props.titleIcon, options2 = _child_props.options, value2 = _child_props.value, defaultValue = _child_props.defaultValue, disabled = _child_props.disabled, direction = _child_props.direction;
        var selected = options2 === null || options2 === void 0 ? void 0 : options2.filter(function(option) {
          return option.value === (value2 !== void 0 ? value2 : defaultValue);
        });
        var finallyTitle = function() {
          if (title)
            return title;
          if (menuItemTitle && menuItemTitle[index2])
            return menuItemTitle[index2];
          if (selected && selected.length && selected[0].text)
            return selected[0].text;
          return "";
        };
        var finallyIcon = function() {
          if (titleIcon)
            return titleIcon;
          if (icon)
            return icon;
          return direction === "up" ? import_react197.default.createElement(p, {
            className: "nut-menu-title-icon",
            width: "12px",
            height: "12px"
          }) : import_react197.default.createElement(l, {
            className: "nut-menu-title-icon",
            width: "12px",
            height: "12px"
          });
        };
        return import_react197.default.createElement("div", {
          className: (0, import_classnames42.default)("nut-menu-title", "nut-menu-title-".concat(index2), {
            active: showMenuItem[index2],
            disabled
          }),
          style: {
            color: showMenuItem[index2] ? activeColor : ""
          },
          key: index2,
          onClick: function(e2) {
            e2.stopPropagation();
            if ((!options2 || !options2.length) && !child.props.children)
              return;
            !disabled && toggleMenuItem(index2);
          }
        }, import_react197.default.createElement("div", {
          className: "nut-menu-title-text"
        }, finallyTitle()), finallyIcon());
      }
      return null;
    });
  };
  return import_react197.default.createElement("div", _object_spread_props(_object_spread({}, rest), {
    className: cls,
    ref: menuRef
  }), import_react197.default.createElement("div", {
    className: (0, import_classnames42.default)("nut-menu-bar", {
      opened: showMenuItem.includes(true)
    })
  }, menuTitle()), cloneChildren());
};
Menu.displayName = "NutMenu";
Menu.Item = MenuItem;

// node_modules/@nutui/nutui-react/dist/es/packages/menu/index.js
var menu_default = Menu;

// node_modules/@nutui/nutui-react/dist/es/packages/menuitem/index.js
var menuitem_default = MenuItem;

// node_modules/@nutui/nutui-react/dist/es/packages/numberkeyboard/numberkeyboard.js
var import_react198 = __toESM(require_react());
var import_classnames43 = __toESM(require_classnames());
var defaultProps47 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  visible: false,
  rightActions: "",
  type: "default",
  custom: [],
  random: false,
  onClose: function() {
  }
});
var NumberKeyboard = function(props) {
  var locale = useConfig().locale;
  var _ref = _object_spread({}, defaultProps47, props), title = _ref.title, rightActions = _ref.rightActions, confirmText = _ref.confirmText, visible = _ref.visible, type4 = _ref.type, custom = _ref.custom, random2 = _ref.random, style = _ref.style, className = _ref.className, onChange = _ref.onChange, onDelete = _ref.onDelete, onClose = _ref.onClose, onConfirm = _ref.onConfirm, rest = _object_without_properties(_ref, [
    "title",
    "rightActions",
    "confirmText",
    "visible",
    "type",
    "custom",
    "random",
    "style",
    "className",
    "onChange",
    "onDelete",
    "onClose",
    "onConfirm"
  ]);
  var classPrefix33 = "nut-numberkeyboard";
  var getBasicKeys = function() {
    var keys = new Array(9).fill(0).map(function(_, index2) {
      return {
        id: String(index2 + 1),
        type: "num"
      };
    });
    return random2 ? keys.sort(function() {
      return Math.random() > 0.5 ? 1 : -1;
    }) : keys;
  };
  var getCustomKeys = function() {
    var customKeys = [
      {
        id: "close",
        type: "close"
      },
      {
        id: "0",
        type: "num"
      },
      {
        id: "delete",
        type: "delete"
      }
    ];
    if (!custom)
      return customKeys;
    if (custom.length > 0) {
      customKeys[0] = {
        id: custom[0],
        type: "custom"
      };
    }
    if (custom.length > 1) {
      customKeys[2] = {
        id: custom[1],
        type: "custom"
      };
    }
    return customKeys;
  };
  var keysList = (0, import_react198.useMemo)(function() {
    return _to_consumable_array(getBasicKeys()).concat(_to_consumable_array(getCustomKeys()));
  }, [
    type4,
    random2,
    custom
  ]);
  var DeleteIcon = function() {
    return import_react198.default.createElement("svg", {
      viewBox: "0 0 1024 1024",
      width: "28",
      height: "28"
    }, import_react198.default.createElement("path", {
      d: "M875.594 186.122H390.803a51.162 51.162 0 0 0-36.18 14.986L79.91 475.821a51.166 51.166 0 0 0 0 72.358l274.714 274.712a51.164 51.164 0 0 0 36.179 14.986h484.791c46.033 0 83.484-37.45 83.484-83.483V269.606c.001-46.033-37.45-83.484-83.483-83.484zm32.32 568.274c0 17.85-14.473 32.318-32.32 32.318H390.803L116.089 512l274.714-274.714h484.791c17.849 0 32.32 14.47 32.32 32.32v484.789z",
      fill: "currentColor"
    }), import_react198.default.createElement("path", {
      d: "M753.945 360.214l-121.43 121.429-121.43-121.429s-16.062-8.224-30.356 6.072c-14.295 14.295-6.073 30.357-6.073 30.357l121.43 121.428L486.8 627.357s-8.222 16.062 6.072 30.357c14.297 14.296 30.358 6.072 30.358 6.072l109.286-109.285 109.286 109.285s16.062 8.224 30.357-6.072c14.295-14.295 6.07-30.357 6.07-30.357L668.944 518.072l121.431-121.43s8.22-16.061-6.074-30.356c-14.294-14.296-30.356-6.072-30.356-6.072z",
      fill: "currentColor"
    }));
  };
  var NumberKeyboardKey = function(props2) {
    var item = props2.item;
    var _useState = _sliced_to_array((0, import_react198.useState)(false), 2), active2 = _useState[0], setActive = _useState[1];
    var onTouchStart = function() {
      setActive(true);
    };
    var onTouchEnd = function(item2) {
      setActive(false);
      switch (item2.type) {
        case "num":
        case "custom":
          onChange === null || onChange === void 0 ? void 0 : onChange(item2.id);
          break;
        case "close":
          onClose === null || onClose === void 0 ? void 0 : onClose();
          break;
        case "delete":
          onDelete === null || onDelete === void 0 ? void 0 : onDelete();
          break;
        case "confirm":
          onConfirm === null || onConfirm === void 0 ? void 0 : onConfirm();
          break;
        default:
          break;
      }
    };
    var renderContent = function(item2) {
      switch (item2.type) {
        case "num":
        case "custom":
          return import_react198.default.createElement("div", null, item2.id);
        case "delete":
          return import_react198.default.createElement(DeleteIcon, null);
        case "close":
          return import_react198.default.createElement(l, {
            width: 18,
            height: 18
          });
        case "confirm":
          return import_react198.default.createElement(import_react198.default.Fragment, null, confirmText || locale.done);
        default:
          return null;
      }
    };
    return import_react198.default.createElement("div", {
      key: item.id,
      className: "".concat(classPrefix33, "-body-wrapper")
    }, import_react198.default.createElement("div", {
      className: (0, import_classnames43.default)({
        key: true,
        active: active2,
        close: item.type === "close",
        delete: item.type === "delete",
        confirm: item.type === "confirm"
      }),
      onTouchStart: function() {
        return onTouchStart();
      },
      onTouchEnd: function() {
        return onTouchEnd(item);
      },
      onTouchCancel: function() {
        return onTouchEnd(item);
      }
    }, renderContent(item)));
  };
  return import_react198.default.createElement(popup_default, _object_spread_props(_object_spread({}, rest), {
    visible,
    position: "bottom",
    onOverlayClick: onClose,
    onCloseIconClick: onClose,
    zIndex: 9999,
    overlayStyle: {
      backgroundColor: "rgba(0, 0, 0, 0)"
    }
  }), import_react198.default.createElement("div", {
    className: (0, import_classnames43.default)(classPrefix33, className),
    style
  }, title && import_react198.default.createElement("div", {
    className: "".concat(classPrefix33, "-header")
  }, import_react198.default.createElement("div", {
    className: "".concat(classPrefix33, "-header-title")
  }, title), type4 === "default" && import_react198.default.createElement("span", {
    className: "".concat(classPrefix33, "-header-close"),
    onClick: onConfirm
  }, rightActions || locale.done)), import_react198.default.createElement("div", {
    className: "".concat(classPrefix33, "-body")
  }, import_react198.default.createElement("div", {
    className: "".concat(classPrefix33, "-body-keys")
  }, keysList === null || keysList === void 0 ? void 0 : keysList.map(function(item) {
    return import_react198.default.createElement(NumberKeyboardKey, {
      key: item.id,
      item
    });
  })), type4 === "rightColumn" && import_react198.default.createElement("div", {
    className: "".concat(classPrefix33, "-sidebar")
  }, import_react198.default.createElement(NumberKeyboardKey, {
    key: "delete",
    item: {
      id: "delete",
      type: "delete"
    }
  }), import_react198.default.createElement(NumberKeyboardKey, {
    key: "confirm",
    item: {
      id: "confirm",
      type: "confirm"
    }
  })))));
};
NumberKeyboard.displayName = "NutNumberKeyboard";

// node_modules/@nutui/nutui-react/dist/es/packages/numberkeyboard/index.js
var numberkeyboard_default = NumberKeyboard;

// node_modules/@nutui/nutui-react/dist/es/packages/radio/index.js
var import_react202 = __toESM(require_react());

// node_modules/@nutui/nutui-react/dist/es/packages/radio/radio.js
var import_react200 = __toESM(require_react());
var import_classnames44 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/radiogroup/context.js
var import_react199 = __toESM(require_react());
var context_default5 = import_react199.default.createContext(null);

// node_modules/@nutui/nutui-react/dist/es/packages/radio/radio.js
var defaultProps48 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  disabled: false,
  shape: "round",
  value: "",
  labelPosition: "right",
  icon: null,
  activeIcon: null,
  onChange: function(checked) {
  }
});
var Radio = function(props) {
  var classPrefix33 = "nut-radio";
  var _ref = _object_spread({}, defaultProps48, props), children2 = _ref.children, className = _ref.className, style = _ref.style, checked = _ref.checked, defaultChecked = _ref.defaultChecked, shape = _ref.shape, value2 = _ref.value, icon = _ref.icon, activeIcon = _ref.activeIcon, onChange = _ref.onChange, others = _object_without_properties(_ref, [
    "children",
    "className",
    "style",
    "checked",
    "defaultChecked",
    "shape",
    "value",
    "icon",
    "activeIcon",
    "onChange"
  ]);
  var labelPosition = others.labelPosition, disabled = others.disabled, rest = _object_without_properties(others, [
    "labelPosition",
    "disabled"
  ]);
  var _usePropsValue = _sliced_to_array(usePropsValue({
    value: checked,
    defaultValue: defaultChecked,
    finalValue: false,
    onChange
  }), 2), checkedStatement = _usePropsValue[0], setCheckedStatement = _usePropsValue[1];
  var context2 = (0, import_react200.useContext)(context_default5);
  if (context2) {
    checkedStatement = context2.value === value2;
    if (context2.labelPosition !== void 0) {
      labelPosition = context2.labelPosition;
    }
    if (context2.disabled !== void 0) {
      disabled = context2.disabled;
    }
    setCheckedStatement = function(value3) {
      if (value3) {
        context2.check(props.value === void 0 ? "" : props.value);
      } else {
        context2.uncheck();
      }
    };
  }
  var color = function() {
    var _obj;
    return _obj = {}, _define_property(_obj, "".concat(classPrefix33, "-icon-disabled"), disabled), _define_property(_obj, "".concat(classPrefix33, "-icon"), !checkedStatement), _define_property(_obj, "".concat(classPrefix33, "-icon-checked"), checkedStatement), _obj;
  };
  var renderIcon = function() {
    var icon2 = props.icon, activeIcon2 = props.activeIcon;
    if (disabled && !checkedStatement) {
      return import_react200.default.createElement(n3, {
        className: (0, import_classnames44.default)(color())
      });
    }
    if (checkedStatement) {
      return import_react200.default.isValidElement(activeIcon2) ? import_react200.default.cloneElement(activeIcon2, _object_spread_props(_object_spread({}, activeIcon2.props), {
        className: (0, import_classnames44.default)(activeIcon2.props.className, color())
      })) : import_react200.default.createElement(c, {
        className: (0, import_classnames44.default)(color())
      });
    }
    return import_react200.default.isValidElement(icon2) ? import_react200.default.cloneElement(icon2, _object_spread_props(_object_spread({}, icon2.props), {
      className: (0, import_classnames44.default)(icon2.props.className, color())
    })) : import_react200.default.createElement(n4, {
      className: (0, import_classnames44.default)(color())
    });
  };
  var renderLabel = function() {
    var labelcls = (0, import_classnames44.default)("".concat(classPrefix33, "-label"), _define_property({}, "".concat(classPrefix33, "-label-disabled"), disabled));
    return import_react200.default.createElement(import_react200.default.Fragment, null, renderIcon(), import_react200.default.createElement("div", {
      className: labelcls
    }, children2));
  };
  var renderButton = function() {
    var _obj;
    var buttoncls = (0, import_classnames44.default)("".concat(classPrefix33, "-button"), (_obj = {}, _define_property(_obj, "".concat(classPrefix33, "-button-active"), checkedStatement), _define_property(_obj, "".concat(classPrefix33, "-button-disabled"), disabled), _obj));
    return import_react200.default.createElement("div", {
      className: buttoncls
    }, children2);
  };
  var renderByShape = function(shape2) {
    return shape2 === "button" ? renderButton() : renderLabel();
  };
  var renderRadioItem = function() {
    return renderByShape(context2 && context2.shape ? context2.shape : shape);
  };
  var handleClick = function(e2) {
    if (disabled || checkedStatement)
      return;
    setCheckedStatement(!checkedStatement);
  };
  var cls = (0, import_classnames44.default)(classPrefix33, _define_property({}, "".concat(classPrefix33, "-reverse"), labelPosition === "left"), className);
  return import_react200.default.createElement("div", _object_spread({
    className: cls,
    style,
    onClick: handleClick
  }, rest), renderRadioItem());
};
Radio.displayName = "NutRadio";

// node_modules/@nutui/nutui-react/dist/es/packages/radiogroup/radiogroup.js
var import_react201 = __toESM(require_react());
var import_classnames45 = __toESM(require_classnames());
var defaultProps49 = {
  labelPosition: "right",
  onChange: function(value2) {
  },
  direction: "vertical",
  options: []
};
var classPrefix16 = "nut-radiogroup";
var RadioGroup = import_react201.default.forwardRef(function(props, ref) {
  var _ref = _object_spread({}, defaultProps49, props), children2 = _ref.children, className = _ref.className, value2 = _ref.value, defaultValue = _ref.defaultValue, onChange = _ref.onChange, shape = _ref.shape, labelPosition = _ref.labelPosition, direction = _ref.direction, options2 = _ref.options, disabled = _ref.disabled, rest = _object_without_properties(_ref, [
    "children",
    "className",
    "value",
    "defaultValue",
    "onChange",
    "shape",
    "labelPosition",
    "direction",
    "options",
    "disabled"
  ]);
  var cls = (0, import_classnames45.default)(classPrefix16, _define_property({}, "".concat(classPrefix16, "-").concat(direction), direction), className);
  var _usePropsValue = _sliced_to_array(usePropsValue({
    defaultValue: props.defaultValue,
    value: props.value,
    finalValue: "",
    onChange
  }), 2), val2State = _usePropsValue[0], setVal2State = _usePropsValue[1];
  var renderOptionsChildren = (0, import_react201.useCallback)(function() {
    return options2 === null || options2 === void 0 ? void 0 : options2.map(function(_param) {
      var label = _param.label, value3 = _param.value, disabled2 = _param.disabled, onChange2 = _param.onChange, rest2 = _object_without_properties(_param, [
        "label",
        "value",
        "disabled",
        "onChange"
      ]);
      return import_react201.default.createElement(radio_default, _object_spread_props(_object_spread({}, rest2), {
        key: value3 === null || value3 === void 0 ? void 0 : value3.toString(),
        children: label,
        value: value3,
        disabled: disabled2,
        onChange: onChange2,
        labelPosition,
        checked: value3 === val2State
      }));
    });
  }, [
    options2,
    labelPosition,
    val2State
  ]);
  return import_react201.default.createElement(context_default5.Provider, {
    value: {
      labelPosition: labelPosition || "right",
      disabled,
      shape,
      value: val2State,
      check: function(value3) {
        setVal2State(value3);
      },
      uncheck: function() {
        setVal2State("");
      }
    }
  }, import_react201.default.createElement("div", _object_spread({
    className: cls
  }, rest), (options2 === null || options2 === void 0 ? void 0 : options2.length) ? renderOptionsChildren() : children2));
});
RadioGroup.displayName = "NutRadioGroup";

// node_modules/@nutui/nutui-react/dist/es/packages/radio/index.js
var InnerRadio = Radio;
InnerRadio.Group = RadioGroup;
var radio_default = InnerRadio;

// node_modules/@nutui/nutui-react/dist/es/packages/radiogroup/index.js
var radiogroup_default = RadioGroup;

// node_modules/@nutui/nutui-react/dist/es/packages/range/range.js
var import_react203 = __toESM(require_react());
var import_classnames46 = __toESM(require_classnames());
var defaultProps50 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  range: false,
  min: 0,
  max: 100,
  step: 1,
  vertical: false,
  marks: {}
});
var classPrefix17 = "nut-range";
var verticalClassPrefix = "".concat(classPrefix17, "-vertical");
var isSameValue = function(newValue, oldValue) {
  return JSON.stringify(newValue) === JSON.stringify(oldValue);
};
var handleOverlap = function(value2) {
  if (value2[0] > value2[1]) {
    return value2.slice(0).reverse();
  }
  return value2;
};
var Range = function(props) {
  var rtl = useRtl();
  var _$_object_spread = _object_spread({}, defaultProps50, props), className = _$_object_spread.className, style = _$_object_spread.style, range3 = _$_object_spread.range, disabled = _$_object_spread.disabled, button = _$_object_spread.button, vertical = _$_object_spread.vertical, marks = _$_object_spread.marks, minDescription = _$_object_spread.minDescription, maxDescription = _$_object_spread.maxDescription, currentDescription = _$_object_spread.currentDescription, min = _$_object_spread.min, max = _$_object_spread.max, step = _$_object_spread.step, value2 = _$_object_spread.value, defaultValue = _$_object_spread.defaultValue, onChange = _$_object_spread.onChange, onStart = _$_object_spread.onStart, onEnd = _$_object_spread.onEnd;
  var rtlClassPrefix = (0, import_react203.useMemo)(function() {
    return "rtl-".concat(vertical ? verticalClassPrefix : classPrefix17);
  }, [
    vertical
  ]);
  var _useState = _sliced_to_array((0, import_react203.useState)(0), 2), buttonIndex = _useState[0], setButtonIndex = _useState[1];
  var _useState1 = _sliced_to_array((0, import_react203.useState)("start"), 2), dragStatus = _useState1[0], setDragStatus = _useState1[1];
  var touch = useTouch();
  var root = (0, import_react203.useRef)(null);
  var _useState2 = _sliced_to_array((0, import_react203.useState)([]), 2), marksList = _useState2[0], setMarksList = _useState2[1];
  var _useState3 = _sliced_to_array((0, import_react203.useState)(0), 2), startValue = _useState3[0], setStartValue = _useState3[1];
  var scope = (0, import_react203.useMemo)(function() {
    if (max < min || max === min) {
      console.log("max 的值需要大于 min的值");
    }
    return max - min;
  }, [
    max,
    min
  ]);
  var handleChange = function(value3) {
    onChange && onChange(value3);
  };
  var _usePropsValue = _sliced_to_array(usePropsValue({
    value: value2,
    defaultValue,
    finalValue: 0,
    onChange: handleChange
  }), 2), current = _usePropsValue[0], setCurrent = _usePropsValue[1];
  var _useState4 = _sliced_to_array((0, import_react203.useState)(function() {
    return value2 || defaultValue || 0;
  }), 2), exactValue = _useState4[0], setExactValue = _useState4[1];
  var marksRef = (0, import_react203.useRef)({});
  (0, import_react203.useEffect)(function() {
    if (marks) {
      if (Array.isArray(marks)) {
        var list = marks.sort(function(a, b) {
          return a.value - b.value;
        }).filter(function(point) {
          return point.value >= min && point.value <= max;
        });
        setMarksList(list.map(function(mark) {
          return mark.value;
        }));
        list.forEach(function(mark) {
          marksRef.current[mark.value] = mark.label !== void 0 ? mark.label : mark.value;
        });
      } else {
        var marksKeys = Object.keys(marks);
        var list1 = marksKeys.map(parseFloat).sort(function(a, b) {
          return a - b;
        }).filter(function(point) {
          return point >= min && point <= max;
        });
        setMarksList(list1);
      }
    }
  }, [
    marks,
    max,
    min
  ]);
  var _obj;
  var classes = (0, import_classnames46.default)(classPrefix17, (_obj = {}, _define_property(_obj, "".concat(classPrefix17, "-disabled"), disabled), _define_property(_obj, verticalClassPrefix, vertical), _obj));
  var containerClasses = (0, import_classnames46.default)("".concat(classPrefix17, "-container"), _define_property({}, "".concat(verticalClassPrefix, "-container"), vertical), className);
  var markClassName = (0, import_react203.useCallback)(function(mark) {
    var classPrefix33 = "nut-range-mark";
    var verticalClassPrefix2 = "nut-range-vertical-mark";
    var lowerBound = min;
    var upperBound = max;
    if (range3 && Array.isArray(current)) {
      lowerBound = current[0];
      upperBound = current[1];
    } else {
      upperBound = current;
    }
    var isActive = mark <= upperBound && mark >= lowerBound;
    var _$classNames = [
      "".concat(classPrefix33, "-text-wrapper"),
      "".concat(isActive ? "".concat(classPrefix33, "-text-wrapper-active") : "")
    ];
    if (vertical) {
      _$classNames.push("".concat(verticalClassPrefix2, "-text-wrapper"));
      isActive && _$classNames.push("".concat(verticalClassPrefix2, "-text-active-wrapper"));
    }
    if (rtl) {
      _$classNames.push("".concat(rtlClassPrefix, "-mark-text-wrapper"));
    }
    return _$classNames.join(" ");
  }, [
    min,
    max,
    range3,
    current,
    vertical,
    rtl,
    rtlClassPrefix
  ]);
  var isRange = (0, import_react203.useCallback)(function(val2) {
    return !!range3 && Array.isArray(val2);
  }, [
    range3
  ]);
  var calcMainAxis = (0, import_react203.useCallback)(function() {
    var modelVal = current;
    return isRange(modelVal) ? "".concat((modelVal[1] - modelVal[0]) * 100 / scope, "%") : "".concat((modelVal - min) * 100 / scope, "%");
  }, [
    current,
    isRange,
    min,
    scope
  ]);
  var calcOffset = (0, import_react203.useCallback)(function() {
    var modelVal = current;
    return isRange(modelVal) ? "".concat((modelVal[0] - min) * 100 / scope, "%") : "0%";
  }, [
    current,
    isRange,
    min,
    scope
  ]);
  var barStyle = (0, import_react203.useCallback)(function() {
    if (vertical) {
      return {
        height: calcMainAxis(),
        top: calcOffset(),
        transition: dragStatus ? "none" : void 0
      };
    }
    var dir = rtl ? "right" : "left";
    var _obj2;
    return _obj2 = {
      width: calcMainAxis()
    }, _define_property(_obj2, dir, calcOffset()), _define_property(_obj2, "transition", dragStatus ? "none" : void 0), _obj2;
  }, [
    calcMainAxis,
    calcOffset,
    dragStatus,
    rtl,
    vertical
  ]);
  var marksStyle = (0, import_react203.useCallback)(function(mark) {
    var dir = rtl ? "right" : "left";
    var style2 = _define_property({}, dir, "".concat((mark - min) / scope * 100, "%"));
    if (vertical) {
      style2 = {
        top: "".concat((mark - min) / scope * 100, "%")
      };
    }
    return style2;
  }, [
    min,
    rtl,
    scope,
    vertical
  ]);
  var tickClass = (0, import_react203.useCallback)(function(mark) {
    if (range3 && Array.isArray(current)) {
      return mark <= current[1] && mark >= current[0];
    }
    return mark <= current;
  }, [
    current,
    range3
  ]);
  var format2 = (0, import_react203.useCallback)(function(value3) {
    value3 = Math.max(+min, Math.min(value3, +max));
    return Math.round(value3 / +step) * +step;
  }, [
    max,
    min,
    step
  ]);
  var updateValue = (0, import_react203.useCallback)(function(value3, end) {
    if (isRange(value3)) {
      value3 = handleOverlap(value3).map(format2);
    } else {
      value3 = format2(value3);
    }
    if (!isSameValue(value3, current)) {
      setCurrent(value3);
    }
    end && onEnd && onEnd(value3);
  }, [
    current,
    format2,
    isRange,
    onEnd,
    setCurrent
  ]);
  var handleClick = (0, import_react203.useCallback)(function(event) {
    if (disabled || !root.current)
      return;
    setDragStatus("");
    var rect = getRect(root.current);
    var delta = event.clientX - rect.left;
    var total = rect.width;
    if (vertical) {
      delta = event.clientY - rect.top;
      total = rect.height;
    }
    var value3 = min + delta / total * scope;
    setExactValue(current);
    if (isRange(current)) {
      var _current = _sliced_to_array(current, 2), left = _current[0], right = _current[1];
      var middle = (left + right) / 2;
      if (value3 <= middle) {
        updateValue([
          value3,
          right
        ], true);
      } else {
        updateValue([
          left,
          value3
        ], true);
      }
    } else {
      updateValue(value3, true);
    }
  }, [
    current,
    disabled,
    isRange,
    min,
    scope,
    updateValue,
    vertical
  ]);
  var onTouchStart = (0, import_react203.useCallback)(function(event) {
    if (disabled)
      return;
    touch.start(event);
    setExactValue(current);
    if (isRange(current)) {
      setStartValue(current.map(format2));
    } else {
      setStartValue(format2(current));
    }
    setDragStatus("start");
  }, [
    current,
    disabled,
    format2,
    isRange,
    touch
  ]);
  var onTouchMove = (0, import_react203.useCallback)(function(event) {
    event.stopPropagation();
    if (disabled || !root.current) {
      return;
    }
    if (dragStatus === "start") {
      onStart && onStart();
    }
    touch.move(event);
    setDragStatus("draging");
    var rect = getRect(root.current);
    var delta = touch.deltaX.current;
    var total = rect.width;
    var diff = delta / total * scope;
    diff = rtl ? -diff : diff;
    if (vertical) {
      delta = touch.deltaY.current;
      total = rect.height;
      diff = delta / total * scope;
    }
    var newValue;
    if (isRange(startValue)) {
      newValue = exactValue.slice();
      newValue[buttonIndex] = startValue[buttonIndex] + diff;
    } else {
      newValue = startValue + diff;
    }
    setExactValue(newValue);
    updateValue(newValue);
  }, [
    buttonIndex,
    disabled,
    dragStatus,
    exactValue,
    isRange,
    onStart,
    rtl,
    scope,
    startValue,
    touch,
    updateValue,
    vertical
  ]);
  var onTouchEnd = (0, import_react203.useCallback)(function() {
    if (disabled) {
      return;
    }
    if (dragStatus === "draging") {
      updateValue(current, true);
    }
    setDragStatus("");
  }, [
    current,
    disabled,
    dragStatus,
    updateValue
  ]);
  var curValue = (0, import_react203.useCallback)(function(idx) {
    var modelVal = current;
    var value3 = typeof idx === "number" ? modelVal[idx] : modelVal;
    return value3;
  }, [
    current
  ]);
  var renderButton = (0, import_react203.useCallback)(function(index2) {
    var buttonNumberTransform = vertical ? "translate(100%, -50%)" : "translate(-50%, -100%)";
    var _obj2, _obj1;
    return import_react203.default.createElement(import_react203.default.Fragment, null, button || import_react203.default.createElement("div", {
      className: (0, import_classnames46.default)("".concat(classPrefix17, "-button"), (_obj2 = {}, _define_property(_obj2, "".concat(verticalClassPrefix, "-button"), vertical), _define_property(_obj2, "".concat(rtlClassPrefix, "-button"), rtl), _obj2)),
      style: {
        transform: "translate(-50%, -50%)"
      }
    }, currentDescription !== null && import_react203.default.createElement("div", {
      className: (0, import_classnames46.default)("".concat(classPrefix17, "-button-number"), (_obj1 = {}, _define_property(_obj1, "".concat(verticalClassPrefix, "-button-number"), vertical), _define_property(_obj1, "".concat(rtlClassPrefix, "-button-number"), rtl), _obj1)),
      style: {
        transform: buttonNumberTransform
      }
    }, currentDescription ? currentDescription(curValue(index2)) : curValue(index2))));
  }, [
    button,
    curValue,
    currentDescription,
    rtl,
    rtlClassPrefix,
    vertical
  ]);
  var renderMarks = (0, import_react203.useCallback)(function() {
    if (marksList.length <= 0)
      return null;
    var _obj2;
    var markcls = (0, import_classnames46.default)("".concat(classPrefix17, "-mark"), (_obj2 = {}, _define_property(_obj2, "".concat(verticalClassPrefix, "-mark"), vertical), _define_property(_obj2, "".concat(rtlClassPrefix, "-mark"), rtl), _obj2));
    var textcls = (0, import_classnames46.default)("".concat(classPrefix17, "-mark-text"), _define_property({}, "".concat(verticalClassPrefix, "-mark-text"), vertical));
    return import_react203.default.createElement("div", {
      className: markcls
    }, marksList.map(function(mark) {
      var _obj3;
      return import_react203.default.createElement("span", {
        key: mark,
        className: markClassName(mark),
        style: marksStyle(mark)
      }, import_react203.default.createElement("span", {
        className: textcls
      }, Array.isArray(marks) ? marksRef.current[mark] : marks[mark]), import_react203.default.createElement("span", {
        className: (0, import_classnames46.default)("".concat(vertical ? verticalClassPrefix : classPrefix17, "-tick"), (_obj3 = {}, _define_property(_obj3, "".concat(vertical ? verticalClassPrefix : classPrefix17, "-tick-active"), tickClass(mark)), _define_property(_obj3, "".concat(rtlClassPrefix, "-tick"), rtl), _obj3))
      }));
    }));
  }, [
    markClassName,
    marks,
    marksList,
    marksStyle,
    rtl,
    rtlClassPrefix,
    tickClass,
    vertical
  ]);
  var getWrapperTransform = (0, import_react203.useCallback)(function() {
    var wrapperTransform = "translate(-50%, -50%)";
    return wrapperTransform;
  }, []);
  var renderRangeButton = (0, import_react203.useCallback)(function() {
    return [
      0,
      1
    ].map(function(item, index2) {
      var isLeft = index2 === 0;
      var suffix = isLeft ? "left" : "right";
      var transform2 = "translate(-50%, -50%)";
      var _obj2;
      var cls = (0, import_classnames46.default)("".concat(classPrefix17, "-button-wrapper-").concat(suffix), (_obj2 = {}, _define_property(_obj2, "".concat(verticalClassPrefix, "-button-wrapper-").concat(suffix), vertical), _define_property(_obj2, "".concat(rtlClassPrefix, "-button-wrapper-").concat(suffix), rtl), _obj2));
      return import_react203.default.createElement("div", {
        key: index2,
        className: cls,
        style: {
          transform: transform2
        },
        onTouchStart: function(e2) {
          setButtonIndex(index2);
          onTouchStart(e2);
        },
        onTouchMove,
        onTouchEnd,
        onTouchCancel: onTouchEnd,
        onClick: function(e2) {
          return e2.stopPropagation();
        }
      }, renderButton(index2));
    });
  }, [
    onTouchEnd,
    onTouchMove,
    onTouchStart,
    renderButton,
    vertical,
    rtl,
    rtlClassPrefix
  ]);
  var renderSingleButton = (0, import_react203.useCallback)(function() {
    return import_react203.default.createElement("div", {
      className: (0, import_classnames46.default)("".concat(classPrefix17, "-button-wrapper"), _define_property({}, "".concat(verticalClassPrefix, "-button-wrapper"), vertical)),
      style: {
        // @ts-ignore
        transform: getWrapperTransform()
      },
      onTouchStart,
      onTouchMove,
      onTouchEnd,
      onTouchCancel: onTouchEnd,
      onClick: function(e2) {
        return e2.stopPropagation();
      }
    }, renderButton());
  }, [
    getWrapperTransform,
    onTouchEnd,
    onTouchMove,
    onTouchStart,
    renderButton,
    vertical
  ]);
  var renderButtonWrapper = (0, import_react203.useCallback)(function() {
    if (range3) {
      return renderRangeButton();
    }
    return renderSingleButton();
  }, [
    renderRangeButton,
    renderSingleButton,
    range3
  ]);
  return import_react203.default.createElement("div", {
    className: containerClasses,
    style
  }, minDescription !== null && import_react203.default.createElement("div", {
    className: "".concat(classPrefix17, "-min")
  }, minDescription || min), import_react203.default.createElement("div", {
    ref: root,
    className: classes,
    onClick: handleClick
  }, renderMarks(), import_react203.default.createElement("div", {
    className: "".concat(classPrefix17, "-bar ").concat(classPrefix17, "-bar-animate"),
    style: barStyle()
  }, renderButtonWrapper())), maxDescription !== null && import_react203.default.createElement("div", {
    className: "".concat(classPrefix17, "-max")
  }, maxDescription || max));
};
Range.displayName = "NutRange";

// node_modules/@nutui/nutui-react/dist/es/packages/range/index.js
var range_default = Range;

// node_modules/@nutui/nutui-react/dist/es/packages/rate/rate.js
var import_react204 = __toESM(require_react());
var import_classnames47 = __toESM(require_classnames());
var defaultProps51 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  size: "normal",
  showScore: false,
  count: 5,
  min: 0,
  checkedIcon: null,
  uncheckedIcon: null,
  disabled: false,
  readOnly: false,
  allowHalf: false,
  touchable: false
});
var Rate = function(props) {
  var _$_object_spread = _object_spread({}, defaultProps51, props), className = _$_object_spread.className, style = _$_object_spread.style, size = _$_object_spread.size, showScore = _$_object_spread.showScore, count = _$_object_spread.count, value2 = _$_object_spread.value, defaultValue = _$_object_spread.defaultValue, min = _$_object_spread.min, checkedIcon = _$_object_spread.checkedIcon, uncheckedIcon = _$_object_spread.uncheckedIcon, disabled = _$_object_spread.disabled, readOnly = _$_object_spread.readOnly, allowHalf = _$_object_spread.allowHalf, touchable = _$_object_spread.touchable, onChange = _$_object_spread.onChange, onTouchEnd = _$_object_spread.onTouchEnd;
  var classPrefix33 = "nut-rate";
  var _useState = _sliced_to_array((0, import_react204.useState)([
    1,
    2,
    3,
    4,
    5
  ]), 2), countArray = _useState[0], setCountArray = _useState[1];
  var _useRefs = _sliced_to_array(useRefs(), 2), refs = _useRefs[0], setRefs = _useRefs[1];
  var rateRects = (0, import_react204.useRef)([]);
  var _usePropsValue = _sliced_to_array(usePropsValue({
    value: value2,
    defaultValue: Math.max(defaultValue || 0, min),
    finalValue: 0,
    onChange
  }), 2), score = _usePropsValue[0], setScore = _usePropsValue[1];
  (0, import_react204.useEffect)(function() {
    var tmp = [];
    for (var i6 = 1; i6 <= Number(count); i6++) {
      tmp.push(i6);
    }
    setCountArray(tmp);
  }, [
    count
  ]);
  var renderIcon = function(n38) {
    return n38 <= score ? checkedIcon || import_react204.default.createElement(d7, null) : uncheckedIcon || (checkedIcon ? import_react204.default.cloneElement(checkedIcon, {
      color: void 0
    }) : import_react204.default.createElement(d7, null));
  };
  var onClick = function(e2, index2) {
    e2.preventDefault();
    e2.stopPropagation();
    if (disabled || readOnly)
      return;
    var value3 = 0;
    if (!(index2 === 1 && score === index2)) {
      value3 = index2;
    }
    value3 = Math.max(value3, min);
    setScore(value3);
  };
  var onHalfClick = function(event, n38) {
    event.preventDefault();
    event.stopPropagation();
    var value3 = Math.max(min, n38 - 0.5);
    setScore(value3);
  };
  var getScoreByPosition = function(x2) {
    var _rateRects_current;
    if ((_rateRects_current = rateRects.current) === null || _rateRects_current === void 0 ? void 0 : _rateRects_current.length) {
      for (var index2 = rateRects.current.length - 1; index2 >= 0; index2--) {
        var item = rateRects.current[index2];
        if (item && x2 > item.left) {
          return allowHalf ? index2 + (x2 > item.left + item.width / 2 ? 1 : 0.5) : index2 + 1;
        }
      }
      return 0;
    }
  };
  var updateRects = function() {
    for (var index2 = 0; index2 < refs.length; index2++) {
      var item = refs[index2];
      if (item) {
        rateRects.current[index2] = getRect(item);
      }
    }
  };
  var handleTouchStart = function(e2) {
    if (!touchable || readOnly || disabled) {
      return;
    }
    if (e2.cancelable) {
      e2.preventDefault();
    }
    e2.stopPropagation();
    updateRects();
  };
  var handleTouchMove = function(e2) {
    if (!touchable || readOnly || disabled) {
      return;
    }
    if (e2.cancelable) {
      e2.preventDefault();
    }
    e2.stopPropagation();
    var val2 = getScoreByPosition(e2.touches[0].clientX);
    if (val2 !== void 0) {
      setScore(Math.max(min, val2));
    }
  };
  var handleTouchEnd = function(e2) {
    if (!touchable || readOnly || disabled) {
      return;
    }
    if (e2.cancelable) {
      e2.preventDefault();
    }
    e2.stopPropagation();
    var val2 = getScoreByPosition(e2.changedTouches[0].clientX);
    if (val2 !== void 0) {
      setScore(Math.max(min, val2));
      onTouchEnd && onTouchEnd(e2, Math.max(min, val2));
    }
  };
  var rateRef = (0, import_react204.useRef)(null);
  (0, import_react204.useEffect)(function() {
    var element = rateRef.current;
    if (element) {
      element.addEventListener("touchstart", handleTouchStart, {
        passive: false
      });
      element.addEventListener("touchmove", handleTouchMove, {
        passive: false
      });
      element.addEventListener("touchend", handleTouchEnd, {
        passive: false
      });
    }
    return function() {
      if (element) {
        element.removeEventListener("touchstart", handleTouchStart);
        element.removeEventListener("touchmove", handleTouchMove);
        element.removeEventListener("touchend", handleTouchEnd);
      }
    };
  }, []);
  return import_react204.default.createElement("div", {
    className: (0, import_classnames47.default)(classPrefix33, {
      disabled,
      readonly: readOnly
    }, className),
    ref: rateRef,
    style
  }, countArray.map(function(n38, index2) {
    return import_react204.default.createElement("div", {
      className: "".concat(classPrefix33, "-item ").concat(classPrefix33, "-item-").concat(size),
      key: n38,
      ref: setRefs(index2),
      onClick: function(event) {
        return onClick(event, n38);
      }
    }, import_react204.default.createElement("div", {
      className: (0, import_classnames47.default)("".concat(classPrefix33, "-item-icon"), _define_property({}, "".concat(classPrefix33, "-item-icon-disabled"), disabled || n38 > score))
    }, renderIcon(n38)), allowHalf && score > n38 - 1 && import_react204.default.createElement("div", {
      className: (0, import_classnames47.default)("".concat(classPrefix33, "-item-half"), "".concat(classPrefix33, "-item-icon"), "".concat(classPrefix33, "-item-icon-half")),
      onClick: function(event) {
        return onHalfClick(event, n38);
      }
    }, renderIcon(n38)));
  }), showScore ? import_react204.default.createElement("span", {
    className: (0, import_classnames47.default)("".concat(classPrefix33, "-score"), "".concat(classPrefix33, "-score-").concat(size), _define_property({}, "".concat(classPrefix33, "-score-disabled"), disabled))
  }, score.toFixed(1)) : null);
};
Rate.displayName = "NutRate";

// node_modules/@nutui/nutui-react/dist/es/packages/rate/index.js
var rate_default = Rate;

// node_modules/@nutui/nutui-react/dist/es/packages/searchbar/searchbar.js
var import_react205 = __toESM(require_react());
var import_classnames48 = __toESM(require_classnames());
var defaultProps52 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  placeholder: "",
  shape: "square",
  disabled: false,
  maxLength: 9999,
  clearable: true,
  readOnly: false,
  autoFocus: false,
  backable: false,
  left: "",
  right: "",
  rightIn: "",
  leftIn: import_react205.default.createElement(n12, null),
  tag: false
});
var SearchBar = function(props) {
  var classPrefix33 = "nut-searchbar";
  var locale = useConfig().locale;
  var searchInputRef = (0, import_react205.useRef)(null);
  var _$_object_spread = _object_spread({}, defaultProps52, props), outerValue = _$_object_spread.value, defaultValue = _$_object_spread.defaultValue, style = _$_object_spread.style, placeholder = _$_object_spread.placeholder, shape = _$_object_spread.shape, className = _$_object_spread.className, disabled = _$_object_spread.disabled, maxLength = _$_object_spread.maxLength, clearable = _$_object_spread.clearable, readOnly = _$_object_spread.readOnly, autoFocus = _$_object_spread.autoFocus, backable = _$_object_spread.backable, right = _$_object_spread.right, left = _$_object_spread.left, leftIn = _$_object_spread.leftIn, rightIn = _$_object_spread.rightIn, tag = _$_object_spread.tag, onChange = _$_object_spread.onChange, onFocus = _$_object_spread.onFocus, onBlur = _$_object_spread.onBlur, onClear = _$_object_spread.onClear, onSearch = _$_object_spread.onSearch, onInputClick = _$_object_spread.onInputClick, onItemClick = _$_object_spread.onItemClick;
  var _usePropsValue = _sliced_to_array(usePropsValue({
    value: outerValue,
    defaultValue,
    finalValue: ""
  }), 2), value2 = _usePropsValue[0], setValue = _usePropsValue[1];
  var _useState = _sliced_to_array((0, import_react205.useState)(tag), 2), innerTag = _useState[0], setInnerTag = _useState[1];
  var forceFocus = (0, import_react205.useCallback)(function() {
    var _searchInputRef_current;
    (_searchInputRef_current = searchInputRef.current) === null || _searchInputRef_current === void 0 ? void 0 : _searchInputRef_current.focus();
  }, []);
  var handleChange = (0, import_react205.useCallback)(function(event) {
    var value3 = event.target.value;
    onChange && onChange(value3, event);
    setValue(value3);
  }, [
    onChange,
    setValue
  ]);
  var handleInputClick = (0, import_react205.useCallback)(function(event) {
    onInputClick === null || onInputClick === void 0 ? void 0 : onInputClick(event);
  }, [
    onInputClick
  ]);
  var handleFocus = (0, import_react205.useCallback)(function(event) {
    var _event_target;
    onFocus && onFocus((_event_target = event.target) === null || _event_target === void 0 ? void 0 : _event_target.value, event);
    if (tag)
      setInnerTag(false);
  }, [
    onFocus,
    tag
  ]);
  var _useState1 = _sliced_to_array((0, import_react205.useState)(null), 2), blurTimer = _useState1[0], setBlurTimer = _useState1[1];
  var handleBlur = (0, import_react205.useCallback)(function(event) {
    var _searchInputRef_current, _event_target;
    (_searchInputRef_current = searchInputRef.current) === null || _searchInputRef_current === void 0 ? void 0 : _searchInputRef_current.blur();
    onBlur && onBlur((_event_target = event.target) === null || _event_target === void 0 ? void 0 : _event_target.value, event);
    if (tag) {
      var timer = setTimeout(function() {
        var _event_target2;
        setInnerTag(((_event_target2 = event.target) === null || _event_target2 === void 0 ? void 0 : _event_target2.value) ? tag : false);
      }, 150);
      setBlurTimer(timer);
    }
  }, [
    onBlur,
    tag
  ]);
  (0, import_react205.useEffect)(function() {
    return function() {
      if (blurTimer)
        clearTimeout(blurTimer);
    };
  }, [
    blurTimer
  ]);
  var clearaVal = (0, import_react205.useCallback)(function(event) {
    if (disabled || readOnly)
      return;
    setValue("");
    forceFocus();
    onChange && onChange("");
    onClear && onClear(event);
  }, [
    disabled,
    readOnly,
    onChange,
    onClear,
    setValue,
    forceFocus
  ]);
  var onKeydown = (0, import_react205.useCallback)(function(e2) {
    if (e2.key === "Enter") {
      var event = e2.nativeEvent;
      if (typeof event.cancelable !== "boolean" || event.cancelable) {
        event.preventDefault();
      }
      onSearch && onSearch(value2);
    }
  }, [
    onSearch,
    value2
  ]);
  var cls = (0, import_react205.useMemo)(function() {
    var _obj;
    return (0, import_classnames48.default)(classPrefix33, (_obj = {}, _define_property(_obj, "".concat(classPrefix33, "-disabled"), disabled), _define_property(_obj, "".concat(classPrefix33, "-focus"), left || backable), _obj), className);
  }, [
    disabled,
    backable,
    left,
    className
  ]);
  (0, import_react205.useEffect)(function() {
    if (autoFocus) {
      forceFocus();
    }
  }, [
    autoFocus,
    forceFocus
  ]);
  var renderField = function() {
    var inputCls = (0, import_classnames48.default)("".concat(classPrefix33, "-input"));
    return import_react205.default.createElement("input", {
      className: inputCls,
      ref: searchInputRef,
      value: value2 || "",
      placeholder: placeholder || locale.placeholder,
      disabled,
      readOnly,
      maxLength,
      onKeyDown: onKeydown,
      onChange: handleChange,
      onFocus: handleFocus,
      onBlur: handleBlur,
      onClick: handleInputClick
    });
  };
  var renderValueByTags = (0, import_react205.useCallback)(function() {
    if (!value2) {
      setTimeout(function() {
        forceFocus();
      }, 0);
      return null;
    }
    var list = value2.split(",");
    if (!list)
      return null;
    return import_react205.default.createElement("div", {
      className: "nut-searchbar-values"
    }, list.map(function(item, index2) {
      return import_react205.default.createElement("div", {
        key: "def-".concat(index2),
        className: "nut-searchbar-value",
        onClick: function(e2) {
          return onItemClick === null || onItemClick === void 0 ? void 0 : onItemClick(item, e2);
        }
      }, item, import_react205.default.createElement(n6, null));
    }));
  }, [
    value2,
    onItemClick
  ]);
  var renderLeftIn = (0, import_react205.useCallback)(function() {
    if (!leftIn)
      return null;
    return import_react205.default.createElement("div", {
      className: "".concat(classPrefix33, "-leftin ").concat(classPrefix33, "-icon")
    }, leftIn);
  }, [
    leftIn
  ]);
  var renderLeft = (0, import_react205.useCallback)(function() {
    if (!backable && !left)
      return null;
    return import_react205.default.createElement("div", {
      className: "".concat(classPrefix33, "-left")
    }, backable ? import_react205.default.createElement(d, null) : left);
  }, [
    backable,
    left
  ]);
  var renderRightIn = (0, import_react205.useCallback)(function() {
    if (!rightIn)
      return null;
    return import_react205.default.createElement(import_react205.default.Fragment, null, import_react205.default.isValidElement(rightIn) ? import_react205.default.createElement("div", {
      className: "".concat(classPrefix33, "-rightin ").concat(classPrefix33, "-icon")
    }, rightIn) : import_react205.default.createElement("div", {
      className: "".concat(classPrefix33, "-rightin")
    }, rightIn));
  }, [
    rightIn
  ]);
  var renderRight = (0, import_react205.useCallback)(function() {
    if (!right)
      return null;
    return import_react205.default.createElement("div", {
      className: "".concat(classPrefix33, "-right")
    }, right);
  }, [
    right
  ]);
  var renderClear = (0, import_react205.useCallback)(function() {
    if (!value2 || !clearable)
      return null;
    return import_react205.default.createElement("div", {
      className: "".concat(classPrefix33, "-clear ").concat(classPrefix33, "-icon"),
      onClick: clearaVal,
      "aria-label": "清除"
    }, import_react205.default.createElement(n10, null));
  }, [
    value2,
    clearable,
    clearaVal
  ]);
  return import_react205.default.createElement("div", {
    className: cls,
    style
  }, renderLeft(), import_react205.default.createElement("div", {
    className: (0, import_classnames48.default)("".concat(classPrefix33, "-content"), _define_property({}, "".concat(classPrefix33, "-round"), shape === "round"))
  }, renderLeftIn(), renderField(), innerTag ? renderValueByTags() : renderClear(), renderRightIn()), renderRight());
};
SearchBar.displayName = "NutSearchBar";

// node_modules/@nutui/nutui-react/dist/es/packages/searchbar/index.js
var searchbar_default = SearchBar;

// node_modules/@nutui/nutui-react/dist/es/packages/shortpassword/shortpassword.js
var import_react206 = __toESM(require_react());
var import_classnames49 = __toESM(require_classnames());
var defaultProps53 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  value: "",
  visible: false,
  plain: false,
  hideFooter: true,
  length: 6,
  autoFocus: false
});
var InternalShortPassword = function(props, ref) {
  var locale = useConfig().locale;
  var _ref = _object_spread({}, defaultProps53, props), title = _ref.title, description = _ref.description, tips = _ref.tips, outerVisible = _ref.visible, value2 = _ref.value, error = _ref.error, hideFooter = _ref.hideFooter, length2 = _ref.length, plain = _ref.plain, style = _ref.style, className = _ref.className, closeable = _ref.closeable, autoFocus = _ref.autoFocus, round = _ref.round, onFocus = _ref.onFocus, onChange = _ref.onChange, onConfirm = _ref.onConfirm, onTips = _ref.onTips, onCancel = _ref.onCancel, onClose = _ref.onClose, onComplete = _ref.onComplete, onOverlayClick = _ref.onOverlayClick, onCloseIconClick = _ref.onCloseIconClick, rest = _object_without_properties(_ref, [
    "title",
    "description",
    "tips",
    "visible",
    "value",
    "error",
    "hideFooter",
    "length",
    "plain",
    "style",
    "className",
    "closeable",
    "autoFocus",
    "round",
    "onFocus",
    "onChange",
    "onConfirm",
    "onTips",
    "onCancel",
    "onClose",
    "onComplete",
    "onOverlayClick",
    "onCloseIconClick"
  ]);
  var classPrefix33 = "nut-shortpassword";
  var comLen = (0, import_react206.useMemo)(function() {
    return Math.min(Math.max(4, length2 || 4), 6);
  }, [
    length2
  ]);
  var format2 = function(val2) {
    return val2.slice(0, comLen);
  };
  var _usePropsValue = _sliced_to_array(usePropsValue({
    value: outerVisible,
    defaultValue: false,
    finalValue: false
  }), 2), visible = _usePropsValue[0], setVisible = _usePropsValue[1];
  var handleClose = function() {
    onClose === null || onClose === void 0 ? void 0 : onClose();
    setVisible(false);
  };
  var actions = {
    open: function() {
      setVisible(true);
    },
    close: function() {
      setVisible(false);
    }
  };
  (0, import_react206.useImperativeHandle)(ref, function() {
    return actions;
  });
  var _usePropsValue1 = _sliced_to_array(usePropsValue({
    value: value2,
    onChange
  }), 2), inputValue = _usePropsValue1[0], setInputValue = _usePropsValue1[1];
  (0, import_react206.useEffect)(function() {
    if (visible && autoFocus) {
      onFocus && onFocus();
    }
  }, [
    visible
  ]);
  (0, import_react206.useEffect)(function() {
    var val2 = format2(value2);
    if (val2.length >= comLen) {
      onComplete && onComplete(val2);
    }
    setInputValue(format2(value2));
  }, [
    value2
  ]);
  var sure = function() {
    onConfirm && onConfirm(inputValue);
  };
  return import_react206.default.createElement(popup_default, _object_spread({
    className: "".concat(classPrefix33, "-popup"),
    visible,
    closeable: true,
    onOverlayClick: handleClose,
    onCloseIconClick: handleClose,
    round
  }, rest), import_react206.default.createElement("div", {
    className: (0, import_classnames49.default)(classPrefix33, className),
    style
  }, import_react206.default.createElement("div", {
    className: "".concat(classPrefix33, "-title")
  }, title || locale.shortpassword.title), import_react206.default.createElement("div", {
    className: "".concat(classPrefix33, "-description")
  }, description || locale.shortpassword.description), import_react206.default.createElement("div", {
    className: "".concat(classPrefix33, "-input"),
    onClick: onFocus
  }, import_react206.default.createElement("div", {
    className: "".concat(classPrefix33, "-input-site")
  }), import_react206.default.createElement("div", {
    className: "".concat(classPrefix33, "-input-fake")
  }, _to_consumable_array(new Array(comLen).keys()).map(function(item, index2) {
    return import_react206.default.createElement("div", {
      className: "".concat(classPrefix33, "-input-fake-li"),
      key: index2
    }, inputValue.length > index2 && import_react206.default.createElement(import_react206.default.Fragment, null, plain ? inputValue[index2] : import_react206.default.createElement("div", {
      className: "".concat(classPrefix33, "-input-fake-li-icon")
    })));
  }))), import_react206.default.createElement("div", {
    className: "".concat(classPrefix33, "-message")
  }, import_react206.default.createElement("div", {
    className: "".concat(classPrefix33, "-message-error")
  }, error), import_react206.default.createElement("div", {
    className: "".concat(classPrefix33, "-message-forget"),
    onClick: onTips
  }, tips || import_react206.default.createElement(import_react206.default.Fragment, null, import_react206.default.createElement(p2, {
    width: 11,
    height: 11
  }), locale.shortpassword.tips))), !hideFooter && import_react206.default.createElement("div", {
    className: "".concat(classPrefix33, "-footer")
  }, import_react206.default.createElement("div", {
    className: "".concat(classPrefix33, "-footer-cancel"),
    onClick: onCancel
  }, locale.cancel), import_react206.default.createElement("div", {
    className: "".concat(classPrefix33, "-footer-sure"),
    onClick: sure
  }, locale.confirm))));
};
var ShortPassword = import_react206.default.forwardRef(InternalShortPassword);

// node_modules/@nutui/nutui-react/dist/es/packages/shortpassword/index.js
var shortpassword_default = ShortPassword;

// node_modules/@nutui/nutui-react/dist/es/packages/signature/signature.js
var import_react207 = __toESM(require_react());
var defaultProps54 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  type: "png",
  lineWidth: 2,
  strokeStyle: "#1A1A1A",
  unsupported: ""
});
var InternalSignature = function(props, ref) {
  var locale = useConfig().locale;
  var _ref = _object_spread({}, defaultProps54, props), type4 = _ref.type, lineWidth = _ref.lineWidth, strokeStyle = _ref.strokeStyle, unsupported = _ref.unsupported, className = _ref.className, style = _ref.style, onConfirm = _ref.onConfirm, onClear = _ref.onClear, rest = _object_without_properties(_ref, [
    "type",
    "lineWidth",
    "strokeStyle",
    "unsupported",
    "className",
    "style",
    "onConfirm",
    "onClear"
  ]);
  var classPrefix33 = "nut-signature";
  var canvasRef = (0, import_react207.useRef)(null);
  var wrapRef = (0, import_react207.useRef)(null);
  var _useState = _sliced_to_array((0, import_react207.useState)(0), 2), canvasHeight = _useState[0], setCanvasHeight = _useState[1];
  var _useState1 = _sliced_to_array((0, import_react207.useState)(0), 2), canvasWidth = _useState1[0], setCanvasWidth = _useState1[1];
  var ctx2 = (0, import_react207.useRef)(null);
  var checkCanvas = function() {
    var elem2 = document.createElement("canvas");
    return !!(elem2.getContext && elem2.getContext("2d"));
  };
  var _useState2 = _sliced_to_array((0, import_react207.useState)(false), 2), isCanvasSupported = _useState2[0], setIsCanvasSupported = _useState2[1];
  var isSignedRef = (0, import_react207.useRef)(false);
  var isSupportTouch = canUseDom ? "ontouchstart" in window : false;
  var events = isSupportTouch ? [
    "touchstart",
    "touchmove",
    "touchend",
    "touchleave"
  ] : [
    "mousedown",
    "mousemove",
    "mouseup",
    "mouseleave"
  ];
  (0, import_react207.useEffect)(function() {
    setIsCanvasSupported(checkCanvas);
  }, []);
  (0, import_react207.useEffect)(function() {
    if (isCanvasSupported && canvasRef.current && wrapRef.current) {
      ctx2.current = canvasRef.current.getContext("2d");
      setCanvasWidth(wrapRef.current.offsetWidth);
      setCanvasHeight(wrapRef.current.offsetHeight);
      addEvent();
    }
  }, [
    isCanvasSupported
  ]);
  var startEventHandler = function(event) {
    event.preventDefault();
    isSignedRef.current = true;
    if (ctx2.current && canvasRef.current) {
      ctx2.current.beginPath();
      ctx2.current.lineWidth = lineWidth;
      ctx2.current.strokeStyle = strokeStyle;
      canvasRef.current.addEventListener(events[1], moveEventHandler, false);
      canvasRef.current.addEventListener(events[2], endEventHandler, false);
      canvasRef.current.addEventListener(events[3], leaveEventHandler, false);
    }
  };
  var addEvent = function() {
    if (canvasRef.current) {
      canvasRef.current.addEventListener(events[0], startEventHandler, false);
    }
  };
  var moveEventHandler = function(event) {
    event.preventDefault();
    var evt = isSupportTouch ? event.touches[0] : event;
    if (canvasRef.current && ctx2.current) {
      var coverPos = canvasRef.current.getBoundingClientRect();
      var mouseX = evt.clientX - coverPos.left;
      var mouseY = evt.clientY - coverPos.top;
      ctx2.current.lineTo(mouseX, mouseY);
      ctx2.current.stroke();
    }
  };
  var endEventHandler = function(event) {
    event.preventDefault();
    if (canvasRef.current) {
      canvasRef.current.removeEventListener(events[1], moveEventHandler, false);
      canvasRef.current.removeEventListener(events[2], endEventHandler, false);
    }
  };
  var leaveEventHandler = function(event) {
    event.preventDefault();
    if (canvasRef.current) {
      canvasRef.current.removeEventListener(events[1], moveEventHandler, false);
      canvasRef.current.removeEventListener(events[2], endEventHandler, false);
    }
  };
  var handleClearBtn = function() {
    isSignedRef.current = false;
    if (canvasRef.current && ctx2.current) {
      canvasRef.current.addEventListener(events[2], endEventHandler, false);
      ctx2.current.clearRect(0, 0, canvasWidth, canvasHeight);
      ctx2.current.closePath();
    }
    onClear && onClear();
  };
  var onSave = function(canvas) {
    var dataurl = "";
    if (!isSignedRef.current) {
      onConfirm && onConfirm(canvas, dataurl, isSignedRef.current);
      return;
    }
    switch (type4) {
      case "png":
        dataurl = canvas.toDataURL("image/png");
        break;
      case "jpg":
        dataurl = canvas.toDataURL("image/jpeg", 0.8);
        break;
      default:
        dataurl = canvas.toDataURL("image/png");
    }
    onConfirm && onConfirm(canvas, dataurl, isSignedRef.current);
  };
  (0, import_react207.useImperativeHandle)(ref, function() {
    return {
      confirm: function() {
        onSave(canvasRef.current);
      },
      clear: function() {
        handleClearBtn();
      }
    };
  });
  return import_react207.default.createElement("div", _object_spread({
    className: "".concat(classPrefix33, " ").concat(className),
    style
  }, rest), import_react207.default.createElement("div", {
    className: "".concat(classPrefix33, "-inner"),
    ref: wrapRef
  }, import_react207.default.createElement(import_react207.default.Fragment, null, isCanvasSupported ? import_react207.default.createElement("canvas", {
    ref: canvasRef,
    height: canvasHeight,
    width: canvasWidth
  }) : unsupported ? import_react207.default.createElement(import_react207.default.Fragment, null, unsupported) : import_react207.default.createElement("p", {
    className: "".concat(classPrefix33, "-unsupport")
  }, locale.signature.unsupported))));
};
var Signature = import_react207.default.forwardRef(InternalSignature);
Signature.displayName = "NutSignature";

// node_modules/@nutui/nutui-react/dist/es/packages/signature/index.js
var signature_default = Signature;

// node_modules/@nutui/nutui-react/dist/es/packages/switch/switch.js
var import_react208 = __toESM(require_react());
var import_classnames50 = __toESM(require_classnames());
var defaultProps55 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  disabled: false,
  activeText: "",
  inactiveText: "",
  loadingIcon: import_react208.default.createElement(d5, null),
  loading: void 0,
  onLoadingChange: function(loading) {
  }
});
var Switch = function(props) {
  var _ref = _object_spread({}, defaultProps55, props), checked = _ref.checked, defaultChecked = _ref.defaultChecked, disabled = _ref.disabled, activeText = _ref.activeText, inactiveText = _ref.inactiveText, loadingIcon = _ref.loadingIcon, className = _ref.className, style = _ref.style, onChange = _ref.onChange, propLoading = _ref.loading, onLoadingChange = _ref.onLoadingChange, rest = _object_without_properties(_ref, [
    "checked",
    "defaultChecked",
    "disabled",
    "activeText",
    "inactiveText",
    "loadingIcon",
    "className",
    "style",
    "onChange",
    "loading",
    "onLoadingChange"
  ]);
  var classPrefix33 = "nut-switch";
  var rtl = useRtl();
  var _usePropsValue = _sliced_to_array(usePropsValue({
    value: checked,
    defaultValue: defaultChecked
  }), 2), value2 = _usePropsValue[0], setValue = _usePropsValue[1];
  var _useState = _sliced_to_array((0, import_react208.useState)(false), 2), internalLoading = _useState[0], setInternalLoading = _useState[1];
  var loading = propLoading !== void 0 ? propLoading : internalLoading;
  var setLoading = function(val2) {
    if (propLoading !== void 0) {
      onLoadingChange(val2);
    } else {
      setInternalLoading(val2);
    }
  };
  (0, import_react208.useEffect)(function() {
    loading && setLoading(false);
  }, [
    value2
  ]);
  var classes = function() {
    var _obj2;
    return (0, import_classnames50.default)([
      classPrefix33,
      className,
      (_obj2 = {}, _define_property(_obj2, "".concat(classPrefix33, "-close"), !value2), _define_property(_obj2, "".concat(classPrefix33, "-disabled"), disabled), _define_property(_obj2, "".concat(classPrefix33, "-disabled-close"), disabled && !value2), _obj2)
    ]);
  };
  var onClick = function() {
    var _ref2 = _async_to_generator(function() {
      var e2;
      return __generator(this, function(_state) {
        switch (_state.label) {
          case 0:
            if (disabled || loading)
              return [
                2
              ];
            if (!onChange)
              return [
                3,
                4
              ];
            loadingIcon && setLoading(true);
            _state.label = 1;
          case 1:
            _state.trys.push([
              1,
              3,
              ,
              4
            ]);
            return [
              4,
              onChange(!value2)
            ];
          case 2:
            _state.sent();
            return [
              3,
              4
            ];
          case 3:
            e2 = _state.sent();
            setLoading(false);
            return [
              3,
              4
            ];
          case 4:
            setValue(!value2);
            return [
              2
            ];
        }
      });
    });
    return function onClick2() {
      return _ref2.apply(this, arguments);
    };
  }();
  var _obj, _obj1;
  return import_react208.default.createElement("div", _object_spread({
    className: classes(),
    onClick,
    style
  }, rest), import_react208.default.createElement("div", {
    className: (0, import_classnames50.default)([
      [
        "".concat(classPrefix33, "-button")
      ],
      [
        value2 ? "".concat(classPrefix33, "-button-open") : "".concat(classPrefix33, "-button-close")
      ],
      (_obj = {}, _define_property(_obj, "".concat(classPrefix33, "-button-open-rtl"), rtl && value2), _define_property(_obj, "".concat(classPrefix33, "-button-close-rtl"), rtl && !value2), _obj)
    ])
  }, loading && loadingIcon ? import_react208.default.createElement(import_react208.default.Fragment, null, loadingIcon) : import_react208.default.createElement(import_react208.default.Fragment, null, !value2 && !activeText && import_react208.default.createElement("div", {
    className: "".concat(classPrefix33, "-close-line")
  }))), activeText && import_react208.default.createElement("div", {
    className: (0, import_classnames50.default)("".concat(classPrefix33, "-label"), (_obj1 = {}, _define_property(_obj1, "".concat(classPrefix33, "-label-open"), value2), _define_property(_obj1, "".concat(classPrefix33, "-label-close"), !value2), _define_property(_obj1, "".concat(classPrefix33, "-label-open-rtl"), rtl && value2), _define_property(_obj1, "".concat(classPrefix33, "-label-close-rtl"), rtl && !value2), _define_property(_obj1, "".concat(classPrefix33, "-label-close-disabled"), disabled && !value2), _obj1))
  }, value2 ? activeText : inactiveText));
};
Switch.displayName = "NutSwitch";

// node_modules/@nutui/nutui-react/dist/es/packages/switch/index.js
var switch_default = Switch;

// node_modules/@nutui/nutui-react/dist/es/packages/textarea/textarea.js
var import_react209 = __toESM(require_react());
var import_classnames51 = __toESM(require_classnames());
var defaultProps56 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  defaultValue: "",
  showCount: false,
  rows: 2,
  maxLength: 140,
  placeholder: "",
  readOnly: false,
  disabled: false,
  autoSize: false,
  plain: false,
  status: "default"
});
var TextArea = function(props) {
  var locale = useConfig().locale;
  var _ref = _object_spread({}, defaultProps56, props), className = _ref.className, value2 = _ref.value, defaultValue = _ref.defaultValue, showCount = _ref.showCount, maxLength = _ref.maxLength, rows = _ref.rows, placeholder = _ref.placeholder, readOnly = _ref.readOnly, disabled = _ref.disabled, autoSize = _ref.autoSize, style = _ref.style, plain = _ref.plain, status = _ref.status, onChange = _ref.onChange, onBlur = _ref.onBlur, onFocus = _ref.onFocus, rest = _object_without_properties(_ref, [
    "className",
    "value",
    "defaultValue",
    "showCount",
    "maxLength",
    "rows",
    "placeholder",
    "readOnly",
    "disabled",
    "autoSize",
    "style",
    "plain",
    "status",
    "onChange",
    "onBlur",
    "onFocus"
  ]);
  var classPrefix33 = "nut-textarea";
  var textareaRef = (0, import_react209.useRef)(null);
  var compositionRef = (0, import_react209.useRef)(false);
  var rtl = useRtl();
  var format2 = function(value3) {
    if (maxLength !== -1 && value3.length > maxLength) {
      return value3.substring(0, maxLength);
    }
    return value3;
  };
  var _usePropsValue = _sliced_to_array(usePropsValue({
    value: value2,
    defaultValue,
    finalValue: format2(defaultValue),
    onChange
  }), 2), inputValue = _usePropsValue[0], setInputValue = _usePropsValue[1];
  (0, import_react209.useEffect)(function() {
    if (autoSize)
      setContentHeight();
  }, [
    autoSize,
    defaultValue,
    inputValue
  ]);
  var setContentHeight = function() {
    var textarea = textareaRef.current;
    if (textarea) {
      textarea.style.height = "auto";
      var height2 = textarea === null || textarea === void 0 ? void 0 : textarea.scrollHeight;
      if (height2) {
        textarea.style.height = "".concat(height2, "px");
      }
    }
  };
  var handleChange = function(event) {
    var text3 = event.target;
    var value3 = compositionRef.current ? text3.value : format2(text3.value);
    setInputValue(value3);
  };
  var isDisabled = function() {
    return disabled || readOnly;
  };
  var handleFocus = function(event) {
    if (isDisabled())
      return;
    onFocus === null || onFocus === void 0 ? void 0 : onFocus(event);
  };
  var handleBlur = function(event) {
    if (isDisabled())
      return;
    onBlur === null || onBlur === void 0 ? void 0 : onBlur(event);
  };
  var _obj;
  return import_react209.default.createElement(import_react209.default.Fragment, null, import_react209.default.createElement("div", {
    className: (0, import_classnames51.default)(classPrefix33, (_obj = {}, _define_property(_obj, "".concat(classPrefix33, "-disabled"), disabled), _define_property(_obj, "".concat(classPrefix33, "-readonly"), readOnly), _define_property(_obj, "".concat(classPrefix33, "-rtl"), rtl), _define_property(_obj, "".concat(classPrefix33, "-plain"), plain), _define_property(_obj, "".concat(classPrefix33, "-container"), !plain), _define_property(_obj, "".concat(classPrefix33, "-").concat(status), status), _obj), className)
  }, import_react209.default.createElement("textarea", _object_spread_props(_object_spread({}, rest), {
    ref: textareaRef,
    className: (0, import_classnames51.default)("".concat(classPrefix33, "-textarea"), _define_property({}, "".concat(classPrefix33, "-textarea-disabled"), disabled)),
    style,
    disabled,
    readOnly,
    value: inputValue,
    onChange: handleChange,
    onBlur: handleBlur,
    onFocus: handleFocus,
    onCompositionEnd: function() {
      compositionRef.current = false;
    },
    onCompositionStart: function() {
      compositionRef.current = true;
    },
    rows,
    maxLength: maxLength === -1 ? void 0 : maxLength,
    placeholder: placeholder !== void 0 ? placeholder : locale.placeholder
  })), showCount && import_react209.default.createElement("div", {
    className: (0, import_classnames51.default)("".concat(classPrefix33, "-limit"), _define_property({}, "".concat(classPrefix33, "-limit-disabled"), disabled))
  }, inputValue.length, "/", maxLength < 0 ? 0 : maxLength)));
};
TextArea.displayName = "NutTextArea";

// node_modules/@nutui/nutui-react/dist/es/packages/textarea/index.js
var textarea_default = TextArea;

// node_modules/@nutui/nutui-react/dist/es/packages/uploader/uploader.js
var import_react212 = __toESM(require_react());
var import_classnames53 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/uploader/preview.js
var import_react211 = __toESM(require_react());

// node_modules/@nutui/nutui-react/dist/es/packages/progress/progress.js
var import_react210 = __toESM(require_react());
var import_classnames52 = __toESM(require_classnames());
var defaultProps57 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  percent: 0,
  showText: false,
  animated: false,
  lazy: false,
  delay: 0
});
var Progress = function(props) {
  var rtl = useRtl();
  var _ref = _object_spread({}, defaultProps57, props), className = _ref.className, style = _ref.style, percent = _ref.percent, background = _ref.background, color = _ref.color, strokeWidth = _ref.strokeWidth, showText = _ref.showText, animated2 = _ref.animated, children2 = _ref.children, lazy = _ref.lazy, delay = _ref.delay, borderRadius = _ref.borderRadius, fontSize = _ref.fontSize, activeMode = _ref.activeMode, duration = _ref.duration, ariaLabel = _ref.ariaLabel, onActiveEnd = _ref.onActiveEnd, rest = _object_without_properties(_ref, [
    "className",
    "style",
    "percent",
    "background",
    "color",
    "strokeWidth",
    "showText",
    "animated",
    "children",
    "lazy",
    "delay",
    "borderRadius",
    "fontSize",
    "activeMode",
    "duration",
    "ariaLabel",
    "onActiveEnd"
  ]);
  var classPrefix33 = "nut-progress";
  var _obj;
  var classesInner = (0, import_classnames52.default)((_obj = {}, _define_property(_obj, "".concat(classPrefix33, "-inner"), true), _define_property(_obj, "".concat(classPrefix33, "-active"), animated2), _obj));
  var stylesOuter = {
    height: "".concat(strokeWidth, "px"),
    borderRadius: borderRadius && parseInt(borderRadius.toString()),
    background
  };
  var _useState = _sliced_to_array((0, import_react210.useState)(0), 2), displayPercent = _useState[0], setDispalyPercent = _useState[1];
  var stylesInner = {
    width: "".concat(displayPercent, "%"),
    background: color || "#FF0F23",
    borderRadius: borderRadius && parseInt(borderRadius.toString()),
    transition: "width ".concat(duration || 300, "ms ease-in-out")
  };
  (0, import_react210.useEffect)(function() {
    var timer = null;
    if (activeMode === "backwards") {
      setDispalyPercent(0);
      timer = setTimeout(function() {
        setDispalyPercent(percent);
      }, duration || 300);
    } else {
      setDispalyPercent(percent);
    }
    return function() {
      if (timer) {
        clearTimeout(timer);
      }
    };
  }, [
    percent,
    activeMode,
    duration
  ]);
  var _useState1 = _sliced_to_array((0, import_react210.useState)(false), 2), intersecting = _useState1[0], setIntersecting = _useState1[1];
  var progressRef = (0, import_react210.useRef)(null);
  var observer = (0, import_react210.useRef)(null);
  var initObserver = function() {
    var options2 = {
      threshold: [
        0
      ],
      rootMargin: "0px"
    };
    observer.current = new IntersectionObserver(function(entires, self2) {
      entires.forEach(function(item) {
        setIntersecting(item.isIntersecting);
      });
    }, options2);
    observer.current.observe(progressRef.current);
  };
  var resetObserver = function() {
    observer.current.disconnect && observer.current.disconnect();
  };
  (0, import_react210.useEffect)(function() {
    if (lazy) {
      setTimeout(function() {
        if (intersecting) {
          setDispalyPercent(percent);
        } else {
          setDispalyPercent(0);
        }
      }, delay);
    }
  }, [
    intersecting
  ]);
  (0, import_react210.useEffect)(function() {
    lazy && initObserver();
    var timer = null;
    if (delay) {
      setDispalyPercent(0);
      timer = setTimeout(function() {
        setDispalyPercent(percent);
      }, delay);
    }
    return function() {
      lazy && resetObserver();
      timer && clearTimeout(timer);
    };
  }, []);
  return import_react210.default.createElement("div", _object_spread({
    ref: progressRef,
    className: (0, import_classnames52.default)(classPrefix33, className),
    style,
    "aria-label": ariaLabel
  }, rest), import_react210.default.createElement("div", {
    className: "".concat(classPrefix33, "-outer"),
    style: stylesOuter
  }, import_react210.default.createElement("div", {
    className: classesInner,
    style: stylesInner,
    onTransitionEnd: function() {
      onActiveEnd === null || onActiveEnd === void 0 ? void 0 : onActiveEnd();
    }
  })), showText && import_react210.default.createElement("div", {
    className: "".concat(classPrefix33, "-text"),
    style: {
      fontSize: fontSize && parseInt(fontSize.toString())
    }
  }, children2 || "".concat(percent, "%")));
};
Progress.displayName = "NutProgress";

// node_modules/@nutui/nutui-react/dist/es/packages/uploader/preview.js
var Preview = function(param) {
  var fileList = param.fileList, previewType = param.previewType, deletable = param.deletable, onDeleteItem = param.onDeleteItem, handleItemClick = param.handleItemClick, previewUrl = param.previewUrl, deleteIcon = param.deleteIcon, children2 = param.children;
  var renderIcon = function(item) {
    if (item.status === "error") {
      return item.failIcon || import_react211.default.createElement(n8, {
        color: "#fff"
      });
    }
    return item.loadingIcon || import_react211.default.createElement(s, {
      className: "nut-icon-loading",
      color: "#fff"
    });
  };
  return import_react211.default.createElement(import_react211.default.Fragment, null, fileList.length !== 0 && fileList.map(function(item, index2) {
    var _item_status = item.status, status = _item_status === void 0 ? "success" : _item_status, _item_uid = item.uid, uid = _item_uid === void 0 ? index2 : _item_uid, url2 = item.url, _item_message = item.message, message = _item_message === void 0 ? "" : _item_message, _item_name = item.name, name2 = _item_name === void 0 ? "" : _item_name, _item_type = item.type, type4 = _item_type === void 0 ? "image" : _item_type;
    return import_react211.default.createElement("div", {
      className: "nut-uploader-preview ".concat(previewType),
      key: uid
    }, previewType === "picture" && !children2 && deletable && import_react211.default.createElement("div", {
      onClick: function() {
        return onDeleteItem(item, index2);
      },
      className: "close"
    }, deleteIcon), previewType === "picture" && !children2 && import_react211.default.createElement("div", {
      className: "nut-uploader-preview-img"
    }, status === "ready" ? import_react211.default.createElement("div", {
      className: "nut-uploader-preview-progress"
    }, import_react211.default.createElement("div", {
      className: "nut-uploader-preview-progress-msg"
    }, message)) : status !== "success" && import_react211.default.createElement("div", {
      className: "nut-uploader-preview-progress"
    }, renderIcon(item), import_react211.default.createElement("div", {
      className: "nut-uploader-preview-progress-msg"
    }, message)), type4.includes("image") ? import_react211.default.createElement(import_react211.default.Fragment, null, url2 && import_react211.default.createElement(image_default, {
      className: "nut-uploader-preview-img-c",
      style: {
        objectFit: "fill"
      },
      src: url2,
      alt: "",
      onClick: function() {
        return handleItemClick(item, index2);
      }
    })) : import_react211.default.createElement(import_react211.default.Fragment, null, previewUrl ? import_react211.default.createElement(image_default, {
      className: "nut-uploader-preview-img-c",
      src: previewUrl,
      alt: "",
      onClick: function() {
        return handleItemClick(item, index2);
      }
    }) : import_react211.default.createElement("div", {
      className: "nut-uploader-preview-img-file"
    }, import_react211.default.createElement("div", {
      onClick: function() {
        return handleItemClick(item, index2);
      },
      className: "nut-uploader-preview-img-file-name"
    }, import_react211.default.createElement(d4, {
      color: "#808080"
    }), import_react211.default.createElement("span", null, " ", name2)))), status === "success" && name2 ? import_react211.default.createElement("div", {
      className: "tips"
    }, name2) : null), previewType === "list" && import_react211.default.createElement("div", {
      className: "nut-uploader-preview-list"
    }, import_react211.default.createElement("div", {
      className: "nut-uploader-preview-img-file-name ".concat(status),
      onClick: function() {
        return handleItemClick(item, index2);
      }
    }, import_react211.default.createElement(d4, null), import_react211.default.createElement("span", null, " ", name2)), deletable && import_react211.default.createElement(n7, {
      color: "#808080",
      className: "nut-uploader-preview-img-file-del",
      onClick: function() {
        return onDeleteItem(item, index2);
      }
    }), item.status === "uploading" && item.percentage && import_react211.default.createElement(Progress, {
      percent: item.percentage,
      color: "linear-gradient(270deg, rgba(18,126,255,1) 0%,rgba(32,147,255,1) 32.815625%,rgba(13,242,204,1) 100%)",
      showText: false
    })));
  }));
};

// node_modules/@nutui/nutui-react/dist/es/packages/uploader/uploader.js
var defaultProps58 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  maxCount: Number.MAX_VALUE,
  previewType: "picture",
  fit: "cover",
  name: "file",
  accept: "*",
  disabled: false,
  autoUpload: true,
  multiple: false,
  maxFileSize: Number.MAX_VALUE,
  clearInput: true,
  preview: true,
  deletable: true,
  capture: false,
  uploadIcon: import_react212.default.createElement(e, {
    width: "20px",
    height: "20px",
    color: "#808080"
  }),
  deleteIcon: import_react212.default.createElement(n8, {
    color: "rgba(0,0,0,0.6)"
  }),
  beforeDelete: function(file, files) {
    return true;
  }
});
var InternalUploader = function(props, ref) {
  var locale = useConfig().locale;
  var fileListRef = (0, import_react212.useRef)([]);
  var _mergeProps = mergeProps(defaultProps58, props), children2 = _mergeProps.children, uploadIcon = _mergeProps.uploadIcon, deleteIcon = _mergeProps.deleteIcon, uploadLabel = _mergeProps.uploadLabel, name2 = _mergeProps.name, accept = _mergeProps.accept, defaultValue = _mergeProps.defaultValue, value2 = _mergeProps.value, previewType = _mergeProps.previewType, fit = _mergeProps.fit, disabled = _mergeProps.disabled, multiple = _mergeProps.multiple, previewUrl = _mergeProps.previewUrl, preview = _mergeProps.preview, deletable = _mergeProps.deletable, maxCount = _mergeProps.maxCount, capture = _mergeProps.capture, maxFileSize = _mergeProps.maxFileSize, className = _mergeProps.className, autoUpload = _mergeProps.autoUpload, clearInput = _mergeProps.clearInput, upload = _mergeProps.upload, onDelete = _mergeProps.onDelete, onChange = _mergeProps.onChange, onFileItemClick = _mergeProps.onFileItemClick, onOversize = _mergeProps.onOversize, onOverCount = _mergeProps.onOverCount, beforeUpload = _mergeProps.beforeUpload, beforeDelete = _mergeProps.beforeDelete, onUploadQueueChange = _mergeProps.onUploadQueueChange, listUploadRender = _mergeProps.listUploadRender, restProps = _object_without_properties(_mergeProps, [
    "children",
    "uploadIcon",
    "deleteIcon",
    "uploadLabel",
    "name",
    "accept",
    "defaultValue",
    "value",
    "previewType",
    "fit",
    "disabled",
    "multiple",
    "previewUrl",
    "preview",
    "deletable",
    "maxCount",
    "capture",
    "maxFileSize",
    "className",
    "autoUpload",
    "clearInput",
    "upload",
    "onDelete",
    "onChange",
    "onFileItemClick",
    "onOversize",
    "onOverCount",
    "beforeUpload",
    "beforeDelete",
    "onUploadQueueChange",
    "listUploadRender"
  ]);
  var _usePropsValue = _sliced_to_array(usePropsValue({
    value: value2,
    defaultValue,
    finalValue: [],
    onChange: function(v3) {
      onChange === null || onChange === void 0 ? void 0 : onChange(v3);
    }
  }), 2), fileList = _usePropsValue[0], setFileList = _usePropsValue[1];
  var _useState = _sliced_to_array((0, import_react212.useState)([]), 2), uploadQueue = _useState[0], setUploadQueue = _useState[1];
  var classes = (0, import_classnames53.default)(className, "nut-uploader");
  (0, import_react212.useEffect)(function() {
    fileListRef.current = fileList;
  }, [
    fileList
  ]);
  (0, import_react212.useEffect)(function() {
    onUploadQueueChange === null || onUploadQueueChange === void 0 ? void 0 : onUploadQueueChange(uploadQueue);
  }, [
    uploadQueue
  ]);
  (0, import_react212.useImperativeHandle)(ref, function() {
    return {
      submit: _async_to_generator(function() {
        return __generator(this, function(_state) {
          switch (_state.label) {
            case 0:
              return [
                4,
                uploadAction(uploadQueue)
              ];
            case 1:
              _state.sent();
              return [
                2
              ];
          }
        });
      }),
      clear: function() {
        clearUploadQueue();
      }
    };
  });
  var clearUploadQueue = function() {
    var index2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : -1;
    if (index2 > -1) {
      uploadQueue.splice(index2, 1);
      setUploadQueue(uploadQueue);
    } else {
      setUploadQueue([]);
      setFileList([]);
    }
  };
  var idCountRef = (0, import_react212.useRef)(0);
  var filterFiles = function(files) {
    var maximum = maxCount * 1;
    var oversizes = new Array();
    var filterFile = files.filter(function(file) {
      if (file.size > maxFileSize) {
        oversizes.push(file);
        return false;
      }
      return true;
    });
    oversizes.length && (onOversize === null || onOversize === void 0 ? void 0 : onOversize(files));
    if (filterFile.length > maximum) {
      onOverCount === null || onOverCount === void 0 ? void 0 : onOverCount(filterFile.length);
      filterFile.splice(maximum, filterFile.length - maximum);
    }
    if (fileList.length !== 0) {
      var index2 = maximum - fileList.length;
      filterFile.splice(index2, filterFile.length - index2);
    }
    return filterFile;
  };
  var deleted = function(file, index2) {
    var deletedFileList = fileListRef.current.filter(function(file2, idx) {
      return idx !== index2;
    });
    onDelete === null || onDelete === void 0 ? void 0 : onDelete(file, deletedFileList);
    setFileList(deletedFileList);
  };
  var onDeleteItem = function(file, index2) {
    clearUploadQueue(index2);
    funcInterceptor(beforeDelete, {
      args: [
        file,
        fileList
      ],
      done: function() {
        return deleted(file, index2);
      }
    });
  };
  var fileChange = function() {
    var _ref = _async_to_generator(function(event) {
      var $el, files, _files, filesArr, tasks;
      return __generator(this, function(_state) {
        switch (_state.label) {
          case 0:
            if (disabled)
              return [
                2
              ];
            $el = event.target;
            files = $el.files;
            _files = [];
            filesArr = new Array().slice.call(files);
            if (!beforeUpload)
              return [
                3,
                2
              ];
            return [
              4,
              beforeUpload(filesArr)
            ];
          case 1:
            _files = _state.sent();
            if (!_files.length) {
              $el.value = "";
              return [
                2
              ];
            }
            return [
              3,
              3
            ];
          case 2:
            _files = filesArr;
            _state.label = 3;
          case 3:
            _files = filterFiles(_files);
            tasks = _files.map(function(file) {
              var _file_type;
              var info = {
                uid: idCountRef.current++,
                status: autoUpload ? "uploading" : "ready",
                file,
                message: autoUpload ? locale.uploader.uploading : locale.uploader.waitingUpload,
                name: file.name,
                type: file.type
              };
              if (preview && ((_file_type = file.type) === null || _file_type === void 0 ? void 0 : _file_type.includes("image"))) {
                var reader = new FileReader();
                reader.onload = function(event2) {
                  fileListRef.current = _to_consumable_array(fileListRef.current).concat([
                    _object_spread_props(_object_spread({}, info), {
                      url: event2.target.result
                    })
                  ]);
                  setFileList(fileListRef.current);
                };
                reader.readAsDataURL(file);
              }
              return info;
            });
            if (!!autoUpload)
              return [
                3,
                4
              ];
            setUploadQueue(tasks);
            return [
              3,
              6
            ];
          case 4:
            return [
              4,
              uploadAction(tasks)
            ];
          case 5:
            _state.sent();
            _state.label = 6;
          case 6:
            if (clearInput) {
              $el.value = "";
            }
            return [
              2
            ];
        }
      });
    });
    return function fileChange2(event) {
      return _ref.apply(this, arguments);
    };
  }();
  var uploadAction = function() {
    var _ref = _async_to_generator(function(tasks) {
      var taskIds;
      return __generator(this, function(_state) {
        switch (_state.label) {
          case 0:
            taskIds = tasks.map(function(task) {
              return task.uid;
            });
            setFileList(fileList.map(function(file) {
              if (taskIds.includes(file.uid)) {
                return _object_spread_props(_object_spread({}, file), {
                  status: "uploading",
                  message: locale.uploader.uploading
                });
              }
              return file;
            }));
            return [
              4,
              Promise.all(tasks.map(function() {
                var _ref2 = _async_to_generator(function(currentTask, index2) {
                  var result, list, e2, list1;
                  return __generator(this, function(_state2) {
                    switch (_state2.label) {
                      case 0:
                        _state2.trys.push([
                          0,
                          2,
                          ,
                          3
                        ]);
                        return [
                          4,
                          upload(currentTask.file)
                        ];
                      case 1:
                        result = _state2.sent();
                        list = fileListRef.current.map(function(item) {
                          if (item.uid === currentTask.uid) {
                            item.status = "success";
                            item.message = locale.uploader.success;
                            item.url = result.url;
                          }
                          return item;
                        });
                        setFileList(list);
                        return [
                          3,
                          3
                        ];
                      case 2:
                        e2 = _state2.sent();
                        list1 = fileListRef.current.map(function(item) {
                          if (item.uid === currentTask.uid) {
                            item.status = "error";
                            item.message = locale.uploader.error;
                          }
                          return item;
                        });
                        setFileList(list1);
                        throw e2;
                      case 3:
                        return [
                          2
                        ];
                    }
                  });
                });
                return function(currentTask, index2) {
                  return _ref2.apply(this, arguments);
                };
              }())).catch(function(errs) {
                return console.error(errs);
              })
            ];
          case 1:
            _state.sent();
            return [
              2
            ];
        }
      });
    });
    return function uploadAction2(tasks) {
      return _ref.apply(this, arguments);
    };
  }();
  var handleItemClick = function(file, index2) {
    onFileItemClick === null || onFileItemClick === void 0 ? void 0 : onFileItemClick(file, index2);
  };
  var renderImageUploader = function() {
    var shouldShow = Number(maxCount) > fileList.length && previewType === "picture";
    return shouldShow && import_react212.default.createElement("div", {
      className: (0, import_classnames53.default)("nut-uploader-upload", previewType, {
        "nut-uploader-upload-disabled": disabled
      })
    }, import_react212.default.createElement("div", {
      className: "nut-uploader-icon"
    }, uploadIcon, import_react212.default.createElement("span", {
      className: "nut-uploader-icon-tip"
    }, uploadLabel)), import_react212.default.createElement("input", {
      className: "nut-uploader-input",
      type: "file",
      capture,
      name: name2,
      accept,
      disabled,
      multiple,
      onChange: fileChange
    }));
  };
  var renderListUploader = function() {
    if (previewType !== "list")
      return null;
    return import_react212.default.createElement("div", {
      className: "nut-uploader-slot"
    }, listUploadRender || import_react212.default.createElement(button_default, {
      size: "small",
      type: "primary"
    }, locale.uploader.list), Number(maxCount) > fileList.length && import_react212.default.createElement("input", {
      className: "nut-uploader-input",
      type: "file",
      capture,
      name: name2,
      accept,
      disabled,
      multiple,
      onChange: fileChange
    }));
  };
  return import_react212.default.createElement("div", _object_spread({
    className: classes
  }, restProps), renderListUploader(), import_react212.default.createElement(Preview, {
    fileList,
    previewType,
    deletable,
    onDeleteItem,
    handleItemClick,
    previewUrl,
    children: children2,
    deleteIcon
  }), renderImageUploader());
};
var Uploader = import_react212.default.forwardRef(InternalUploader);
Uploader.displayName = "NutUploader";

// node_modules/@nutui/nutui-react/dist/es/packages/uploader/index.js
var uploader_default = Uploader;

// node_modules/@nutui/nutui-react/dist/es/packages/actionsheet/actionsheet.js
var import_react213 = __toESM(require_react());
var defaultProps59 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  visible: false,
  description: "",
  options: [],
  optionKey: {
    name: "name",
    description: "description"
  },
  cancelText: "",
  onCancel: function() {
  },
  onSelect: function() {
  }
});
var ActionSheet = function(props) {
  var _mergeProps = mergeProps(defaultProps59, props), children2 = _mergeProps.children, cancelText = _mergeProps.cancelText, optionKey = _mergeProps.optionKey, title = _mergeProps.title, description = _mergeProps.description, options2 = _mergeProps.options, onCancel = _mergeProps.onCancel, onSelect = _mergeProps.onSelect, visible = _mergeProps.visible, className = _mergeProps.className, style = _mergeProps.style, rest = _object_without_properties(_mergeProps, [
    "children",
    "cancelText",
    "optionKey",
    "title",
    "description",
    "options",
    "onCancel",
    "onSelect",
    "visible",
    "className",
    "style"
  ]);
  var classPrefix33 = "nut-actionsheet";
  var cancelActionSheet = function() {
    onCancel && onCancel();
  };
  var chooseItem = function(item, index2) {
    if (!item.disabled) {
      onSelect && onSelect(item, index2);
    }
  };
  return import_react213.default.createElement(popup_default, _object_spread_props(_object_spread({}, rest), {
    round: true,
    visible,
    position: "bottom",
    title,
    description,
    className: classPrefix33,
    onClose: function() {
      onCancel && onCancel();
    }
  }), import_react213.default.createElement("div", {
    className: "".concat(className),
    style
  }, options2.length ? import_react213.default.createElement("div", {
    className: "".concat(classPrefix33, "-list")
  }, options2.map(function(item, index2) {
    var statusClass = "".concat(item.disabled ? "".concat(classPrefix33, "-item-disabled") : "", " ").concat(item.danger ? "".concat(classPrefix33, "-item-danger") : "");
    return import_react213.default.createElement("div", {
      className: "".concat(classPrefix33, "-item ").concat(statusClass),
      key: index2,
      onClick: function() {
        return chooseItem(item, index2);
      }
    }, import_react213.default.createElement("div", {
      className: "".concat(classPrefix33, "-item-name ").concat(statusClass)
    }, item[optionKey.name]), import_react213.default.createElement("div", {
      className: "".concat(classPrefix33, "-item-description ").concat(statusClass)
    }, item[optionKey.description]));
  })) : children2, cancelText && import_react213.default.createElement("div", {
    className: "".concat(classPrefix33, "-cancel"),
    onClick: function() {
      return cancelActionSheet();
    }
  }, cancelText)), import_react213.default.createElement("div", {
    className: "".concat(classPrefix33, "-safe-area")
  }));
};
ActionSheet.displayName = "NutActionSheet";

// node_modules/@nutui/nutui-react/dist/es/packages/actionsheet/index.js
var actionsheet_default = ActionSheet;

// node_modules/@nutui/nutui-react/dist/es/packages/dialog/dialog.js
var import_react217 = __toESM(require_react());
var import_classnames55 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/dialog/confirm.js
var import_react215 = __toESM(require_react());

// node_modules/@nutui/nutui-react/dist/es/types/spec/address/base.js
var import_react214 = __toESM(require_react());

// node_modules/@nutui/nutui-react/dist/es/types/spec/dialog/base.js
var destroyList = [];

// node_modules/@nutui/nutui-react/dist/es/packages/dialog/confirm.js
function ConfirmDialog(props) {
  return import_react215.default.createElement(Dialog, props, props.content);
}
var confirm = function(config3, renderFunc) {
  var div2 = document.createElement("div");
  document.body.appendChild(div2);
  var dialogConfig = _object_spread_props(_object_spread({}, config3), {
    visible: false
  });
  var render2 = function(props, callback) {
    render(import_react215.default.createElement(ConfirmDialog, _object_spread_props(_object_spread({}, props), {
      onCancel: function() {
        return onCancel();
      }
    })), div2);
    callback && callback();
  };
  var renderFunction = renderFunc || render2;
  var onConfirm = function() {
    var _onConfirm = config3.onConfirm || config3.onConfirm;
    var ret = _onConfirm === null || _onConfirm === void 0 ? void 0 : _onConfirm();
    if (ret && ret.then) {
      renderFunction(dialogConfig);
      return ret.then(function() {
        onCancel(true);
      }, function(e2) {
        console.error(e2);
        renderFunction(dialogConfig);
      });
    }
    if (!ret) {
      onCancel(true);
    }
  };
  dialogConfig.onConfirm = onConfirm;
  dialogConfig.visible = true;
  renderFunction(dialogConfig);
  var destroy = function() {
    unmount(div2);
    if (div2 === null || div2 === void 0 ? void 0 : div2.parentNode) {
      div2.parentNode.removeChild(div2);
    }
    for (var i6 = 0; i6 < destroyList.length; i6++) {
      var fn = destroyList[i6];
      if (fn === close) {
        destroyList.splice(i6, 1);
        break;
      }
    }
  };
  var onCancel = function(confirm2) {
    !confirm2 && config3.onCancel && config3.onCancel();
    dialogConfig.visible = false;
    dialogConfig.onClose = function() {
      config3.onClose && config3.onClose();
    };
    renderFunction(dialogConfig, function() {
      destroy();
    });
  };
  var update3 = function(newConfig) {
    dialogConfig = _object_spread({}, dialogConfig, newConfig);
    renderFunction(dialogConfig);
  };
  var close = function() {
    dialogConfig.visible = false;
    dialogConfig.onClose = function() {
      config3.onClose && config3.onClose();
      destroy();
    };
    renderFunction(dialogConfig);
  };
  destroyList.push(close);
  return {
    close,
    update: update3
  };
};
var confirm_default = confirm;

// node_modules/@nutui/nutui-react/dist/es/packages/dialog/content.js
var import_react216 = __toESM(require_react());
var import_classnames54 = __toESM(require_classnames());
var defaultContentProps = {
  visible: false,
  title: "",
  header: "",
  footer: "",
  close: "",
  footerDirection: "horizontal",
  onClick: function() {
  }
};
var Content = function(props) {
  var _$_object_spread = _object_spread({}, defaultContentProps, props), visible = _$_object_spread.visible, title = _$_object_spread.title, header = _$_object_spread.header, footer = _$_object_spread.footer, close = _$_object_spread.close, footerDirection = _$_object_spread.footerDirection, children2 = _$_object_spread.children, style = _$_object_spread.style, className = _$_object_spread.className, onClick = _$_object_spread.onClick;
  var classPrefix33 = "nut-dialog";
  var renderHeader = function() {
    return title && import_react216.default.createElement("div", {
      className: "".concat(classPrefix33, "-header")
    }, title);
  };
  var renderFooter = function() {
    return footer && import_react216.default.createElement("div", {
      className: (0, import_classnames54.default)("".concat(classPrefix33, "-footer"), _define_property({}, footerDirection, footerDirection))
    }, footer);
  };
  var handleClick = function(e2) {
    onClick && onClick(e2);
  };
  return import_react216.default.createElement("div", {
    className: (0, import_classnames54.default)("".concat(classPrefix33, "-outer"), className),
    style,
    onClick: handleClick
  }, close, header, import_react216.default.createElement("div", {
    className: classPrefix33,
    style: {
      display: visible ? "flex" : "none"
    }
  }, renderHeader(), import_react216.default.createElement("div", {
    className: "".concat(classPrefix33, "-content")
  }, children2), renderFooter()));
};
Content.displayName = "NutContent";

// node_modules/@nutui/nutui-react/dist/es/packages/dialog/dialog.js
var defaultProps60 = _object_spread_props(_object_spread({}, defaultOverlayProps, defaultContentProps), {
  title: "",
  content: "",
  header: "",
  footer: "",
  confirmText: "",
  cancelText: "",
  closeOnOverlayClick: true,
  hideConfirmButton: false,
  hideCancelButton: false,
  disableConfirmButton: false,
  footerDirection: "horizontal",
  lockScroll: true,
  closeIconPosition: "bottom",
  closeIcon: false,
  overlay: true,
  overlayStyle: {},
  overlayClassName: "nut-dialog-overlay",
  zIndex: 1200,
  beforeCancel: function() {
    return true;
  },
  beforeClose: function() {
    return true;
  },
  onCancel: function() {
  },
  onClose: function() {
  },
  onOverlayClick: function() {
    return true;
  }
});
var BaseDialog = function(props, ref) {
  var _mergeProps = mergeProps(defaultProps60, props), closeOnOverlayClick = _mergeProps.closeOnOverlayClick, confirmText = _mergeProps.confirmText, cancelText = _mergeProps.cancelText, children2 = _mergeProps.children, className = _mergeProps.className, closeIconPosition = _mergeProps.closeIconPosition, closeIcon = _mergeProps.closeIcon, content2 = _mergeProps.content, disableConfirmButton = _mergeProps.disableConfirmButton, footer = _mergeProps.footer, footerDirection = _mergeProps.footerDirection, header = _mergeProps.header, hideConfirmButton = _mergeProps.hideConfirmButton, hideCancelButton = _mergeProps.hideCancelButton, lockScroll = _mergeProps.lockScroll, overlay = _mergeProps.overlay, overlayStyle = _mergeProps.overlayStyle, overlayClassName = _mergeProps.overlayClassName, style = _mergeProps.style, title = _mergeProps.title, visible = _mergeProps.visible, zIndex = _mergeProps.zIndex, beforeCancel = _mergeProps.beforeCancel, beforeClose = _mergeProps.beforeClose, onClose = _mergeProps.onClose, onCancel = _mergeProps.onCancel, onConfirm = _mergeProps.onConfirm, onOverlayClick = _mergeProps.onOverlayClick;
  var classPrefix33 = "nut-dialog";
  var locale = useConfig().locale;
  var _useState = _sliced_to_array((0, import_react217.useState)(false), 2), loading = _useState[0], setLoading = _useState[1];
  var renderFooter = function() {
    if (footer === null)
      return "";
    var handleCancel = function(e2) {
      e2.stopPropagation();
      if (!(beforeCancel === null || beforeCancel === void 0 ? void 0 : beforeCancel()))
        return;
      if (!(beforeClose === null || beforeClose === void 0 ? void 0 : beforeClose()))
        return;
      onClose();
      onCancel();
    };
    var handleOk = function() {
      var _ref = _async_to_generator(function(e2) {
        var e1;
        return __generator(this, function(_state) {
          switch (_state.label) {
            case 0:
              e2.stopPropagation();
              setLoading(true);
              _state.label = 1;
            case 1:
              _state.trys.push([
                1,
                3,
                ,
                4
              ]);
              return [
                4,
                onConfirm === null || onConfirm === void 0 ? void 0 : onConfirm(e2)
              ];
            case 2:
              _state.sent();
              setLoading(false);
              onClose();
              return [
                3,
                4
              ];
            case 3:
              e1 = _state.sent();
              setLoading(false);
              return [
                3,
                4
              ];
            case 4:
              return [
                2
              ];
          }
        });
      });
      return function handleOk2(e2) {
        return _ref.apply(this, arguments);
      };
    }();
    var btnClass = hideCancelButton || hideConfirmButton ? "".concat(classPrefix33, "-footer-block") : "";
    var renderCancelOfVertical = function() {
      return !hideCancelButton && import_react217.default.createElement("div", {
        style: {
          order: 2
        },
        className: "".concat(classPrefix33, "-footer-cancel ").concat(btnClass),
        onClick: function(e2) {
          return handleCancel(e2);
        }
      }, cancelText || locale.cancel);
    };
    var renderCancel = function() {
      return !hideCancelButton && import_react217.default.createElement(button_default, {
        type: "default",
        size: "large",
        className: "".concat(classPrefix33, "-footer-cancel ").concat(btnClass),
        onClick: function(e2) {
          return handleCancel(e2);
        }
      }, cancelText || locale.cancel);
    };
    var renderConfirm = function() {
      return !hideConfirmButton && import_react217.default.createElement(button_default, {
        type: "primary",
        size: "large",
        className: (0, import_classnames55.default)("".concat(classPrefix33, "-footer-ok ").concat(btnClass), {
          disabled: disableConfirmButton
        }),
        disabled: disableConfirmButton,
        onClick: function(e2) {
          return handleOk(e2);
        },
        loading
      }, confirmText || locale.confirm);
    };
    return footer || import_react217.default.createElement(import_react217.default.Fragment, null, footerDirection === "vertical" ? import_react217.default.createElement(import_react217.default.Fragment, null, renderConfirm(), renderCancelOfVertical()) : import_react217.default.createElement(import_react217.default.Fragment, null, renderCancel(), renderConfirm()));
  };
  var renderCloseIcon = function() {
    if (!closeIcon)
      return null;
    var handleCancel = function() {
      if (!(beforeCancel === null || beforeCancel === void 0 ? void 0 : beforeCancel()))
        return;
      if (!(beforeClose === null || beforeClose === void 0 ? void 0 : beforeClose()))
        return;
      onClose();
      onCancel();
    };
    var _obj;
    var closeClasses = (0, import_classnames55.default)((_obj = {}, _define_property(_obj, "".concat(classPrefix33, "-close"), true), _define_property(_obj, "".concat(classPrefix33, "-close-").concat(closeIconPosition), true), _obj));
    var systomIcon = closeIconPosition !== "bottom" ? import_react217.default.createElement(n6, null) : import_react217.default.createElement(n8, null);
    return import_react217.default.createElement("div", {
      className: closeClasses,
      onClick: handleCancel
    }, import_react217.default.isValidElement(closeIcon) ? closeIcon : systomIcon);
  };
  var onHandleClickOverlay = function(e2) {
    if (closeOnOverlayClick && visible && e2.target === e2.currentTarget) {
      var closed = onOverlayClick && onOverlayClick(e2);
      closed && onClose();
      closed && onCancel();
    }
  };
  var renderContent = function() {
    return import_react217.default.createElement(CSSTransition_default, {
      in: visible,
      timeout: 300,
      classNames: "fadeDialog",
      unmountOnExit: true,
      appear: true
    }, import_react217.default.createElement(Content, {
      className,
      style: _object_spread({
        zIndex
      }, style),
      title,
      header,
      close: renderCloseIcon(),
      footer: renderFooter(),
      footerDirection,
      visible
    }, content2 || children2));
  };
  return import_react217.default.createElement("div", {
    style: {
      display: visible ? "block" : "none"
    }
  }, overlay && import_react217.default.createElement(overlay_default, {
    zIndex,
    visible,
    style: overlayStyle,
    className: overlayClassName,
    closeOnOverlayClick,
    lockScroll,
    onClick: onHandleClickOverlay
  }), renderContent());
};
var Dialog = (0, import_react217.forwardRef)(BaseDialog);
Dialog.confirm = function(props) {
  return confirm_default(props);
};
[
  "alert"
].forEach(function() {
  ;
  Dialog.alert = function(props) {
    return confirm_default(_object_spread({}, props));
  };
});
Dialog.displayName = "NutDialog";

// node_modules/@nutui/nutui-react/dist/es/packages/dialog/index.js
var dialog_default = Dialog;

// node_modules/@nutui/nutui-react/dist/es/packages/drag/drag.js
var import_react218 = __toESM(require_react());
var defaultProps61 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  attract: false,
  direction: void 0,
  boundary: {
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  }
});
var Drag = function(props) {
  var _ref = _object_spread({}, defaultProps61, props), attract = _ref.attract, direction = _ref.direction, boundary = _ref.boundary, onDrag = _ref.onDrag, onDragStart = _ref.onDragStart, onDragEnd = _ref.onDragEnd, children2 = _ref.children, className = _ref.className, style = _ref.style, reset = _object_without_properties(_ref, [
    "attract",
    "direction",
    "boundary",
    "onDrag",
    "onDragStart",
    "onDragEnd",
    "children",
    "className",
    "style"
  ]);
  var classPrefix33 = "nut-drag";
  var _useState = _sliced_to_array((0, import_react218.useState)(boundary), 2), boundaryState = _useState[0], setBoundaryState = _useState[1];
  var myDrag = (0, import_react218.useRef)(null);
  var _useSpring = _sliced_to_array(useSpring(function() {
    return {
      x: 0,
      y: 0
    };
  }), 2), currstyle = _useSpring[0], api = _useSpring[1];
  var middleLine = (0, import_react218.useRef)(0);
  var getInfo = function() {
    var el = myDrag.current;
    if (el) {
      var offsetTop = el.offsetTop, offsetLeft = el.offsetLeft;
      var _el_querySelector = el.querySelector(".".concat(classPrefix33, "-inner")), offsetWidth = _el_querySelector.offsetWidth, offsetHeight = _el_querySelector.offsetHeight;
      var _document_documentElement = document.documentElement, clientWidth = _document_documentElement.clientWidth, clientHeight = _document_documentElement.clientHeight;
      var top = boundary.top, left = boundary.left, bottom = boundary.bottom, right = boundary.right;
      setBoundaryState({
        top: -offsetTop + top,
        left: -offsetLeft + left,
        bottom: clientHeight - offsetHeight - offsetTop - bottom,
        right: clientWidth - offsetWidth - offsetLeft - right
      });
      middleLine.current = clientWidth - offsetWidth - offsetLeft - (clientWidth - offsetWidth) / 2;
    }
  };
  var bind = useDrag(function(state) {
    var down = state.down, last = state.last, _state_offset = _sliced_to_array(state.offset, 2), x2 = _state_offset[0], y = _state_offset[1], first = state.first;
    first && (onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart());
    onDrag === null || onDrag === void 0 ? void 0 : onDrag({
      offset: [
        x2,
        y
      ]
    });
    last && (onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd({
      offset: [
        x2,
        y
      ]
    }));
    api.start({
      x: x2,
      y,
      immediate: down
    });
    if (last) {
      if (direction !== "y" && attract) {
        if (x2 < middleLine.current) {
          api.start({
            x: boundaryState.left,
            y,
            immediate: down
          });
        } else {
          api.start({
            x: boundaryState.right,
            y,
            immediate: down
          });
        }
      }
    }
  }, {
    from: function() {
      return [
        currstyle.x.get(),
        currstyle.y.get()
      ];
    },
    axis: direction,
    bounds: boundaryState
  });
  (0, import_react218.useEffect)(function() {
    getInfo();
  }, [
    myDrag
  ]);
  return import_react218.default.createElement("div", _object_spread_props(_object_spread({
    style,
    className: "".concat(classPrefix33, " ").concat(className)
  }, reset), {
    ref: myDrag
  }), import_react218.default.createElement(animated.div, _object_spread_props(_object_spread({
    style: currstyle
  }, bind()), {
    className: "".concat(classPrefix33, "-inner")
  }), children2));
};
Drag.displayName = "NutDrag";

// node_modules/@nutui/nutui-react/dist/es/packages/drag/index.js
var drag_default = Drag;

// node_modules/@nutui/nutui-react/dist/es/packages/empty/empty.js
var import_react220 = __toESM(require_react());
var import_classnames56 = __toESM(require_classnames());
var defaultStatus = {
  empty: "https://storage.360buyimg.com/imgtools/30186cfda0-0d3eee40-c0ac-11ee-9382-9125782aa3b8.png",
  error: "https://storage.360buyimg.com/imgtools/f3278d0ebb-0ce360c0-c0ac-11ee-8375-193101bb1a46.png",
  network: "https://storage.360buyimg.com/imgtools/43c30f7e29-0d483d10-c0ac-11ee-bec4-eb4d2a09a51d.png"
};
var defaultProps62 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  title: "",
  description: "",
  imageSize: "",
  size: "base",
  status: "empty",
  actions: []
});
var classPrefix18 = "nut-empty";
var Empty = function(props) {
  var _ref = _object_spread({}, defaultProps62, props), image = _ref.image, imageSize = _ref.imageSize, title = _ref.title, description = _ref.description, children2 = _ref.children, className = _ref.className, size = _ref.size, status = _ref.status, actions = _ref.actions, style = _ref.style, rest = _object_without_properties(_ref, [
    "image",
    "imageSize",
    "title",
    "description",
    "children",
    "className",
    "size",
    "status",
    "actions",
    "style"
  ]);
  var _useState = _sliced_to_array((0, import_react220.useState)({}), 2), imgStyle = _useState[0], setImgStyle = _useState[1];
  var imageUrl = image || defaultStatus[status];
  var imageNode = typeof imageUrl === "string" ? import_react220.default.createElement("img", {
    style: {
      width: "100%",
      height: "100%"
    },
    src: imageUrl,
    alt: "empty"
  }) : imageUrl;
  (0, import_react220.useEffect)(function() {
    setImgStyle(function() {
      if (!imageSize) {
        return {};
      }
      if (typeof imageSize === "number") {
        return {
          width: "".concat(imageSize, "px"),
          height: "".concat(imageSize, "px")
        };
      }
      return {
        width: imageSize,
        height: imageSize
      };
    });
  }, [
    imageSize
  ]);
  var cls = (0, import_classnames56.default)(classPrefix18, className);
  return import_react220.default.createElement("div", _object_spread({
    className: cls
  }, rest), import_react220.default.createElement("div", {
    className: "".concat(classPrefix18, "-").concat(size),
    style: imgStyle
  }, imageNode), typeof title === "string" && title ? import_react220.default.createElement("div", {
    className: "".concat(classPrefix18, "-title")
  }, title) : title, typeof description === "string" ? import_react220.default.createElement("div", {
    className: "".concat(classPrefix18, "-description")
  }, description) : description, actions.length ? import_react220.default.createElement("div", {
    className: "".concat(classPrefix18, "-actions-").concat(size)
  }, actions.map(function(action, index2) {
    var text3 = action.text, rest2 = _object_without_properties(action, [
      "text"
    ]);
    return import_react220.default.createElement("div", {
      className: "".concat(classPrefix18, "-action"),
      key: index2
    }, import_react220.default.createElement(button_default, rest2, action === null || action === void 0 ? void 0 : action.text));
  })) : null, children2);
};
Empty.displayName = "NutEmpty";

// node_modules/@nutui/nutui-react/dist/es/packages/empty/index.js
var empty_default = Empty;

// node_modules/@nutui/nutui-react/dist/es/packages/infiniteloading/infiniteloading.js
var import_react221 = __toESM(require_react());
var import_classnames57 = __toESM(require_classnames());
var defaultProps63 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  type: "default",
  hasMore: true,
  threshold: 200,
  target: "",
  capture: false,
  pullRefresh: false
});
var classPrefix19 = "nut-infiniteloading";
var InfiniteLoading = function(props) {
  var getBottomTipsText = function getBottomTipsText2() {
    if (isInfiniting) {
      return loadingText || locale.infiniteloading.loadText;
    }
    if (!hasMore) {
      return loadMoreText || locale.infiniteloading.loadMoreText;
    }
    return null;
  };
  var locale = useConfig().locale;
  var _ref = _object_spread({}, defaultProps63, props), children2 = _ref.children, type4 = _ref.type, hasMore = _ref.hasMore, threshold = _ref.threshold, target = _ref.target, capture = _ref.capture, pullRefresh = _ref.pullRefresh, pullingText = _ref.pullingText, loadingText = _ref.loadingText, loadMoreText = _ref.loadMoreText, className = _ref.className, onRefresh = _ref.onRefresh, onLoadMore = _ref.onLoadMore, onScroll2 = _ref.onScroll, restProps = _object_without_properties(_ref, [
    "children",
    "type",
    "hasMore",
    "threshold",
    "target",
    "capture",
    "pullRefresh",
    "pullingText",
    "loadingText",
    "loadMoreText",
    "className",
    "onRefresh",
    "onLoadMore",
    "onScroll"
  ]);
  var _useState = _sliced_to_array((0, import_react221.useState)(false), 2), isInfiniting = _useState[0], setIsInfiniting = _useState[1];
  var scroller = (0, import_react221.useRef)(null);
  var refreshTop = (0, import_react221.useRef)(null);
  var scrollEl = (0, import_react221.useRef)(null);
  var isTouching = (0, import_react221.useRef)(false);
  var beforeScrollTop = (0, import_react221.useRef)(0);
  var refreshMaxH = (0, import_react221.useRef)(0);
  var y = (0, import_react221.useRef)(0);
  var distance = (0, import_react221.useRef)(0);
  var classes = (0, import_classnames57.default)(classPrefix19, className, "".concat(classPrefix19, "-").concat(type4));
  (0, import_react221.useEffect)(function() {
    var _scrollEl_current;
    if (target && document.getElementById(target)) {
      scrollEl.current = document.getElementById(target);
    } else {
      scrollEl.current = window;
    }
    (_scrollEl_current = scrollEl.current) === null || _scrollEl_current === void 0 ? void 0 : _scrollEl_current.addEventListener("scroll", handleScroll, capture);
    return function() {
      var _scrollEl_current2;
      (_scrollEl_current2 = scrollEl.current) === null || _scrollEl_current2 === void 0 ? void 0 : _scrollEl_current2.removeEventListener("scroll", handleScroll, capture);
    };
  }, [
    hasMore,
    isInfiniting,
    onLoadMore
  ]);
  (0, import_react221.useEffect)(function() {
    var element = scroller.current;
    element.addEventListener("touchmove", touchMove, {
      passive: false
    });
    return function() {
      element.removeEventListener("touchmove", touchMove, {
        passive: false
      });
    };
  }, []);
  var getStyle = function() {
    return {
      height: distance.current < 0 ? "0px" : "".concat(distance.current, "px"),
      transition: isTouching.current ? "height 0s cubic-bezier(0.25,0.1,0.25,1)" : "height 0.2s cubic-bezier(0.25,0.1,0.25,1)"
    };
  };
  var handleScroll = function() {
    var _ref2 = _async_to_generator(function() {
      return __generator(this, function(_state) {
        switch (_state.label) {
          case 0:
            if (!isScrollAtBottom() || !hasMore || isInfiniting) {
              return [
                2
              ];
            }
            setIsInfiniting(true);
            return [
              4,
              onLoadMore === null || onLoadMore === void 0 ? void 0 : onLoadMore()
            ];
          case 1:
            _state.sent();
            infiniteDone();
            return [
              2
            ];
        }
      });
    });
    return function handleScroll2() {
      return _ref2.apply(this, arguments);
    };
  }();
  var infiniteDone = function() {
    setIsInfiniting(false);
  };
  var getRefreshTop = function() {
    return refreshTop.current;
  };
  var refreshDone = function() {
    distance.current = 0;
    getRefreshTop().style.height = "".concat(distance.current, "px");
    isTouching.current = false;
  };
  var touchStart = function(event) {
    if (beforeScrollTop.current === 0 && !isTouching.current && pullRefresh) {
      y.current = event.touches[0].pageY;
      isTouching.current = true;
      var childHeight = getRefreshTop().firstElementChild.offsetHeight;
      refreshMaxH.current = Math.floor(childHeight * 1 + 10);
    }
  };
  var touchMove = function(event) {
    distance.current = event.touches[0].pageY - y.current;
    if (distance.current > 0 && isTouching.current) {
      event.preventDefault();
      if (distance.current >= refreshMaxH.current) {
        distance.current = refreshMaxH.current;
        getRefreshTop().style.height = "".concat(distance.current, "px");
      } else {
        getRefreshTop().style.height = "".concat(distance.current, "px");
      }
    } else {
      distance.current = 0;
      getRefreshTop().style.height = "".concat(distance.current, "px");
      isTouching.current = false;
    }
  };
  var touchEnd = function() {
    var _ref2 = _async_to_generator(function() {
      return __generator(this, function(_state) {
        switch (_state.label) {
          case 0:
            if (!(distance.current < refreshMaxH.current))
              return [
                3,
                1
              ];
            distance.current = 0;
            getRefreshTop().style.height = "".concat(distance.current, "px");
            isTouching.current = false;
            return [
              3,
              3
            ];
          case 1:
            return [
              4,
              onRefresh === null || onRefresh === void 0 ? void 0 : onRefresh()
            ];
          case 2:
            _state.sent();
            refreshDone();
            _state.label = 3;
          case 3:
            return [
              2
            ];
        }
      });
    });
    return function touchEnd2() {
      return _ref2.apply(this, arguments);
    };
  }();
  var getWindowScrollTop = function() {
    return window.scrollY !== void 0 ? window.scrollY : (document.documentElement || document.body.parentNode || document.body).scrollTop;
  };
  var calculateTopPosition = function(el) {
    return !el ? 0 : el.offsetTop + calculateTopPosition(el.offsetParent);
  };
  var isScrollAtBottom = function() {
    var offsetDistance = 0;
    var resScrollTop = 0;
    var direction = "down";
    var windowScrollTop = getWindowScrollTop();
    if (!target || !document.getElementById(target)) {
      if (scroller.current) {
        offsetDistance = calculateTopPosition(scroller.current) + scroller.current.offsetHeight - windowScrollTop - window.innerHeight;
      }
      resScrollTop = windowScrollTop;
    } else {
      var _scrollEl_current = scrollEl.current, scrollHeight = _scrollEl_current.scrollHeight, clientHeight = _scrollEl_current.clientHeight, scrollTop = _scrollEl_current.scrollTop;
      offsetDistance = scrollHeight - clientHeight - scrollTop;
      resScrollTop = scrollTop;
    }
    if (beforeScrollTop.current > resScrollTop) {
      direction = "up";
    } else {
      direction = "down";
    }
    beforeScrollTop.current = resScrollTop;
    onScroll2 && onScroll2(resScrollTop);
    return offsetDistance <= threshold && direction === "down";
  };
  return import_react221.default.createElement("div", _object_spread({
    className: classes,
    ref: scroller,
    onTouchStart: touchStart,
    onTouchEnd: touchEnd
  }, restProps), import_react221.default.createElement("div", {
    className: "nut-infinite-top",
    ref: refreshTop,
    style: getStyle()
  }, import_react221.default.createElement("div", {
    className: "nut-infinite-top-tips"
  }, pullingText || locale.infiniteloading.pullRefreshText)), import_react221.default.createElement("div", {
    className: "nut-infinite-container"
  }, children2), import_react221.default.createElement("div", {
    className: "nut-infinite-bottom"
  }, import_react221.default.createElement("div", {
    className: "nut-infinite-bottom-tips"
  }, getBottomTipsText())));
};
InfiniteLoading.displayName = "NutInfiniteLoading";

// node_modules/@nutui/nutui-react/dist/es/packages/infiniteloading/index.js
var infiniteloading_default = InfiniteLoading;

// node_modules/@nutui/nutui-react/dist/es/packages/loading/loading.js
var import_react222 = __toESM(require_react());
var import_classnames58 = __toESM(require_classnames());
var loadingMap = {
  circular: d5,
  spinner: s
};
var defaultProps64 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  // 对比一下,个人感觉还是Loading1比较好看一些,所以用它作为了默认的loading图标
  type: "circular",
  direction: "horizontal",
  lottieProps: {}
});
var Loading = import_react222.default.forwardRef(function(props, ref) {
  var _ref = _object_spread({}, defaultProps64, props), className = _ref.className, style = _ref.style, children2 = _ref.children, direction = _ref.direction, icon = _ref.icon, rest = _object_without_properties(_ref, [
    "className",
    "style",
    "children",
    "direction",
    "icon"
  ]);
  var classPrefix33 = "nut-loading";
  var getLoadingIcon = function() {
    var LoadingIcon = loadingMap[rest.type] || d5;
    return import_react222.default.createElement(LoadingIcon, {
      className: "".concat(classPrefix33, "-icon")
    });
  };
  var iconboxClassName = function() {
    return !icon ? "".concat(classPrefix33, "-icon-box") : "";
  };
  return import_react222.default.createElement("div", {
    className: (0, import_classnames58.default)(classPrefix33, direction === "vertical" ? "".concat(classPrefix33, "-vertical") : "", className),
    style
  }, import_react222.default.createElement("div", {
    className: iconboxClassName()
  }, icon || getLoadingIcon()), children2 ? import_react222.default.createElement("div", {
    className: "".concat(classPrefix33, "-text")
  }, children2) : null);
});
Loading.displayName = "NutLoading";

// node_modules/@nutui/nutui-react/dist/es/packages/loading/index.js
var loading_default = Loading;

// node_modules/@nutui/nutui-react/dist/es/packages/noticebar/noticebar.js
var import_react223 = __toESM(require_react());
var import_classnames59 = __toESM(require_classnames());
var defaultProps65 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  align: "left",
  direction: "horizontal",
  list: [],
  duration: 1e3,
  height: 40,
  content: "",
  closeable: false,
  wrap: false,
  leftIcon: import_react223.default.createElement(n11, {
    width: 16,
    height: 16
  }),
  rightIcon: null,
  right: null,
  delay: 1,
  scrollable: null,
  speed: 50
});
var NoticeBar = function(props) {
  var rtl = useRtl();
  var _$_object_spread = _object_spread({}, defaultProps65, props), children2 = _$_object_spread.children, className = _$_object_spread.className, style = _$_object_spread.style, align = _$_object_spread.align, direction = _$_object_spread.direction, list = _$_object_spread.list, duration = _$_object_spread.duration, height2 = _$_object_spread.height, content2 = _$_object_spread.content, closeable = _$_object_spread.closeable, wrap = _$_object_spread.wrap, leftIcon = _$_object_spread.leftIcon, rightIcon = _$_object_spread.rightIcon, right = _$_object_spread.right, delay = _$_object_spread.delay, scrollable = _$_object_spread.scrollable, speed = _$_object_spread.speed, close = _$_object_spread.close, click = _$_object_spread.click, onClose = _$_object_spread.onClose, onClick = _$_object_spread.onClick, onItemClick = _$_object_spread.onItemClick;
  var classPrefix33 = "nut-noticebar";
  var wrapRef = (0, import_react223.useRef)(null);
  var contentRef = (0, import_react223.useRef)(null);
  var _useState = _sliced_to_array((0, import_react223.useState)(true), 2), showNoticeBar = _useState[0], SetShowNoticeBar = _useState[1];
  var scrollList = (0, import_react223.useRef)([]);
  var _useState1 = _sliced_to_array((0, import_react223.useState)(0), 2), wrapWidth = _useState1[0], SetWrapWidth = _useState1[1];
  var _useState2 = _sliced_to_array((0, import_react223.useState)(true), 2), firstRound = _useState2[0], SetFirstRound = _useState2[1];
  var _useState3 = _sliced_to_array((0, import_react223.useState)(0), 2), animationDuration = _useState3[0], SetAnimationDuration = _useState3[1];
  var _useState4 = _sliced_to_array((0, import_react223.useState)(0), 2), offsetWidth = _useState4[0], SetOffsetW = _useState4[1];
  var _useState5 = _sliced_to_array((0, import_react223.useState)(""), 2), animationClass = _useState5[0], SetAnimationClass = _useState5[1];
  var _useState6 = _sliced_to_array((0, import_react223.useState)(false), 2), animate = _useState6[0], SetAnimate = _useState6[1];
  var _useState7 = _sliced_to_array((0, import_react223.useState)(0), 2), timer = _useState7[0], SetTimer = _useState7[1];
  var _useState8 = _sliced_to_array((0, import_react223.useState)(null), 2), isCanScroll = _useState8[0], SetIsCanScroll = _useState8[1];
  var isVertical = direction === "vertical";
  var _useState9 = _sliced_to_array((0, import_react223.useState)(null), 2), rect = _useState9[0], setRect = _useState9[1];
  var active2 = 0;
  var _useState10 = _sliced_to_array((0, import_react223.useState)(false), 2), ready = _useState10[0], setReady = _useState10[1];
  var container = (0, import_react223.useRef)(null);
  var innerRef = (0, import_react223.useRef)(null);
  var swiperRef = (0, import_react223.useRef)({
    moving: false,
    autoplayTimer: null,
    width: 0,
    height: 0,
    offset: 0,
    size: 0
  });
  var _useState11 = _sliced_to_array((0, import_react223.useState)([]), 2), childOffset = _useState11[0], setChildOffset = _useState11[1];
  var _useState12 = _sliced_to_array((0, import_react223.useState)(0), 2), offset = _useState12[0], setOffset = _useState12[1];
  var _useMemo = (0, import_react223.useMemo)(function() {
    var childCount2 = 0;
    var childs2 = import_react223.default.Children.map(children2, function(child) {
      if (!import_react223.default.isValidElement(child))
        return null;
      childCount2++;
      return child;
    });
    return {
      childs: childs2,
      childCount: childCount2
    };
  }, [
    children2
  ]), childs = _useMemo.childs, childCount = _useMemo.childCount;
  var trackSize = childCount * Number(height2);
  var minOffset = function() {
    if (rect) {
      var base = isVertical ? rect.height : rect.width;
      return base - Number(height2) * childCount;
    }
    return 0;
  }();
  (0, import_react223.useEffect)(function() {
    if (isVertical) {
      if (children2) {
        scrollList.current = [].concat(childs);
      } else {
        scrollList.current = [].concat(list);
        startRollEasy();
      }
    } else {
      initScrollWrap(content2);
    }
    return function() {
      clearInterval(timer);
    };
  }, []);
  (0, import_react223.useEffect)(function() {
    initScrollWrap(content2);
  }, [
    content2
  ]);
  (0, import_react223.useEffect)(function() {
    if (list && list.length) {
      scrollList.current = [].concat(list);
    }
  }, [
    list
  ]);
  var initScrollWrap = function(value2) {
    if (showNoticeBar === false) {
      return;
    }
    setTimeout(function() {
      if (!wrapRef.current || !contentRef.current) {
        return;
      }
      var wrapW = getRect(wrapRef.current).width;
      var offsetW = getRect(contentRef.current).width;
      var canScroll = align === "left" && scrollable == null ? offsetW > wrapW : scrollable;
      SetIsCanScroll(canScroll);
      if (canScroll) {
        SetWrapWidth(wrapW);
        SetOffsetW(offsetW);
        SetAnimationDuration(offsetW / speed);
        SetAnimationClass("play");
      } else {
        SetAnimationClass("");
      }
    }, 0);
  };
  var handleClick = function(event) {
    click && click(event);
    onClick && onClick(event);
  };
  var onClickIcon = function(event) {
    event.stopPropagation();
    SetShowNoticeBar(!closeable);
    close && close(event);
    onClose && onClose(event);
  };
  var onAnimationEnd = function() {
    SetFirstRound(false);
    setTimeout(function() {
      SetAnimationDuration((offsetWidth + wrapWidth) / speed);
      SetAnimationClass("play-infinite");
    }, 0);
  };
  var time2 = height2 / speed / 4 < 1 ? Number((height2 / speed / 4).toFixed(1)) * 1e3 : ~~(height2 / speed / 4) * 1e3;
  var startRollEasy = function() {
    showhorseLamp();
    var timerCurr = window.setInterval(showhorseLamp, time2 + Number(duration));
    SetTimer(timerCurr);
  };
  var showhorseLamp = function() {
    SetAnimate(true);
    setTimeout(function() {
      scrollList.current.push(scrollList.current[0]);
      scrollList.current.shift();
      SetAnimate(false);
    }, time2);
  };
  var handleClickIcon = function(event) {
    event.stopPropagation();
    SetShowNoticeBar(!closeable);
    close && close(event);
    onClose && onClose(event);
  };
  var isEllipsis = function() {
    if (isCanScroll == null && align === "left") {
      return wrap;
    }
    return !isCanScroll && !wrap;
  };
  var contentStyle = {
    animationDelay: "".concat(firstRound ? delay : 0, "s"),
    animationDuration: "".concat(animationDuration, "s"),
    transform: "translateX(".concat(firstRound ? 0 : "".concat(rtl ? -wrapWidth : wrapWidth, "px"), ")")
  };
  var barStyle = {
    height: isVertical ? "".concat(height2, "px") : ""
  };
  var duringTime = height2 / speed / 4 < 1 ? Number((height2 / speed / 4).toFixed(1)) : ~~(height2 / speed / 4);
  var noDuring = height2 / speed < 1 ? (height2 / speed).toFixed(1) : ~~(height2 / speed);
  var horseLampStyle = {
    transition: animate ? "all ".concat(duringTime === 0 ? noDuring : duringTime, "s") : "",
    marginTop: animate ? "-".concat(height2, "px") : ""
  };
  var init = function() {
    var active3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
    var rects = getRect(container === null || container === void 0 ? void 0 : container.current);
    var _active = Math.max(Math.min(childCount - 1, active3), 0);
    var _height = rects.height;
    trackSize = childCount * Number(_height);
    var targetOffset = getOffset(_active);
    swiperRef.current.moving = true;
    if (ready) {
      swiperRef.current.moving = false;
    }
    active3 = _active;
    setRect(rects);
    setOffset(targetOffset);
    setReady(true);
  };
  (0, import_react223.useEffect)(function() {
    if (ready) {
      stopAutoPlay();
      autoplay();
    }
    return function() {
      setReady(false);
    };
  }, [
    ready
  ]);
  (0, import_react223.useEffect)(function() {
    if (isVertical && children2) {
      init();
      stopAutoPlay();
      autoplay();
    }
  }, [
    children2,
    container === null || container === void 0 ? void 0 : container.current
  ]);
  var stopAutoPlay = function() {
    clearTimeout(swiperRef.current.autoplayTimer);
    swiperRef.current.autoplayTimer = null;
  };
  var autoplay = function() {
    if (childCount <= 1)
      return;
    stopAutoPlay();
    swiperRef.current.autoplayTimer = setTimeout(function() {
      next();
      autoplay();
    }, Number(duration) + 100 * speed);
  };
  var move = function(param) {
    var _param_pace = param.pace, pace = _param_pace === void 0 ? 0 : _param_pace, _param_offset = param.offset, offset2 = _param_offset === void 0 ? 0 : _param_offset;
    if (childCount <= 1)
      return;
    var targetActive = getActive(pace);
    var targetOffset = getOffset(targetActive, offset2);
    if (Array.isArray(children2) && children2[0] && targetOffset !== minOffset) {
      var rightBound = targetOffset < minOffset;
      childOffset[0] = rightBound ? trackSize : 0;
    }
    if (Array.isArray(children2) && children2[childCount - 1] && targetOffset !== 0) {
      var leftBound = targetOffset > 0;
      childOffset[childCount - 1] = leftBound ? -trackSize : 0;
    }
    setChildOffset(childOffset);
    active2 = targetActive;
    setOffset(targetOffset);
    getStyle(targetOffset);
  };
  var next = function() {
    resettPosition();
    requestFrame(function() {
      requestFrame(function() {
        swiperRef.current.moving = false;
        move({
          pace: 1
        });
      });
    });
  };
  var handleItemClick = function(event, value2) {
    onItemClick && onItemClick(event, value2);
  };
  var getStyle = function() {
    var moveOffset = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : offset;
    var target = innerRef.current;
    if (!target) {
      return;
    }
    var _offset = 0;
    var val2 = rect.height - height2;
    _offset = moveOffset + Number(active2 === childCount - 1 && val2 / 2);
    target.style.transitionDuration = "".concat(swiperRef.current.moving ? 0 : duration, "ms");
    target.style.height = "".concat(Number(height2) * childCount, "px");
    target.style.transform = "translate3D(0,".concat(_offset, "px,0)");
  };
  var itemStyle = function(index2) {
    var style2 = {};
    if (height2) {
      style2.height = "".concat(height2, "px");
      style2.lineHeight = "".concat(height2, "px");
    }
    var offset2 = childOffset[index2];
    if (offset2) {
      style2.transform = "translate3D(0,".concat(offset2, "px,0)");
    }
    return style2;
  };
  var getActive = function(pace) {
    if (pace) {
      var _active = active2 + pace;
      return range3(_active, -1, childCount);
    }
    return active2;
  };
  var getOffset = function(active3) {
    var offset2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    var currentPosition = active3 * Number(height2);
    var targetOffset = offset2 - currentPosition;
    return targetOffset;
  };
  var requestFrame = function(fn) {
    window.requestAnimationFrame.call(window, fn);
  };
  var range3 = function(num, min, max) {
    return Math.min(Math.max(num, min), max);
  };
  var resettPosition = function() {
    swiperRef.current.moving = true;
    if (active2 <= -1) {
      move({
        pace: childCount
      });
    }
    if (active2 >= childCount) {
      move({
        pace: -childCount
      });
    }
  };
  var _obj;
  var noticebarClass = (0, import_classnames59.default)((_obj = {}, _define_property(_obj, "".concat(classPrefix33, "-box"), true), _define_property(_obj, "".concat(classPrefix33, "-box-wrapable"), wrap), _define_property(_obj, "".concat(classPrefix33, "-box-").concat(align), true), _obj));
  var cls = (0, import_classnames59.default)(classPrefix33, className);
  (0, import_react223.useEffect)(function() {
    return function() {
      stopAutoPlay();
    };
  }, []);
  return import_react223.default.createElement("div", {
    className: cls,
    style
  }, showNoticeBar && direction === "horizontal" ? import_react223.default.createElement("div", {
    className: noticebarClass,
    style: barStyle,
    onClick: handleClick
  }, leftIcon ? import_react223.default.createElement("div", {
    className: "nut-noticebar-box-left-icon"
  }, leftIcon) : null, import_react223.default.createElement("div", {
    ref: wrapRef,
    className: "nut-noticebar-box-wrap"
  }, import_react223.default.createElement("div", {
    ref: contentRef,
    className: "nut-noticebar-box-wrap-content ".concat(animationClass, " ").concat(isEllipsis() ? "nut-ellipsis" : ""),
    style: contentStyle,
    onAnimationEnd
  }, children2, content2)), right ? import_react223.default.createElement("div", {
    className: "nut-noticebar-box-right"
  }, right) : null, closeable || rightIcon ? import_react223.default.createElement("div", {
    className: "nut-noticebar-box-right-icon",
    onClick: onClickIcon
  }, rightIcon || import_react223.default.createElement(n6, {
    width: 12,
    height: 12
  })) : null) : null, showNoticeBar && scrollList.current.length > 0 && isVertical ? import_react223.default.createElement("div", {
    className: "nut-noticebar-vertical",
    style: barStyle,
    ref: container,
    onClick: handleClick
  }, leftIcon ? import_react223.default.createElement("div", {
    className: "nut-noticebar-box-left-icon"
  }, leftIcon) : null, children2 ? import_react223.default.createElement("div", {
    className: "nut-noticebar-box-wrap",
    ref: innerRef
  }, scrollList.current.map(function(item, index2) {
    return import_react223.default.createElement("div", {
      style: itemStyle(index2),
      key: index2,
      onClick: function(e2) {
        handleItemClick(e2, item);
      }
    }, item);
  })) : import_react223.default.createElement("div", {
    className: "nut-noticebar-box-horseLamp-list",
    style: horseLampStyle
  }, scrollList.current.map(function(item, index2) {
    return (
      // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions
      import_react223.default.createElement("div", {
        className: "nut-noticebar-box-horseLamp-list-item",
        style: {
          height: height2
        },
        key: index2,
        onClick: function(e2) {
          handleItemClick(e2, item);
        }
      }, item)
    );
  })), import_react223.default.createElement("div", {
    className: "nut-noticebar-box-right-icon",
    onClick: function(e2) {
      handleClickIcon(e2);
    }
  }, rightIcon || (closeable ? import_react223.default.createElement(n6, {
    width: 12,
    height: 12
  }) : null))) : null);
};
NoticeBar.displayName = "NutNoticeBar";

// node_modules/@nutui/nutui-react/dist/es/packages/noticebar/index.js
var noticebar_default = NoticeBar;

// node_modules/@nutui/nutui-react/dist/es/packages/notify/notify.js
var React96 = __toESM(require_react());

// node_modules/@nutui/nutui-react/dist/es/packages/notify/Notification.js
var React95 = __toESM(require_react());
var import_classnames60 = __toESM(require_classnames());
var classPrefix20 = "nut-notify";
var _React_PureComponent;
var Notification = function(_superClass) {
  "use strict";
  _inherits(Notification3, _superClass);
  function Notification3(props) {
    _class_call_check(this, Notification3);
    var _this;
    _this = _call_super(this, Notification3, [
      props
    ]), _define_property(_this, "closeTimer", void 0);
    _this.close = _this.close.bind(_this);
    _this.startCloseTimer = _this.startCloseTimer.bind(_this);
    _this.clearCloseTimer = _this.clearCloseTimer.bind(_this);
    _this.clickCover = _this.clickCover.bind(_this);
    _this.state = {
      show: true
    };
    return _this;
  }
  _create_class(Notification3, [
    {
      key: "close",
      value: function close() {
        var _this_props;
        this.setState({
          show: false
        });
        this.clearCloseTimer();
        if (this.props.id) {
          var element = document.getElementById(this.props.id);
          element && element.parentNode && element.parentNode.removeChild(element);
        }
        (_this_props = this.props) === null || _this_props === void 0 ? void 0 : _this_props.onClose();
      }
    },
    {
      key: "startCloseTimer",
      value: function startCloseTimer() {
        var _this = this;
        var duration = this.props.duration;
        if (duration) {
          this.closeTimer = window.setTimeout(function() {
            _this.close();
          }, duration);
        }
      }
    },
    {
      key: "clearCloseTimer",
      value: function clearCloseTimer() {
        if (this.closeTimer) {
          clearTimeout(this.closeTimer);
          this.closeTimer = -1;
        }
      }
    },
    {
      key: "clickCover",
      value: function clickCover() {
        this.props.onClick();
      }
    },
    {
      key: "componentDidMount",
      value: function componentDidMount() {
        this.startCloseTimer();
      }
    },
    {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.clearCloseTimer();
      }
    },
    {
      key: "render",
      value: function render2() {
        var _this_props = this.props, id = _this_props.id, style = _this_props.style, message = _this_props.message, leftIcon = _this_props.leftIcon, rightIcon = _this_props.rightIcon, closeable = _this_props.closeable, className = _this_props.className, position2 = _this_props.position, distance = _this_props.distance, navHeight = _this_props.navHeight;
        var show2 = this.state.show;
        var classes = (0, import_classnames60.default)(classPrefix20, className);
        var getDistance = function() {
          if (position2 === "top") {
            return {
              top: "".concat(distance + navHeight, "px")
            };
          }
          return {
            bottom: "".concat(distance, "px")
          };
        };
        var _obj;
        return React95.createElement(React95.Fragment, null, React95.createElement(CSSTransition_default, {
          in: show2,
          timeout: 300,
          classNames: "fade",
          unmountOnExit: true,
          appear: true,
          position: position2,
          id
        }, React95.createElement("div", {
          className: classes,
          style: _object_spread({}, style, getDistance()),
          onClick: this.clickCover
        }, leftIcon ? React95.createElement("div", {
          className: "".concat(classPrefix20, "-left-icon")
        }, leftIcon) : null, React95.createElement("div", {
          className: (0, import_classnames60.default)((_obj = {}, _define_property(_obj, "".concat(classPrefix20, "-content"), true), _define_property(_obj, "".concat(classPrefix20, "-ellipsis"), closeable || rightIcon), _define_property(_obj, "".concat(classPrefix20, "-layout-left"), leftIcon || rightIcon), _obj))
        }, message), rightIcon || closeable ? React95.createElement("div", {
          className: "".concat(classPrefix20, "-right-icon"),
          onClick: this.close
        }, rightIcon || (closeable ? React95.createElement(n6, null) : null)) : null)));
      }
    }
  ]);
  return Notification3;
}(_React_PureComponent = React95.PureComponent);
_define_property(Notification, "newInstance", void 0);
Notification.newInstance = function(properties, callback) {
  var ref = function ref2(instance) {
    if (called) {
      return;
    }
    called = true;
    callback({
      component: instance,
      destroy: function destroy() {
        setTimeout(function() {
          unmount(element);
          element && element.parentNode && element.parentNode.removeChild(element);
        }, 300);
      }
    });
  };
  var element = document.createElement("div");
  var id = properties.id ? properties.id : "".concat(Date.now());
  element.id = id;
  properties.id = id;
  document.body.appendChild(element);
  var called = false;
  render(React95.createElement(Notification, _object_spread_props(_object_spread({}, properties), {
    ref
  })), element);
};

// node_modules/@nutui/nutui-react/dist/es/packages/notify/notify.js
var messageInstance = null;
var options = _object_spread_props(_object_spread({}, ComponentDefaults), {
  id: "",
  position: "top",
  distance: 8,
  navHeight: 57,
  closeable: false,
  leftIcon: null,
  rightIcon: null,
  duration: 3e3,
  onClose: function() {
  },
  onClick: function() {
  }
});
function getInstance(props, callback) {
  if (messageInstance) {
    messageInstance.destroy();
    messageInstance = null;
  }
  Notification.newInstance(props, function(notification) {
    return callback && callback(notification);
  });
}
function notice(opts) {
  opts = _object_spread({}, options, opts);
  getInstance(opts, function(notification) {
    messageInstance = notification;
  });
}
var errorMsg = function(message) {
  if (!message) {
    console.warn("[NutUI Notify]: message不能为空");
  }
};
var notify_default = {
  text: function text2(message) {
    var option = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    errorMsg(message);
    return notice(_object_spread({
      message,
      type: "base"
    }, option));
  },
  hide: function hide() {
    if (messageInstance) {
      messageInstance.destroy();
      messageInstance = null;
    }
  }
};

// node_modules/@nutui/nutui-react/dist/es/packages/notify/index.js
var notify_default2 = notify_default;

// node_modules/@nutui/nutui-react/dist/es/packages/popover/popover.js
var import_react224 = __toESM(require_react());
var import_classnames61 = __toESM(require_classnames());
var import_react_dom5 = __toESM(require_react_dom());
var defaultProps66 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  list: [],
  theme: "light",
  location: "bottom",
  visible: false,
  offset: [
    0,
    8
  ],
  arrowOffset: 0,
  targetId: "",
  showArrow: true,
  closeOnOutsideClick: true,
  closeOnActionClick: true,
  overlay: false,
  onClick: function() {
  },
  onOpen: function() {
  },
  onClose: function() {
  }
});
var classPrefix21 = "nut-popover";
var Popover = function(props) {
  var rtl = useRtl();
  var _ref = _object_spread({}, defaultProps66, props), children2 = _ref.children, list = _ref.list, theme = _ref.theme, location = _ref.location, visible = _ref.visible, offset = _ref.offset, arrowOffset = _ref.arrowOffset, targetId = _ref.targetId, overlay = _ref.overlay, closeOnOutsideClick = _ref.closeOnOutsideClick, closeOnActionClick = _ref.closeOnActionClick, className = _ref.className, showArrow = _ref.showArrow, style = _ref.style, onClick = _ref.onClick, onOpen = _ref.onOpen, onClose = _ref.onClose, onSelect = _ref.onSelect, rest = _object_without_properties(_ref, [
    "children",
    "list",
    "theme",
    "location",
    "visible",
    "offset",
    "arrowOffset",
    "targetId",
    "overlay",
    "closeOnOutsideClick",
    "closeOnActionClick",
    "className",
    "showArrow",
    "style",
    "onClick",
    "onOpen",
    "onClose",
    "onSelect"
  ]);
  var popoverRef = (0, import_react224.useRef)(null);
  var popoverContentRef = (0, import_react224.useRef)(null);
  var _useState = _sliced_to_array((0, import_react224.useState)(false), 2), showPopup = _useState[0], setShowPopup = _useState[1];
  var _useState1 = _sliced_to_array((0, import_react224.useState)(), 2), wrapperPosition = _useState1[0], setWrapperPosition = _useState1[1];
  (0, import_react224.useEffect)(function() {
    setShowPopup(visible);
    if (visible) {
      setTimeout(function() {
        getWrapperPosition();
      }, 0);
    }
  }, [
    visible,
    location
  ]);
  var update3 = (0, import_react224.useRef)(function(e2) {
    getWrapperPosition();
  });
  var targetSet = [];
  var element = null;
  if (canUseDom && targetId) {
    element = document.querySelector("#".concat(targetId));
    targetSet = [
      element,
      popoverContentRef.current
    ];
  } else {
    targetSet = [
      popoverRef.current,
      popoverContentRef.current
    ];
  }
  var scrollableParents = (0, import_react224.useMemo)(function() {
    return getAllScrollableParents(element || popoverRef.current);
  }, [
    element,
    popoverRef.current
  ]);
  (0, import_react224.useEffect)(function() {
    if (visible) {
      scrollableParents.forEach(function(parent2) {
        parent2.addEventListener("scroll", update3.current, {
          passive: true
        });
      });
    } else {
      scrollableParents.forEach(function(parent2) {
        return parent2.removeEventListener("scroll", update3.current);
      });
    }
  }, [
    visible
  ]);
  useClickAway(function() {
    onClick === null || onClick === void 0 ? void 0 : onClick();
    onClose === null || onClose === void 0 ? void 0 : onClose();
  }, targetSet, "touchstart", true, visible, closeOnOutsideClick);
  var getWrapperPosition = function() {
    var rect = getRect(targetId ? document.querySelector("#".concat(targetId)) : popoverRef.current);
    var distance = Math.max(document.documentElement.scrollTop, document.body.scrollTop);
    var width2 = rect.width, height2 = rect.height, right = rect.right, left = rect.left, top = rect.top;
    setWrapperPosition({
      width: width2,
      height: height2,
      left: rtl ? right : left,
      top: top + distance,
      right: rtl ? left : right
    });
  };
  var classes = (0, import_classnames61.default)(classPrefix21, _define_property({}, "".concat(classPrefix21, "-").concat(theme), theme === "dark"), className);
  var popoverArrow = function() {
    var prefixCls4 = "nut-popover-arrow";
    var direction = location.split("-")[0];
    return "".concat(prefixCls4, " ").concat(prefixCls4, "-").concat(direction, " ").concat(prefixCls4, "-").concat(location);
  };
  var getPopoverPosition = function() {
    var _popoverContentRef_current, _popoverContentRef_current1;
    var styles = {};
    if (!wrapperPosition) {
      styles.visibility = "hidden";
      return styles;
    }
    var popWidth = (_popoverContentRef_current = popoverContentRef.current) === null || _popoverContentRef_current === void 0 ? void 0 : _popoverContentRef_current.clientWidth;
    var popHeight = (_popoverContentRef_current1 = popoverContentRef.current) === null || _popoverContentRef_current1 === void 0 ? void 0 : _popoverContentRef_current1.clientHeight;
    var width2 = wrapperPosition.width, height2 = wrapperPosition.height, left = wrapperPosition.left, top = wrapperPosition.top, right = wrapperPosition.right;
    var direction = location.split("-")[0];
    var skew = location.split("-")[1];
    var cross = 0;
    var parallel = 0;
    if (Array.isArray(offset) && offset.length === 2) {
      var rtloffset = rtl ? -offset[0] : offset[0];
      cross += +offset[1];
      parallel += +rtloffset;
    }
    if (width2) {
      var dir = rtl ? "right" : "left";
      if ([
        "bottom",
        "top"
      ].includes(direction)) {
        var h3 = direction === "bottom" ? height2 + cross : -(popHeight + cross);
        styles.top = "".concat(top + h3, "px");
        if (!skew) {
          styles[dir] = "".concat(-(popWidth - width2) / 2 + wrapperPosition[dir] + parallel, "px");
        }
        if (skew === "left") {
          styles.left = "".concat(left + parallel, "px");
        }
        if (skew === "right") {
          styles.left = "".concat(right + parallel, "px");
        }
      }
      if ([
        "left",
        "right"
      ].includes(direction)) {
        var contentW = direction === "left" ? -(popWidth + cross) : width2 + cross;
        styles.left = "".concat(left + contentW, "px");
        if (!skew) {
          styles.top = "".concat(top - popHeight / 2 + height2 / 2 - 4 + parallel, "px");
        }
        if (skew === "top") {
          styles.top = "".concat(top + parallel, "px");
        }
        if (skew === "bottom") {
          styles.top = "".concat(top + height2 + parallel, "px");
        }
      }
    }
    styles.visibility = popWidth === 0 ? "hidden" : "initial";
    return styles;
  };
  var popoverArrowStyle = function() {
    var styles = {};
    var direction = location.split("-")[0];
    var skew = location.split("-")[1];
    var base = 16;
    if (arrowOffset !== 0) {
      var dir = rtl ? "right" : "left";
      var dir2 = rtl ? "left" : "right";
      if ([
        "bottom",
        "top"
      ].includes(direction)) {
        if (!skew) {
          styles[dir] = "calc(50% + ".concat(arrowOffset, "px)");
        }
        if (skew === "left") {
          styles[dir] = "".concat(base + arrowOffset, "px");
        }
        if (skew === "right") {
          styles[dir2] = "".concat(base - arrowOffset, "px");
        }
      }
      if ([
        "left",
        "right"
      ].includes(direction)) {
        if (!skew) {
          styles.top = "calc(50% - ".concat(arrowOffset, "px)");
        }
        if (skew === "top") {
          styles.top = "".concat(base - arrowOffset, "px");
        }
        if (skew === "bottom") {
          styles.bottom = "".concat(base + arrowOffset, "px");
        }
      }
    }
    return styles;
  };
  var handleSelect = function(item, index2) {
    if (!item.disabled) {
      onSelect === null || onSelect === void 0 ? void 0 : onSelect(item, index2);
    }
    if (closeOnActionClick) {
      onClick === null || onClick === void 0 ? void 0 : onClick();
      onClose === null || onClose === void 0 ? void 0 : onClose();
    }
  };
  return import_react224.default.createElement(import_react224.default.Fragment, null, !targetId && import_react224.default.createElement("div", {
    className: "nut-popover-wrapper",
    ref: popoverRef,
    onClick: function() {
      onClick === null || onClick === void 0 ? void 0 : onClick();
      if (!visible) {
        onOpen === null || onOpen === void 0 ? void 0 : onOpen();
      } else {
        onClose === null || onClose === void 0 ? void 0 : onClose();
      }
    },
    style
  }, Array.isArray(children2) ? children2[0] : children2), (0, import_react_dom5.createPortal)(import_react224.default.createElement("div", {
    className: classes,
    style: _object_spread({}, getPopoverPosition(), style)
  }, import_react224.default.createElement(popup_default, _object_spread({
    className: "nut-popover-content nut-popover-content-".concat(location),
    visible: showPopup,
    overlay,
    position: "none",
    lockScroll: false
  }, rest), import_react224.default.createElement("div", {
    className: "nut-popover-content-group",
    ref: popoverContentRef
  }, showArrow && import_react224.default.createElement("div", {
    className: popoverArrow(),
    style: popoverArrowStyle()
  }, import_react224.default.createElement(i2, {
    width: 8,
    height: 4
  })), Array.isArray(children2) ? children2[1] : null, list.map(function(item, index2) {
    var _item_action;
    return import_react224.default.createElement("div", {
      className: (0, import_classnames61.default)({
        "nut-popover-item": true,
        "nut-popover-item-disabled": item.disabled
      }, item.className),
      key: item.key || index2,
      onClick: function() {
        return handleSelect(item, index2);
      }
    }, item.icon && import_react224.default.createElement("div", {
      className: "nut-popover-item-icon"
    }, item.icon), import_react224.default.createElement("div", {
      className: "nut-popover-item-name"
    }, item.name), ((_item_action = item.action) === null || _item_action === void 0 ? void 0 : _item_action.icon) && import_react224.default.createElement("div", {
      className: "nut-popover-item-action-icon",
      onClick: function(e2) {
        var _item_action_onClick, _item_action2;
        return (_item_action2 = item.action) === null || _item_action2 === void 0 ? void 0 : (_item_action_onClick = _item_action2.onClick) === null || _item_action_onClick === void 0 ? void 0 : _item_action_onClick.call(_item_action2, e2);
      }
    }, item.action.icon));
  })))), document.body));
};
Popover.displayName = "NutPopover";

// node_modules/@nutui/nutui-react/dist/es/packages/popover/index.js
var popover_default = Popover;

// node_modules/@nutui/nutui-react/dist/es/packages/pulltorefresh/pulltorefresh.js
var import_react225 = __toESM(require_react());
var import_classnames62 = __toESM(require_classnames());
var defaultProps67 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  type: "default",
  pullingText: "",
  canReleaseText: "",
  refreshingText: "",
  completeText: "",
  completeDelay: 500,
  disabled: false,
  headHeight: 80,
  threshold: 60,
  onRefresh: function() {
  }
});
var PullToRefresh = function(p10) {
  var doRefresh = function doRefresh2() {
    return _doRefresh.apply(this, arguments);
  };
  var classPrefix33 = "nut-pulltorefresh";
  var locale = useConfig().locale;
  var props = _object_spread({}, defaultProps67, p10, {
    pullingText: p10.pullingText || locale.pullToRefresh.pullingText,
    canReleaseText: p10.canReleaseText || locale.pullToRefresh.canReleaseText,
    refreshingText: p10.refreshingText || locale.pullToRefresh.refreshingText,
    completeText: p10.completeText || locale.pullToRefresh.completeText
  });
  var classes = (0, import_classnames62.default)(classPrefix33, props.className, "".concat(classPrefix33, "-").concat(props.type));
  var headHeight = props.headHeight;
  var threshold = props.threshold;
  var _useState = _sliced_to_array((0, import_react225.useState)("pulling"), 2), status = _useState[0], setStatus = _useState[1];
  var _useSpring = _sliced_to_array(useSpring(function() {
    return {
      from: {
        height: 0
      },
      config: {
        tension: 300,
        friction: 30,
        clamp: true
      }
    };
  }), 2), springStyles = _useSpring[0], api = _useSpring[1];
  var elementRef = (0, import_react225.useRef)(null);
  var pullingRef = (0, import_react225.useRef)(false);
  (0, import_react225.useEffect)(function() {
    var _elementRef_current;
    (_elementRef_current = elementRef.current) === null || _elementRef_current === void 0 ? void 0 : _elementRef_current.addEventListener("touchmove", function() {
    });
  }, []);
  function _doRefresh() {
    _doRefresh = _async_to_generator(function() {
      var e2;
      return __generator(this, function(_state) {
        switch (_state.label) {
          case 0:
            api.start({
              height: headHeight
            });
            setStatus("refreshing");
            _state.label = 1;
          case 1:
            _state.trys.push([
              1,
              3,
              ,
              4
            ]);
            return [
              4,
              props.onRefresh()
            ];
          case 2:
            _state.sent();
            setStatus("complete");
            return [
              3,
              4
            ];
          case 3:
            e2 = _state.sent();
            api.start({
              to: function() {
                var _ref = _async_to_generator(function(next) {
                  return __generator(this, function(_state2) {
                    switch (_state2.label) {
                      case 0:
                        return [
                          4,
                          next({
                            height: 0
                          })
                        ];
                      case 1:
                        _state2.sent();
                        setStatus("pulling");
                        return [
                          2
                        ];
                    }
                  });
                });
                return function(next) {
                  return _ref.apply(this, arguments);
                };
              }()
            });
            throw e2;
          case 4:
            if (!(props.completeDelay > 0))
              return [
                3,
                6
              ];
            return [
              4,
              sleep(props.completeDelay)
            ];
          case 5:
            _state.sent();
            _state.label = 6;
          case 6:
            api.start({
              to: function() {
                var _ref = _async_to_generator(function(next) {
                  return __generator(this, function(_state2) {
                    switch (_state2.label) {
                      case 0:
                        return [
                          4,
                          next({
                            height: 0
                          })
                        ];
                      case 1:
                        _state2.sent();
                        setStatus("pulling");
                        return [
                          2
                        ];
                    }
                  });
                });
                return function(next) {
                  return _ref.apply(this, arguments);
                };
              }()
            });
            return [
              2
            ];
        }
      });
    });
    return _doRefresh.apply(this, arguments);
  }
  useDrag(function(state) {
    var getScrollTop = function getScrollTop2(element) {
      return "scrollTop" in element ? element.scrollTop : element.scrollY;
    };
    if (status === "refreshing" || status === "complete")
      return;
    var event = state.event;
    if (state.last) {
      pullingRef.current = false;
      if (status === "canRelease") {
        doRefresh();
      } else {
        api.start({
          height: 0
        });
      }
      return;
    }
    var _state_movement = _sliced_to_array(state.movement, 2), y = _state_movement[1];
    if (state.first && y > 0) {
      var target = state.event.target;
      if (!target || !_instanceof(target, Element))
        return;
      var scrollParent = getScrollParent(target);
      while (true) {
        if (!scrollParent)
          return;
        var scrollTop = getScrollTop(scrollParent);
        if (scrollTop > 0) {
          return;
        }
        if (_instanceof(scrollParent, Window)) {
          break;
        }
        scrollParent = getScrollParent(scrollParent.parentNode);
      }
      pullingRef.current = true;
    }
    if (!pullingRef.current)
      return;
    if (event.cancelable) {
      event.preventDefault();
    }
    event.stopPropagation();
    var height2 = Math.max(rubberbandIfOutOfBounds(y, 0, 0, headHeight * 5, 0.5), 0);
    api.start({
      height: height2
    });
    setStatus(height2 > threshold ? "canRelease" : "pulling");
  }, {
    pointer: {
      touch: true
    },
    axis: "y",
    target: elementRef,
    enabled: !props.disabled,
    eventOptions: passiveSupported ? {
      passive: false
    } : false
  });
  var renderIcons = function(status2) {
    return import_react225.default.createElement(import_react225.default.Fragment, null, import_react225.default.createElement("i", {
      className: "".concat(classPrefix33, "-head-content-icons")
    }, (status2 === "pulling" || status2 === "complete") && import_react225.default.createElement(s, null), (status2 === "canRelease" || status2 === "refreshing") && import_react225.default.createElement(l2, null)));
  };
  var renderStatusIcon = function() {
    if (props.renderIcon) {
      var _props_renderIcon;
      return (_props_renderIcon = props.renderIcon) === null || _props_renderIcon === void 0 ? void 0 : _props_renderIcon.call(props, status);
    }
    return renderIcons(status);
  };
  var renderStatusText = function() {
    if (props.renderText) {
      var _props_renderText;
      return (_props_renderText = props.renderText) === null || _props_renderText === void 0 ? void 0 : _props_renderText.call(props, status);
    }
    if (status === "pulling")
      return props.pullingText;
    if (status === "canRelease")
      return props.canReleaseText;
    if (status === "refreshing")
      return props.refreshingText;
    if (status === "complete")
      return props.completeText;
    return "";
  };
  var _obj, _obj1, _obj2, _obj3, _obj4;
  return import_react225.default.createElement(animated.div, {
    ref: elementRef,
    className: classes,
    style: props.style
  }, import_react225.default.createElement(animated.div, {
    style: springStyles,
    className: (0, import_classnames62.default)((_obj = {}, _define_property(_obj, "".concat(classPrefix33, "-head"), true), _define_property(_obj, "".concat(classPrefix33, "-primary-head"), props.type === "primary"), _obj))
  }, import_react225.default.createElement("div", {
    className: (0, import_classnames62.default)((_obj1 = {}, _define_property(_obj1, "".concat(classPrefix33, "-head-content"), true), _define_property(_obj1, "".concat(classPrefix33, "-primary-head-content"), props.type === "primary"), _obj1)),
    style: {
      height: headHeight
    }
  }, import_react225.default.createElement("div", {
    className: (0, import_classnames62.default)((_obj2 = {}, _define_property(_obj2, "".concat(classPrefix33, "-status-icon"), true), _define_property(_obj2, "".concat(classPrefix33, "-primary-status-icon"), props.type === "primary"), _obj2))
  }, renderStatusIcon()), import_react225.default.createElement("div", {
    className: (0, import_classnames62.default)((_obj3 = {}, _define_property(_obj3, "".concat(classPrefix33, "-status-text"), true), _define_property(_obj3, "".concat(classPrefix33, "-primary-status-text"), props.type === "primary"), _obj3))
  }, renderStatusText()))), import_react225.default.createElement("div", {
    className: (0, import_classnames62.default)((_obj4 = {}, _define_property(_obj4, "".concat(classPrefix33, "-content"), true), _define_property(_obj4, "".concat(classPrefix33, "-primary-content}"), props.type === "primary"), _obj4))
  }, props.children));
};
PullToRefresh.displayName = "NutPullToRefresh";

// node_modules/@nutui/nutui-react/dist/es/packages/pulltorefresh/index.js
var pulltorefresh_default = PullToRefresh;

// node_modules/@nutui/nutui-react/dist/es/packages/resultpage/resultpage.js
var import_react227 = __toESM(require_react());
var import_classnames63 = __toESM(require_classnames());
var defaultProps68 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  title: null,
  description: null,
  icon: "",
  status: "info",
  actions: []
});
var ResultPage = function(props) {
  var _$_object_spread = _object_spread({}, defaultProps68, props), className = _$_object_spread.className, style = _$_object_spread.style, title = _$_object_spread.title, description = _$_object_spread.description, icon = _$_object_spread.icon, status = _$_object_spread.status, actions = _$_object_spread.actions, children2 = _$_object_spread.children;
  var classPrefix33 = "nut-resultpage";
  var cls = (0, import_classnames63.default)(classPrefix33, className);
  var defaultStatus2 = {
    success: import_react227.default.createElement(m3, {
      color: "#00D900"
    }),
    error: import_react227.default.createElement(n8, {
      color: "#FF0F23"
    }),
    warning: import_react227.default.createElement(c3, {
      color: "#FFBF00"
    }),
    info: import_react227.default.createElement(p2, {
      color: "#0073FF"
    }),
    waiting: import_react227.default.createElement(n2, {
      color: "#0073FF"
    })
  };
  return import_react227.default.createElement("div", {
    className: cls,
    style
  }, import_react227.default.createElement("div", {
    className: "".concat(classPrefix33, "-icon")
  }, icon || defaultStatus2[status]), typeof title === "string" && title ? import_react227.default.createElement("div", {
    className: "".concat(classPrefix33, "-title")
  }, title) : title, typeof description === "string" && description ? import_react227.default.createElement("div", {
    className: "".concat(classPrefix33, "-description")
  }, description) : description, actions.length ? import_react227.default.createElement("div", {
    className: "".concat(classPrefix33, "-actions")
  }, actions.map(function(action, index2) {
    var text3 = action.text, rest = _object_without_properties(action, [
      "text"
    ]);
    return import_react227.default.createElement("div", {
      className: "".concat(classPrefix33, "-action"),
      key: index2
    }, import_react227.default.createElement(Button, _object_spread_props(_object_spread({}, rest), {
      size: "large"
    }), action === null || action === void 0 ? void 0 : action.text));
  })) : null, children2);
};
ResultPage.displayName = "NutResultPage";

// node_modules/@nutui/nutui-react/dist/es/packages/resultpage/index.js
var resultpage_default = ResultPage;

// node_modules/@nutui/nutui-react/dist/es/packages/skeleton/skeleton.js
var import_react228 = __toESM(require_react());
var import_classnames64 = __toESM(require_classnames());
var defaultProps69 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  rows: 1,
  animated: true,
  visible: false,
  size: "normal",
  shape: "round",
  duration: 0.6
});
var Skeleton = function(props) {
  var shapeStyle = function shapeStyle2() {
    if (shape === "circle")
      return {
        borderRadius: "50%"
      };
    if (shape === "square")
      return {
        borderRadius: "0"
      };
    return {};
  };
  var durationStyle = function durationStyle2() {
    if (typeof duration !== "undefined")
      return {
        animationDuration: "".concat(duration, "s")
      };
    return {};
  };
  var _ref = _object_spread({}, defaultProps69, props), className = _ref.className, width2 = _ref.width, height2 = _ref.height, shape = _ref.shape, animated2 = _ref.animated, rows = _ref.rows, visible = _ref.visible, size = _ref.size, duration = _ref.duration, children2 = _ref.children, rest = _object_without_properties(_ref, [
    "className",
    "width",
    "height",
    "shape",
    "animated",
    "rows",
    "visible",
    "size",
    "duration",
    "children"
  ]);
  var classPrefix33 = "nut-skeleton";
  var classes = (0, import_classnames64.default)(classPrefix33, className);
  var repeatCount = function(num) {
    return Array.from({
      length: num
    }, function(v3, i6) {
      return i6;
    });
  };
  var _useState = _sliced_to_array((0, import_react228.useState)(false), 2), animate = _useState[0], setAnimate = _useState[1];
  var playAnimation = function() {
    setAnimate(false);
    setTimeout(function() {
      setAnimate(true);
    }, 10);
  };
  (0, import_react228.useEffect)(function() {
    if (!animated2)
      return;
    playAnimation();
    var intervalId = setInterval(playAnimation, 1e3 + duration * 1e3);
    return function() {
      return clearInterval(intervalId);
    };
  }, []);
  return import_react228.default.createElement(import_react228.default.Fragment, null, visible ? children2 : import_react228.default.createElement("div", _object_spread({
    className: classes
  }, rest), repeatCount(rows).map(function(item, index2) {
    var contentClass = "".concat(classPrefix33, "-content ").concat(classPrefix33, "-content-").concat(size, " ").concat(classPrefix33, "-content-").concat(size, "-").concat(index2);
    return import_react228.default.createElement("div", {
      className: "".concat(contentClass),
      key: index2,
      style: _object_spread({
        width: width2,
        height: height2
      }, shapeStyle())
    }, animated2 && import_react228.default.createElement("div", {
      className: "".concat(classPrefix33, "-animated ").concat(animate ? "".concat(classPrefix33, "-animation") : ""),
      style: durationStyle()
    }));
  })));
};
Skeleton.displayName = "NutSkeleton";

// node_modules/@nutui/nutui-react/dist/es/packages/skeleton/index.js
var skeleton_default = Skeleton;

// node_modules/@nutui/nutui-react/dist/es/packages/swipe/swipe.js
var import_react229 = __toESM(require_react());
var import_classnames65 = __toESM(require_classnames());
function preventDefault2(event, isStopPropagation) {
  if (typeof event.cancelable !== "boolean" || event.cancelable) {
    event.preventDefault();
  }
  if (isStopPropagation) {
    event.stopPropagation();
  }
}
var defaultProps70 = {
  name: ""
};
var Swipe = (0, import_react229.forwardRef)(function(props, instanceRef) {
  var classPrefix33 = "nut-swipe";
  var touch = useTouch();
  var _$_object_spread = _object_spread({}, defaultProps70, props), children2 = _$_object_spread.children, className = _$_object_spread.className, style = _$_object_spread.style;
  var root = (0, import_react229.useRef)();
  var opened = (0, import_react229.useRef)(false);
  var lockClick = (0, import_react229.useRef)(false);
  var startOffset = (0, import_react229.useRef)(0);
  var _useState = _sliced_to_array((0, import_react229.useState)({
    offset: 0,
    dragging: false
  }), 2), state = _useState[0], setState = _useState[1];
  var _useState1 = _sliced_to_array((0, import_react229.useState)({
    left: 0,
    right: 0
  }), 2), actionWidth = _useState1[0], setActionWidth = _useState1[1];
  var wrapperStyle = {
    transform: "translate3d(".concat(state.offset, "px, 0, 0)"),
    transitionDuration: state.dragging ? "0s" : ".6s"
  };
  var leftWidth = actionWidth.left;
  var rightWidth = actionWidth.right;
  var onTouchStart = function(event) {
    if (!props.disabled) {
      var _props_onTouchStart;
      startOffset.current = state.offset;
      touch.start(event);
      (_props_onTouchStart = props.onTouchStart) === null || _props_onTouchStart === void 0 ? void 0 : _props_onTouchStart.call(props, event);
    }
  };
  var onTouchMove = function(event) {
    var _props_onTouchMove;
    if (props.disabled) {
      return;
    }
    touch.move(event);
    (_props_onTouchMove = props.onTouchMove) === null || _props_onTouchMove === void 0 ? void 0 : _props_onTouchMove.call(props, event);
    if (touch.isHorizontal()) {
      lockClick.current = true;
      var newState = _object_spread_props(_object_spread({}, state), {
        dragging: true
      });
      var isEdge = !opened || touch.deltaX.current * startOffset.current < 0;
      if (isEdge) {
        preventDefault2(event, true);
      }
      newState.offset = rangeCalculation(touch.deltaX.current + startOffset.current, -rightWidth, leftWidth);
      setState(newState);
    }
  };
  var onTouchEnd = function(event) {
    if (state.dragging) {
      var _props_onTouchEnd;
      setState(function(v3) {
        return _object_spread_props(_object_spread({}, v3), {
          dragging: false
        });
      });
      toggle(state.offset > 0 ? "left" : "right");
      setTimeout(function() {
        lockClick.current = false;
      }, 0);
      (_props_onTouchEnd = props.onTouchEnd) === null || _props_onTouchEnd === void 0 ? void 0 : _props_onTouchEnd.call(props, event);
    }
  };
  var toggle = function(side) {
    var offset = Math.abs(state.offset);
    var base = 0.3;
    var baseNum = opened ? 1 - base : base;
    var width2 = side === "left" ? leftWidth : rightWidth;
    if (width2 && offset > Number(width2) * baseNum) {
      open(side);
    } else {
      close(side);
    }
  };
  var open = function(side) {
    var _props_onOpen;
    opened.current = true;
    var offset = side === "left" ? leftWidth : -rightWidth;
    var name2 = props.name;
    (_props_onOpen = props.onOpen) === null || _props_onOpen === void 0 ? void 0 : _props_onOpen.call(props, {
      name: name2,
      position: side
    });
    setState(function(v3) {
      return _object_spread_props(_object_spread({}, v3), {
        offset: Number(offset) || 0
      });
    });
  };
  var close = function(position2) {
    if (opened.current) {
      var _props_onClose;
      opened.current = false;
      (_props_onClose = props.onClose) === null || _props_onClose === void 0 ? void 0 : _props_onClose.call(props, {
        name: props.name,
        position: position2 || "left"
      });
    }
    setState(function(v3) {
      return _object_spread_props(_object_spread({}, v3), {
        offset: 0
      });
    });
  };
  var rangeCalculation = function(num, min, max) {
    return Math.min(Math.max(Number(num), Number(min)), Number(max));
  };
  var getNodeWidth = function(node) {
    if (node) {
      var ele = getRect(node);
      return ele.width;
    }
    return 0;
  };
  var leftRef = (0, import_react229.useCallback)(function(node) {
    if (node !== null) {
      setActionWidth(function(v3) {
        return _object_spread_props(_object_spread({}, v3), {
          left: getNodeWidth(node)
        });
      });
    }
  }, [
    props.leftAction
  ]);
  var rightRef = (0, import_react229.useCallback)(function(node) {
    if (node !== null) {
      setActionWidth(function(v3) {
        return _object_spread_props(_object_spread({}, v3), {
          right: getNodeWidth(node)
        });
      });
    }
  }, [
    props.rightAction
  ]);
  var renderActionContent = function(side, measuredRef) {
    if (props["".concat(side, "Action")]) {
      return import_react229.default.createElement("div", {
        ref: measuredRef,
        className: "".concat(classPrefix33, "-").concat(side),
        onClick: function(e2) {
          return handleOperate(e2, side);
        }
      }, props["".concat(side, "Action")]);
    }
    return null;
  };
  var handleOperate = function(event, position2) {
    event.stopPropagation();
    if (props.beforeClose) {
      props.beforeClose(position2);
    } else {
      props.onActionClick && props.onActionClick(event, position2);
    }
  };
  (0, import_react229.useImperativeHandle)(instanceRef, function() {
    return {
      open,
      close: function() {
        return close();
      }
    };
  });
  (0, import_react229.useEffect)(function() {
    var handler = function(event) {
      var targets = [
        root
      ];
      if (targets.some(function(targetItem) {
        var targetElement = targetItem.current || targetItem;
        return !targetElement || (targetElement === null || targetElement === void 0 ? void 0 : targetElement.contains(event.target));
      })) {
        return;
      }
      close();
    };
    document.addEventListener("touchstart", handler);
    return function() {
      document.removeEventListener("touchstart", handler);
    };
  }, []);
  return import_react229.default.createElement("div", {
    ref: root,
    className: (0, import_classnames65.default)(classPrefix33, className),
    onTouchStart: function(e2) {
      return onTouchStart(e2);
    },
    onTouchMove: function(e2) {
      return onTouchMove(e2);
    },
    onTouchEnd: function(e2) {
      return onTouchEnd(e2);
    },
    style
  }, import_react229.default.createElement("div", {
    className: "".concat(classPrefix33, "-wrapper"),
    style: wrapperStyle
  }, renderActionContent("left", leftRef), children2, renderActionContent("right", rightRef)));
});
Swipe.displayName = "NutSwipe";

// node_modules/@nutui/nutui-react/dist/es/packages/swipe/index.js
var swipe_default = Swipe;

// node_modules/@nutui/nutui-react/dist/es/packages/toast/Notification.js
var React102 = __toESM(require_react());
var import_classnames66 = __toESM(require_classnames());
var classPrefix22 = "nut-toast";
var _React_PureComponent2;
var Notification2 = function(_superClass) {
  "use strict";
  _inherits(Notification3, _superClass);
  function Notification3(props) {
    _class_call_check(this, Notification3);
    var _this;
    _this = _call_super(this, Notification3, [
      props
    ]), _define_property(_this, "closeTimer", void 0);
    _this.close = _this.close.bind(_this);
    _this.startCloseTimer = _this.startCloseTimer.bind(_this);
    _this.clearCloseTimer = _this.clearCloseTimer.bind(_this);
    _this.clickCover = _this.clickCover.bind(_this);
    _this.state = {
      show: true
    };
    return _this;
  }
  _create_class(Notification3, [
    {
      key: "close",
      value: function close() {
        this.setState({
          show: false
        });
        this.clearCloseTimer();
        if (this.props.id) {
          var element = document.getElementById(this.props.id);
          element && element.parentNode && element.parentNode.removeChild(element);
        }
        this.props.onClose && this.props.onClose();
      }
    },
    {
      key: "startCloseTimer",
      value: function startCloseTimer() {
        var _this = this;
        var duration = this.props.duration;
        if (duration) {
          this.closeTimer = window.setTimeout(function() {
            _this.close();
          }, duration * 1e3);
        }
      }
    },
    {
      key: "clearCloseTimer",
      value: function clearCloseTimer() {
        if (this.closeTimer) {
          clearTimeout(this.closeTimer);
          this.closeTimer = -1;
        }
      }
    },
    {
      key: "clickCover",
      value: function clickCover() {
        var closeOnOverlayClick = this.props.closeOnOverlayClick;
        if (closeOnOverlayClick) {
          this.close();
        }
      }
    },
    {
      key: "renderIcon",
      value: function renderIcon() {
        var icon = this.props.icon;
        if (typeof icon === "string") {
          var iconNode = {
            success: React102.createElement(m3, null),
            fail: React102.createElement(n8, null),
            warn: React102.createElement(p2, null),
            loading: React102.createElement(s, {
              className: "nut-icon-loading"
            })
          }[icon];
          return React102.createElement("p", {
            className: "".concat(classPrefix22, "-icon-wrapper")
          }, iconNode);
        }
        return icon;
      }
    },
    {
      key: "componentDidMount",
      value: function componentDidMount() {
        this.startCloseTimer();
      }
    },
    {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.clearCloseTimer();
      }
    },
    {
      key: "render",
      value: function render2() {
        var _this = this;
        var _this_props = this.props, id = _this_props.id, icon = _this_props.icon, title = _this_props.title, content2 = _this_props.content, position2 = _this_props.position, size = _this_props.size, closeOnOverlayClick = _this_props.closeOnOverlayClick, lockScroll = _this_props.lockScroll, style = _this_props.style, className = _this_props.className, contentClassName = _this_props.contentClassName, contentStyle = _this_props.contentStyle, wordBreak = _this_props.wordBreak, zIndex = _this_props.zIndex;
        var show2 = this.state.show;
        var classes = (0, import_classnames66.default)({
          "nut-toast-has-icon": icon
        });
        return React102.createElement(overlay_default, {
          visible: show2,
          style,
          zIndex,
          className: "".concat(classPrefix22, "-overlay-default ").concat(className),
          onClick: function() {
            return _this.clickCover();
          },
          closeOnOverlayClick,
          lockScroll
        }, React102.createElement("div", {
          className: "".concat(classPrefix22, " ").concat(classes),
          id: "toast-".concat(id)
        }, React102.createElement("div", {
          className: (0, import_classnames66.default)("".concat(classPrefix22, "-inner"), "".concat(classPrefix22, "-").concat(position2), contentClassName, "".concat(classPrefix22, "-inner-").concat(size), "".concat(classPrefix22, "-inner-").concat(wordBreak), _define_property({}, "".concat(classPrefix22, "-inner-descrption"), content2)),
          style: _object_spread({}, contentStyle)
        }, this.renderIcon(), title && React102.createElement("div", {
          className: "".concat(classPrefix22, "-title")
        }, title), content2 && React102.createElement("span", {
          className: "".concat(classPrefix22, "-text")
        }, content2))));
      }
    }
  ]);
  return Notification3;
}(_React_PureComponent2 = React102.PureComponent);
_define_property(Notification2, "newInstance", void 0);
Notification2.newInstance = function(properties, callback) {
  var ref = function ref2(instance) {
    if (called) {
      return;
    }
    called = true;
    callback({
      component: instance,
      destroy: function destroy() {
        unmount(element);
        element && element.parentNode && element.parentNode.removeChild(element);
      }
    });
  };
  var element = document.createElement("div");
  var id = properties.id ? properties.id : "".concat(Date.now());
  element.id = id;
  properties.id = id;
  document.body.appendChild(element);
  var called = false;
  render(React102.createElement(Notification2, _object_spread_props(_object_spread({}, properties), {
    ref
  })), element);
};

// node_modules/@nutui/nutui-react/dist/es/packages/toast/toast.js
var messageInstance2 = null;
var defaultProps71 = _object_spread_props(_object_spread({}, defaultOverlayProps), {
  id: "",
  position: "middle",
  title: "",
  size: "base",
  icon: null,
  content: "",
  contentClassName: "",
  contentStyle: {},
  wordBreak: "break-all",
  duration: 2,
  closeOnOverlayClick: false,
  lockScroll: false,
  zIndex: 1300,
  onClose: function() {
  }
});
function getInstance2(props, callback) {
  if (messageInstance2) {
    messageInstance2.destroy();
    messageInstance2 = null;
  }
  Notification2.newInstance(props, function(notification) {
    return callback && callback(notification);
  });
}
function notice2(opts) {
  function close() {
    if (messageInstance2) {
      messageInstance2.destroy();
      messageInstance2 = null;
      opts.onClose && opts.onClose();
    }
  }
  var opts2 = _object_spread_props(_object_spread({}, defaultProps71, opts), {
    onClose: close
  });
  getInstance2(opts2, function(notification) {
    messageInstance2 = notification;
  });
}
var errorMsg2 = function(msg) {
  if (!msg) {
    console.warn("[NutUI Toast]: msg cannot be null");
  }
};
function show(option) {
  if (typeof option === "string") {
    errorMsg2(option);
    return notice2({
      content: option
    });
  }
  errorMsg2(option.content);
  return notice2(_object_spread({}, option));
}
function config2(config3) {
  defaultProps71 = _object_spread({}, defaultProps71, config3);
}
var toast_default = {
  show,
  config: config2,
  clear: function clear() {
    if (messageInstance2) {
      messageInstance2.destroy();
      messageInstance2 = null;
    }
  }
};

// node_modules/@nutui/nutui-react/dist/es/packages/toast/index.js
var toast_default2 = toast_default;

// node_modules/@nutui/nutui-react/dist/es/packages/animate/animate.js
var import_react230 = __toESM(require_react());
var import_classnames67 = __toESM(require_classnames());
var defaultProps72 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  type: "shake",
  action: "initial",
  loop: false,
  onClick: function(event) {
  }
});
var classPrefix23 = "nut-animate";
var Animate = function(props) {
  var _ref = _object_spread({}, defaultProps72, props), className = _ref.className, type4 = _ref.type, action = _ref.action, loop2 = _ref.loop, onClick = _ref.onClick, children2 = _ref.children, rest = _object_without_properties(_ref, [
    "className",
    "type",
    "action",
    "loop",
    "onClick",
    "children"
  ]);
  var _useState = _sliced_to_array((0, import_react230.useState)(false), 2), clicked = _useState[0], setClicked = _useState[1];
  var _obj;
  var classes = (0, import_classnames67.default)((_obj = {
    "nut-ani-container": true
  }, _define_property(_obj, "".concat(classPrefix23, "-").concat(type4), action === "initial" || clicked), _define_property(_obj, "loop", loop2), _obj), className);
  var handleClick = function(event) {
    setClicked(true);
    if (!loop2) {
      setTimeout(function() {
        return setClicked(false);
      }, 1e3);
    }
    onClick(event);
  };
  return import_react230.default.createElement("div", {
    className: "nut-animate"
  }, import_react230.default.createElement("div", _object_spread({
    className: classes,
    onClick: handleClick
  }, rest), children2));
};
Animate.displayName = "NutAnimate";

// node_modules/@nutui/nutui-react/dist/es/packages/animate/index.js
var animate_default = Animate;

// node_modules/@nutui/nutui-react/dist/es/packages/animatingnumbers/animatingnumbers.js
var import_react232 = __toESM(require_react());

// node_modules/@nutui/nutui-react/dist/es/packages/animatingnumbers/countup.js
var import_react231 = __toESM(require_react());
var defaultProps73 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  length: 0,
  value: "",
  delay: 300,
  duration: 1,
  thousands: false
});
var CountUp = function(props) {
  var _mergeProps = mergeProps(defaultProps73, props), length2 = _mergeProps.length, value2 = _mergeProps.value, delay = _mergeProps.delay, duration = _mergeProps.duration, className = _mergeProps.className, thousands = _mergeProps.thousands, style = _mergeProps.style, rest = _object_without_properties(_mergeProps, [
    "length",
    "value",
    "delay",
    "duration",
    "className",
    "thousands",
    "style"
  ]);
  var classPrefix33 = "nut-countup";
  var countupRef = (0, import_react231.useRef)(null);
  var timerRef = (0, import_react231.useRef)(0);
  var numbers = Array.from({
    length: 10
  }, function(v3, i6) {
    return i6;
  });
  var getShowNumber = function() {
    var splitArr = value2.split(".");
    var intNumber = length2 && splitArr[0].length < length2 ? (Array(length2).join("0") + splitArr[0]).slice(-length2) : splitArr[0];
    var currNumber = "".concat(thousands ? intNumber.replace(/(\d)(?=(?:\d{3})+$)/g, "$1,") : intNumber).concat(splitArr[1] ? "." : "").concat(splitArr[1] || "");
    return currNumber.split("");
  };
  var numberArr = (0, import_react231.useMemo)(getShowNumber, [
    value2,
    length2,
    thousands
  ]);
  var setNumberTransform = (0, import_react231.useCallback)(function() {
    if (countupRef.current) {
      var numberItems = countupRef.current.querySelectorAll(".nut-countup-number");
      var numberFilterArr = numberArr.filter(function(item) {
        return !Number.isNaN(Number(item));
      });
      Object.keys(numberItems).forEach(function(key2) {
        var elem2 = numberItems[Number(key2)];
        var idx = Number(numberFilterArr[Number(key2)]);
        if ((idx || idx === 0) && elem2) {
          var transform2 = "translate(0, -".concat((idx === 0 ? 10 : idx) * 5, "%)");
          elem2.style.transform = transform2;
          elem2.style.webkitTransform = transform2;
        }
      });
    }
  }, [
    numberArr
  ]);
  var numberEaseStyle = {
    transitionDuration: "".concat(duration, "s")
  };
  (0, import_react231.useEffect)(function() {
    timerRef.current = window.setTimeout(function() {
      setNumberTransform();
    }, delay);
    return function() {
      window.clearTimeout(timerRef.current);
    };
  }, [
    numberArr,
    delay,
    setNumberTransform
  ]);
  return import_react231.default.createElement("div", {
    className: "".concat(classPrefix33, " ").concat(className),
    ref: countupRef
  }, import_react231.default.createElement("ul", {
    className: "".concat(classPrefix33, "-list")
  }, numberArr.map(function(item, idx) {
    return import_react231.default.createElement("li", {
      className: "".concat(classPrefix33, "-listitem ").concat(!Number.isNaN(Number(item)) ? "".concat(classPrefix33, "-listitem-number") : ""),
      key: idx
    }, !Number.isNaN(Number(item)) ? import_react231.default.createElement("span", {
      className: "".concat(classPrefix33, "-number"),
      style: numberEaseStyle
    }, _to_consumable_array(numbers).concat(_to_consumable_array(numbers)).map(function(number4, subidx) {
      return import_react231.default.createElement("span", {
        className: "".concat(classPrefix33, "-number-text"),
        key: subidx
      }, number4);
    })) : import_react231.default.createElement("span", {
      className: "".concat(classPrefix33, "-separator")
    }, item));
  })));
};
CountUp.displayName = "NutCountUp";

// node_modules/@nutui/nutui-react/dist/es/packages/animatingnumbers/animatingnumbers.js
var defaultProps74 = {};
var AnimatingNumbers = function(Component2) {
  "use strict";
  _inherits(AnimatingNumbers2, Component2);
  function AnimatingNumbers2(props) {
    _class_call_check(this, AnimatingNumbers2);
    var _this;
    _this = _call_super(this, AnimatingNumbers2, [
      props
    ]);
    _this.state = {};
    return _this;
  }
  _create_class(AnimatingNumbers2, [
    {
      key: "render",
      value: function render2() {
        return import_react232.default.createElement("div", {
          className: "nut-animatingnumbers"
        });
      }
    }
  ]);
  return AnimatingNumbers2;
}(import_react232.Component);
_define_property(AnimatingNumbers, "defaultProps", defaultProps74);
_define_property(AnimatingNumbers, "displayName", "NutAnimatingNumbers");
_define_property(AnimatingNumbers, "CountUp", CountUp);

// node_modules/@nutui/nutui-react/dist/es/packages/animatingnumbers/index.js
AnimatingNumbers.CountUp = CountUp;
var animatingnumbers_default = AnimatingNumbers;

// node_modules/@nutui/nutui-react/dist/es/packages/audio/audio.js
var import_react233 = __toESM(require_react());
var import_classnames68 = __toESM(require_classnames());
var defaultProps75 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  src: "",
  muted: false,
  autoPlay: false,
  loop: false,
  preload: "auto",
  type: "progress",
  onBack: function(e2) {
  },
  onForward: function(e2) {
  },
  onPause: function(e2) {
  },
  onEnd: function(e2) {
  },
  onMute: function(e2) {
  },
  onCanPlay: function(e2) {
  }
});
var Audio = function(props) {
  var watch = function watch2() {
    if (AudioRef && AudioRef.current) {
      var current = AudioRef.current;
      current.addEventListener("play", function() {
        setPlaying(true);
      });
    }
  };
  var locale = useConfig().locale;
  var _ref = _object_spread({}, defaultProps75, props), className = _ref.className, src = _ref.src, style = _ref.style, muted = _ref.muted, autoPlay = _ref.autoPlay, loop2 = _ref.loop, preload = _ref.preload, type4 = _ref.type, onBack = _ref.onBack, onForward = _ref.onForward, onPause = _ref.onPause, onEnd = _ref.onEnd, onMute = _ref.onMute, onCanPlay = _ref.onCanPlay, children2 = _ref.children, rest = _object_without_properties(_ref, [
    "className",
    "src",
    "style",
    "muted",
    "autoPlay",
    "loop",
    "preload",
    "type",
    "onBack",
    "onForward",
    "onPause",
    "onEnd",
    "onMute",
    "onCanPlay",
    "children"
  ]);
  var _useState = _sliced_to_array((0, import_react233.useState)(false), 2), playing = _useState[0], setPlaying = _useState[1];
  var _useState1 = _sliced_to_array((0, import_react233.useState)(0), 2), percent = _useState1[0], setPercent = _useState1[1];
  var _useState2 = _sliced_to_array((0, import_react233.useState)(false), 2), isCanPlay = _useState2[0], setIsCanPlay = _useState2[1];
  var _useState3 = _sliced_to_array((0, import_react233.useState)("00:00:00"), 2), currentDuration = _useState3[0], setCurrentDuration = _useState3[1];
  var AudioRef = (0, import_react233.useRef)(null);
  var statusRef = (0, import_react233.useRef)({
    currentTime: 0,
    currentDuration: "00:00:00",
    percent: 0,
    duration: "00:00:00",
    second: 0,
    hanMuted: muted,
    playing: autoPlay,
    handPlaying: false
  });
  var classPrefix33 = "nut-audio";
  var handleEnded = function(e2) {
    if (loop2) {
      console.warn(locale.audio.tips || "onPlayEnd事件在loop=false时才会触发");
    } else {
      onEnd === null || onEnd === void 0 ? void 0 : onEnd(e2);
    }
  };
  (0, import_react233.useEffect)(function() {
    watch();
  }, []);
  (0, import_react233.useEffect)(function() {
  }, [
    currentDuration
  ]);
  var handleStatusChange = function() {
    setPlaying(!playing);
    if (playing) {
      AudioRef && AudioRef.current && AudioRef.current.pause();
    } else {
      AudioRef && AudioRef.current && AudioRef.current.play();
    }
  };
  var renderIcon = function() {
    return import_react233.default.createElement("div", {
      className: "".concat(classPrefix33, "-icon")
    }, import_react233.default.createElement("div", {
      className: (0, import_classnames68.default)("".concat(classPrefix33, "-icon-box"), playing ? "".concat(classPrefix33, "-icon-play") : "".concat(classPrefix33, "-icon-stop")),
      onClick: handleStatusChange
    }, import_react233.default.createElement(m2, {
      className: playing ? "nut-icon-loading" : ""
    })));
  };
  var handleBack = function() {
    if (statusRef.current.currentTime > 0 && AudioRef.current) {
      statusRef.current.currentTime--;
      AudioRef.current.currentTime = statusRef.current.currentTime;
      onBack === null || onBack === void 0 ? void 0 : onBack(AudioRef.current);
    }
  };
  var handleForward = function() {
    if (AudioRef.current) {
      statusRef.current.currentTime++;
      AudioRef.current.currentTime = statusRef.current.currentTime;
      onForward === null || onForward === void 0 ? void 0 : onForward(AudioRef.current);
    }
  };
  var handleMute = function() {
    if (AudioRef.current) {
      AudioRef.current.muted = !AudioRef.current.muted;
      onMute === null || onMute === void 0 ? void 0 : onMute(AudioRef.current);
    }
  };
  var handlePause = function(e2) {
    setPlaying(false);
    onPause === null || onPause === void 0 ? void 0 : onPause(e2);
  };
  var formatSeconds = function(value2) {
    if (!value2) {
      return "00:00:00";
    }
    var time2 = parseInt(value2);
    var hours = Math.floor(time2 / 3600);
    var minutes = Math.floor((time2 - hours * 3600) / 60);
    var seconds = time2 - hours * 3600 - minutes * 60;
    var result = "";
    result += "".concat("0".concat(hours.toString()).slice(-2), ":");
    result += "".concat("0".concat(minutes.toString()).slice(-2), ":");
    result += "0".concat(seconds.toString()).slice(-2);
    return result;
  };
  var renderProgerss = function() {
    return import_react233.default.createElement(import_react233.default.Fragment, null, import_react233.default.createElement("div", {
      className: "".concat(classPrefix33, "-progress")
    }, import_react233.default.createElement("div", {
      className: "time"
    }, currentDuration), import_react233.default.createElement("div", {
      className: "".concat(classPrefix33, "-progress-bar-wrapper")
    }, import_react233.default.createElement(range_default, {
      value: percent,
      onChange: function(val2) {
        return setPercent(val2);
      },
      currentDescription: null,
      maxDescription: null,
      minDescription: null,
      "inactive-color": "#cccccc",
      "active-color": "#FF0F23"
    })), import_react233.default.createElement("div", {
      className: "time"
    }, AudioRef.current ? formatSeconds("".concat(statusRef.current.second)) : "00:00:00")), import_react233.default.createElement("div", {
      className: isCanPlay ? "custom-button-group" : "custom-button-group-disable"
    }, import_react233.default.createElement(button_default, {
      type: "primary",
      size: "small",
      className: "back",
      onClick: handleBack
    }, locale.audio.back || "快退"), import_react233.default.createElement(button_default, {
      type: "primary",
      size: "small",
      className: "start",
      onClick: handleStatusChange
    }, playing ? "".concat(locale.audio.pause || "暂停") : "".concat(locale.audio.start || "开始")), import_react233.default.createElement(button_default, {
      type: "primary",
      size: "small",
      onClick: handleForward
    }, locale.audio.forward || "快进"), import_react233.default.createElement(button_default, {
      type: AudioRef.current && AudioRef.current.muted ? "default" : "primary",
      size: "small",
      onClick: handleMute
    }, locale.audio.mute || "静音")));
  };
  var renderNone = function() {
    return import_react233.default.createElement("div", {
      className: "".concat(classPrefix33, "-none-container"),
      onClick: handleStatusChange
    }, children2);
  };
  var renderAudio = function() {
    switch (type4) {
      case "icon":
        return renderIcon();
      case "progress":
        return renderProgerss();
      case "none":
        return renderNone();
      default:
        return null;
    }
  };
  var handleCanplay = function(e2) {
    setIsCanPlay(true);
    if (autoPlay && !playing) {
      AudioRef && AudioRef.current && AudioRef.current.play();
    }
    if (AudioRef.current) {
      statusRef.current.second = AudioRef.current.duration || 0;
      onCanPlay === null || onCanPlay === void 0 ? void 0 : onCanPlay(e2);
    }
  };
  var onTimeupdate = function(e2) {
    var time2 = parseInt(String(e2.target.currentTime));
    var formated = formatSeconds("".concat(time2));
    statusRef.current.currentDuration = formated;
    setPercent(time2 / statusRef.current.second * 100);
    setCurrentDuration(formated);
    statusRef.current.currentTime = time2;
  };
  return import_react233.default.createElement("div", _object_spread({
    className: (0, import_classnames68.default)(classPrefix33, className),
    style
  }, rest), renderAudio(), import_react233.default.createElement("audio", {
    className: "audioMain",
    controls: type4 === "controls",
    ref: AudioRef,
    src,
    muted,
    preload,
    loop: loop2,
    onPause: function(e2) {
      return handlePause(e2);
    },
    onEnded: function(e2) {
      return handleEnded(e2);
    },
    onCanPlay: function(e2) {
      return handleCanplay(e2);
    },
    onTimeUpdate: function(e2) {
      return onTimeupdate(e2);
    }
  }, import_react233.default.createElement("track", {
    kind: "captions"
  })));
};
Audio.displayName = "NutAudio";

// node_modules/@nutui/nutui-react/dist/es/packages/audio/index.js
var audio_default = Audio;

// node_modules/@nutui/nutui-react/dist/es/packages/avatar/avatar.js
var import_react236 = __toESM(require_react());
var import_classnames70 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/avatargroup/context.js
var import_react234 = __toESM(require_react());
var AvatarContext = (0, import_react234.createContext)({});

// node_modules/@nutui/nutui-react/dist/es/packages/avatargroup/avatargroup.js
var import_react235 = __toESM(require_react());
var import_classnames69 = __toESM(require_classnames());
var defaultProps76 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  maxContent: "",
  max: "",
  maxBackground: "#eee",
  maxColor: "#666",
  gap: "-8",
  level: "left"
});
var classPrefix24 = "nut-avatar-group";
var AvatarGroup = function(props) {
  var propAvatarGroup = _object_spread({}, defaultProps76, props);
  var className = propAvatarGroup.className, style = propAvatarGroup.style, children2 = propAvatarGroup.children;
  var avatarGroupRef = (0, import_react235.useRef)(null);
  var cls = (0, import_classnames69.default)(classPrefix24, className);
  var parentAvatar = {
    propAvatarGroup,
    avatarGroupRef
  };
  return import_react235.default.createElement(AvatarContext.Provider, {
    value: parentAvatar
  }, import_react235.default.createElement("div", {
    className: cls,
    style,
    ref: avatarGroupRef
  }, children2));
};
AvatarGroup.displayName = "NutAvatarGroup";

// node_modules/@nutui/nutui-react/dist/es/packages/avatargroup/index.js
var avatargroup_default = AvatarGroup;

// node_modules/@nutui/nutui-react/dist/es/packages/avatar/avatar.js
var defaultProps77 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  size: "",
  shape: "round",
  icon: "",
  background: "#eee",
  color: "#666",
  fit: "cover",
  src: "",
  alt: ""
});
var classPrefix25 = "nut-avatar";
var Avatar = function(props) {
  var _ref = _object_spread({}, defaultProps77, props), children2 = _ref.children, size = _ref.size, shape = _ref.shape, background = _ref.background, color = _ref.color, src = _ref.src, alt = _ref.alt, icon = _ref.icon, fit = _ref.fit, className = _ref.className, style = _ref.style, onClick = _ref.onClick, onError = _ref.onError, rest = _object_without_properties(_ref, [
    "children",
    "size",
    "shape",
    "background",
    "color",
    "src",
    "alt",
    "icon",
    "fit",
    "className",
    "style",
    "onClick",
    "onError"
  ]);
  var _useState = _sliced_to_array((0, import_react236.useState)(0), 2), maxSum = _useState[0], setMaxSum = _useState[1];
  var _useState1 = _sliced_to_array((0, import_react236.useState)(false), 2), showMax = _useState1[0], setShowMax = _useState1[1];
  var _useState2 = _sliced_to_array((0, import_react236.useState)(1), 2), avatarIndex = _useState2[0], setAvatarIndex = _useState2[1];
  var avatarRef = (0, import_react236.useRef)(null);
  var parent2 = (0, import_react236.useContext)(AvatarContext);
  var sizeValue = [
    "large",
    "normal",
    "small"
  ];
  var propAvatarGroup = parent2.propAvatarGroup, avatarGroupRef = parent2.avatarGroupRef;
  var _obj;
  var classes = (0, import_classnames70.default)((_obj = {}, _define_property(_obj, "nut-avatar-".concat((propAvatarGroup === null || propAvatarGroup === void 0 ? void 0 : propAvatarGroup.size) || size || "normal"), true), _define_property(_obj, "nut-avatar-".concat((propAvatarGroup === null || propAvatarGroup === void 0 ? void 0 : propAvatarGroup.shape) || shape), true), _define_property(_obj, "nut-avatar-".concat((propAvatarGroup === null || propAvatarGroup === void 0 ? void 0 : propAvatarGroup.size) || size || "normal", "-round"), shape === "round" && true), _obj));
  var cls = (0, import_classnames70.default)(classPrefix25, classes, className);
  var styles = _object_spread({
    width: sizeValue.indexOf(size) > -1 ? "" : "".concat(size, "px"),
    height: sizeValue.indexOf(size) > -1 ? "" : "".concat(size, "px"),
    backgroundColor: "".concat(background),
    color,
    marginLeft: avatarIndex !== 1 && (propAvatarGroup === null || propAvatarGroup === void 0 ? void 0 : propAvatarGroup.gap) ? "".concat(propAvatarGroup === null || propAvatarGroup === void 0 ? void 0 : propAvatarGroup.gap, "px") : "",
    zIndex: (propAvatarGroup === null || propAvatarGroup === void 0 ? void 0 : propAvatarGroup.level) === "right" ? "".concat(Math.abs(maxSum - avatarIndex)) : ""
  }, style);
  var maxStyles = {
    backgroundColor: "".concat(propAvatarGroup === null || propAvatarGroup === void 0 ? void 0 : propAvatarGroup.maxBackground),
    color: "".concat(propAvatarGroup === null || propAvatarGroup === void 0 ? void 0 : propAvatarGroup.maxColor)
  };
  var avatarLength = (0, import_react236.useCallback)(function(children3) {
    var _avatarRef_current_dataset, _avatarRef_current;
    for (var i6 = 0; i6 < children3.length; i6++) {
      if (children3[i6] && children3[i6].classList && children3[i6].classList[0] === "nut-avatar") {
        children3[i6].setAttribute("data-index", i6 + 1);
      }
    }
    var index2 = Number(avatarRef === null || avatarRef === void 0 ? void 0 : (_avatarRef_current = avatarRef.current) === null || _avatarRef_current === void 0 ? void 0 : (_avatarRef_current_dataset = _avatarRef_current.dataset) === null || _avatarRef_current_dataset === void 0 ? void 0 : _avatarRef_current_dataset.index);
    var maxCount = (propAvatarGroup === null || propAvatarGroup === void 0 ? void 0 : propAvatarGroup.max) || children3.length;
    setMaxSum(children3.length);
    setAvatarIndex(index2);
    if (index2 === children3.length && index2 !== maxCount && children3.length > maxCount) {
      setShowMax(true);
    }
  }, [
    propAvatarGroup === null || propAvatarGroup === void 0 ? void 0 : propAvatarGroup.max
  ]);
  (0, import_react236.useEffect)(function() {
    var avatarChildren = avatarGroupRef === null || avatarGroupRef === void 0 ? void 0 : avatarGroupRef.current.children;
    if (avatarChildren) {
      avatarLength(avatarChildren);
    }
  }, [
    avatarLength,
    avatarGroupRef
  ]);
  var errorEvent = function() {
    onError && onError();
  };
  var clickAvatar = function(e2) {
    onClick && onClick(e2);
  };
  return import_react236.default.createElement(import_react236.default.Fragment, null, (showMax || !(propAvatarGroup === null || propAvatarGroup === void 0 ? void 0 : propAvatarGroup.max) || avatarIndex <= (propAvatarGroup === null || propAvatarGroup === void 0 ? void 0 : propAvatarGroup.max)) && import_react236.default.createElement("div", _object_spread_props(_object_spread({
    className: cls
  }, rest), {
    style: !showMax ? styles : maxStyles,
    onClick: clickAvatar,
    ref: avatarRef
  }), (!(propAvatarGroup === null || propAvatarGroup === void 0 ? void 0 : propAvatarGroup.max) || avatarIndex <= (propAvatarGroup === null || propAvatarGroup === void 0 ? void 0 : propAvatarGroup.max)) && import_react236.default.createElement(import_react236.default.Fragment, null, src && import_react236.default.createElement(image_default, {
    className: "nut-avatar-img",
    src,
    alt,
    style: {
      objectFit: fit
    },
    onError: errorEvent
  }), import_react236.default.isValidElement(icon) ? import_react236.default.cloneElement(icon, _object_spread_props(_object_spread({}, icon.props), {
    className: "".concat(icon.props.className || "", " nut-avatar-icon")
  })) : null, children2 && import_react236.default.createElement("span", {
    className: "nut-avatar-text"
  }, children2), !src && !icon && !children2 && import_react236.default.createElement(m4, {
    className: "nut-avatar-icon"
  })), showMax && import_react236.default.createElement("div", {
    className: "nut-avatar-text"
  }, (propAvatarGroup === null || propAvatarGroup === void 0 ? void 0 : propAvatarGroup.maxContent) ? propAvatarGroup === null || propAvatarGroup === void 0 ? void 0 : propAvatarGroup.maxContent : "+ ".concat(avatarIndex - Number((propAvatarGroup === null || propAvatarGroup === void 0 ? void 0 : propAvatarGroup.max) || 0)))));
};
Avatar.displayName = "NutAvatar";
Avatar.Group = avatargroup_default;

// node_modules/@nutui/nutui-react/dist/es/packages/avatar/index.js
var avatar_default = Avatar;

// node_modules/@nutui/nutui-react/dist/es/packages/circleprogress/circleprogress.js
var import_react237 = __toESM(require_react());
var import_classnames71 = __toESM(require_classnames());
var defaultProps78 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  strokeWidth: 5,
  radius: 50,
  strokeLinecap: "round",
  color: "#FF0F23",
  background: "#e5e9f2",
  clockwise: true
});
var classPrefix26 = "nut-circleprogress";
var CircleProgress = function(props) {
  var _stop;
  var _ref = _object_spread({}, defaultProps78, props), children2 = _ref.children, percent = _ref.percent, className = _ref.className, radius = _ref.radius, clockwise = _ref.clockwise, strokeWidth = _ref.strokeWidth, color = _ref.color, background = _ref.background, style = _ref.style, strokeLinecap = _ref.strokeLinecap, restProps = _object_without_properties(_ref, [
    "children",
    "percent",
    "className",
    "radius",
    "clockwise",
    "strokeWidth",
    "color",
    "background",
    "style",
    "strokeLinecap"
  ]);
  var classes = (0, import_classnames71.default)(classPrefix26, className);
  var refRandomId = Math.random().toString(36).slice(-8);
  var styles = _object_spread({
    height: "".concat(Number(radius) * 2, "px"),
    width: "".concat(Number(radius) * 2, "px")
  }, style);
  var pathStyle = {
    stroke: background
  };
  var hoverStyle = function() {
    var perimeter = 283;
    var offset = perimeter * Number(percent) / 100;
    return {
      stroke: isObject(color) ? "url(#".concat(refRandomId, ")") : color,
      strokeDasharray: "".concat(offset, "px ").concat(perimeter, "px")
    };
  };
  var path = function() {
    var isWise = clockwise ? 1 : 0;
    return "M 50 50 m -45 0 a 45 45 0 1 ".concat(isWise, " 90 0  a 45 45 0 1 ").concat(isWise, " -90 0");
  };
  var stop2 = function() {
    if (!isObject(color)) {
      return;
    }
    var colorArr = Object.keys(color).sort(function(a, b) {
      return parseFloat(a) - parseFloat(b);
    });
    var stopArr = [];
    colorArr.forEach(function(item) {
      var obj = {
        key: "",
        value: ""
      };
      obj.key = item;
      obj.value = color[item];
      stopArr.push(obj);
    });
    return stopArr;
  };
  return import_react237.default.createElement("div", _object_spread({
    className: classes,
    style: styles
  }, restProps), import_react237.default.createElement("svg", {
    viewBox: "0 0 100 100"
  }, import_react237.default.createElement("defs", null, import_react237.default.createElement("linearGradient", {
    id: refRandomId,
    x1: "100%",
    y1: "0%",
    x2: "0%",
    y2: "0%"
  }, (_stop = stop2()) === null || _stop === void 0 ? void 0 : _stop.map(function(item, index2) {
    return import_react237.default.createElement("stop", {
      key: index2,
      offset: item.key,
      stopColor: item.value
    });
  }))), import_react237.default.createElement("path", {
    className: "nut-circleprogress-path",
    d: path(),
    style: pathStyle,
    fill: "none",
    strokeWidth
  }), import_react237.default.createElement("path", {
    className: "nut-circleprogress-hover",
    style: hoverStyle(),
    d: path(),
    fill: "none",
    strokeLinecap,
    transform: "rotate(90,50,50)",
    strokeWidth
  })), import_react237.default.createElement("div", {
    className: "nut-circleprogress-text"
  }, children2));
};
CircleProgress.displayName = "NutCircleProgress";

// node_modules/@nutui/nutui-react/dist/es/packages/circleprogress/index.js
var circleprogress_default = CircleProgress;

// node_modules/@nutui/nutui-react/dist/es/packages/collapse/collapse.js
var import_react240 = __toESM(require_react());
var import_classnames73 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/collapseitem/collapseitem.js
var import_react239 = __toESM(require_react());
var import_classnames72 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/collapse/context.js
var import_react238 = __toESM(require_react());
var collapseContext = {
  isOpen: function(name2) {
    return true;
  },
  updateValue: function(name2) {
  },
  expandIcon: null,
  rotate: 180
};
var context_default6 = (0, import_react238.createContext)(collapseContext);

// node_modules/@nutui/nutui-react/dist/es/packages/collapseitem/collapseitem.js
var defaultProps79 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  title: null,
  name: "",
  expandIcon: null,
  disabled: false,
  extra: null
});
var CollapseItem = function(props) {
  var _ref = _object_spread({}, defaultProps79, props), children2 = _ref.children, title = _ref.title, name2 = _ref.name, disabled = _ref.disabled, expandIcon = _ref.expandIcon, rotate = _ref.rotate, extra = _ref.extra, style = _ref.style, className = _ref.className, rest = _object_without_properties(_ref, [
    "children",
    "title",
    "name",
    "disabled",
    "expandIcon",
    "rotate",
    "extra",
    "style",
    "className"
  ]);
  var classPrefix33 = "nut-collapse-item";
  var context2 = (0, import_react239.useContext)(context_default6);
  var wrapperRef = (0, import_react239.useRef)(null);
  var contentRef = (0, import_react239.useRef)(null);
  var expanded = (0, import_react239.useMemo)(function() {
    if (context2) {
      return context2.isOpen(name2);
    }
    return false;
  }, [
    name2,
    context2.isOpen
  ]);
  var iconStyle = (0, import_react239.useMemo)(function() {
    return expanded ? {
      transform: "translateY(-50%) rotate(".concat(rotate || context2.rotate, "deg)")
    } : {
      transform: "translateY(-50%)"
    };
  }, [
    expanded,
    rotate
  ]);
  var _useState = _sliced_to_array((0, import_react239.useState)(0), 2), tran = _useState[0], setTran = _useState[1];
  var _useRefState = _sliced_to_array(useRefState(0), 2), currentHeight = _useRefState[0], setCurrentHeight = _useRefState[1];
  var _useState1 = _sliced_to_array((0, import_react239.useState)(0), 2), wrapperHeight = _useState1[0], setWrapperHeight = _useState1[1];
  var updateRectHeight = function() {
    var _ref2 = _async_to_generator(function() {
      var height2;
      return __generator(this, function(_state) {
        height2 = contentRef.current.offsetHeight;
        setCurrentHeight(height2);
        setWrapperHeight(expanded ? height2 : 0);
        setTimeout(function() {
          setTran(1);
        });
        return [
          2
        ];
      });
    });
    return function updateRectHeight2() {
      return _ref2.apply(this, arguments);
    };
  }();
  (0, import_react239.useEffect)(function() {
    updateRectHeight();
  }, [
    children2,
    expanded
  ]);
  var toggle = function() {
    var end = !expanded ? currentHeight.current : 0;
    setWrapperHeight(end);
  };
  var handleClick = function() {
    if (!disabled) {
      context2.updateValue(name2);
      toggle();
    }
  };
  var _obj;
  return import_react239.default.createElement("div", _object_spread({
    className: (0, import_classnames72.default)(classPrefix33, className),
    style
  }, rest), import_react239.default.createElement("div", {
    className: (0, import_classnames72.default)("".concat(classPrefix33, "-header"), _define_property({}, "".concat(classPrefix33, "-header-disabled"), disabled)),
    onClick: handleClick
  }, import_react239.default.createElement("div", {
    className: "".concat(classPrefix33, "-title")
  }, title), import_react239.default.createElement("div", {
    className: "".concat(classPrefix33, "-extra")
  }, extra), import_react239.default.createElement("div", {
    className: "".concat(classPrefix33, "-icon-box")
  }, import_react239.default.createElement("div", {
    className: "".concat(classPrefix33, "-icon"),
    style: iconStyle
  }, expandIcon || context2.expandIcon))), import_react239.default.createElement("div", {
    className: (0, import_classnames72.default)((_obj = {}, _define_property(_obj, "".concat(classPrefix33, "-content-wrapper"), true), _define_property(_obj, "".concat(classPrefix33, "-content-wrapper-tran"), true), _obj)),
    style: tran ? {
      height: wrapperHeight
    } : {},
    ref: wrapperRef
  }, import_react239.default.createElement("div", {
    className: "".concat(classPrefix33, "-content")
  }, import_react239.default.createElement("div", {
    ref: contentRef,
    className: "".concat(classPrefix33, "-content-text")
  }, children2))));
};
CollapseItem.displayName = "NutCollapseItem";

// node_modules/@nutui/nutui-react/dist/es/packages/collapseitem/index.js
var collapseitem_default = CollapseItem;

// node_modules/@nutui/nutui-react/dist/es/packages/collapse/collapse.js
var defaultProps80 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  defaultActiveName: [],
  accordion: false,
  expandIcon: null,
  rotate: 180
});
var Collapse = function(props) {
  var _$_object_spread = _object_spread({}, defaultProps80, props), className = _$_object_spread.className, style = _$_object_spread.style, children2 = _$_object_spread.children, activeName = _$_object_spread.activeName, defaultActiveName = _$_object_spread.defaultActiveName, accordion = _$_object_spread.accordion, expandIcon = _$_object_spread.expandIcon, rotate = _$_object_spread.rotate, onChange = _$_object_spread.onChange;
  var classPrefix33 = "nut-collapse";
  var _usePropsValue = _sliced_to_array(usePropsValue({
    value: activeName,
    defaultValue: defaultActiveName,
    finalValue: []
  }), 2), value2 = _usePropsValue[0], setValue = _usePropsValue[1];
  var changeVal = function(newValue, name2, isOpen2) {
    setValue(newValue);
    onChange && onChange(newValue, name2, isOpen2);
  };
  var updateValue = function(name2) {
    if (accordion) {
      if (value2 === name2) {
        changeVal("", name2, false);
      } else {
        changeVal(name2, name2, true);
      }
    } else if (Array.isArray(value2)) {
      if (value2.includes(name2)) {
        var newValue = value2.filter(function(v3) {
          return v3 !== name2;
        });
        changeVal(newValue, name2, false);
      } else {
        var newValue1 = value2.concat([
          name2
        ]);
        changeVal(newValue1, name2, true);
      }
    } else {
      console.warn("[NutUI] <Collapse> 未开启手风琴模式时 activeName 应为数组");
    }
  };
  var isOpen = (0, import_react240.useCallback)(function(name2) {
    if (accordion) {
      return value2 === name2;
    }
    if (Array.isArray(value2)) {
      return value2.includes(name2);
    }
    return false;
  }, [
    accordion,
    value2
  ]);
  return import_react240.default.createElement(context_default6.Provider, {
    value: {
      isOpen,
      updateValue,
      expandIcon,
      rotate
    }
  }, import_react240.default.createElement("div", {
    className: (0, import_classnames73.default)(classPrefix33, className),
    style
  }, children2));
};
Collapse.displayName = "NutCollapse";
Collapse.Item = collapseitem_default;

// node_modules/@nutui/nutui-react/dist/es/packages/collapse/index.js
var collapse_default = Collapse;

// node_modules/@nutui/nutui-react/dist/es/packages/countdown/countdown.js
var import_react241 = __toESM(require_react());
var defaultProps81 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  type: "default",
  paused: false,
  startTime: Date.now(),
  endTime: Date.now(),
  remainingTime: 0,
  millisecond: false,
  format: "HH:mm:ss",
  autoStart: true,
  time: 0,
  destroy: false
});
var InternalCountDown = function(props, ref) {
  var _ref = _object_spread({}, defaultProps81, props), type4 = _ref.type, paused = _ref.paused, startTime = _ref.startTime, endTime = _ref.endTime, remainingTime = _ref.remainingTime, millisecond = _ref.millisecond, format2 = _ref.format, autoStart = _ref.autoStart, time2 = _ref.time, destroy = _ref.destroy, className = _ref.className, style = _ref.style, onEnd = _ref.onEnd, onPaused = _ref.onPaused, onRestart = _ref.onRestart, onUpdate = _ref.onUpdate, children2 = _ref.children, rest = _object_without_properties(_ref, [
    "type",
    "paused",
    "startTime",
    "endTime",
    "remainingTime",
    "millisecond",
    "format",
    "autoStart",
    "time",
    "destroy",
    "className",
    "style",
    "onEnd",
    "onPaused",
    "onRestart",
    "onUpdate",
    "children"
  ]);
  var classPrefix33 = "nut-countdown";
  var _useState = _sliced_to_array((0, import_react241.useState)(0), 2), restTimeStamp = _useState[0], setRestTime = _useState[1];
  var stateRef = (0, import_react241.useRef)({
    pauseTime: 0,
    curr: 0,
    isPaused: paused,
    isIninted: false,
    timer: 0,
    restTime: 0,
    counting: !paused && autoStart,
    handleEndTime: Date.now(),
    diffTime: 0
  });
  var getTimeStamp = function(timeStr) {
    if (!timeStr)
      return Date.now();
    var t = timeStr;
    t = Number(t) > 0 ? +t : t.toString().replace(/-/g, "/");
    return new Date(t).getTime();
  };
  var initTime = function() {
    if (remainingTime) {
      stateRef.current.handleEndTime = Date.now() + Number(remainingTime);
    } else {
      stateRef.current.handleEndTime = endTime;
      stateRef.current.diffTime = Date.now() - getTimeStamp(startTime);
    }
    if (!stateRef.current.counting)
      stateRef.current.counting = true;
    tick();
  };
  var tick = function() {
    stateRef.current.timer = requestAnimationFrame(function() {
      if (stateRef.current.counting) {
        var currentTime = Date.now() - stateRef.current.diffTime;
        var remainTime = Math.max(stateRef.current.handleEndTime - currentTime, 0);
        stateRef.current.restTime = remainTime;
        setRestTime(remainTime);
        if (!remainTime) {
          stateRef.current.counting = false;
          pause();
          onEnd && onEnd();
        }
        if (remainTime > 0) {
          tick();
        }
      }
    });
  };
  var formatRemainTime = function(t, type5) {
    var ts2 = t;
    var rest2 = {
      d: 0,
      h: 0,
      m: 0,
      s: 0,
      ms: 0
    };
    var SECOND = 1e3;
    var MINUTE = 60 * SECOND;
    var HOUR = 60 * MINUTE;
    var DAY = 24 * HOUR;
    if (ts2 > 0) {
      rest2.d = ts2 >= SECOND ? Math.floor(ts2 / DAY) : 0;
      rest2.h = Math.floor(ts2 % DAY / HOUR);
      rest2.m = Math.floor(ts2 % HOUR / MINUTE);
      rest2.s = Math.floor(ts2 % MINUTE / SECOND);
      rest2.ms = Math.floor(ts2 % SECOND);
    }
    return type5 === "custom" ? rest2 : parseFormat(_object_spread({}, rest2));
  };
  var parseFormat = function(time3) {
    var d30 = time3.d;
    var h3 = time3.h, m13 = time3.m, s8 = time3.s, ms = time3.ms;
    var formatCache = format2;
    if (formatCache.includes("DD")) {
      formatCache = formatCache.replace("DD", padZero(d30));
    } else {
      h3 += Number(d30) * 24;
    }
    if (formatCache.includes("HH")) {
      formatCache = formatCache.replace("HH", padZero(h3));
    } else {
      m13 += Number(h3) * 60;
    }
    if (formatCache.includes("mm")) {
      formatCache = formatCache.replace("mm", padZero(m13));
    } else {
      s8 += Number(m13) * 60;
    }
    if (formatCache.includes("ss")) {
      formatCache = formatCache.replace("ss", padZero(s8));
    } else {
      ms += Number(s8) * 1e3;
    }
    if (formatCache.includes("S")) {
      var msC = padZero(ms, 3).toString();
      if (formatCache.includes("SSS")) {
        formatCache = formatCache.replace("SSS", msC);
      } else if (formatCache.includes("SS")) {
        formatCache = formatCache.replace("SS", msC.slice(0, 2));
      } else if (formatCache.includes("S")) {
        formatCache = formatCache.replace("S", msC.slice(0, 1));
      }
    }
    var isTextDom = type4 === "text" ? '<span class="nut-countdown-number-text">$1</span>' : '<span class="nut-countdown-number">$1</span>';
    formatCache = formatCache.replace(/(\d+)/g, type4 === "primary" ? '<span class="nut-countdown-number-primary">$1</span>' : isTextDom);
    return formatCache;
  };
  var pause = function() {
    cancelAnimationFrame(stateRef.current.timer);
    stateRef.current.counting = false;
    onPaused && onPaused(stateRef.current.restTime);
  };
  (0, import_react241.useImperativeHandle)(ref, function() {
    return {
      start: function() {
        if (!stateRef.current.counting && !autoStart) {
          stateRef.current.counting = true;
          stateRef.current.handleEndTime = Date.now() + Number(stateRef.current.restTime);
          tick();
          onRestart && onRestart(stateRef.current.restTime);
        }
      },
      pause: function() {
        cancelAnimationFrame(stateRef.current.timer);
        stateRef.current.counting = false;
        onPaused && onPaused(stateRef.current.restTime);
      },
      reset: function() {
        if (!autoStart) {
          pause();
          stateRef.current.restTime = time2;
          setRestTime(time2);
        }
      }
    };
  });
  (0, import_react241.useEffect)(function() {
    var tranTime = formatRemainTime(stateRef.current.restTime, "custom");
    onUpdate && onUpdate(tranTime);
  }, [
    restTimeStamp
  ]);
  (0, import_react241.useEffect)(function() {
    if (stateRef.current.isIninted) {
      if (paused) {
        if (stateRef.current.counting) {
          pause();
        }
      } else {
        if (!stateRef.current.counting) {
          stateRef.current.counting = true;
          stateRef.current.handleEndTime = Date.now() + Number(stateRef.current.restTime);
          tick();
        }
        onRestart && onRestart(stateRef.current.restTime);
      }
    }
  }, [
    paused
  ]);
  (0, import_react241.useEffect)(function() {
    if (stateRef.current.isIninted) {
      initTime();
    }
  }, [
    endTime,
    startTime,
    remainingTime
  ]);
  (0, import_react241.useEffect)(function() {
    if (autoStart) {
      initTime();
    } else {
      stateRef.current.restTime = time2;
      setRestTime(time2);
    }
    if (!stateRef.current.isIninted) {
      stateRef.current.isIninted = true;
    }
    return componentWillUnmount;
  }, []);
  var componentWillUnmount = function() {
    destroy && cancelAnimationFrame(stateRef.current.timer);
  };
  var renderTime = function() {
    return formatRemainTime(stateRef.current.restTime);
  }();
  return import_react241.default.createElement(import_react241.default.Fragment, null, children2 || import_react241.default.createElement("div", _object_spread_props(_object_spread({
    className: "".concat(classPrefix33, " ").concat(className),
    style: _object_spread({}, style)
  }, rest), {
    dangerouslySetInnerHTML: {
      __html: "".concat(renderTime)
    }
  })));
};
var CountDown = import_react241.default.forwardRef(InternalCountDown);
CountDown.displayName = "NutCountDown";

// node_modules/@nutui/nutui-react/dist/es/packages/countdown/index.js
var countdown_default = CountDown;

// node_modules/@nutui/nutui-react/dist/es/packages/ellipsis/ellipsis.js
var import_react243 = __toESM(require_react());
var import_classnames74 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/hooks/use-isomprphic-layout-effect.js
var import_react242 = __toESM(require_react());
var useIsomorphicLayoutEffect2 = canUseDom ? import_react242.useLayoutEffect : import_react242.useEffect;

// node_modules/@nutui/nutui-react/dist/es/packages/ellipsis/ellipsis.js
var defaultProps82 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  content: "",
  direction: "end",
  rows: 1,
  expandText: "",
  collapseText: "",
  symbol: "...",
  lineHeight: "20"
});
var classPrefix27 = "nut-ellipsis";
var Ellipsis = function(props) {
  var _ellipsis_current, _ellipsis_current1;
  var _ref = _object_spread({}, defaultProps82, props), children2 = _ref.children, content2 = _ref.content, className = _ref.className, direction = _ref.direction, rows = _ref.rows, expandText = _ref.expandText, collapseText = _ref.collapseText, symbol = _ref.symbol, lineHeight = _ref.lineHeight, onClick = _ref.onClick, onChange = _ref.onChange, rest = _object_without_properties(_ref, [
    "children",
    "content",
    "className",
    "direction",
    "rows",
    "expandText",
    "collapseText",
    "symbol",
    "lineHeight",
    "onClick",
    "onChange"
  ]);
  var rtl = useRtl();
  var container = null;
  var maxHeight = 0;
  var _useState = _sliced_to_array((0, import_react243.useState)(false), 2), exceeded = _useState[0], setExceeded = _useState[1];
  var _useState1 = _sliced_to_array((0, import_react243.useState)(false), 2), expanded = _useState1[0], setExpanded = _useState1[1];
  var ellipsis = (0, import_react243.useRef)();
  var root = (0, import_react243.useRef)(null);
  var rtlClasses = (0, import_classnames74.default)(_define_property({}, "".concat(classPrefix27, "-rtl"), rtl));
  var classes = (0, import_classnames74.default)(classPrefix27, rtlClasses, className);
  useIsomorphicLayoutEffect2(function() {
    if (content2) {
      createContainer();
    }
  }, [
    content2
  ]);
  var createContainer = function() {
    if (!root.current)
      return;
    var originStyle = window.getComputedStyle(root.current);
    container = document.createElement("div");
    var styleNames = Array.prototype.slice.apply(originStyle);
    styleNames.forEach(function(name2) {
      container.style.setProperty(name2, originStyle.getPropertyValue(name2));
    });
    container.style.position = "fixed";
    container.style.left = "999999px";
    container.style.top = "999999px";
    container.style.zIndex = "-1000";
    container.style.height = "auto";
    container.style.minHeight = "auto";
    container.style.maxHeight = "auto";
    container.style.textOverflow = "clip";
    container.style.whiteSpace = "normal";
    container.style.webkitLineClamp = "unset";
    container.style.display = "block";
    var lineH = pxToNumber(originStyle.lineHeight === "normal" ? lineHeight : originStyle.lineHeight);
    maxHeight = Math.floor(lineH * (Number(rows) + 0.5) + pxToNumber(originStyle.paddingTop) + pxToNumber(originStyle.paddingBottom));
    container.innerText = content2;
    document.body.appendChild(container);
    calcEllipse();
    document.body.removeChild(container);
  };
  var calcEllipse = function() {
    if (container.offsetHeight <= maxHeight) {
      setExceeded(false);
    } else {
      setExceeded(true);
      var end = content2.length;
      var middle = Math.floor((0 + end) / 2);
      var ellipsised = direction === "middle" ? tailorMiddle([
        0,
        middle
      ], [
        middle,
        end
      ]) : tailor(0, end);
      ellipsis.current = ellipsised;
    }
  };
  var tailor = function(left, right) {
    var actionText = expanded ? collapseText : expandText;
    var end = content2.length;
    if (right - left <= 1) {
      if (direction === "end") {
        return {
          leading: content2.slice(0, left) + symbol
        };
      }
      return {
        tailing: symbol + content2.slice(right, end)
      };
    }
    var middle = Math.round((left + right) / 2);
    if (direction === "end") {
      container.innerText = content2.slice(0, middle) + symbol + actionText;
    } else {
      container.innerText = actionText + symbol + content2.slice(middle, end);
    }
    if (container.offsetHeight <= maxHeight) {
      if (direction === "end") {
        return tailor(middle, right);
      }
      return tailor(left, middle);
    }
    if (direction === "end") {
      return tailor(left, middle);
    }
    return tailor(middle, right);
  };
  var tailorMiddle = function(leftPart, rightPart) {
    var actionText = expanded ? collapseText : expandText;
    var end = content2.length;
    if (leftPart[1] - leftPart[0] <= 1 && rightPart[1] - rightPart[0] <= 1) {
      return {
        leading: content2.slice(0, leftPart[0]) + symbol,
        tailing: symbol + content2.slice(rightPart[1], end)
      };
    }
    var leftPartMiddle = Math.floor((leftPart[0] + leftPart[1]) / 2);
    var rightPartMiddle = Math.ceil((rightPart[0] + rightPart[1]) / 2);
    container.innerText = content2.slice(0, leftPartMiddle) + symbol + actionText + symbol + content2.slice(rightPartMiddle, end);
    if (container.offsetHeight <= maxHeight) {
      return tailorMiddle([
        leftPartMiddle,
        leftPart[1]
      ], [
        rightPart[0],
        rightPartMiddle
      ]);
    }
    return tailorMiddle([
      leftPart[0],
      leftPartMiddle
    ], [
      rightPartMiddle,
      rightPart[1]
    ]);
  };
  var pxToNumber = function(value2) {
    if (!value2)
      return 0;
    var match = value2.match(/^\d*(\.\d*)?/);
    return match ? Number(match[0]) : 0;
  };
  var clickHandle = function(type4) {
    if (type4 === 1) {
      setExpanded(true);
      onChange && onChange("expand");
    } else {
      setExpanded(false);
      onChange && onChange("collapse");
    }
  };
  var handleClick = function() {
    onClick && onClick();
  };
  return import_react243.default.createElement("div", _object_spread({
    className: classes,
    onClick: handleClick,
    ref: root
  }, rest), !exceeded ? content2 : null, exceeded && !expanded ? import_react243.default.createElement("span", null, (_ellipsis_current = ellipsis.current) === null || _ellipsis_current === void 0 ? void 0 : _ellipsis_current.leading, expandText ? import_react243.default.createElement("span", {
    className: "nut-ellipsis-text",
    onClick: function(e2) {
      e2.stopPropagation();
      clickHandle(1);
    }
  }, expandText) : null, (_ellipsis_current1 = ellipsis.current) === null || _ellipsis_current1 === void 0 ? void 0 : _ellipsis_current1.tailing) : null, exceeded && expanded ? import_react243.default.createElement("span", null, content2, expandText ? import_react243.default.createElement("span", {
    className: "nut-ellipsis-text",
    onClick: function(e2) {
      e2.stopPropagation();
      clickHandle(2);
    }
  }, collapseText) : null) : null);
};
Ellipsis.displayName = "NutEllipsis";

// node_modules/@nutui/nutui-react/dist/es/packages/ellipsis/index.js
var ellipsis_default = Ellipsis;

// node_modules/@nutui/nutui-react/dist/es/packages/imagepreview/imagepreview.js
var import_react252 = __toESM(require_react());
var import_classnames79 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/video/video.js
var import_react244 = __toESM(require_react());
var import_classnames75 = __toESM(require_classnames());
var defaultProps83 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  source: {
    type: {},
    src: ""
  },
  options: {
    controls: true,
    muted: false,
    autoplay: false,
    poster: "",
    playsinline: false,
    loop: false
  }
});
var classPrefix28 = "nut-video";
var Video = import_react244.default.forwardRef(function(props, ref) {
  var _ref = _object_spread({}, defaultProps83, props), children2 = _ref.children, source = _ref.source, options2 = _ref.options, className = _ref.className, onPlay = _ref.onPlay, onPause = _ref.onPause, onPlayEnd = _ref.onPlayEnd, restProps = _object_without_properties(_ref, [
    "children",
    "source",
    "options",
    "className",
    "onPlay",
    "onPause",
    "onPlayEnd"
  ]);
  var rootRef = (0, import_react244.useRef)(null);
  var classes = (0, import_classnames75.default)(classPrefix28, className);
  (0, import_react244.useEffect)(function() {
    init();
  }, []);
  var init = function() {
    if (rootRef.current) {
      var videoRef = rootRef.current;
      if (options2.autoplay) {
        setTimeout(function() {
          videoRef.play();
        }, 200);
      }
      if (options2.playsinline) {
        videoRef.setAttribute("playsinline", String(options2.playsinline));
        videoRef.setAttribute("webkit-playsinline", String(options2.playsinline));
        videoRef.setAttribute("x5-video-player-type", "h5-page");
        videoRef.setAttribute("x5-video-player-fullscreen", "false");
      }
      videoRef.addEventListener("play", function() {
        onPlay && onPlay(videoRef);
      });
      videoRef.addEventListener("pause", function() {
        onPause && onPause(videoRef);
      });
      videoRef.addEventListener("ended", function() {
        videoRef.currentTime = 0;
        onPlayEnd && onPlayEnd(videoRef);
      });
    }
  };
  var pause = function() {
    var _rootRef_current;
    rootRef === null || rootRef === void 0 ? void 0 : (_rootRef_current = rootRef.current) === null || _rootRef_current === void 0 ? void 0 : _rootRef_current.pause();
  };
  var play = function() {
    var _rootRef_current;
    rootRef === null || rootRef === void 0 ? void 0 : (_rootRef_current = rootRef.current) === null || _rootRef_current === void 0 ? void 0 : _rootRef_current.play();
  };
  import_react244.default.useImperativeHandle(ref, function() {
    return {
      pause,
      play
    };
  });
  return import_react244.default.createElement("div", _object_spread({
    className: classes
  }, restProps), import_react244.default.createElement("video", {
    className: "nut-video-player",
    muted: options2.muted,
    autoPlay: options2.autoplay,
    loop: options2.loop,
    poster: options2.poster,
    controls: options2.controls,
    ref: rootRef,
    src: source.src
  }, import_react244.default.createElement("source", {
    src: source.src,
    type: source.type
  }), import_react244.default.createElement("track", {
    kind: "captions"
  })));
});
Video.displayName = "NutVideo";

// node_modules/@nutui/nutui-react/dist/es/packages/video/index.js
var video_default = Video;

// node_modules/@nutui/nutui-react/dist/es/packages/swiper/index.js
var import_react251 = __toESM(require_react());

// node_modules/@nutui/nutui-react/dist/es/packages/swiper/swiper.js
var import_react248 = __toESM(require_react());
var import_classnames77 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/indicator/indicator.js
var import_react245 = __toESM(require_react());
var import_classnames76 = __toESM(require_classnames());
var defaultProps84 = {
  total: 2,
  current: 0,
  direction: "horizontal",
  color: "primary",
  type: "anchor"
};
var classPrefix29 = "nut-indicator";
var Indicator = function(props) {
  var maybeFixedWidth = function maybeFixedWidth2() {
    if (type4 === "dualScreen" || type4 === "slide") {
      return "".concat(classPrefix29, "-fixed-width");
    }
    return "";
  };
  var _ref = _object_spread({}, defaultProps84, props), color = _ref.color, type4 = _ref.type, total = _ref.total, current = _ref.current, children2 = _ref.children, className = _ref.className, direction = _ref.direction, rest = _object_without_properties(_ref, [
    "color",
    "type",
    "total",
    "current",
    "children",
    "className",
    "direction"
  ]);
  var _obj;
  var classes = (0, import_classnames76.default)((_obj = {}, _define_property(_obj, "".concat(classPrefix29, "-vertical"), direction === "vertical"), _define_property(_obj, "".concat(classPrefix29, "-white"), color === "default"), _define_property(_obj, "".concat(classPrefix29, "-track"), type4 === "slide"), _obj));
  var renderDotElement = function() {
    var childs = [];
    for (var item = 0; item < total; item++) {
      childs.push(item === current ? children2 || import_react245.default.createElement("div", {
        key: item,
        className: "".concat(classPrefix29, "-dot ").concat(classPrefix29, "-dot-active")
      }) : import_react245.default.createElement("div", {
        key: item,
        className: "".concat(classPrefix29, "-dot")
      }));
    }
    return childs;
  };
  var renderLineElement = function() {
    var trackWidth = 21;
    var sliderWidth = 6;
    var stride = (trackWidth - sliderWidth) / (total - 1);
    return import_react245.default.createElement("div", {
      style: {
        transform: "".concat(direction === "vertical" ? "translateY" : "translateX", "(").concat(current * stride, "px)")
      },
      className: "".concat(classPrefix29, "-line ").concat(classPrefix29, "-line-active")
    });
  };
  var renderByType = function(type5) {
    switch (type5) {
      case "slide":
        return renderLineElement();
      default:
        return renderDotElement();
    }
  };
  return import_react245.default.createElement("div", _object_spread({
    className: (0, import_classnames76.default)(classPrefix29, classes, maybeFixedWidth(), className)
  }, rest), renderByType(type4));
};
Indicator.displayName = "NutIndicator";

// node_modules/@nutui/nutui-react/dist/es/packages/indicator/index.js
var indicator_default = Indicator;

// node_modules/@nutui/nutui-react/dist/es/packages/swiper/effects/default.js
var import_react246 = __toESM(require_react());
var getPerSlidePosition = function(index2, position2, loop2, count) {
  var currentPosition = index2 * 100 + position2;
  if (loop2) {
    var cycle = count * 100;
    var shift = cycle / 2;
    var nextPosition = (currentPosition + shift) % cycle;
    var shiftedPosition = (nextPosition < 0 ? nextPosition + cycle : nextPosition) - shift;
    return "".concat(shiftedPosition, "%");
  }
  return "".concat(currentPosition, "%");
};
var defaultEffect = function(args) {
  return import_react246.default.Children.map(args.children, function(child, index2) {
    var isVertical = args.isVertical, getSpringsAxis = args.getSpringsAxis, loop2 = args.loop, count = args.count;
    var rtl = useRtl();
    var position2 = rtl ? "right" : "left";
    var _obj;
    return import_react246.default.createElement(animated.div, {
      className: "nut-swiper-slide",
      style: (_obj = {}, _define_property(_obj, isVertical ? "y" : "x", getSpringsAxis().to(function(position3) {
        return getPerSlidePosition(index2, position3, loop2, count);
      })), _define_property(_obj, isVertical ? "top" : position2, "-".concat(index2 * 100, "%")), _obj)
    }, child);
  });
};

// node_modules/@nutui/nutui-react/dist/es/packages/swiper/effects/focus.js
var import_react247 = __toESM(require_react());
var getPerSlidePosition2 = function(index2, position2, loop2, count) {
  var currentPosition = index2 * 100 + position2;
  if (loop2) {
    var cycle = count * 100;
    var shift = cycle / 2;
    var nextPosition = (currentPosition + shift) % cycle;
    var shiftedPosition = (nextPosition < 0 ? nextPosition + cycle : nextPosition) - shift;
    return "".concat(shiftedPosition, "%");
  }
  return "".concat(currentPosition, "%");
};
var focusEffect = function(args) {
  return import_react247.default.Children.map(args.children, function(child, index2) {
    var rtl = useRtl();
    var position2 = rtl ? "right" : "left";
    var isVertical = args.isVertical, springs = args.springs, transforms = args.transforms, loop2 = args.loop, count = args.count, swiperDirection = args.swiperDirection, dragging = args.dragging, current = args.current, effect2 = args.effect;
    var _obj;
    return import_react247.default.createElement(animated.div, {
      className: "nut-swiper-slide",
      style: (_obj = {}, _define_property(_obj, isVertical ? "y" : "x", springs[isVertical ? "y" : "x"].to(function(position3) {
        return getPerSlidePosition2(index2, position3, loop2, count);
      })), _define_property(_obj, isVertical ? "top" : position2, "-".concat(index2 * 100, "%")), _define_property(_obj, "scale", springs.s.to(function(ss) {
        var scales = getRefValue(transforms);
        if (!scales)
          return 1;
        var scale2 = scales[index2];
        var currentRefValue = getRefValue(current);
        if (dragging === false)
          ss = 0;
        var ps = ss * scale2;
        if (index2 === currentRefValue) {
          return Math.max(scale2 - ps, effect2.scale);
        }
        if (index2 === currentRefValue + swiperDirection.current) {
          return Math.min(scale2 + ps, 1);
        }
        return scale2;
      })), _obj)
    }, child);
  });
};
var useList = function(effect2, count, current) {
  var _useRefState = _sliced_to_array(useRefState([]), 2), transforms = _useRefState[0], setTransforms = _useRefState[1];
  (0, import_react247.useEffect)(function() {
    setTransforms(Array.from({
      length: count
    }).fill(1).map(function(scale2, index2) {
      return index2 !== getRefValue(current) ? scale2 * (effect2 ? effect2.scale : 1) : scale2;
    }));
  }, [
    count
  ]);
  return [
    transforms,
    setTransforms
  ];
};
var updateTransform = function(transforms, setTransforms, effect2, page) {
  setTransforms(getRefValue(transforms).map(function(s8, index2) {
    return (
      // eslint-disable-next-line no-nested-ternary
      page === index2 ? 1 : effect2 ? effect2.scale : 1
    );
  }));
};

// node_modules/@nutui/nutui-react/dist/es/packages/swiper/swiper.js
var defaultProps85 = {
  direction: "horizontal",
  indicator: false,
  loop: false,
  duration: 3e3,
  autoPlay: false,
  defaultValue: 0,
  touchable: true,
  effect: void 0
};
var Swiper = import_react248.default.forwardRef(function(props, ref) {
  var boundIndex = function boundIndex2(current2) {
    var min = 0;
    var max = count - 1;
    if (current2 === max && !loop2 && props.slideSize) {
      var slideSize = props.slideSize;
      var swiperSize = getSwiperSize();
      var ratio = (swiperSize - slideSize) / slideSize;
      return bound2(current2, min, max - ratio);
    }
    return current2;
  };
  var classPrefix33 = "nut-swiper";
  var _$_object_spread = _object_spread({}, defaultProps85, props), children2 = _$_object_spread.children, direction = _$_object_spread.direction, indicator = _$_object_spread.indicator, loop2 = _$_object_spread.loop, effect2 = _$_object_spread.effect, autoPlay = _$_object_spread.autoPlay, touchable = _$_object_spread.touchable, defaultValue = _$_object_spread.defaultValue, duration = _$_object_spread.duration, style = _$_object_spread.style, className = _$_object_spread.className;
  var isVertical = direction === "vertical";
  var count = (0, import_react248.useMemo)(function() {
    var c10 = 0;
    import_react248.default.Children.map(children2, function(child, index2) {
      c10 += 1;
    });
    return c10;
  }, [
    children2
  ]);
  var getSlideSize = function() {
    if (props.slideSize)
      return props.slideSize;
    if (stageRef.current) {
      if (isVertical)
        return stageRef.current.offsetHeight;
      return stageRef.current.offsetWidth;
    }
    return 0;
  };
  var getSwiperSize = function() {
    if (swiperRef.current) {
      if (isVertical)
        return swiperRef.current.offsetHeight;
      return swiperRef.current.offsetWidth;
    }
    return 0;
  };
  var bound2 = function(v3, min, max) {
    if (min !== void 0) {
      v3 = Math.max(v3, min);
    }
    if (max !== void 0) {
      v3 = Math.min(v3, max);
    }
    return v3;
  };
  var timeoutRef = (0, import_react248.useRef)(null);
  var _useState = _sliced_to_array((0, import_react248.useState)(false), 2), dragging = _useState[0], setDragging = _useState[1];
  var _useRefState = _sliced_to_array(useRefState(defaultValue), 2), current = _useRefState[0], setCurrent = _useRefState[1];
  var stageRef = (0, import_react248.useRef)(null);
  var swiperRef = (0, import_react248.useRef)(null);
  var _useSpring = _sliced_to_array(useSpring(function() {
    return {
      x: !isVertical ? current.current * 100 * -1 : 0,
      y: isVertical ? current.current * 100 * -1 : 0,
      s: 0,
      reset: function() {
      },
      config: {
        tension: 200,
        friction: 30
      }
    };
  }), 2), springs = _useSpring[0], api = _useSpring[1];
  (0, import_react248.useEffect)(function() {
    var _obj;
    api.start((_obj = {}, _define_property(_obj, isVertical ? "y" : "x", boundIndex(current.current) * -1 * 100), _define_property(_obj, "immediate", true), _obj));
  }, [
    swiperRef.current
  ]);
  var swiperDirection = (0, import_react248.useRef)(1);
  var _useList = _sliced_to_array(useList(effect2, count, current), 2), transforms = _useList[0], setTransforms = _useList[1];
  var runTimeSwiper = function() {
    var durationNumber = typeof duration === "string" ? parseInt(duration) : duration;
    var d30 = typeof autoPlay === "number" ? autoPlay : durationNumber;
    timeoutRef.current = window.setTimeout(function() {
      next();
      runTimeSwiper();
    }, d30);
  };
  (0, import_react248.useEffect)(function() {
    if (!autoPlay || dragging)
      return;
    runTimeSwiper();
    return function() {
      if (timeoutRef.current)
        window.clearTimeout(timeoutRef.current);
    };
  }, [
    autoPlay,
    duration,
    dragging,
    count
  ]);
  var to2 = function(index2) {
    var immediate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var _props_onChange;
    var targetIndex = bound2(index2, 0, count - 1);
    if (loop2) {
      var cycleIndex = index2 % count;
      targetIndex = cycleIndex < 0 ? cycleIndex + count : cycleIndex;
    }
    setCurrent(targetIndex);
    (_props_onChange = props.onChange) === null || _props_onChange === void 0 ? void 0 : _props_onChange.call(props, targetIndex);
    if (effect2) {
      updateTransform(transforms, setTransforms, effect2, targetIndex);
    }
    var _obj;
    api.start((_obj = {}, // 这里需要统一成百分比
    _define_property(_obj, isVertical ? "y" : "x", (loop2 ? -index2 : boundIndex(targetIndex) * -1) * 100), _define_property(_obj, "s", 0), _define_property(_obj, "immediate", immediate), _obj));
  };
  var getSpringsAxis = function() {
    return springs[isVertical ? "y" : "x"];
  };
  var next = function() {
    to2(Math.round(-getSpringsAxis().get() / 100) + 1);
  };
  var prev = function() {
    to2(Math.round(-getSpringsAxis().get() / 100) - 1);
  };
  import_react248.default.useImperativeHandle(ref, function() {
    return {
      to: to2,
      next,
      prev
    };
  });
  var bind = useDrag(function(state) {
    var axis = Number(isVertical);
    var slideSize = getSlideSize();
    var offset = state.offset[axis];
    setDragging(!!state.dragging);
    var distance = state.distance[axis];
    swiperDirection.current = state.direction[axis];
    if (state.last) {
      var swipeDirection = state.direction[axis];
      var velocity2 = state.velocity[axis];
      var minIndex = Math.floor(offset / slideSize);
      var maxIndex = minIndex + 1;
      var index2 = Math.round((offset + velocity2 * 2e3 * swipeDirection) / slideSize);
      to2(bound2(index2, minIndex, maxIndex));
    } else {
      var _obj;
      api.start((_obj = {}, _define_property(_obj, isVertical ? "y" : "x", -(offset / slideSize * 100)), _define_property(_obj, "s", distance / slideSize), _define_property(_obj, "immediate", true), _obj));
    }
  }, {
    enabled: touchable,
    transform: function(param) {
      var _param = _sliced_to_array(param, 2), x2 = _param[0], y = _param[1];
      return [
        -x2,
        -y
      ];
    },
    from: function() {
      var slideSize = getSlideSize();
      var x2 = springs.x.get() / 100 * slideSize;
      var y = springs.y.get() / 100 * slideSize;
      return [
        -x2,
        -y
      ];
    },
    bounds: function() {
      if (loop2)
        return {};
      var slideSize = getSlideSize();
      if (isVertical) {
        return {
          top: 0,
          bottom: (count - 1) * slideSize
        };
      }
      return {
        left: 0,
        right: (count - 1) * slideSize
      };
    },
    rubberband: true,
    triggerAllEvents: true,
    preventScroll: isVertical,
    axis: isVertical ? "y" : "x",
    pointer: {
      touch: true
    }
  });
  var renderIndicator = function() {
    if (import_react248.default.isValidElement(indicator))
      return indicator;
    if (!indicator)
      return null;
    var _obj;
    return import_react248.default.createElement("div", {
      className: (0, import_classnames77.default)((_obj = {}, _define_property(_obj, "".concat(classPrefix33, "-indicator"), true), _define_property(_obj, "".concat(classPrefix33, "-indicator-vertical"), isVertical), _define_property(_obj, "".concat(classPrefix33, "-indicator-horizontal"), !isVertical), _obj))
    }, import_react248.default.createElement(indicator_default, {
      current: getRefValue(current),
      total: count,
      direction
    }));
  };
  var renderEffect = function() {
    if (!effect2)
      return defaultEffect({
        children: children2,
        getSpringsAxis,
        loop: loop2,
        count,
        isVertical
      });
    if (effect2 && effect2.name === "focus") {
      return focusEffect({
        children: children2,
        springs,
        loop: loop2,
        count,
        isVertical,
        effect: effect2,
        current,
        swiperDirection,
        dragging,
        transforms
      });
    }
  };
  var renderSlides = function() {
    var _obj;
    return import_react248.default.createElement("div", {
      ref: stageRef,
      className: (0, import_classnames77.default)("".concat(classPrefix33, "-inner"), (_obj = {}, _define_property(_obj, "".concat(classPrefix33, "-inner-vertical"), isVertical), _define_property(_obj, "".concat(classPrefix33, "-inner-horizontal"), !isVertical), _obj)),
      style: _object_spread({}, props.slideSize ? _define_property({}, isVertical ? "height" : "width", "".concat(props.slideSize, "px")) : {})
    }, renderEffect());
  };
  return import_react248.default.createElement("div", _object_spread({
    className: (0, import_classnames77.default)(classPrefix33, "".concat(classPrefix33, "-canmove-").concat(direction), className),
    style,
    ref: swiperRef
  }, bind()), renderSlides(), renderIndicator());
});
Swiper.displayName = "NutSwiper";

// node_modules/@nutui/nutui-react/dist/es/packages/swiperitem/swiperitem.js
var import_react250 = __toESM(require_react());
var import_classnames78 = __toESM(require_classnames());
var defaultProps86 = {
  onClick: function(e2) {
    return void 0;
  }
};
var SwiperItem = function(props) {
  var classPrefix33 = "nut-swiper-item";
  var _$_object_spread = _object_spread({}, defaultProps86, props), className = _$_object_spread.className, style = _$_object_spread.style, children2 = _$_object_spread.children;
  var classes = (0, import_classnames78.default)(classPrefix33, className);
  return import_react250.default.createElement("div", {
    className: classes,
    onClick: props.onClick,
    style
  }, children2);
};
SwiperItem.displayName = "NutSwiperItem";

// node_modules/@nutui/nutui-react/dist/es/packages/swiperitem/index.js
var swiperitem_default = SwiperItem;

// node_modules/@nutui/nutui-react/dist/es/packages/swiper/index.js
var InnerSwiper = Swiper;
InnerSwiper.Item = swiperitem_default;
var swiper_default = InnerSwiper;

// node_modules/@nutui/nutui-react/dist/es/packages/imagepreview/imagepreview.js
var defaultProps87 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  images: [],
  videos: [],
  visible: false,
  autoPlay: 3e3,
  defaultValue: 0,
  closeOnContentClick: false,
  pagination: true,
  indicator: false,
  indicatorColor: "#fff",
  closeIcon: false,
  closeIconPosition: "top-right",
  onChange: function() {
  },
  onClose: function() {
  }
});
var ImagePreview = function(props) {
  var _$_object_spread = _object_spread({}, defaultProps87, props), value2 = _$_object_spread.value, className = _$_object_spread.className, style = _$_object_spread.style, images = _$_object_spread.images, videos = _$_object_spread.videos, visible = _$_object_spread.visible, defaultValue = _$_object_spread.defaultValue, indicatorColor = _$_object_spread.indicatorColor, pagination = _$_object_spread.pagination, indicator = _$_object_spread.indicator, autoPlay = _$_object_spread.autoPlay, closeOnContentClick = _$_object_spread.closeOnContentClick, closeIcon = _$_object_spread.closeIcon, closeIconPosition = _$_object_spread.closeIconPosition, onClose = _$_object_spread.onClose, onChange = _$_object_spread.onChange;
  var classPrefix33 = "nut-imagepreview";
  var ref = (0, import_react252.useRef)(null);
  var _usePropsValue = _sliced_to_array(usePropsValue({
    value: value2,
    defaultValue,
    finalValue: defaultValue,
    onChange
  }), 2), innerNo = _usePropsValue[0], setInnerNo = _usePropsValue[1];
  var _useState = _sliced_to_array((0, import_react252.useState)(visible), 2), showPop = _useState[0], setShowPop = _useState[1];
  var _useState1 = _sliced_to_array((0, import_react252.useState)(0), 2), active2 = _useState1[0], setActive = _useState1[1];
  var _useState2 = _sliced_to_array((0, import_react252.useState)(images.length + videos.length), 2), maxNo = _useState2[0], setMaxNo = _useState2[1];
  var _useState3 = _sliced_to_array((0, import_react252.useState)({
    scale: 1,
    moveable: false,
    oriDistance: 0,
    originScale: 1
  }), 2), store = _useState3[0], setStore = _useState3[1];
  var lastTouchEndTime = (0, import_react252.useRef)(0);
  var onTouchStart = function(event) {
    var touches = event.touches;
    var events = touches[0];
    var events2 = touches[1];
    var curTouchTime = Date.now();
    if (curTouchTime - lastTouchEndTime.current < 100) {
      var store1 = store;
      store1.scale = store1.scale === 1 ? 2 : 1;
      scaleNow();
    }
    var store11 = store;
    store11.moveable = true;
    if (events2) {
      store11.oriDistance = getDistance(events, events2);
    }
    store11.originScale = store11.scale;
  };
  var onTouchMove = function(event) {
    if (!store.moveable)
      return;
    var touches = event.touches;
    var events = touches[0];
    var events2 = touches[1];
    var store1 = store;
    if (events2) {
      var curDistance = getDistance(events, events2);
      var curScale = curDistance / store1.oriDistance;
      store1.scale = Math.min(store1.originScale * curScale, 3);
      scaleNow();
    }
  };
  var onTouchEnd = function() {
    lastTouchEndTime.current = Date.now();
    var store1 = store;
    store1.moveable = false;
    if (store1.scale < 1.1 && store1.scale > 1 || store1.scale < 1) {
      store1.scale = 1;
      scaleNow();
    }
  };
  (0, import_react252.useEffect)(function() {
    init();
  }, []);
  var init = function() {
    document.addEventListener("touchmove", onTouchMove);
    document.addEventListener("touchend", onTouchEnd);
    document.addEventListener("touchcancel", onTouchEnd);
    return function() {
      document.removeEventListener("touchcancel", onTouchEnd);
      document.removeEventListener("touchmove", onTouchMove);
      document.removeEventListener("touchend", onTouchEnd);
    };
  };
  (0, import_react252.useEffect)(function() {
    setShowPop(visible);
  }, [
    visible
  ]);
  (0, import_react252.useEffect)(function() {
    setInnerNo(defaultValue || 1);
  }, [
    defaultValue
  ]);
  (0, import_react252.useEffect)(function() {
    setActive(innerNo);
  }, [
    innerNo
  ]);
  (0, import_react252.useEffect)(function() {
    setMaxNo(images.length + videos.length);
  }, [
    images,
    videos
  ]);
  var scaleNow = function() {
    if (ref.current) {
      ref.current.style.transform = "scale(".concat(store.scale, ")");
    }
  };
  var getDistance = function(first, second) {
    return Math.hypot(Math.abs(second.pageX - first.pageX), Math.abs(second.pageY - first.pageY));
  };
  var slideChangeEnd = function(page) {
    setActive(page + 1);
    onChange === null || onChange === void 0 ? void 0 : onChange(page + 1);
  };
  var onCloseInner = function(e2) {
    e2.stopPropagation();
    setShowPop(false);
    setActive(innerNo);
    scaleNow();
    onClose === null || onClose === void 0 ? void 0 : onClose();
    setStore(_object_spread_props(_object_spread({}, store), {
      scale: 1
    }));
  };
  var closeOnImg = function(e2) {
    e2.stopPropagation();
    if (closeOnContentClick)
      onCloseInner(e2);
  };
  var duration = typeof autoPlay === "string" ? parseInt(autoPlay) : autoPlay;
  return import_react252.default.createElement(popup_default, {
    visible: showPop,
    className: "".concat(classPrefix33, "-pop"),
    onClick: onCloseInner
  }, import_react252.default.createElement("div", {
    className: (0, import_classnames79.default)(classPrefix33, className),
    style,
    ref,
    onTouchStart
  }, showPop && import_react252.default.createElement(swiper_default, {
    autoPlay: !!duration,
    duration,
    className: "".concat(classPrefix33, "-swiper"),
    loop: true,
    style: {
      "--nutui-indicator-color": indicatorColor
    },
    direction: "horizontal",
    onChange: function(page) {
      return slideChangeEnd(page);
    },
    defaultValue: innerNo > maxNo ? maxNo - 1 : innerNo - 1,
    indicator
  }, _to_consumable_array(videos.map(function(item) {
    return {
      type: "video",
      data: item
    };
  })).concat(_to_consumable_array(images.map(function(item) {
    return {
      type: "image",
      data: item
    };
  }))).sort(function(a, b) {
    var _a_data_index, _b_data_index;
    return ((_a_data_index = a.data.index) !== null && _a_data_index !== void 0 ? _a_data_index : 0) - ((_b_data_index = b.data.index) !== null && _b_data_index !== void 0 ? _b_data_index : 0);
  }).map(function(item, index2) {
    return import_react252.default.createElement(swiperitem_default, {
      key: index2
    }, item.type === "video" ? import_react252.default.createElement(video_default, {
      source: item.data.source,
      options: item.data.options,
      onClick: closeOnImg
    }) : import_react252.default.createElement(image_default, {
      src: item.data.src,
      draggable: false,
      onClick: closeOnImg
    }));
  }))), pagination && import_react252.default.createElement("div", {
    className: "".concat(classPrefix33, "-index")
  }, active2, "/", maxNo), closeIcon !== false && import_react252.default.createElement("div", {
    className: "".concat(classPrefix33, "-close ").concat(closeIconPosition),
    onClick: onCloseInner
  }, closeIcon === true ? import_react252.default.createElement(n6, null) : closeIcon));
};
ImagePreview.displayName = "NutImagePreview";

// node_modules/@nutui/nutui-react/dist/es/packages/imagepreview/index.js
var imagepreview_default = ImagePreview;

// node_modules/lottie-react/build/index.es.js
var import_lottie_web = __toESM(require_lottie());
var import_lottie_web2 = __toESM(require_lottie());
var import_react253 = __toESM(require_react());
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e2 = 0, n38 = Array(a); e2 < a; e2++)
    n38[e2] = r[e2];
  return n38;
}
function _arrayWithHoles(r) {
  if (Array.isArray(r))
    return r;
}
function _defineProperty2(e2, r, t) {
  return (r = _toPropertyKey(r)) in e2 ? Object.defineProperty(e2, r, {
    value: t,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e2[r] = t, e2;
}
function _iterableToArrayLimit(r, l7) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e2, n38, i6, u, a = [], f = true, o = false;
    try {
      if (i6 = (t = t.call(r)).next, 0 === l7) {
        if (Object(t) !== t)
          return;
        f = false;
      } else
        for (; !(f = (e2 = i6.call(t)).done) && (a.push(e2.value), a.length !== l7); f = true)
          ;
    } catch (r2) {
      o = true, n38 = r2;
    } finally {
      try {
        if (!f && null != t.return && (u = t.return(), Object(u) !== u))
          return;
      } finally {
        if (o)
          throw n38;
      }
    }
    return a;
  }
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function ownKeys3(e2, r) {
  var t = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e2, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread22(e2) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys3(Object(t), true).forEach(function(r2) {
      _defineProperty2(e2, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t)) : ownKeys3(Object(t)).forEach(function(r2) {
      Object.defineProperty(e2, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e2;
}
function _objectWithoutProperties2(e2, t) {
  if (null == e2)
    return {};
  var o, r, i6 = _objectWithoutPropertiesLoose5(e2, t);
  if (Object.getOwnPropertySymbols) {
    var s8 = Object.getOwnPropertySymbols(e2);
    for (r = 0; r < s8.length; r++)
      o = s8[r], t.includes(o) || {}.propertyIsEnumerable.call(e2, o) && (i6[o] = e2[o]);
  }
  return i6;
}
function _objectWithoutPropertiesLoose5(r, e2) {
  if (null == r)
    return {};
  var t = {};
  for (var n38 in r)
    if ({}.hasOwnProperty.call(r, n38)) {
      if (e2.includes(n38))
        continue;
      t[n38] = r[n38];
    }
  return t;
}
function _slicedToArray(r, e2) {
  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e2) || _unsupportedIterableToArray(r, e2) || _nonIterableRest();
}
function _toPrimitive(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e2 = t[Symbol.toPrimitive];
  if (void 0 !== e2) {
    var i6 = e2.call(t, r || "default");
    if ("object" != typeof i6)
      return i6;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _toPropertyKey(t) {
  var i6 = _toPrimitive(t, "string");
  return "symbol" == typeof i6 ? i6 : i6 + "";
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
var _excluded$12 = ["animationData", "loop", "autoplay", "initialSegment", "onComplete", "onLoopComplete", "onEnterFrame", "onSegmentStart", "onConfigReady", "onDataReady", "onDataFailed", "onLoadedImages", "onDOMLoaded", "onDestroy", "lottieRef", "renderer", "name", "assetsPath", "rendererSettings"];
var useLottie = function useLottie2(props, style) {
  var animationData2 = props.animationData, loop2 = props.loop, autoplay = props.autoplay, initialSegment = props.initialSegment, onComplete = props.onComplete, onLoopComplete = props.onLoopComplete, onEnterFrame = props.onEnterFrame, onSegmentStart = props.onSegmentStart, onConfigReady = props.onConfigReady, onDataReady = props.onDataReady, onDataFailed = props.onDataFailed, onLoadedImages = props.onLoadedImages, onDOMLoaded = props.onDOMLoaded, onDestroy = props.onDestroy;
  props.lottieRef;
  props.renderer;
  props.name;
  props.assetsPath;
  props.rendererSettings;
  var rest = _objectWithoutProperties2(props, _excluded$12);
  var _useState = (0, import_react253.useState)(false), _useState2 = _slicedToArray(_useState, 2), animationLoaded = _useState2[0], setAnimationLoaded = _useState2[1];
  var animationInstanceRef = (0, import_react253.useRef)();
  var animationContainer = (0, import_react253.useRef)(null);
  var play = function play2() {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.play();
  };
  var stop2 = function stop3() {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.stop();
  };
  var pause = function pause2() {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.pause();
  };
  var setSpeed = function setSpeed2(speed) {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.setSpeed(speed);
  };
  var goToAndPlay = function goToAndPlay2(value2, isFrame) {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.goToAndPlay(value2, isFrame);
  };
  var goToAndStop = function goToAndStop2(value2, isFrame) {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.goToAndStop(value2, isFrame);
  };
  var setDirection = function setDirection2(direction) {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.setDirection(direction);
  };
  var playSegments = function playSegments2(segments, forceFlag) {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.playSegments(segments, forceFlag);
  };
  var setSubframe = function setSubframe2(useSubFrames) {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.setSubframe(useSubFrames);
  };
  var getDuration = function getDuration2(inFrames) {
    var _a;
    return (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.getDuration(inFrames);
  };
  var destroy = function destroy2() {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.destroy();
    animationInstanceRef.current = void 0;
  };
  var loadAnimation2 = function loadAnimation3() {
    var forcedConfigs = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var _a;
    if (!animationContainer.current) {
      return;
    }
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.destroy();
    var config3 = _objectSpread22(_objectSpread22(_objectSpread22({}, props), forcedConfigs), {}, {
      container: animationContainer.current
    });
    animationInstanceRef.current = import_lottie_web.default.loadAnimation(config3);
    setAnimationLoaded(!!animationInstanceRef.current);
    return function() {
      var _a2;
      (_a2 = animationInstanceRef.current) === null || _a2 === void 0 ? void 0 : _a2.destroy();
      animationInstanceRef.current = void 0;
    };
  };
  (0, import_react253.useEffect)(function() {
    var onUnmount = loadAnimation2();
    return function() {
      return onUnmount === null || onUnmount === void 0 ? void 0 : onUnmount();
    };
  }, [animationData2, loop2]);
  (0, import_react253.useEffect)(function() {
    if (!animationInstanceRef.current) {
      return;
    }
    animationInstanceRef.current.autoplay = !!autoplay;
  }, [autoplay]);
  (0, import_react253.useEffect)(function() {
    if (!animationInstanceRef.current) {
      return;
    }
    if (!initialSegment) {
      animationInstanceRef.current.resetSegments(true);
      return;
    }
    if (!Array.isArray(initialSegment) || !initialSegment.length) {
      return;
    }
    if (animationInstanceRef.current.currentRawFrame < initialSegment[0] || animationInstanceRef.current.currentRawFrame > initialSegment[1]) {
      animationInstanceRef.current.currentRawFrame = initialSegment[0];
    }
    animationInstanceRef.current.setSegment(initialSegment[0], initialSegment[1]);
  }, [initialSegment]);
  (0, import_react253.useEffect)(function() {
    var partialListeners = [{
      name: "complete",
      handler: onComplete
    }, {
      name: "loopComplete",
      handler: onLoopComplete
    }, {
      name: "enterFrame",
      handler: onEnterFrame
    }, {
      name: "segmentStart",
      handler: onSegmentStart
    }, {
      name: "config_ready",
      handler: onConfigReady
    }, {
      name: "data_ready",
      handler: onDataReady
    }, {
      name: "data_failed",
      handler: onDataFailed
    }, {
      name: "loaded_images",
      handler: onLoadedImages
    }, {
      name: "DOMLoaded",
      handler: onDOMLoaded
    }, {
      name: "destroy",
      handler: onDestroy
    }];
    var listeners = partialListeners.filter(function(listener) {
      return listener.handler != null;
    });
    if (!listeners.length) {
      return;
    }
    var deregisterList = listeners.map(
      /**
       * Handle the process of adding an event listener
       * @param {Listener} listener
       * @return {Function} Function that deregister the listener
       */
      function(listener) {
        var _a;
        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.addEventListener(listener.name, listener.handler);
        return function() {
          var _a2;
          (_a2 = animationInstanceRef.current) === null || _a2 === void 0 ? void 0 : _a2.removeEventListener(listener.name, listener.handler);
        };
      }
    );
    return function() {
      deregisterList.forEach(function(deregister) {
        return deregister();
      });
    };
  }, [onComplete, onLoopComplete, onEnterFrame, onSegmentStart, onConfigReady, onDataReady, onDataFailed, onLoadedImages, onDOMLoaded, onDestroy]);
  var View = import_react253.default.createElement("div", _objectSpread22({
    style,
    ref: animationContainer
  }, rest));
  return {
    View,
    play,
    stop: stop2,
    pause,
    setSpeed,
    goToAndStop,
    goToAndPlay,
    setDirection,
    playSegments,
    setSubframe,
    getDuration,
    destroy,
    animationContainerRef: animationContainer,
    animationLoaded,
    animationItem: animationInstanceRef.current
  };
};
function getContainerVisibility(container) {
  var _container$getBoundin = container.getBoundingClientRect(), top = _container$getBoundin.top, height2 = _container$getBoundin.height;
  var current = window.innerHeight - top;
  var max = window.innerHeight + height2;
  return current / max;
}
function getContainerCursorPosition(container, cursorX, cursorY) {
  var _container$getBoundin2 = container.getBoundingClientRect(), top = _container$getBoundin2.top, left = _container$getBoundin2.left, width2 = _container$getBoundin2.width, height2 = _container$getBoundin2.height;
  var x2 = (cursorX - left) / width2;
  var y = (cursorY - top) / height2;
  return {
    x: x2,
    y
  };
}
var useInitInteractivity = function useInitInteractivity2(_ref) {
  var wrapperRef = _ref.wrapperRef, animationItem = _ref.animationItem, mode = _ref.mode, actions = _ref.actions;
  (0, import_react253.useEffect)(function() {
    var wrapper = wrapperRef.current;
    if (!wrapper || !animationItem || !actions.length) {
      return;
    }
    animationItem.stop();
    var scrollModeHandler = function scrollModeHandler2() {
      var assignedSegment = null;
      var scrollHandler = function scrollHandler2() {
        var currentPercent = getContainerVisibility(wrapper);
        var action = actions.find(function(_ref2) {
          var visibility = _ref2.visibility;
          return visibility && currentPercent >= visibility[0] && currentPercent <= visibility[1];
        });
        if (!action) {
          return;
        }
        if (action.type === "seek" && action.visibility && action.frames.length === 2) {
          var frameToGo = action.frames[0] + Math.ceil((currentPercent - action.visibility[0]) / (action.visibility[1] - action.visibility[0]) * action.frames[1]);
          animationItem.goToAndStop(frameToGo - animationItem.firstFrame - 1, true);
        }
        if (action.type === "loop") {
          if (assignedSegment === null) {
            animationItem.playSegments(action.frames, true);
            assignedSegment = action.frames;
          } else {
            if (assignedSegment !== action.frames) {
              animationItem.playSegments(action.frames, true);
              assignedSegment = action.frames;
            } else if (animationItem.isPaused) {
              animationItem.playSegments(action.frames, true);
              assignedSegment = action.frames;
            }
          }
        }
        if (action.type === "play" && animationItem.isPaused) {
          animationItem.resetSegments(true);
          animationItem.play();
        }
        if (action.type === "stop") {
          animationItem.goToAndStop(action.frames[0] - animationItem.firstFrame - 1, true);
        }
      };
      document.addEventListener("scroll", scrollHandler);
      return function() {
        document.removeEventListener("scroll", scrollHandler);
      };
    };
    var cursorModeHandler = function cursorModeHandler2() {
      var handleCursor = function handleCursor2(_x, _y) {
        var x2 = _x;
        var y = _y;
        if (x2 !== -1 && y !== -1) {
          var pos = getContainerCursorPosition(wrapper, x2, y);
          x2 = pos.x;
          y = pos.y;
        }
        var action = actions.find(function(_ref3) {
          var position2 = _ref3.position;
          if (position2 && Array.isArray(position2.x) && Array.isArray(position2.y)) {
            return x2 >= position2.x[0] && x2 <= position2.x[1] && y >= position2.y[0] && y <= position2.y[1];
          }
          if (position2 && !Number.isNaN(position2.x) && !Number.isNaN(position2.y)) {
            return x2 === position2.x && y === position2.y;
          }
          return false;
        });
        if (!action) {
          return;
        }
        if (action.type === "seek" && action.position && Array.isArray(action.position.x) && Array.isArray(action.position.y) && action.frames.length === 2) {
          var xPercent = (x2 - action.position.x[0]) / (action.position.x[1] - action.position.x[0]);
          var yPercent = (y - action.position.y[0]) / (action.position.y[1] - action.position.y[0]);
          animationItem.playSegments(action.frames, true);
          animationItem.goToAndStop(Math.ceil((xPercent + yPercent) / 2 * (action.frames[1] - action.frames[0])), true);
        }
        if (action.type === "loop") {
          animationItem.playSegments(action.frames, true);
        }
        if (action.type === "play") {
          if (animationItem.isPaused) {
            animationItem.resetSegments(false);
          }
          animationItem.playSegments(action.frames);
        }
        if (action.type === "stop") {
          animationItem.goToAndStop(action.frames[0], true);
        }
      };
      var mouseMoveHandler = function mouseMoveHandler2(ev) {
        handleCursor(ev.clientX, ev.clientY);
      };
      var mouseOutHandler = function mouseOutHandler2() {
        handleCursor(-1, -1);
      };
      wrapper.addEventListener("mousemove", mouseMoveHandler);
      wrapper.addEventListener("mouseout", mouseOutHandler);
      return function() {
        wrapper.removeEventListener("mousemove", mouseMoveHandler);
        wrapper.removeEventListener("mouseout", mouseOutHandler);
      };
    };
    switch (mode) {
      case "scroll":
        return scrollModeHandler();
      case "cursor":
        return cursorModeHandler();
    }
  }, [mode, animationItem]);
};
var useLottieInteractivity = function useLottieInteractivity2(_ref4) {
  var actions = _ref4.actions, mode = _ref4.mode, lottieObj = _ref4.lottieObj;
  var animationItem = lottieObj.animationItem, View = lottieObj.View, animationContainerRef = lottieObj.animationContainerRef;
  useInitInteractivity({
    actions,
    animationItem,
    mode,
    wrapperRef: animationContainerRef
  });
  return View;
};
var _excluded3 = ["style", "interactivity"];
var Lottie = function Lottie2(props) {
  var _a, _b, _c;
  var style = props.style, interactivity = props.interactivity, lottieProps = _objectWithoutProperties2(props, _excluded3);
  var _useLottie = useLottie(lottieProps, style), View = _useLottie.View, play = _useLottie.play, stop2 = _useLottie.stop, pause = _useLottie.pause, setSpeed = _useLottie.setSpeed, goToAndStop = _useLottie.goToAndStop, goToAndPlay = _useLottie.goToAndPlay, setDirection = _useLottie.setDirection, playSegments = _useLottie.playSegments, setSubframe = _useLottie.setSubframe, getDuration = _useLottie.getDuration, destroy = _useLottie.destroy, animationContainerRef = _useLottie.animationContainerRef, animationLoaded = _useLottie.animationLoaded, animationItem = _useLottie.animationItem;
  (0, import_react253.useEffect)(function() {
    if (props.lottieRef) {
      props.lottieRef.current = {
        play,
        stop: stop2,
        pause,
        setSpeed,
        goToAndPlay,
        goToAndStop,
        setDirection,
        playSegments,
        setSubframe,
        getDuration,
        destroy,
        animationContainerRef,
        animationLoaded,
        animationItem
      };
    }
  }, [(_a = props.lottieRef) === null || _a === void 0 ? void 0 : _a.current]);
  return useLottieInteractivity({
    lottieObj: {
      View,
      play,
      stop: stop2,
      pause,
      setSpeed,
      goToAndStop,
      goToAndPlay,
      setDirection,
      playSegments,
      setSubframe,
      getDuration,
      destroy,
      animationContainerRef,
      animationLoaded,
      animationItem
    },
    actions: (_b = interactivity === null || interactivity === void 0 ? void 0 : interactivity.actions) !== null && _b !== void 0 ? _b : [],
    mode: (_c = interactivity === null || interactivity === void 0 ? void 0 : interactivity.mode) !== null && _c !== void 0 ? _c : "scroll"
  });
};

// node_modules/@nutui/nutui-react/dist/es/packages/lottie/lottie.js
var import_react254 = __toESM(require_react());
var Lottie3 = import_react254.default.forwardRef(function(props, ref) {
  var loadingLottieRef = (0, import_react254.useRef)(null);
  var style = props.style, source = props.source, autoPlay = props.autoPlay, rest = _object_without_properties(props, [
    "style",
    "source",
    "autoPlay"
  ]);
  (0, import_react254.useImperativeHandle)(ref, function() {
    return loadingLottieRef.current;
  });
  return import_react254.default.createElement(Lottie, _object_spread_props(_object_spread({}, rest), {
    lottieRef: loadingLottieRef,
    animationData: source,
    style
  }));
});
Lottie3.displayName = "NutLottie";

// node_modules/@nutui/nutui-react/dist/es/packages/lottie/index.js
var lottie_default = Lottie3;

// node_modules/@nutui/nutui-react/dist/es/packages/pagination/pagination.js
var import_react255 = __toESM(require_react());
var import_classnames80 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/hooks/use-pagination.js
var defaultPaginationOptions = {
  current: 0,
  itemsPerPage: 10,
  displayCount: 5,
  ellipse: false
};
function human2Machine(number4) {
  return --number4;
}
function calculateNodes(options2, nodesCount) {
  var halfIndex = Math.floor(options2.displayCount / 2);
  var buttonsCountIndex = human2Machine(nodesCount);
  var displayCountIndex = human2Machine(options2.displayCount);
  var currentIndex = human2Machine(options2.current);
  var start2;
  var end;
  if (buttonsCountIndex <= displayCountIndex) {
    start2 = 0;
    end = buttonsCountIndex;
  } else {
    start2 = Math.max(0, currentIndex - halfIndex);
    end = Math.min(buttonsCountIndex, currentIndex + halfIndex);
    if (end - start2 < displayCountIndex) {
      if (start2 === 0) {
        end = Math.min(start2 + displayCountIndex, buttonsCountIndex);
      } else if (end === buttonsCountIndex) {
        start2 = Math.max(end - displayCountIndex, 1);
      }
    } else if (end - start2 > displayCountIndex) {
      end = start2 + displayCountIndex;
    }
  }
  var buttons = [];
  for (var i6 = start2; i6 <= end; i6++) {
    var humanPageNumber = i6 + 1;
    buttons.push({
      number: humanPageNumber,
      text: humanPageNumber.toString(),
      selected: options2.current === humanPageNumber
    });
  }
  return addEllipses(buttons, {
    nodesCount,
    ellipse: options2.ellipse,
    displayCount: options2.displayCount
  });
}
function addEllipses(nodes, param) {
  var displayCount = param.displayCount, nodesCount = param.nodesCount, ellipse = param.ellipse;
  if (nodesCount <= displayCount || !ellipse)
    return nodes;
  var start2 = nodes[0];
  var end = nodes[nodes.length - 1];
  var leftEllipse = start2.number > 1;
  var rightEllipse = end.number < nodesCount;
  if (leftEllipse) {
    nodes.unshift({
      number: start2.number - 1,
      text: "..."
    });
  }
  if (rightEllipse) {
    nodes.push({
      number: end.number + 1,
      text: "..."
    });
  }
  return nodes;
}
var usePagination = function(options2) {
  var mergedOptions = _object_spread({}, defaultPaginationOptions, options2);
  var total = mergedOptions.total, itemsPerPage = mergedOptions.itemsPerPage;
  var nodesCount = Math.ceil((total || 0) / itemsPerPage) || 1;
  return [
    calculateNodes(mergedOptions, nodesCount),
    nodesCount
  ];
};

// node_modules/@nutui/nutui-react/dist/es/packages/pagination/pagination.js
var defaultProps88 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  defaultValue: 1,
  mode: "multi",
  prev: null,
  next: null,
  total: 50,
  pageSize: 10,
  itemSize: 5,
  ellipse: false
});
var Pagination = function(props) {
  var locale = useConfig().locale;
  var _ref = _object_spread({}, defaultProps88, props), value2 = _ref.value, mode = _ref.mode, prev = _ref.prev, next = _ref.next, total = _ref.total, pageSize = _ref.pageSize, itemSize = _ref.itemSize, onChange = _ref.onChange, ellipse = _ref.ellipse, itemRender = _ref.itemRender, defaultValue = _ref.defaultValue, className = _ref.className, style = _ref.style, rest = _object_without_properties(_ref, [
    "value",
    "mode",
    "prev",
    "next",
    "total",
    "pageSize",
    "itemSize",
    "onChange",
    "ellipse",
    "itemRender",
    "defaultValue",
    "className",
    "style"
  ]);
  var classPrefix33 = "nut-pagination";
  var _usePropsValue = _sliced_to_array(usePropsValue({
    value: value2,
    defaultValue,
    finalValue: 1,
    onChange
  }), 2), current = _usePropsValue[0], setCurrent = _usePropsValue[1];
  var _usePagination = _sliced_to_array(usePagination({
    total,
    ellipse,
    current,
    displayCount: itemSize,
    itemsPerPage: pageSize
  }), 2), pages = _usePagination[0], pageCount = _usePagination[1];
  var handleClick = function(item) {
    if (item.selected)
      return;
    if (item.number > pageCount || item.number < 1)
      return;
    setCurrent(item.number);
  };
  var prevPage = function() {
    var prev2 = current - 1;
    prev2 >= 1 && setCurrent(prev2);
  };
  var nextPage = function() {
    var next2 = current + 1;
    next2 <= pageCount && setCurrent(next2);
  };
  var _obj, _obj1;
  return import_react255.default.createElement("div", _object_spread({
    className: (0, import_classnames80.default)(classPrefix33, className)
  }, rest), (mode === "multi" || mode === "simple") && import_react255.default.createElement(import_react255.default.Fragment, null, import_react255.default.createElement("div", {
    className: (0, import_classnames80.default)((_obj = {}, _define_property(_obj, "".concat(classPrefix33, "-prev"), true), _define_property(_obj, "".concat(classPrefix33, "-simple-border"), mode !== "multi"), _define_property(_obj, "".concat(classPrefix33, "-prev-disabled"), current === 1), _obj)),
    onClick: function() {
      return prevPage();
    }
  }, prev || locale.pagination.prev), mode === "multi" && import_react255.default.createElement("div", {
    className: "".concat(classPrefix33, "-contain")
  }, pages.map(function(item, index2) {
    var _obj2;
    return import_react255.default.createElement("div", {
      key: "".concat(index2, "pagination"),
      className: (0, import_classnames80.default)((_obj2 = {}, _define_property(_obj2, "".concat(classPrefix33, "-item"), true), _define_property(_obj2, "".concat(classPrefix33, "-item-active"), item.selected), _obj2)),
      onClick: function() {
        handleClick(item);
      }
    }, itemRender ? itemRender(item, current) : item.text);
  })), mode === "simple" && import_react255.default.createElement("div", {
    className: "".concat(classPrefix33, "-contain")
  }, import_react255.default.createElement("div", {
    className: "".concat(classPrefix33, "-simple")
  }, current, "/", pageCount)), import_react255.default.createElement("div", {
    className: (0, import_classnames80.default)((_obj1 = {}, _define_property(_obj1, "".concat(classPrefix33, "-next"), true), _define_property(_obj1, "".concat(classPrefix33, "-next-disabled"), current >= pageCount), _obj1)),
    onClick: function() {
      return nextPage();
    }
  }, next || locale.pagination.next)), mode === "lite" && import_react255.default.createElement("div", {
    className: "".concat(classPrefix33, "-lite")
  }, import_react255.default.createElement("div", {
    className: "".concat(classPrefix33, "-lite-active")
  }, current), import_react255.default.createElement("div", {
    className: "".concat(classPrefix33, "-lite-spliterator")
  }, "/"), import_react255.default.createElement("div", {
    className: "".concat(classPrefix33, "-lite-default")
  }, pageCount)));
};
Pagination.displayName = "NutPagination";

// node_modules/@nutui/nutui-react/dist/es/packages/pagination/index.js
var pagination_default = Pagination;

// node_modules/@nutui/nutui-react/dist/es/packages/price/price.js
var import_react256 = __toESM(require_react());
var import_classnames81 = __toESM(require_classnames());
var defaultProps89 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  color: "primary",
  price: 0,
  symbol: "&yen;",
  digits: 2,
  thousands: false,
  position: "before",
  size: "normal",
  line: false
});
var Price = function(props) {
  var _ref = _object_spread({}, defaultProps89, props), color = _ref.color, price = _ref.price, symbol = _ref.symbol, digits = _ref.digits, thousands = _ref.thousands, position2 = _ref.position, size = _ref.size, line = _ref.line, className = _ref.className, style = _ref.style, rest = _object_without_properties(_ref, [
    "color",
    "price",
    "symbol",
    "digits",
    "thousands",
    "position",
    "size",
    "line",
    "className",
    "style"
  ]);
  var classPrefix33 = "nut-price";
  var rtl = useRtl();
  var checkPoint = function(price2) {
    return String(price2).indexOf(".") > 0;
  };
  var formatThousands = function(num) {
    if (Number(num) === 0) {
      num = 0;
    }
    if (checkPoint(num)) {
      num = num.toString();
      num = typeof num.split(".") === "string" ? num.split(".") : num.split(".")[0];
    }
    if (thousands) {
      return (num || 0).toString().replace(/(\d)(?=(?:\d{3})+$)/g, "$1,");
    }
    return num;
  };
  var formatDecimal = function(decimalNum) {
    if (Number(decimalNum) === 0) {
      decimalNum = 0;
    }
    if (checkPoint(decimalNum)) {
      decimalNum = Number(decimalNum).toFixed(digits);
      decimalNum = typeof decimalNum.split(".") === "string" ? 0 : decimalNum.split(".")[1] || 0;
    } else {
      decimalNum = 0;
    }
    var result = "0.".concat(decimalNum);
    var resultFixed = Number(result).toFixed(digits);
    return String(resultFixed).substring(2, resultFixed.length);
  };
  var renderSymbol = function() {
    var _obj;
    return import_react256.default.createElement("div", {
      className: (0, import_classnames81.default)([
        "".concat(classPrefix33, "-symbol"),
        "".concat(classPrefix33, "-symbol-").concat(size),
        (_obj = {}, _define_property(_obj, "".concat(classPrefix33, "-line"), line), _define_property(_obj, "".concat(classPrefix33, "-rtl"), rtl), _obj)
      ]),
      dangerouslySetInnerHTML: {
        __html: symbol || ""
      }
    });
  };
  return import_react256.default.createElement("div", _object_spread({
    className: "".concat(classPrefix33, " ").concat(classPrefix33, "-").concat(color, " ").concat(className),
    style
  }, rest), symbol && position2 === "before" ? renderSymbol() : null, import_react256.default.createElement("div", {
    className: "".concat(classPrefix33, "-integer ").concat(classPrefix33, "-integer-").concat(size, " ").concat(line ? "".concat(classPrefix33, "-line") : "")
  }, formatThousands(price)), digits ? import_react256.default.createElement(import_react256.default.Fragment, null, import_react256.default.createElement("div", {
    className: "".concat(classPrefix33, "-decimal ").concat(classPrefix33, "-decimal-").concat(size, " ").concat(line ? "".concat(classPrefix33, "-line") : "")
  }, "."), import_react256.default.createElement("div", {
    className: "".concat(classPrefix33, "-decimal ").concat(classPrefix33, "-decimal-").concat(size, " ").concat(line ? "".concat(classPrefix33, "-line") : "")
  }, formatDecimal(price))) : null, symbol && position2 === "after" ? renderSymbol() : null);
};
Price.displayName = "NutPrice";

// node_modules/@nutui/nutui-react/dist/es/packages/price/index.js
var price_default = Price;

// node_modules/@nutui/nutui-react/dist/es/packages/progress/index.js
var progress_default = Progress;

// node_modules/@nutui/nutui-react/dist/es/packages/segmented/segmented.js
var import_react257 = __toESM(require_react());
var import_classnames82 = __toESM(require_classnames());
var defaultProps90 = {
  options: [],
  onChange: function(value2) {
  }
};
var Segmented = function(props) {
  var classPrefix33 = "nut-segmented";
  var itemClassPrefix = "nut-segmented-item";
  var mergedProps = mergeProps(defaultProps90, props);
  var options2 = mergedProps.options, onChange = mergedProps.onChange;
  var _usePropsValue = _sliced_to_array(usePropsValue({
    value: mergedProps.value,
    defaultValue: mergedProps.defaultValue,
    finalValue: 0,
    onChange: mergedProps.onChange
  }), 2), value2 = _usePropsValue[0], setValue = _usePropsValue[1];
  var renderItems = (0, import_react257.useCallback)(function(options3, value3) {
    return options3.map(function(option, index2) {
      var optionType = typeof option === "undefined" ? "undefined" : _type_of(option);
      switch (optionType) {
        case "object":
          var opt = option;
          var _obj;
          return import_react257.default.createElement("div", {
            className: (0, import_classnames82.default)(itemClassPrefix, (_obj = {}, _define_property(_obj, "".concat(itemClassPrefix, "-active"), opt.value === value3), _define_property(_obj, "".concat(opt.className), !!opt.className), _obj)),
            key: opt.value,
            onClick: function() {
              if (opt.disabled)
                return;
              setValue(opt.value);
            }
          }, opt.icon ? import_react257.default.createElement("span", {
            className: "nut-segmented-icon"
          }, opt.icon) : null, opt.label);
        default: {
          if (typeof option !== "string" && typeof option !== "number") {
            console.warn("Unsupported option type:", optionType);
          }
          return import_react257.default.createElement("div", {
            className: (0, import_classnames82.default)(itemClassPrefix, _define_property({}, "".concat(itemClassPrefix, "-active"), index2 === value3)),
            key: option.toString(),
            onClick: function() {
              setValue(index2);
            }
          }, option);
        }
      }
    });
  }, [
    value2
  ]);
  return import_react257.default.createElement("div", {
    className: (0, import_classnames82.default)(classPrefix33),
    style: mergedProps.style
  }, renderItems(options2, value2));
};

// node_modules/@nutui/nutui-react/dist/es/packages/segmented/index.js
var segmented_default = Segmented;

// node_modules/@nutui/nutui-react/dist/es/packages/step/step.js
var import_react259 = __toESM(require_react());
var import_classnames83 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/steps/context.js
var import_react258 = __toESM(require_react());
var DataContext2 = (0, import_react258.createContext)({});

// node_modules/@nutui/nutui-react/dist/es/packages/step/step.js
var defaultProps91 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  title: "",
  description: "",
  value: 0,
  icon: null
});
var Step = function(props) {
  var _ref = _object_spread({}, defaultProps91, props), type4 = _ref.type, children2 = _ref.children, title = _ref.title, description = _ref.description, value2 = _ref.value, icon = _ref.icon, className = _ref.className, restProps = _object_without_properties(_ref, [
    "type",
    "children",
    "title",
    "description",
    "value",
    "icon",
    "className"
  ]);
  var parent2 = (0, import_react259.useContext)(DataContext2);
  var _parent_propSteps = parent2.propSteps, parentType = _parent_propSteps.type, parentValue = _parent_propSteps.value, status = _parent_propSteps.status, parentIcon = _parent_propSteps.icon, onStepClick = _parent_propSteps.onStepClick;
  var currentStatus = (0, import_react259.useMemo)(function() {
    if ([
      "default",
      "business"
    ].includes(status)) {
      return status;
    }
    if (value2 < +parentValue)
      return "finish";
    return value2 === +parentValue ? "process" : "wait";
  }, [
    value2,
    parentValue
  ]);
  var handleClickStep = (0, import_react259.useCallback)(function() {
    onStepClick === null || onStepClick === void 0 ? void 0 : onStepClick(value2);
  }, [
    onStepClick,
    value2
  ]);
  var classPrefix33 = "nut-step";
  var classes = (0, import_react259.useMemo)(function() {
    var _obj;
    return (0, import_classnames83.default)(classPrefix33, (_obj = {}, _define_property(_obj, "".concat(classPrefix33, "-").concat(currentStatus), true), _define_property(_obj, "".concat(classPrefix33, "-").concat(type4 || parentType), true), _define_property(_obj, "".concat(classPrefix33, "-special"), description), _obj), className);
  }, [
    currentStatus,
    type4,
    className
  ]);
  var renderHeadType = (0, import_react259.useMemo)(function() {
    switch (type4 || parentType) {
      case "text":
        return import_react259.default.createElement("span", {
          className: "".concat(classPrefix33, "-head-text")
        }, value2);
      case "dot":
        return import_react259.default.createElement("span", {
          className: "".concat(classPrefix33, "-head-dot")
        });
      case "icon":
        return import_react259.default.createElement("span", {
          className: "".concat(classPrefix33, "-head-icon")
        }, icon || parentIcon);
      default:
        return null;
    }
  }, [
    type4,
    value2,
    icon
  ]);
  var renderContent = (0, import_react259.useMemo)(function() {
    if (!title && !description)
      return null;
    return import_react259.default.createElement("div", {
      className: "".concat(classPrefix33, "-main")
    }, title && import_react259.default.createElement("span", {
      className: "".concat(classPrefix33, "-title")
    }, title), description && import_react259.default.createElement("span", {
      className: "".concat(classPrefix33, "-description")
    }, description));
  }, [
    title,
    description
  ]);
  return import_react259.default.createElement("div", _object_spread_props(_object_spread({
    className: classes
  }, restProps), {
    onClick: handleClickStep
  }), import_react259.default.createElement("div", {
    className: "".concat(classPrefix33, "-head")
  }, import_react259.default.createElement("div", {
    className: "".concat(classPrefix33, "-head-").concat(type4 || parentType, "-wrap")
  }, renderHeadType)), import_react259.default.createElement("div", {
    className: "".concat(classPrefix33, "-line")
  }, import_react259.default.createElement("div", {
    className: "".concat(classPrefix33, "-line-inner")
  })), renderContent);
};
Step.displayName = "NutStep";

// node_modules/@nutui/nutui-react/dist/es/packages/step/index.js
var step_default = Step;

// node_modules/@nutui/nutui-react/dist/es/packages/steps/steps.js
var import_react260 = __toESM(require_react());
var import_classnames84 = __toESM(require_classnames());
var defaultProps92 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  direction: "horizontal",
  layout: "single",
  type: "text",
  status: "default",
  value: 0,
  icon: null
});
var Steps = function(props) {
  var propSteps = _object_spread({}, defaultProps92, props);
  var direction = propSteps.direction, value2 = propSteps.value, layout = propSteps.layout, status = propSteps.status, type4 = propSteps.type, className = propSteps.className, children2 = propSteps.children, onStepClick = propSteps.onStepClick, restProps = _object_without_properties(propSteps, [
    "direction",
    "value",
    "layout",
    "status",
    "type",
    "className",
    "children",
    "onStepClick"
  ]);
  var parentSteps = {
    propSteps
  };
  var classPrefix33 = "nut-steps";
  var _obj;
  var classes = (0, import_classnames84.default)(classPrefix33, (_obj = {}, _define_property(_obj, "".concat(classPrefix33, "-").concat(direction), true), _define_property(_obj, "".concat(classPrefix33, "-").concat(direction, "-count-").concat(import_react260.default.Children.count(children2)), true), _define_property(_obj, "".concat(classPrefix33, "-").concat(direction, "-").concat(layout), true), _define_property(_obj, "".concat(classPrefix33, "-").concat(direction, "-").concat(type4), true), _define_property(_obj, "".concat(classPrefix33, "-").concat(direction, "-").concat(status), true), _obj), className);
  return import_react260.default.createElement(DataContext2.Provider, {
    value: parentSteps
  }, import_react260.default.createElement("div", _object_spread({
    className: classes
  }, restProps), import_react260.default.Children.map(children2, function(child, index2) {
    if (import_react260.default.isValidElement(child)) {
      return import_react260.default.cloneElement(child, {
        // @ts-ignore
        className: (0, import_classnames84.default)(child.props.className, {
          "nut-step-last": index2 === import_react260.default.Children.count(children2) - 1
        })
      });
    }
    return child;
  })));
};
Steps.displayName = "NutSteps";

// node_modules/@nutui/nutui-react/dist/es/packages/steps/index.js
var steps_default = Steps;

// node_modules/@nutui/nutui-react/dist/es/packages/table/table.js
var import_react262 = __toESM(require_react());
var import_classnames85 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/table/utils.js
var import_react261 = __toESM(require_react());
function useTableSticky(columns) {
  var rtl = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
  var _useState = _sliced_to_array((0, import_react261.useState)(false), 2), isSticky = _useState[0], setIsSticky = _useState[1];
  var _useState1 = _sliced_to_array((0, import_react261.useState)({}), 2), stickyColumnStyleMap = _useState1[0], setStickyColumnStyleMap = _useState1[1];
  var _useState2 = _sliced_to_array((0, import_react261.useState)({}), 2), stickyColumnClassMap = _useState2[0], setStickyColumnClassMap = _useState2[1];
  var _useState3 = _sliced_to_array((0, import_react261.useState)(0), 2), stickyLeftWidth = _useState3[0], setStickyLeftWidth = _useState3[1];
  var _useState4 = _sliced_to_array((0, import_react261.useState)(0), 2), stickyRightWidth = _useState4[0], setStickyRightWidth = _useState4[1];
  (0, import_react261.useEffect)(function() {
    var leftColumns = columns.filter(function(item) {
      return item.fixed === "left";
    }) || [];
    var rightColumns = columns.filter(function(item) {
      return item.fixed === "right";
    }) || [];
    var middleColumns = columns.filter(function(item) {
      return !item.fixed;
    }) || [];
    var _columnStyleMap = {};
    var _columnClassMap = {};
    var _stickyLeftWidth = 0;
    var _stickyRightWidth = 0;
    leftColumns.forEach(function(curr2, index2) {
      var dir2 = rtl ? "right" : "left";
      var _obj2;
      _columnStyleMap[curr2.key] = (_obj2 = {}, _define_property(_obj2, dir2, _stickyLeftWidth || 0), _define_property(_obj2, "width", curr2.width || "auto"), _obj2);
      _columnClassMap[curr2.key] = {
        "nut-table-fixed-left": true,
        "nut-table-fixed-left-last": index2 === leftColumns.length - 1
      };
      _stickyLeftWidth += curr2.width || 0;
    });
    middleColumns.forEach(function(curr2) {
      _columnStyleMap[curr2.key] = {
        width: curr2.width || "auto"
      };
    });
    for (var i6 = rightColumns.length - 1; i6 >= 0; i6--) {
      var curr = rightColumns[i6];
      var dir = rtl ? "left" : "right";
      var _obj;
      _columnStyleMap[curr.key] = (_obj = {}, _define_property(_obj, dir, _stickyRightWidth || 0), _define_property(_obj, "width", curr.width || "auto"), _obj);
      _columnClassMap[curr.key] = {
        "nut-table-fixed-right": true,
        "nut-table-fixed-right-first": i6 === 0
      };
      _stickyRightWidth += curr.width || 0;
    }
    setIsSticky(leftColumns.length > 0 || rightColumns.length > 0);
    setStickyColumnStyleMap(_columnStyleMap);
    setStickyColumnClassMap(_columnClassMap);
    setStickyLeftWidth(_stickyLeftWidth);
    setStickyRightWidth(_stickyRightWidth);
  }, [
    columns
  ]);
  var getStickyStyle = (0, import_react261.useCallback)(function(key2) {
    return stickyColumnStyleMap[key2];
  }, [
    stickyColumnStyleMap
  ]);
  var getStickyClass = (0, import_react261.useCallback)(function(key2) {
    return stickyColumnClassMap[key2];
  }, [
    stickyColumnClassMap
  ]);
  return {
    isSticky,
    stickyLeftWidth,
    stickyRightWidth,
    getStickyClass,
    getStickyStyle
  };
}

// node_modules/@nutui/nutui-react/dist/es/packages/table/table.js
var defaultProps93 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  columns: [],
  data: [],
  bordered: true,
  striped: false,
  noData: "",
  sorterIcon: null,
  showHeader: true
});
var Table = function(props) {
  var locale = useConfig().locale;
  var rtl = useRtl();
  defaultProps93.noData = locale.noData;
  var _ref = _object_spread({}, defaultProps93, props), children2 = _ref.children, className = _ref.className, style = _ref.style, columns = _ref.columns, data2 = _ref.data, bordered = _ref.bordered, summary = _ref.summary, striped = _ref.striped, noData = _ref.noData, sorterIcon = _ref.sorterIcon, showHeader = _ref.showHeader, onSort = _ref.onSort, rest = _object_without_properties(_ref, [
    "children",
    "className",
    "style",
    "columns",
    "data",
    "bordered",
    "summary",
    "striped",
    "noData",
    "sorterIcon",
    "showHeader",
    "onSort"
  ]);
  var sortedMapping = (0, import_react262.useRef)({});
  var _usePropsValue = _sliced_to_array(usePropsValue({
    defaultValue: data2,
    finalValue: []
  }), 2), innerValue = _usePropsValue[0], setValue = _usePropsValue[1];
  var _useTableSticky = useTableSticky(columns, rtl), isSticky = _useTableSticky.isSticky, stickyLeftWidth = _useTableSticky.stickyLeftWidth, stickyRightWidth = _useTableSticky.stickyRightWidth, getStickyClass = _useTableSticky.getStickyClass, getStickyStyle = _useTableSticky.getStickyStyle;
  (0, import_react262.useEffect)(function() {
    setValue(data2);
  }, [
    data2
  ]);
  var classPrefix33 = "nut-table";
  var headerClassPrefix = "".concat(classPrefix33, "-main-head-tr");
  var bodyClassPrefix = "".concat(classPrefix33, "-main-body-tr");
  var cls = (0, import_classnames85.default)(classPrefix33, className);
  var handleSorterClick = function(item) {
    if (item.sorter && !sortedMapping.current[item.key]) {
      var copied = _to_consumable_array(innerValue);
      if (typeof item.sorter === "function") {
        copied.sort(item.sorter);
      } else if (item.sorter === "default") {
        copied.sort();
      }
      sortedMapping.current[item.key] = true;
      setValue(copied, true);
      onSort && onSort(item, copied);
    } else {
      sortedMapping.current[item.key] = false;
      setValue(data2);
    }
  };
  var cellClasses = function(item) {
    var _obj;
    return _obj = {}, _define_property(_obj, "".concat(headerClassPrefix, "-border"), bordered), _define_property(_obj, "".concat(headerClassPrefix, "-align").concat(item.align ? item.align : ""), true), _obj;
  };
  var getColumnItem = function(value2) {
    return columns.filter(function(item) {
      return item.key === value2;
    })[0];
  };
  var renderHeadCells = function() {
    return columns.map(function(item, index2) {
      return import_react262.default.createElement("div", {
        className: (0, import_classnames85.default)("".concat(headerClassPrefix, "-th"), cellClasses(item), getStickyClass(item.key)),
        key: item.key,
        onClick: function() {
          return handleSorterClick(item);
        },
        style: getStickyStyle(item.key)
      }, item.title, " ", item.sorter && (sorterIcon || import_react262.default.createElement(l, {
        width: "12px",
        height: "12px"
      })));
    });
  };
  var sortDataItem = function() {
    return columns.map(function(columns2) {
      return [
        columns2.key,
        columns2.render
      ];
    });
  };
  var renderBodyTds = function(item, rowIndex) {
    return sortDataItem().map(function(param) {
      var _param = _sliced_to_array(param, 2), value2 = _param[0], render2 = _param[1];
      return import_react262.default.createElement("div", {
        className: (0, import_classnames85.default)("".concat(bodyClassPrefix, "-td"), cellClasses(getColumnItem(value2)), getStickyClass(value2)),
        key: value2,
        style: getStickyStyle(value2)
      }, typeof item[value2] === "function" || typeof render2 === "function" ? import_react262.default.createElement("div", null, render2 ? render2(item, rowIndex) : item[value2](item)) : item[value2]);
    });
  };
  var renderBodyTrs = function() {
    return innerValue.map(function(item, index2) {
      var inner = renderBodyTds(item, index2);
      var rowRender = item.rowRender;
      if (rowRender && typeof rowRender === "function") {
        return rowRender(item, index2, {
          inner
        });
      }
      return import_react262.default.createElement("div", {
        className: bodyClassPrefix,
        key: index2
      }, inner);
    });
  };
  return import_react262.default.createElement("div", _object_spread({
    className: cls
  }, rest), import_react262.default.createElement("div", {
    className: (0, import_classnames85.default)("".concat(classPrefix33, "-wrapper ").concat(isSticky ? "".concat(classPrefix33, "-wrapper-sticky") : "")),
    style
  }, import_react262.default.createElement("div", {
    className: (0, import_classnames85.default)("".concat(classPrefix33, "-main"), _define_property({}, "".concat(classPrefix33, "-main-striped"), striped))
  }, showHeader && import_react262.default.createElement("div", {
    className: "".concat(classPrefix33, "-main-head")
  }, import_react262.default.createElement("div", {
    className: headerClassPrefix
  }, renderHeadCells())), import_react262.default.createElement("div", {
    className: "".concat(classPrefix33, "-main-body")
  }, renderBodyTrs()))), isSticky ? import_react262.default.createElement(import_react262.default.Fragment, null, import_react262.default.createElement("div", {
    className: "".concat(classPrefix33, "-sticky-left"),
    style: {
      width: stickyLeftWidth
    }
  }), import_react262.default.createElement("div", {
    className: "".concat(classPrefix33, "-sticky-right"),
    style: {
      width: stickyRightWidth
    }
  })) : null, (summary || innerValue.length === 0) && import_react262.default.createElement("div", {
    className: "".concat(classPrefix33, "-summary")
  }, summary || noData));
};
Table.displayName = "NutTable";

// node_modules/@nutui/nutui-react/dist/es/packages/table/index.js
var table_default = Table;

// node_modules/@nutui/nutui-react/dist/es/packages/tag/tag.js
var import_react263 = __toESM(require_react());
var import_classnames86 = __toESM(require_classnames());
var defaultProps94 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  type: "default",
  background: "",
  color: "",
  plain: false,
  round: false,
  mark: false,
  closeable: false,
  closeIcon: null,
  onClose: function(e2) {
  },
  onClick: function(e2) {
  }
});
var Tag = function(props) {
  var _$_object_spread = _object_spread({}, defaultProps94, props), className = _$_object_spread.className, style = _$_object_spread.style, background = _$_object_spread.background, plain = _$_object_spread.plain, type4 = _$_object_spread.type, round = _$_object_spread.round, children2 = _$_object_spread.children, mark = _$_object_spread.mark, closeable = _$_object_spread.closeable, closeIcon = _$_object_spread.closeIcon, color = _$_object_spread.color, onClick = _$_object_spread.onClick, onClose = _$_object_spread.onClose;
  var _useState = _sliced_to_array((0, import_react263.useState)(true), 2), visible = _useState[0], setVisible = _useState[1];
  var classPrefix33 = "nut-tag";
  var _obj;
  var classes = (0, import_classnames86.default)((_obj = {}, _define_property(_obj, classPrefix33, true), _define_property(_obj, "".concat(classPrefix33, "-").concat(type4), type4), _define_property(_obj, "".concat(classPrefix33, "-plain"), plain), _define_property(_obj, "".concat(classPrefix33, "-round"), round), _define_property(_obj, "".concat(classPrefix33, "-mark"), mark), _define_property(_obj, "".concat(classPrefix33, "-close"), closeable), _define_property(_obj, "".concat(className), className), _obj));
  var handleClick = function(e2) {
    onClick && onClick(e2);
  };
  var getStyle = function() {
    var style2 = {};
    if (plain) {
      style2.borderColor = background;
    } else if (background) {
      style2.backgroundColor = background;
    }
    return style2;
  };
  var getTextStyle = function() {
    var style2 = {};
    if (color) {
      style2.color = color;
    } else if (background && plain) {
      style2.color = background;
    }
    return style2;
  };
  var textClasses = (0, import_classnames86.default)("".concat(classPrefix33, "-text"), _define_property({}, "".concat(classPrefix33, "-text-plain"), plain));
  return import_react263.default.createElement(import_react263.default.Fragment, null, closeable ? visible && import_react263.default.createElement("div", {
    className: classes,
    style: _object_spread({}, style, getStyle()),
    onClick: function(e2) {
      return handleClick(e2);
    }
  }, children2 && import_react263.default.createElement("span", {
    className: textClasses,
    style: getTextStyle()
  }, children2), import_react263.default.isValidElement(closeIcon) ? import_react263.default.createElement("i", {
    className: "".concat(classPrefix33, "-custom-icon"),
    onClick: function(e2) {
      setVisible(false);
      onClose && onClose(e2);
    }
  }, closeIcon) : import_react263.default.createElement(n6, {
    width: 8,
    height: 8,
    onClick: function(e2) {
      setVisible(false);
      onClose && onClose(e2);
    }
  })) : import_react263.default.createElement("div", {
    className: classes,
    style: _object_spread({}, style, getStyle()),
    onClick: function(e2) {
      return handleClick(e2);
    }
  }, children2 && import_react263.default.createElement("span", {
    className: textClasses,
    style: getTextStyle()
  }, children2)));
};
Tag.displayName = "NutTag";

// node_modules/@nutui/nutui-react/dist/es/packages/tag/index.js
var tag_default = Tag;

// node_modules/@nutui/nutui-react/dist/es/packages/tour/tour.js
var import_react264 = __toESM(require_react());
var import_classnames87 = __toESM(require_classnames());
var defaultProps95 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  visible: false,
  type: "step",
  location: "bottom",
  mask: true,
  maskWidth: "",
  maskHeight: "",
  offset: [
    8,
    10
  ],
  title: "",
  next: "",
  prev: "",
  complete: "",
  showPrev: true,
  closeOnOverlayClick: true
});
var classPrefix30 = "nut-tour";
var Tour = function(props) {
  var locale = useConfig().locale;
  var _ref = _object_spread({}, defaultProps95, props), children2 = _ref.children, className = _ref.className, title = _ref.title, closeOnOverlayClick = _ref.closeOnOverlayClick, showPrev = _ref.showPrev, list = _ref.list, type4 = _ref.type, location = _ref.location, visible = _ref.visible, mask2 = _ref.mask, maskWidth = _ref.maskWidth, maskHeight = _ref.maskHeight, offset = _ref.offset, next = _ref.next, prev = _ref.prev, complete = _ref.complete, onClose = _ref.onClose, onChange = _ref.onChange, rest = _object_without_properties(_ref, [
    "children",
    "className",
    "title",
    "closeOnOverlayClick",
    "showPrev",
    "list",
    "type",
    "location",
    "visible",
    "mask",
    "maskWidth",
    "maskHeight",
    "offset",
    "next",
    "prev",
    "complete",
    "onClose",
    "onChange"
  ]);
  var _useState = _sliced_to_array((0, import_react264.useState)(false), 2), showTour = _useState[0], setShowTour = _useState[1];
  var _useState1 = _sliced_to_array((0, import_react264.useState)(false), 2), showPopup = _useState1[0], setShowPopup = _useState1[1];
  var _useState2 = _sliced_to_array((0, import_react264.useState)(0), 2), active2 = _useState2[0], setActive = _useState2[1];
  var _useState3 = _sliced_to_array((0, import_react264.useState)({
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    width: 0,
    height: 0
  }), 2), maskRect = _useState3[0], setMaskRect = _useState3[1];
  var classes = (0, import_classnames87.default)(classPrefix30, className);
  (0, import_react264.useEffect)(function() {
    if (visible) {
      getRootPosition();
    }
    setActive(0);
    setShowTour(visible);
    setShowPopup(visible);
  }, [
    visible
  ]);
  (0, import_react264.useEffect)(function() {
    if (visible) {
      setShowPopup(true);
      getRootPosition();
    }
  }, [
    active2
  ]);
  var getRootPosition = function() {
    var el = document.querySelector("#".concat(list[active2].target));
    var rect = getRect(el);
    setMaskRect(rect);
  };
  var maskStyle = function() {
    var width2 = maskRect.width, height2 = maskRect.height, left = maskRect.left, top = maskRect.top;
    var center = [
      left + width2 / 2,
      top + height2 / 2
    ];
    var w = Number(maskWidth || width2);
    var h3 = Number(maskHeight || height2);
    var styles = {
      width: "".concat(w + +offset[1] * 2, "px"),
      height: "".concat(h3 + +offset[0] * 2, "px"),
      top: "".concat(center[1] - h3 / 2 - +offset[0], "px"),
      left: "".concat(center[0] - w / 2 - +offset[1], "px")
    };
    return styles;
  };
  var maskClose = function(e2) {
    setShowTour(false);
    setShowPopup(false);
    onClose && onClose(e2);
  };
  var handleClickMask = function(e2) {
    closeOnOverlayClick && maskClose(e2);
  };
  var changeStep = function(type5) {
    if (type5 === "next") {
      setActive(active2 + 1);
      onChange && onChange(active2 + 1);
    } else {
      setActive(active2 - 1);
      onChange && onChange(active2 - 1);
    }
    setShowPopup(false);
  };
  return import_react264.default.createElement("div", _object_spread({
    className: classes
  }, rest), import_react264.default.createElement("div", {
    className: "nut-tour-masked",
    style: {
      display: showTour ? "block" : "none"
    },
    onClick: handleClickMask
  }), list.map(function(item, index2) {
    return import_react264.default.createElement("div", {
      key: index2,
      style: {
        height: 0
      }
    }, index2 === active2 && import_react264.default.createElement(import_react264.default.Fragment, null, showTour && import_react264.default.createElement("div", {
      className: "".concat(mask2 ? "nut-tour-mask" : "nut-tour-mask nut-tour-mask-none"),
      id: "nut-tour-popid",
      style: maskStyle()
    }), import_react264.default.createElement(popover_default, {
      visible: showPopup,
      location: item.location || location,
      targetId: "nut-tour-popid",
      closeOnOutsideClick: false,
      offset: item.popoverOffset || [
        0,
        12
      ],
      arrowOffset: item.arrowOffset || 0
    }, import_react264.default.createElement(import_react264.default.Fragment, null), import_react264.default.createElement(import_react264.default.Fragment, null, children2 || import_react264.default.createElement(import_react264.default.Fragment, null, type4 === "step" && import_react264.default.createElement("div", {
      className: "nut-tour-content"
    }, title && import_react264.default.createElement("div", {
      className: "nut-tour-content-top"
    }, import_react264.default.createElement("div", {
      onClick: function(e2) {
        return maskClose(e2);
      }
    }, import_react264.default.createElement(n6, {
      className: "nut-tour-content-top-close"
    }))), import_react264.default.createElement("div", {
      className: "nut-tour-content-inner"
    }, item.content), import_react264.default.createElement("div", {
      className: "nut-tour-content-bottom"
    }, import_react264.default.createElement("div", {
      className: "nut-tour-content-bottom-init"
    }, active2 + 1, "/", list.length), import_react264.default.createElement("div", {
      className: "nut-tour-content-bottom-operate"
    }, active2 !== 0 && showPrev && import_react264.default.createElement("div", {
      className: "nut-tour-content-bottom-operate-btn",
      onClick: function() {
        return changeStep("prev");
      }
    }, prev || locale.tour.prevStepText), list.length - 1 === active2 && import_react264.default.createElement("div", {
      className: "nut-tour-content-bottom-operate-btn active",
      onClick: function(e2) {
        return maskClose(e2);
      }
    }, complete || locale.tour.completeText), list.length - 1 !== active2 && import_react264.default.createElement("div", {
      className: "nut-tour-content-bottom-operate-btn active",
      onClick: function() {
        return changeStep("next");
      }
    }, next || locale.tour.nextStepText)))), type4 === "tile" && import_react264.default.createElement("div", {
      className: "nut-tour-content nut-tour-content-tile"
    }, import_react264.default.createElement("div", {
      className: "nut-tour-content-inner"
    }, item.content)))))));
  }));
};
Tour.displayName = "NutTour";

// node_modules/@nutui/nutui-react/dist/es/packages/tour/index.js
var tour_default = Tour;

// node_modules/@nutui/nutui-react/dist/es/packages/virtuallist/virtuallist.js
var import_react265 = __toESM(require_react());
var import_classnames88 = __toESM(require_classnames());

// node_modules/@nutui/nutui-react/dist/es/packages/virtuallist/utils.js
var initPositinoCache = function(reaItemSize) {
  var length2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var index2 = 0;
  var positions = Array(length2);
  while (index2 < length2) {
    positions[index2] = {
      index: index2,
      height: reaItemSize,
      width: reaItemSize,
      top: index2 * reaItemSize,
      bottom: (index2 + 1) * reaItemSize,
      left: index2 * reaItemSize,
      right: (index2 + 1) * reaItemSize
    };
    index2++;
  }
  return positions;
};
var getListTotalSize = function(positions, horizontal) {
  var index2 = positions.length - 1;
  var size = 0;
  if (index2 < 0) {
    size = 0;
  } else {
    size = horizontal ? positions[index2].right : positions[index2].bottom;
  }
  return size;
};
var binarySearch = function(positionsList, horizontal) {
  var value2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
  var start2 = 0;
  var end = positionsList.length - 1;
  var tempIndex = null;
  var key2 = horizontal ? "right" : "bottom";
  while (start2 <= end) {
    var midIndex = Math.floor((start2 + end) / 2);
    var midValue = positionsList[midIndex][key2];
    if (midValue === value2) {
      return midIndex + 1;
    }
    if (midValue < value2) {
      start2 = midIndex + 1;
    } else if (midValue > value2) {
      if (tempIndex === null || tempIndex > midIndex) {
        tempIndex = midIndex;
      }
      end = midIndex - 1;
    }
  }
  tempIndex = tempIndex || 0;
  return tempIndex;
};
var getEndIndex = function(param) {
  var list = param.list, startIndex = param.startIndex, visibleCount = param.visibleCount, _param_itemEqual = param.itemEqual, itemEqual = _param_itemEqual === void 0 ? true : _param_itemEqual, positions = param.positions, offSetSize = param.offSetSize, overscan = param.overscan, _param_sizeKey = param.sizeKey, sizeKey = _param_sizeKey === void 0 ? "width" : _param_sizeKey;
  var dataLength = list.length;
  var tempIndex = null;
  if (itemEqual) {
    var endIndex = startIndex + visibleCount;
    tempIndex = dataLength > 0 ? Math.min(dataLength, endIndex) : endIndex;
  } else {
    var sizeNum = 0;
    for (var i6 = startIndex; i6 < dataLength; i6++) {
      sizeNum += positions[i6][sizeKey] || 0;
      if (sizeNum > offSetSize) {
        var endIndex1 = i6 + overscan;
        tempIndex = dataLength > 0 ? Math.min(dataLength, endIndex1) : endIndex1;
        break;
      }
    }
    if (sizeNum < offSetSize) {
      tempIndex = dataLength;
    }
  }
  tempIndex = tempIndex || 0;
  return tempIndex;
};
var updateItemSize = function(positions, items, sizeKey, margin) {
  var newPos = positions.concat();
  Array.from(items).forEach(function(item) {
    var index2 = Number(item.getAttribute("data-index"));
    var styleVal = item.getAttribute("style");
    if (styleVal && styleVal.includes("none"))
      return;
    var nowSize = item.getBoundingClientRect()[sizeKey];
    if (margin)
      nowSize += margin;
    var oldSize = positions[index2][sizeKey];
    var dValue = oldSize - nowSize;
    if (dValue) {
      if (sizeKey === "width") {
        newPos[index2].right -= dValue;
        newPos[index2][sizeKey] = nowSize;
        for (var k2 = index2 + 1; k2 < positions.length; k2++) {
          newPos[k2].left = positions[k2 - 1].right;
          newPos[k2].right -= dValue;
        }
      } else if (sizeKey === "height") {
        newPos[index2].bottom -= dValue;
        newPos[index2][sizeKey] = nowSize;
        for (var k1 = index2 + 1; k1 < positions.length; k1++) {
          newPos[k1].top = positions[k1 - 1].bottom;
          newPos[k1].bottom -= dValue;
        }
      }
    }
  });
};

// node_modules/@nutui/nutui-react/dist/es/packages/virtuallist/virtuallist.js
var defaultProps96 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  list: [],
  itemHeight: 66,
  itemEqual: true,
  direction: "vertical",
  overscan: 2
});
var VirtualList = function(props) {
  var _ref = _object_spread({}, defaultProps96, props), list = _ref.list, itemRender = _ref.itemRender, itemEqual = _ref.itemEqual, itemHeight = _ref.itemHeight, direction = _ref.direction, overscan = _ref.overscan, key2 = _ref.key, onScroll2 = _ref.onScroll, className = _ref.className, containerHeight = _ref.containerHeight, rest = _object_without_properties(_ref, [
    "list",
    "itemRender",
    "itemEqual",
    "itemHeight",
    "direction",
    "overscan",
    "key",
    "onScroll",
    "className",
    "containerHeight"
  ]);
  var horizontal = direction === "horizontal";
  var sizeKey = horizontal ? "width" : "height";
  var scrollKey = horizontal ? "scrollLeft" : "scrollTop";
  var offsetKey = horizontal ? "left" : "top";
  var scrollRef = (0, import_react265.useRef)(null);
  var itemsRef = (0, import_react265.useRef)(null);
  var _useState = _sliced_to_array((0, import_react265.useState)([
    {
      index: 0,
      left: 0,
      top: 0,
      bottom: 0,
      width: 0,
      height: 0,
      right: 0
    }
  ]), 2), positions = _useState[0], setPositions = _useState[1];
  var _useState1 = _sliced_to_array((0, import_react265.useState)(99999999), 2), listTotalSize = _useState1[0], setListTotalSize = _useState1[1];
  var _useState2 = _sliced_to_array((0, import_react265.useState)(0), 2), visibleCount = _useState2[0], setVisibleCount = _useState2[1];
  var _useState3 = _sliced_to_array((0, import_react265.useState)(containerHeight || 0), 2), offSetSize = _useState3[0], setOffSetSize = _useState3[1];
  var _useState4 = _sliced_to_array((0, import_react265.useState)({
    startOffset: 0,
    startIndex: 0,
    overStart: 0,
    endIndex: 10
  }), 2), options2 = _useState4[0], setOptions = _useState4[1];
  (0, import_react265.useEffect)(function() {
    var pos = initPositinoCache(itemHeight, list.length);
    setPositions(pos);
    var totalSize = getListTotalSize(pos, horizontal);
    setListTotalSize(totalSize);
  }, [
    list,
    itemHeight,
    horizontal
  ]);
  var getElement = (0, import_react265.useCallback)(function() {
    var _scrollRef_current;
    return ((_scrollRef_current = scrollRef.current) === null || _scrollRef_current === void 0 ? void 0 : _scrollRef_current.parentElement) || document.body;
  }, []);
  (0, import_react265.useEffect)(function() {
    if (containerHeight)
      return;
    var size = horizontal ? getElement().offsetWidth : getElement().offsetHeight;
    setOffSetSize(size);
  }, [
    getElement,
    horizontal,
    containerHeight
  ]);
  (0, import_react265.useEffect)(function() {
    if (offSetSize === 0)
      return;
    var count = Math.ceil(offSetSize / itemHeight) + overscan;
    setVisibleCount(count);
    setOptions(function(options3) {
      return _object_spread_props(_object_spread({}, options3), {
        endIndex: count
      });
    });
  }, [
    getElement,
    horizontal,
    itemHeight,
    overscan,
    offSetSize
  ]);
  var updateTotalSize = (0, import_react265.useCallback)(function() {
    if (!itemsRef.current)
      return;
    var items = itemsRef.current.children;
    if (!items.length)
      return;
    updateItemSize(positions, items, sizeKey);
    var totalSize = getListTotalSize(positions, horizontal);
    setListTotalSize(totalSize);
  }, [
    positions,
    sizeKey,
    horizontal
  ]);
  var scroll = (0, import_react265.useCallback)(function() {
    requestAnimationFrame(function(e2) {
      var scrollSize = getElement()[scrollKey];
      var startIndex = binarySearch(positions, horizontal, scrollSize);
      var overStart = startIndex - overscan > -1 ? startIndex - overscan : 0;
      if (!itemEqual) {
        updateTotalSize();
      }
      var endIndex = getEndIndex({
        list,
        startIndex,
        visibleCount,
        itemEqual,
        positions,
        offSetSize,
        sizeKey,
        overscan
      });
      var startOffset = positions[startIndex][offsetKey];
      setOptions({
        startOffset,
        startIndex,
        overStart,
        endIndex
      });
      if (endIndex > list.length - 1) {
        if (onScroll2) {
          onScroll2();
        }
      }
    });
  }, [
    positions,
    getElement,
    list,
    visibleCount,
    itemEqual,
    updateTotalSize,
    offsetKey,
    sizeKey,
    scrollKey,
    horizontal,
    overscan,
    offSetSize
  ]);
  (0, import_react265.useEffect)(function() {
    var element = getElement();
    element.addEventListener("scroll", scroll, false);
    return function() {
      element.removeEventListener("scroll", scroll, false);
    };
  }, [
    getElement,
    scroll
  ]);
  return import_react265.default.createElement("div", _object_spread_props(_object_spread({
    className: (0, import_classnames88.default)("nut-virtualList-box", className)
  }, rest), {
    style: _define_property({}, sizeKey, containerHeight ? "".concat(offSetSize, "px") : "")
  }), import_react265.default.createElement("div", {
    ref: scrollRef,
    className: (0, import_classnames88.default)({
      "nut-horizontal-box": horizontal,
      "nut-vertical-box": !horizontal
    }),
    style: _define_property({
      position: "relative"
    }, sizeKey, "".concat(listTotalSize, "px"))
  }, import_react265.default.createElement("ul", {
    className: (0, import_classnames88.default)("nut-virtuallist-items", {
      "nut-horizontal-items": horizontal,
      "nut-vertical-items": !horizontal
    }),
    ref: itemsRef,
    style: {
      transform: horizontal ? "translate3d(".concat(options2.startOffset, "px,0,0)") : "translate3d(0,".concat(options2.startOffset, "px,0)")
    }
  }, list.slice(options2.overStart, options2.endIndex).map(function(data2, index2) {
    var startIndex = options2.startIndex, overStart = options2.overStart;
    var dataIndex = overStart + index2;
    var styleVal = dataIndex < startIndex ? "none" : "block";
    var keyVal = key2 && data2[key2] ? data2[key2] : dataIndex;
    return import_react265.default.createElement("li", {
      "data-index": "".concat(dataIndex),
      className: "nut-virtuallist-item",
      key: "".concat(keyVal),
      style: {
        display: styleVal
      }
    }, itemRender ? itemRender(data2, dataIndex, index2) : data2);
  }))));
};
VirtualList.displayName = "NutVirtualList";

// node_modules/@nutui/nutui-react/dist/es/packages/virtuallist/index.js
var virtuallist_default = VirtualList;

// node_modules/@nutui/nutui-react/dist/es/packages/avatarcropper/avatarcropper.js
var import_react266 = __toESM(require_react());
var import_classnames89 = __toESM(require_classnames());
var defaultProps97 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  maxZoom: 3,
  space: 10,
  toolbar: [
    import_react266.default.createElement(button_default, {
      type: "danger",
      key: "cancel"
    }, "Cancel"),
    import_react266.default.createElement(button_default, {
      key: "reset"
    }, "Reset"),
    import_react266.default.createElement(button_default, {
      key: "rotate"
    }, "Rotate"),
    import_react266.default.createElement(button_default, {
      type: "success",
      key: "confirm"
    }, "Confirm")
  ],
  toolbarPosition: "bottom",
  editText: "Edit",
  shape: "square"
});
var classPrefix31 = "nut-avatar-cropper";
var AvatarCropper = function(props) {
  var locale = useConfig().locale;
  defaultProps97.toolbar = [
    import_react266.default.createElement(button_default, {
      type: "danger",
      key: "cancel"
    }, locale.cancel),
    import_react266.default.createElement(button_default, {
      key: "reset"
    }, locale.reset),
    import_react266.default.createElement(button_default, {
      key: "rotate"
    }, locale.avatarCropper.rotate),
    import_react266.default.createElement(button_default, {
      type: "success",
      key: "confirm"
    }, locale.confirm)
  ];
  var _ref = _object_spread({}, defaultProps97, props), children2 = _ref.children, maxZoom = _ref.maxZoom, space = _ref.space, toolbar = _ref.toolbar, toolbarPosition = _ref.toolbarPosition, editText = _ref.editText, shape = _ref.shape, className = _ref.className, style = _ref.style, onConfirm = _ref.onConfirm, onCancel = _ref.onCancel, rest = _object_without_properties(_ref, [
    "children",
    "maxZoom",
    "space",
    "toolbar",
    "toolbarPosition",
    "editText",
    "shape",
    "className",
    "style",
    "onConfirm",
    "onCancel"
  ]);
  var cls = (0, import_classnames89.default)(classPrefix31, className, shape === "round" && "round");
  var toolbarPositionCls = (0, import_classnames89.default)("".concat(classPrefix31, "-popup-toolbar"), toolbarPosition);
  var inputImageRef = (0, import_react266.useRef)(null);
  var cropperPopupRef = (0, import_react266.useRef)(null);
  var canvasRef = (0, import_react266.useRef)(null);
  var _useState = _sliced_to_array((0, import_react266.useState)(false), 2), visible = _useState[0], setVisible = _useState[1];
  var _useState1 = _sliced_to_array((0, import_react266.useState)(false), 2), moving = _useState1[0], setMoving = _useState1[1];
  var _useState2 = _sliced_to_array((0, import_react266.useState)(false), 2), zooming = _useState2[0], setZooming = _useState2[1];
  var _useState3 = _sliced_to_array((0, import_react266.useState)({
    defScale: 1,
    scale: 1,
    angle: 0,
    moveX: 0,
    moveY: 0,
    displayWidth: 0,
    displayHeight: 0
  }), 2), state = _useState3[0], setState = _useState3[1];
  var defDrawImage = {
    img: new Image(),
    sx: 0,
    sy: 0,
    swidth: 0,
    sheight: 0,
    x: 0,
    y: 0,
    width: 0,
    height: 0
  };
  var _useState4 = _sliced_to_array((0, import_react266.useState)(_object_spread({}, defDrawImage)), 2), drawImage = _useState4[0], setDrawImg = _useState4[1];
  var devicePixelRatio = window.devicePixelRatio || 1;
  var touch = useTouch();
  var highlightStyle = (0, import_react266.useMemo)(function() {
    var width2 = "".concat(drawImage.swidth / devicePixelRatio, "px");
    var height2 = width2;
    return {
      width: width2,
      height: height2,
      borderRadius: shape === "round" ? "50%" : ""
    };
  }, [
    devicePixelRatio,
    drawImage.swidth
  ]);
  var isAngle = (0, import_react266.useMemo)(function() {
    return state.angle === 90 || state.angle === 270;
  }, [
    state.angle
  ]);
  var maxMoveX = (0, import_react266.useMemo)(function() {
    var swidth = drawImage.swidth, height2 = drawImage.height;
    if (isAngle) {
      return Math.max(0, (height2 * state.scale - swidth) / 2);
    }
    return Math.max(0, (state.displayWidth * state.scale - swidth) / 2);
  }, [
    state.scale,
    state.displayWidth,
    drawImage,
    isAngle
  ]);
  var maxMoveY = (0, import_react266.useMemo)(function() {
    var swidth = drawImage.swidth, height2 = drawImage.height;
    if (isAngle) {
      return Math.max(0, (state.displayWidth * state.scale - swidth) / 2);
    }
    return Math.max(0, (height2 * state.scale - swidth) / 2);
  }, [
    state.scale,
    state.displayWidth,
    drawImage,
    isAngle
  ]);
  var fileToDataURL = function(file) {
    return new Promise(function(resolve) {
      var reader = new FileReader();
      reader.onloadend = function(e2) {
        return resolve(e2.target.result);
      };
      reader.readAsDataURL(file);
    });
  };
  var dataURLToImage = function(dataURL) {
    return new Promise(function(resolve) {
      var img = new Image();
      img.onload = function() {
        return resolve(img);
      };
      img.src = dataURL;
    });
  };
  var draw = (0, import_react266.useCallback)(function() {
    var img = drawImage.img, width2 = drawImage.width, height2 = drawImage.height, x2 = drawImage.x, y = drawImage.y, swidth = drawImage.swidth;
    var moveX = state.moveX, moveY = state.moveY, scale2 = state.scale, angle = state.angle, displayWidth = state.displayWidth, displayHeight = state.displayHeight;
    var canvas = canvasRef.current;
    if (!canvas)
      return;
    var ctx2 = canvas.getContext("2d");
    canvas.width = displayWidth;
    canvas.height = displayHeight;
    ctx2.clearRect(0, 0, canvas.width, canvas.height);
    ctx2.fillStyle = "#666";
    ctx2.fillRect(0, 0, canvas.width, canvas.height);
    ctx2.fillStyle = "#000";
    ctx2.fillRect(space * devicePixelRatio, (canvas.height - swidth) / 2, swidth, swidth);
    ctx2.translate(canvas.width / 2 + moveX, canvas.height / 2 + moveY);
    ctx2.rotate(Math.PI / 180 * angle);
    ctx2.scale(scale2, scale2);
    ctx2.drawImage(img, x2, y, width2, height2);
  }, [
    drawImage,
    state,
    devicePixelRatio,
    space
  ]);
  (0, import_react266.useEffect)(function() {
    if (Math.abs(state.moveX) > maxMoveX) {
      setState(_object_spread_props(_object_spread({}, state), {
        moveX: maxMoveX
      }));
    }
    if (Math.abs(state.moveY) > maxMoveY) {
      setState(_object_spread_props(_object_spread({}, state), {
        moveY: maxMoveY
      }));
    }
    draw();
  }, [
    state,
    maxMoveX,
    maxMoveY,
    draw
  ]);
  var setDrawImgs = function(image) {
    var rect = getRect(cropperPopupRef.current);
    if (!rect)
      return;
    var clientWidth = rect.width, clientHeight = rect.height;
    var canvasWidth = state.displayWidth = clientWidth * devicePixelRatio;
    var canvasHeight = state.displayHeight = clientHeight * devicePixelRatio;
    var copyDrawImg = _object_spread({}, defDrawImage);
    var imgWidth = image.width, imgHeight = image.height;
    copyDrawImg.img = image;
    var isPortrait = imgHeight > imgWidth;
    var rate = isPortrait ? imgWidth / imgHeight : imgHeight / imgWidth;
    copyDrawImg.width = canvasWidth;
    copyDrawImg.height = isPortrait ? canvasWidth / rate : canvasWidth * rate;
    copyDrawImg.x = -copyDrawImg.width / 2;
    copyDrawImg.y = -copyDrawImg.height / 2;
    copyDrawImg.swidth = canvasWidth - space * 2 * devicePixelRatio;
    copyDrawImg.sheight = isPortrait ? copyDrawImg.swidth / rate : copyDrawImg.swidth * rate;
    copyDrawImg.sx = space * devicePixelRatio;
    copyDrawImg.sy = (canvasHeight - copyDrawImg.swidth) / 2;
    setDrawImg(copyDrawImg);
    var scale2 = copyDrawImg.swidth / (isPortrait ? copyDrawImg.width : copyDrawImg.height);
    setState(_object_spread_props(_object_spread({}, state), {
      defScale: scale2
    }));
    resetScale(scale2);
  };
  var inputImageChange = function() {
    var _ref2 = _async_to_generator(function(event) {
      var $el, files, base64, image;
      return __generator(this, function(_state) {
        switch (_state.label) {
          case 0:
            setVisible(true);
            $el = event.target;
            files = $el.files;
            if (!(files === null || files === void 0 ? void 0 : files.length))
              return [
                2
              ];
            return [
              4,
              fileToDataURL(files[0])
            ];
          case 1:
            base64 = _state.sent();
            return [
              4,
              dataURLToImage(base64)
            ];
          case 2:
            image = _state.sent();
            setDrawImgs(image);
            return [
              2
            ];
        }
      });
    });
    return function inputImageChange2(event) {
      return _ref2.apply(this, arguments);
    };
  }();
  var resetScale = function(scale2) {
    setState(_object_spread_props(_object_spread({}, state), {
      moveX: 0,
      moveY: 0,
      angle: 0,
      scale: scale2 || state.defScale,
      defScale: scale2 || state.defScale
    }));
  };
  var setScale = function(scale2) {
    scale2 = clamp2(scale2, 0.3, +maxZoom + 1);
    if (scale2 !== state.scale) {
      setState(_object_spread_props(_object_spread({}, state), {
        scale: scale2
      }));
    }
  };
  var getDistance = function(touches) {
    return Math.sqrt(Math.pow(touches[0].clientX - touches[1].clientX, 2) + Math.pow(touches[0].clientY - touches[1].clientY, 2));
  };
  var _useState5 = _sliced_to_array((0, import_react266.useState)({
    startMoveX: 0,
    startMoveY: 0,
    startScale: 0,
    startDistance: 0
  }), 2), startMove = _useState5[0], setStartMove = _useState5[1];
  var startMoveX = startMove.startMoveX, startMoveY = startMove.startMoveY, startScale = startMove.startScale, startDistance = startMove.startDistance;
  var onTouchStart = function(event) {
    var touches = event.touches;
    var offsetX = touch.offsetX;
    touch.start(event);
    var fingerNum = touches === null || touches === void 0 ? void 0 : touches.length;
    setStartMove(_object_spread_props(_object_spread({}, startMove), {
      startMoveX: state.moveX,
      startMoveY: state.moveY
    }));
    setMoving(fingerNum === 1);
    setZooming(fingerNum === 2 && !offsetX.current);
    if (fingerNum === 2 && !offsetX.current) {
      setStartMove(_object_spread_props(_object_spread({}, startMove), {
        startScale: state.scale,
        startDistance: getDistance(event.touches)
      }));
    }
  };
  var onTouchMove = function(event) {
    var touches = event.touches;
    touch.move(event);
    if (moving || zooming) {
      preventDefault(event, true);
    }
    if (moving) {
      var deltaX = touch.deltaX, deltaY = touch.deltaY;
      var moveX = deltaX.current * state.scale + startMoveX;
      var moveY = deltaY.current * state.scale + startMoveY;
      setState(_object_spread_props(_object_spread({}, state), {
        moveX: clamp2(moveX, -maxMoveX, maxMoveX),
        moveY: clamp2(moveY, -maxMoveY, maxMoveY)
      }));
    }
    if (zooming && touches.length === 2) {
      var distance = getDistance(touches);
      var scale2 = startScale * distance / startDistance;
      setScale(scale2);
    }
  };
  var onTouchEnd = function(event) {
    var stopPropagation = false;
    if (moving || zooming) {
      stopPropagation = !(moving && startMoveX === state.moveX && startMoveY === state.moveY);
      if (!event.touches.length) {
        if (zooming) {
          setState(_object_spread_props(_object_spread({}, state), {
            moveX: clamp2(state.moveX, -maxMoveX, maxMoveX),
            moveY: clamp2(state.moveY, -maxMoveY, maxMoveY)
          }));
          setZooming(false);
        }
        setMoving(false);
        setStartMove(_object_spread_props(_object_spread({}, startMove), {
          startMoveX: 0,
          startMoveY: 0,
          startScale: state.defScale
        }));
        if (state.scale < state.defScale) {
          resetScale();
        }
        if (state.scale > maxZoom) {
          setState(_object_spread_props(_object_spread({}, state), {
            scale: +maxZoom
          }));
        }
      }
    }
    preventDefault(event, stopPropagation);
    touch.reset();
  };
  var reset = function() {
    setState(_object_spread_props(_object_spread({}, state), {
      angle: 0
    }));
  };
  var rotate = function() {
    if (state.angle === 270) {
      setState(_object_spread_props(_object_spread({}, state), {
        angle: 0
      }));
      return;
    }
    setState(_object_spread_props(_object_spread({}, state), {
      angle: state.angle + 90
    }));
  };
  var cancel = function() {
    var isEmit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
    setVisible(false);
    resetScale();
    inputImageRef.current && (inputImageRef.current.value = "");
    isEmit && onCancel && onCancel();
  };
  var confirm2 = function() {
    var canvas = canvasRef.current;
    var sx = drawImage.sx, sy = drawImage.sy, swidth = drawImage.swidth;
    var width2 = swidth;
    var height2 = swidth;
    var croppedCanvas = document.createElement("canvas");
    var croppedCtx = croppedCanvas.getContext("2d");
    croppedCanvas.width = width2;
    croppedCanvas.height = height2;
    canvas && croppedCtx.drawImage(canvas, sx, sy, width2, height2, 0, 0, width2, height2);
    var imageDataURL = croppedCanvas.toDataURL("image/png");
    onConfirm && onConfirm(imageDataURL);
    cancel(false);
  };
  var ToolBar = function() {
    var actions = [
      cancel,
      reset,
      rotate,
      confirm2
    ];
    return import_react266.default.createElement("div", {
      className: "".concat(classPrefix31, "-popup-toolbar-flex")
    }, actions.map(function(action, index2) {
      return import_react266.default.createElement("div", {
        key: index2,
        className: "".concat(classPrefix31, "-popup-toolbar-item"),
        onClick: function(_e) {
          return action();
        }
      }, toolbar[index2]);
    }));
  };
  var CropperPopup = function() {
    return import_react266.default.createElement("div", {
      ref: cropperPopupRef,
      className: "".concat(classPrefix31, "-popup"),
      style: {
        display: visible ? "block" : "none"
      }
    }, import_react266.default.createElement("canvas", {
      ref: canvasRef,
      className: "".concat(classPrefix31, "-popup-canvas")
    }), import_react266.default.createElement("div", {
      className: "".concat(classPrefix31, "-popup-highlight"),
      onTouchStart,
      onTouchMove,
      onTouchEnd
    }, import_react266.default.createElement("div", {
      className: "highlight",
      style: highlightStyle
    })), import_react266.default.createElement("div", {
      className: toolbarPositionCls
    }, import_react266.default.createElement(ToolBar, null)));
  };
  return import_react266.default.createElement(import_react266.default.Fragment, null, import_react266.default.createElement("div", _object_spread_props(_object_spread({
    className: cls
  }, rest), {
    style
  }), children2, import_react266.default.createElement("input", {
    ref: inputImageRef,
    type: "file",
    accept: "image/*",
    className: "".concat(classPrefix31, "-input"),
    onChange: function(e2) {
      return inputImageChange(e2);
    },
    "aria-label": locale.avatarCropper.selectImage
  }), import_react266.default.createElement("div", {
    className: "nut-avatar-cropper-edit-text"
  }, editText)), CropperPopup());
};
AvatarCropper.displayName = "NutAvatarCropper";

// node_modules/@nutui/nutui-react/dist/es/packages/avatarcropper/index.js
var avatarcropper_default = AvatarCropper;

// node_modules/@nutui/nutui-react/dist/es/packages/barrage/barrage.js
var import_react267 = __toESM(require_react());
var import_classnames90 = __toESM(require_classnames());
var defaultProps98 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  list: [],
  interval: 500,
  loop: true,
  duration: 3e3,
  rows: 3,
  gapY: 10
});
var classPrefix32 = "nut-barrage";
var InternalBarrage = function(props, ref) {
  var _ref = _object_spread({}, defaultProps98, props), className = _ref.className, interval = _ref.interval, loop2 = _ref.loop, list = _ref.list, duration = _ref.duration, rows = _ref.rows, gapY = _ref.gapY, restProps = _object_without_properties(_ref, [
    "className",
    "interval",
    "loop",
    "list",
    "duration",
    "rows",
    "gapY"
  ]);
  var barrageBody = (0, import_react267.useRef)(null);
  var barrageContainer = (0, import_react267.useRef)(null);
  var barrageCWidth = (0, import_react267.useRef)(0);
  var timer = (0, import_react267.useRef)(0);
  var index2 = (0, import_react267.useRef)(0);
  var times = (0, import_react267.useRef)([]);
  var historyIndex = (0, import_react267.useRef)(-1);
  var classes = (0, import_classnames90.default)(classPrefix32, className);
  (0, import_react267.useImperativeHandle)(ref, function() {
    return {
      add: function(word) {
        var _index = index2.current % list.length;
        if (!loop2 && index2.current === list.length) {
          list.splice(list.length, 0, word);
        } else {
          list.splice(_index, 0, word);
        }
      }
    };
  });
  (0, import_react267.useEffect)(function() {
    if (barrageBody.current) {
      barrageCWidth.current = barrageBody.current.offsetWidth;
    }
    setTimeout(function() {
      var _barrageBody_current;
      (_barrageBody_current = barrageBody.current) === null || _barrageBody_current === void 0 ? void 0 : _barrageBody_current.style.setProperty("--move-distance", "-".concat(barrageCWidth.current, "px"));
      index2.current = 0;
      run();
    }, 300);
    return function() {
      clearInterval(timer.current);
    };
  }, [
    list
  ]);
  var run = function() {
    clearInterval(timer.current);
    var intervalCache = interval;
    var _index = (loop2 ? index2.current % list.length : index2.current) % rows;
    var result = times.current[_index] - rows * interval;
    if (result > 0) {
      intervalCache += result;
    }
    timer.current = window.setTimeout(function() {
      play();
    }, intervalCache);
  };
  var play = function() {
    if (!loop2 && index2.current >= list.length) {
      return;
    }
    var _index = loop2 ? index2.current % list.length : index2.current;
    var el = document.createElement("div");
    var currentIndex = _index % rows;
    if (currentIndex <= historyIndex.current || historyIndex.current === 3 && currentIndex !== 0 || Math.abs(currentIndex - historyIndex.current) !== 1) {
      currentIndex = historyIndex.current + 1 >= rows ? 0 : historyIndex.current + 1;
    }
    historyIndex.current = currentIndex;
    el.innerHTML = list[_index];
    el.classList.add("barrage-item");
    barrageContainer.current.appendChild(el);
    var width2 = el.offsetWidth;
    var height2 = el.offsetHeight;
    el.classList.add("move");
    var elScrollDuration = Math.ceil(width2 / barrageCWidth.current * duration);
    times.current[currentIndex] = elScrollDuration;
    el.style.animationDuration = "".concat(duration + elScrollDuration, "ms");
    el.style.top = "".concat(currentIndex * (height2 + gapY) + 20, "px");
    el.style.width = "".concat(width2, "px");
    el.addEventListener("animationend", function() {
      ;
      barrageContainer.current.removeChild(el);
    });
    index2.current++;
    run();
  };
  return import_react267.default.createElement("div", _object_spread({
    className: classes,
    ref: barrageBody
  }, restProps), import_react267.default.createElement("div", {
    ref: barrageContainer,
    className: "bContainer"
  }));
};
var Barrage = import_react267.default.forwardRef(InternalBarrage);
Barrage.displayName = "NutBarrage";

// node_modules/@nutui/nutui-react/dist/es/packages/barrage/index.js
var barrage_default = Barrage;

// node_modules/@nutui/nutui-react/dist/es/packages/card/card.js
var import_react268 = __toESM(require_react());
var import_classnames91 = __toESM(require_classnames());
var defaultProps99 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  src: "",
  title: "",
  price: "",
  vipPrice: "",
  shopDescription: "",
  delivery: "",
  shopName: "",
  description: "",
  tag: "",
  priceTag: "",
  extra: ""
});
var Card = function(props) {
  var _ref = _object_spread({}, defaultProps99, props), className = _ref.className, style = _ref.style, src = _ref.src, title = _ref.title, price = _ref.price, vipPrice = _ref.vipPrice, shopDescription = _ref.shopDescription, delivery = _ref.delivery, shopName = _ref.shopName, tag = _ref.tag, priceTag = _ref.priceTag, description = _ref.description, extra = _ref.extra, rest = _object_without_properties(_ref, [
    "className",
    "style",
    "src",
    "title",
    "price",
    "vipPrice",
    "shopDescription",
    "delivery",
    "shopName",
    "tag",
    "priceTag",
    "description",
    "extra"
  ]);
  var classPrefix33 = "nut-card";
  return import_react268.default.createElement("div", _object_spread({
    className: (0, import_classnames91.default)(classPrefix33, className),
    style
  }, rest), import_react268.default.createElement("div", {
    className: "".concat(classPrefix33, "-left")
  }, import_react268.default.createElement("img", {
    src,
    alt: ""
  })), import_react268.default.createElement("div", {
    className: "".concat(classPrefix33, "-right")
  }, import_react268.default.createElement("div", {
    className: "".concat(classPrefix33, "-right-title")
  }, title), description, import_react268.default.createElement("div", {
    className: "".concat(classPrefix33, "-right-price")
  }, price && import_react268.default.createElement(price_default, {
    size: "normal",
    price
  }), priceTag || vipPrice && import_react268.default.createElement(price_default, {
    size: "normal",
    className: "".concat(classPrefix33, "-right-price-origin"),
    price: vipPrice
  })), import_react268.default.createElement("div", {
    className: "".concat(classPrefix33, "-right-other")
  }, tag || import_react268.default.createElement(import_react268.default.Fragment, null, shopDescription && import_react268.default.createElement(tag_default, {
    type: "danger"
  }, shopDescription), delivery && import_react268.default.createElement(tag_default, {
    plain: true
  }, delivery))), import_react268.default.createElement("div", {
    className: "".concat(classPrefix33, "-right-shop")
  }, shopName && import_react268.default.createElement("div", {
    className: "".concat(classPrefix33, "-right-shop-name")
  }, shopName), extra)));
};
Card.displayName = "NutCard";

// node_modules/@nutui/nutui-react/dist/es/packages/card/index.js
var card_default = Card;

// node_modules/@nutui/nutui-react/dist/es/packages/timedetail/timedetail.js
var import_react269 = __toESM(require_react());
var import_classnames92 = __toESM(require_classnames());
var defaultProps100 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  activeDate: "",
  activeTime: [],
  options: [],
  optionKey: {
    valueKey: "value",
    textKey: "text",
    childrenKey: "children"
  },
  onSelect: function() {
  }
});
var TimeDetail = function(props) {
  var _$_object_spread = _object_spread({}, defaultProps100, props), options2 = _$_object_spread.options, optionKey = _$_object_spread.optionKey, className = _$_object_spread.className, activeDate = _$_object_spread.activeDate, activeTime = _$_object_spread.activeTime, onSelect = _$_object_spread.onSelect;
  var classPrefix33 = "nut-timedetail";
  var timeList = (0, import_react269.useMemo)(function() {
    return (options2 === null || options2 === void 0 ? void 0 : options2.find(function(item) {
      return item[optionKey.valueKey] === activeDate;
    })) || _define_property({}, optionKey.childrenKey, []);
  }, [
    options2,
    optionKey,
    activeDate
  ]);
  var isActive = (0, import_react269.useCallback)(function(timeKey) {
    var date4 = activeTime.find(function(item) {
      return item[optionKey.valueKey] === activeDate;
    });
    if (date4 === null || date4 === void 0 ? void 0 : date4[optionKey.childrenKey]) {
      var time2 = date4 === null || date4 === void 0 ? void 0 : date4[optionKey.childrenKey].find(function(time3) {
        return time3[optionKey.valueKey] === timeKey;
      });
      return time2;
    }
    return false;
  }, [
    activeTime,
    optionKey,
    activeDate
  ]);
  return import_react269.default.createElement("div", {
    className: (0, import_classnames92.default)(classPrefix33, className)
  }, timeList[optionKey.childrenKey].map(function(item) {
    return import_react269.default.createElement("span", {
      className: (0, import_classnames92.default)("".concat(classPrefix33, "-item"), {
        active: isActive(item[optionKey.valueKey])
      }),
      key: item[optionKey.valueKey],
      onClick: function() {
        return onSelect(item);
      }
    }, item[optionKey.textKey]);
  }));
};
TimeDetail.displayName = "NutTimeDetail";

// node_modules/@nutui/nutui-react/dist/es/packages/timedetail/index.js
var timedetail_default = TimeDetail;

// node_modules/@nutui/nutui-react/dist/es/packages/timeselect/timeselect.js
var import_react270 = __toESM(require_react());
var import_classnames93 = __toESM(require_classnames());
var defaultProps101 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  visible: false,
  multiple: false,
  defaultValue: [],
  options: [],
  optionKey: {
    valueKey: "value",
    textKey: "text",
    childrenKey: "children"
  }
});
var TimeSelect = function(props) {
  var locale = useConfig().locale;
  var _ref = _object_spread({}, defaultProps101, props), visible = _ref.visible, className = _ref.className, style = _ref.style, title = _ref.title, defaultValue = _ref.defaultValue, options2 = _ref.options, optionKey = _ref.optionKey, multiple = _ref.multiple, onSelect = _ref.onSelect, onDateChange = _ref.onDateChange, onTimeChange = _ref.onTimeChange, rest = _object_without_properties(_ref, [
    "visible",
    "className",
    "style",
    "title",
    "defaultValue",
    "options",
    "optionKey",
    "multiple",
    "onSelect",
    "onDateChange",
    "onTimeChange"
  ]);
  var _useState = _sliced_to_array((0, import_react270.useState)(function() {
    if (defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.length) {
      return defaultValue[0][optionKey.valueKey];
    }
    if (options2 === null || options2 === void 0 ? void 0 : options2.length) {
      return options2[0][optionKey.valueKey];
    }
    return "";
  }), 2), activeDate = _useState[0], setActiveDate = _useState[1];
  var _useState1 = _sliced_to_array((0, import_react270.useState)(function() {
    return defaultValue || [];
  }), 2), activeTime = _useState1[0], setActiveTime = _useState1[1];
  var classPrefix33 = "nut-timeselect";
  var closeFun = function() {
    onSelect && onSelect(activeTime);
  };
  var handleSelectTime = function(selectTime) {
    var newActiveTime = _to_consumable_array(activeTime);
    var date4 = newActiveTime.find(function(item) {
      return item[optionKey.valueKey] === activeDate;
    });
    if (date4) {
      var timeIndex = date4[optionKey.childrenKey].findIndex(function(time2) {
        return time2[optionKey.valueKey] === selectTime[optionKey.valueKey];
      });
      if (timeIndex > -1) {
        if (multiple) {
          date4[optionKey.childrenKey].splice(timeIndex, 1);
        } else {
          newActiveTime = [];
        }
      } else if (multiple) {
        date4[optionKey.childrenKey].push(_object_spread({}, selectTime));
      } else {
        var _obj;
        newActiveTime = [
          (_obj = {}, _define_property(_obj, optionKey.valueKey, activeDate), _define_property(_obj, optionKey.childrenKey, [
            _object_spread({}, selectTime)
          ]), _obj)
        ];
      }
    } else if (multiple) {
      var _obj1;
      newActiveTime.push((_obj1 = {}, _define_property(_obj1, optionKey.valueKey, activeDate), _define_property(_obj1, optionKey.childrenKey, [
        _object_spread({}, selectTime)
      ]), _obj1));
    } else {
      var _obj2;
      newActiveTime = [
        (_obj2 = {}, _define_property(_obj2, optionKey.valueKey, activeDate), _define_property(_obj2, optionKey.childrenKey, [
          _object_spread({}, selectTime)
        ]), _obj2)
      ];
    }
    newActiveTime = newActiveTime.filter(function(item) {
      var _item_optionKey_childrenKey;
      return ((_item_optionKey_childrenKey = item[optionKey.childrenKey]) === null || _item_optionKey_childrenKey === void 0 ? void 0 : _item_optionKey_childrenKey.length) > 0;
    });
    setActiveTime(newActiveTime);
    onTimeChange && onTimeChange(selectTime, newActiveTime);
  };
  var handleChange = function(date4) {
    setActiveDate(date4[optionKey.valueKey]);
    onDateChange && onDateChange(date4, activeTime);
  };
  return import_react270.default.createElement(popup_default, _object_spread({
    closeable: true,
    round: true,
    visible,
    position: "bottom",
    title: title || locale.timeselect.pickupTime,
    style: _object_spread({}, style),
    onClose: closeFun
  }, rest), import_react270.default.createElement("div", {
    className: (0, import_classnames93.default)(classPrefix33, className)
  }, import_react270.default.createElement("div", {
    className: "".concat(classPrefix33, "-content")
  }, import_react270.default.createElement("div", {
    className: "".concat(classPrefix33, "-content-left")
  }, options2.map(function(item) {
    return import_react270.default.createElement("div", {
      key: item[optionKey.valueKey],
      className: (0, import_classnames93.default)("nut-timepannel", {
        active: item[optionKey.valueKey] === activeDate
      }),
      onClick: function() {
        return handleChange(item);
      }
    }, item[optionKey.textKey]);
  })), import_react270.default.createElement(timedetail_default, {
    options: options2,
    optionKey,
    activeDate,
    activeTime,
    onSelect: handleSelectTime
  }))));
};
TimeSelect.displayName = "NutTimeSelect";

// node_modules/@nutui/nutui-react/dist/es/packages/timeselect/index.js
var timeselect_default = TimeSelect;

// node_modules/@nutui/nutui-react/dist/es/packages/trendarrow/trendarrow.js
var import_react271 = __toESM(require_react());
var defaultProps102 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  value: 0,
  digits: 2,
  symbol: false,
  zero: false,
  left: false,
  sync: true,
  color: "",
  riseColor: "var(--nutui-brand-6)",
  dropColor: "var(--nutui-secondary-1)",
  riseIcon: null,
  dropIcon: null
});
var TrendArrow = function(props) {
  var _ref = _object_spread({}, defaultProps102, props), value2 = _ref.value, digits = _ref.digits, symbol = _ref.symbol, zero = _ref.zero, left = _ref.left, sync2 = _ref.sync, color = _ref.color, riseColor = _ref.riseColor, dropColor = _ref.dropColor, riseIcon = _ref.riseIcon, dropIcon = _ref.dropIcon, className = _ref.className, style = _ref.style, children2 = _ref.children, rest = _object_without_properties(_ref, [
    "value",
    "digits",
    "symbol",
    "zero",
    "left",
    "sync",
    "color",
    "riseColor",
    "dropColor",
    "riseIcon",
    "dropIcon",
    "className",
    "style",
    "children"
  ]);
  var classPrefix33 = "nut-trendarrow";
  var rateTrend = (0, import_react271.useRef)(value2 > 0);
  var myFixed = function(num) {
    var digit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2;
    if (Object.is(parseFloat(num), NaN)) {
      return console.warn("传入的值：".concat(num, "不是一个数字"));
    }
    num = parseFloat(num);
    var numPow = Math.pow(10, digit);
    return (Math.round((num + Number.EPSILON) * numPow) / numPow).toFixed(digit);
  };
  var calcStyle = function() {
    var arrowColor = rateTrend.current ? riseColor : dropColor;
    var textEquArrowColor = sync2 ? arrowColor : color;
    var style2 = {
      color: value2 === 0 ? color : textEquArrowColor
    };
    return style2;
  }();
  var calcRate = function() {
    rateTrend.current = value2 > 0;
    var absRate = Math.abs(value2);
    if (!zero && value2 === 0) {
      return "--";
    }
    var resultRate = "".concat(
      // eslint-disable-next-line no-nested-ternary
      symbol && value2 !== 0 ? rateTrend.current ? "+" : "-" : ""
    ).concat(myFixed(Number(absRate), digits), "%");
    return resultRate;
  }();
  var calcIconProps = function() {
    var iconProps = {
      color: rateTrend.current ? riseColor : dropColor
    };
    return iconProps;
  }();
  var renderContent = function(left2) {
    var classNameSuffix = !left2 ? "icon-after" : "icon-before";
    return import_react271.default.createElement("span", {
      className: "".concat(classPrefix33, "-").concat(classNameSuffix, " ").concat(classPrefix33, "-value"),
      style: calcStyle
    }, calcRate);
  };
  return import_react271.default.createElement("div", _object_spread({
    className: "".concat(classPrefix33, " ").concat(className),
    style
  }, rest), !left && renderContent(!left), Number(value2) !== 0 && import_react271.default.createElement(import_react271.default.Fragment, null, rateTrend.current ? import_react271.default.createElement(import_react271.default.Fragment, null, riseIcon || import_react271.default.createElement(p4, {
    color: calcIconProps.color
  })) : import_react271.default.createElement(import_react271.default.Fragment, null, dropIcon || import_react271.default.createElement(d8, {
    color: calcIconProps.color
  }))), left && renderContent(!left));
};
TrendArrow.displayName = "NutTrendArrow";

// node_modules/@nutui/nutui-react/dist/es/packages/trendarrow/index.js
var trendarrow_default = TrendArrow;

// node_modules/@nutui/nutui-react/dist/es/packages/watermark/watermark.js
var import_react272 = __toESM(require_react());
var import_classnames94 = __toESM(require_classnames());
var defaultProps103 = _object_spread_props(_object_spread({}, ComponentDefaults), {
  content: "",
  fullPage: true,
  zIndex: 2e3,
  gapX: 24,
  gapY: 48,
  width: 120,
  height: 64,
  startX: 0,
  startY: 0,
  image: "",
  imageWidth: 120,
  imageHeight: 64,
  rotate: -22,
  color: "rgba(0,0,0,.15)",
  fontStyle: "normal",
  fontWeight: "normal",
  fontSize: 14
});
var WaterMark = function(props) {
  var locale = useConfig().locale;
  var _$_object_spread = _object_spread({}, defaultProps103, props), content2 = _$_object_spread.content, fullPage = _$_object_spread.fullPage, zIndex = _$_object_spread.zIndex, className = _$_object_spread.className, gapX = _$_object_spread.gapX, gapY = _$_object_spread.gapY, startX = _$_object_spread.startX, startY = _$_object_spread.startY, width2 = _$_object_spread.width, height2 = _$_object_spread.height, image = _$_object_spread.image, imageWidth = _$_object_spread.imageWidth, imageHeight = _$_object_spread.imageHeight, rotate = _$_object_spread.rotate, color = _$_object_spread.color, fontStyle = _$_object_spread.fontStyle, fontFamily = _$_object_spread.fontFamily, fontWeight = _$_object_spread.fontWeight, fontSize = _$_object_spread.fontSize, style = _$_object_spread.style;
  var _useState = _sliced_to_array((0, import_react272.useState)(""), 2), base64Url = _useState[0], setBase64Url = _useState[1];
  var classPrefix33 = "nut-watermark";
  var classes = (0, import_classnames94.default)(classPrefix33, _define_property({}, "".concat(classPrefix33, "-full-page"), fullPage));
  var cls = (0, import_classnames94.default)(classes, className);
  (0, import_react272.useEffect)(function() {
    init();
  }, []);
  var init = function() {
    var canvas = document.createElement("canvas");
    var ratio = window.devicePixelRatio;
    var ctx2 = canvas.getContext("2d");
    var canvasWidth = "".concat((gapX + width2) * ratio, "px");
    var canvasHeight = "".concat((gapY + height2) * ratio, "px");
    var markWidth = width2 * ratio;
    var markHeight = height2 * ratio;
    canvas.setAttribute("width", canvasWidth);
    canvas.setAttribute("height", canvasHeight);
    if (ctx2) {
      if (image) {
        ctx2.translate(markWidth / 2, markHeight / 2);
        ctx2.rotate(Math.PI / 180 * Number(rotate));
        var img = new Image();
        img.crossOrigin = "anonymous";
        img.referrerPolicy = "no-referrer";
        img.src = image;
        img.onload = function() {
          ctx2.drawImage(img, -imageWidth * ratio / 2, -imageHeight * ratio / 2, imageWidth * ratio, imageHeight * ratio);
          ctx2.restore();
          setBase64Url(canvas.toDataURL());
        };
      } else if (content2) {
        ctx2.textBaseline = "middle";
        ctx2.textAlign = "center";
        ctx2.translate(markWidth / 2, markHeight / 2);
        ctx2.rotate(Math.PI / 180 * Number(rotate));
        var markSize = Number(fontSize) * ratio;
        ctx2.font = "".concat(fontStyle, " normal ").concat(fontWeight, " ").concat(markSize, "px/").concat(markHeight, "px ").concat(fontFamily);
        ctx2.fillStyle = color;
        ctx2.fillText(content2, startX, startY);
        ctx2.restore();
        setBase64Url(canvas.toDataURL());
      }
    } else {
      throw new Error(locale.watermark.errorCanvasTips);
    }
  };
  return import_react272.default.createElement("div", {
    className: cls,
    style: _object_spread({
      zIndex,
      backgroundSize: "".concat(gapX + width2, "px"),
      backgroundImage: "url('".concat(base64Url, "')")
    }, style)
  });
};
WaterMark.displayName = "NutWaterMark";

// node_modules/@nutui/nutui-react/dist/es/packages/watermark/index.js
var watermark_default = WaterMark;

// node_modules/@nutui/nutui-react/dist/es/hooks/use-uuid.js
var import_react273 = __toESM(require_react());
var idCounter = {};
function uniqueId() {
  var prefix2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "$nut$";
  if (!idCounter[prefix2]) {
    idCounter[prefix2] = 0;
  }
  var id = ++idCounter[prefix2];
  if (prefix2 === "$nut$") {
    return "".concat(id);
  }
  return "".concat(prefix2).concat(id);
}
function useUuid() {
  var idRef = (0, import_react273.useRef)(uniqueId());
  return idRef.current;
}
export {
  actionsheet_default as ActionSheet,
  address_default as Address,
  animate_default as Animate,
  animatingnumbers_default as AnimatingNumbers,
  audio_default as Audio,
  avatar_default as Avatar,
  avatarcropper_default as AvatarCropper,
  avatargroup_default as AvatarGroup,
  backtop_default as BackTop,
  badge_default as Badge,
  barrage_default as Barrage,
  button_default as Button,
  calendar_default as Calendar,
  calendarcard_default as CalendarCard,
  calendaritem_default as CalendarItem,
  card_default as Card,
  cascader_default as Cascader,
  cell_default as Cell,
  cellgroup_default as CellGroup,
  checkbox_default as Checkbox,
  checkboxgroup_default as CheckboxGroup,
  circleprogress_default as CircleProgress,
  col_default as Col,
  collapse_default as Collapse,
  collapseitem_default as CollapseItem,
  ComponentDefaults,
  configprovider_default as ConfigProvider,
  countdown_default as CountDown,
  datepicker_default2 as DatePicker,
  datepickerview_default as DatePickerView,
  dialog_default as Dialog,
  divider_default as Divider,
  drag_default as Drag,
  elevator_default as Elevator,
  ellipsis_default as Ellipsis,
  empty_default as Empty,
  fixednav_default as FixedNav,
  form_default as Form,
  formitem_default as FormItem,
  grid_default as Grid,
  griditem_default as GridItem,
  hoverbutton_default as HoverButton,
  hoverbuttonitem_default as HoverButtonItem,
  image_default as Image,
  imagepreview_default as ImagePreview,
  indicator_default as Indicator,
  infiniteloading_default as InfiniteLoading,
  input_default as Input,
  inputnumber_default as InputNumber,
  layout_default as Layout,
  loading_default as Loading,
  lottie_default as Lottie,
  menu_default as Menu,
  menuitem_default as MenuItem,
  MiniLru,
  navbar_default as NavBar,
  noticebar_default as NoticeBar,
  notify_default2 as Notify,
  numberkeyboard_default as NumberKeyboard,
  overlay_default as Overlay,
  pagination_default as Pagination,
  picker_default2 as Picker,
  pickerview_default2 as PickerView,
  popover_default as Popover,
  popup_default as Popup,
  price_default as Price,
  progress_default as Progress,
  pulltorefresh_default as PullToRefresh,
  radio_default as Radio,
  radiogroup_default as RadioGroup,
  range_default as Range,
  rate_default as Rate,
  resultpage_default as ResultPage,
  row_default as Row,
  safearea_default as SafeArea,
  searchbar_default as SearchBar,
  segmented_default as Segmented,
  shortpassword_default as ShortPassword,
  sidebar_default as SideBar,
  sidebaritem_default as SideBarItem,
  signature_default as Signature,
  skeleton_default as Skeleton,
  space_default as Space,
  step_default as Step,
  steps_default as Steps,
  sticky_default as Sticky,
  swipe_default as Swipe,
  swiper_default as Swiper,
  swiperitem_default as SwiperItem,
  switch_default as Switch,
  tabpane_default as TabPane,
  tabbar_default as Tabbar,
  tabbaritem_default as TabbarItem,
  table_default as Table,
  tabs_default as Tabs,
  tag_default as Tag,
  textarea_default as TextArea,
  timedetail_default as TimeDetail,
  timeselect_default as TimeSelect,
  toast_default2 as Toast,
  tour_default as Tour,
  trendarrow_default as TrendArrow,
  uploader_default as Uploader,
  Utils,
  video_default as Video,
  virtuallist_default as VirtualList,
  watermark_default as WaterMark,
  bound,
  camelCase,
  canUseDom,
  cancelRaf,
  clamp2 as clamp,
  clone,
  destroyList,
  funcInterceptor,
  getAllScrollableParents,
  getCurrMonthData,
  getDaysStatus,
  getDefaultConfig,
  getPreMonthDates,
  getRect,
  getRefValue,
  getScrollParent,
  inBrowser2 as inBrowser,
  isDate,
  isEmpty,
  isForwardRefComponent,
  isFunction,
  isObject,
  isPlainObject,
  isPromise,
  isWindow,
  main,
  merge,
  mergeProp,
  mergeProps,
  padZero,
  passiveSupported,
  preventDefault,
  pxCheck,
  recursive,
  render,
  rubberband,
  rubberbandIfOutOfBounds,
  setDefaultConfig,
  sleep,
  toArray,
  unmount,
  upperCaseFirst,
  useConfig,
  useForceUpdate2 as useForceUpdate,
  useIsomorphicLayoutEffect2 as useIsomorphicLayoutEffect,
  useLockScroll,
  useMemo2 as useMemo,
  usePagination,
  usePropsValue,
  useRefState,
  useRefs,
  useRtl,
  useTouch,
  useUuid,
  useWatch
};
/*! Bundled license information:

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

lottie-web/build/player/lottie.js:
  (*!
   Transformation Matrix v2.0
   (c) Epistemex 2014-2015
   www.epistemex.com
   By Ken Fyrstenberg
   Contributions by leeoniya.
   License: MIT, header required.
   *)

@nutui/icons-react/dist/es/icons/IconTemplate-a0ece148.mjs:
  (**
   * @license React
   * react-jsx-runtime.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@nutui/icons-react/dist/es/icons/IconTemplate-a0ece148.mjs:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

lottie-react/build/index.es.js:
  (*! goToAndStop must be relative to the start of the current segment *)
*/
//# sourceMappingURL=@nutui_nutui-react.js.map
